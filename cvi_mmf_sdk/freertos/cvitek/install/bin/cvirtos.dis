
/root/.jenkins/workspace/cr1821_v3.0.0_release_build/freertos/cvitek/install/bin/cvirtos.elf:     file format elf64-littleriscv


Disassembly of section .text:

000000009fe00000 <_start>:
.option norelax
//	la  gp, __global_pointer$
.option pop

	// Continue primary hart
	csrr a0, mhartid
    9fe00000:	f1402573          	csrr	a0,mhartid
	li   a1, PRIM_HART
    9fe00004:	4581                	li	a1,0
	bne  a0, a1, secondary
    9fe00006:	0eb51a63          	bne	a0,a1,9fe000fa <secondary>

	li x1, 0
    9fe0000a:	4081                	li	ra,0
	li x2, 0
    9fe0000c:	4101                	li	sp,0
	li x3, 0
    9fe0000e:	4181                	li	gp,0
	li x4, 0
    9fe00010:	4201                	li	tp,0
	li x5, 0
    9fe00012:	4281                	li	t0,0
	li x6, 0
    9fe00014:	4301                	li	t1,0
	li x7, 0
    9fe00016:	4381                	li	t2,0
	li x8, 0
    9fe00018:	4401                	li	s0,0
	li x9, 0
    9fe0001a:	4481                	li	s1,0
	li x10, 0
    9fe0001c:	4501                	li	a0,0
	li x11, 0
    9fe0001e:	4581                	li	a1,0
	li x12, 0
    9fe00020:	4601                	li	a2,0
	li x13, 0
    9fe00022:	4681                	li	a3,0
	li x14, 0
    9fe00024:	4701                	li	a4,0
	li x15, 0
    9fe00026:	4781                	li	a5,0
	li x16, 0
    9fe00028:	4801                	li	a6,0
	li x17, 0
    9fe0002a:	4881                	li	a7,0
	li x18, 0
    9fe0002c:	4901                	li	s2,0
	li x19, 0
    9fe0002e:	4981                	li	s3,0
	li x20, 0
    9fe00030:	4a01                	li	s4,0
	li x21, 0
    9fe00032:	4a81                	li	s5,0
	li x22, 0
    9fe00034:	4b01                	li	s6,0
	li x23, 0
    9fe00036:	4b81                	li	s7,0
	li x24, 0
    9fe00038:	4c01                	li	s8,0
	li x25, 0
    9fe0003a:	4c81                	li	s9,0
	li x26, 0
    9fe0003c:	4d01                	li	s10,0
	li x27, 0
    9fe0003e:	4d81                	li	s11,0
	li x28, 0
    9fe00040:	4e01                	li	t3,0
	li x29, 0
    9fe00042:	4e81                	li	t4,0
	li x30, 0
    9fe00044:	4f01                	li	t5,0
	li x31, 0
    9fe00046:	4f81                	li	t6,0

	// enable interrupt
	li x3, 0x880
    9fe00048:	000011b7          	lui	gp,0x1
    9fe0004c:	8801819b          	addiw	gp,gp,-1920
	csrw mie, x3
    9fe00050:	30419073          	csrw	mie,gp

#ifndef RISCV_QEMU
	// invalidate all memory for BTB,BHT,DCACHE,ICACHE
	li x3, 0x30013
    9fe00054:	000301b7          	lui	gp,0x30
    9fe00058:	0131819b          	addiw	gp,gp,19
	csrs mcor, x3
    9fe0005c:	7c21a073          	csrs	mcor,gp
	// enable ICACHE,DCACHE,BHT,BTB,RAS,WA
	li x3, 0x7f
    9fe00060:	07f00193          	li	gp,127
	csrs mhcr, x3
    9fe00064:	7c11a073          	csrs	mhcr,gp
	// enable data_cache_prefetch, amr
	li x3, 0x610c
    9fe00068:	000061b7          	lui	gp,0x6
    9fe0006c:	10c1819b          	addiw	gp,gp,268
	csrs mhint, x3 #mhint
    9fe00070:	7c51a073          	csrs	mhint,gp
#endif
	# enable fp
	li x3, 0x1 << 13
    9fe00074:	6189                	lui	gp,0x2
	csrs mstatus, x3
    9fe00076:	3001a073          	csrs	mstatus,gp

	// Primary hart
	la sp, _stack_top
    9fe0007a:	000c0117          	auipc	sp,0xc0
    9fe0007e:	c8610113          	addi	sp,sp,-890 # 9febfd00 <_end>

	// Load data section
	la a0, _data_lma
    9fe00082:	00012517          	auipc	a0,0x12
    9fe00086:	6be50513          	addi	a0,a0,1726 # 9fe12740 <_data_lma>
	la a1, _data
    9fe0008a:	00012597          	auipc	a1,0x12
    9fe0008e:	6b658593          	addi	a1,a1,1718 # 9fe12740 <_data_lma>
	la a2, _edata
    9fe00092:	00013617          	auipc	a2,0x13
    9fe00096:	10e60613          	addi	a2,a2,270 # 9fe131a0 <_edata>
	bgeu a1, a2, 2f
    9fe0009a:	00c5fa63          	bgeu	a1,a2,9fe000ae <_start+0xae>
1:
	LOAD t0, (a0)
    9fe0009e:	00053283          	ld	t0,0(a0)
	STOR t0, (a1)
    9fe000a2:	0055b023          	sd	t0,0(a1)
	addi a0, a0, REGSIZE
    9fe000a6:	0521                	addi	a0,a0,8
	addi a1, a1, REGSIZE
    9fe000a8:	05a1                	addi	a1,a1,8
	bltu a1, a2, 1b
    9fe000aa:	fec5eae3          	bltu	a1,a2,9fe0009e <_start+0x9e>
2:

	// Clear bss section
	la a0, _bss
    9fe000ae:	00013517          	auipc	a0,0x13
    9fe000b2:	11250513          	addi	a0,a0,274 # 9fe131c0 <__data1_end>
	la a1, _ebss
    9fe000b6:	00020597          	auipc	a1,0x20
    9fe000ba:	c4a58593          	addi	a1,a1,-950 # 9fe1fd00 <_ebss>
	bgeu a0, a1, 2f
    9fe000be:	02b57663          	bgeu	a0,a1,9fe000ea <_start+0xea>
1:
	// reduce branch time, be sure about bss alignment in linker script
	STOR zero, 0x00 (a0)
    9fe000c2:	00053023          	sd	zero,0(a0)
	STOR zero, 0x08 (a0)
    9fe000c6:	00053423          	sd	zero,8(a0)
	STOR zero, 0x10 (a0)
    9fe000ca:	00053823          	sd	zero,16(a0)
	STOR zero, 0x18 (a0)
    9fe000ce:	00053c23          	sd	zero,24(a0)
	STOR zero, 0x20 (a0)
    9fe000d2:	02053023          	sd	zero,32(a0)
	STOR zero, 0x28 (a0)
    9fe000d6:	02053423          	sd	zero,40(a0)
	STOR zero, 0x30 (a0)
    9fe000da:	02053823          	sd	zero,48(a0)
	STOR zero, 0x38 (a0)
    9fe000de:	02053c23          	sd	zero,56(a0)
	addi a0, a0, REGSIZE * 8
    9fe000e2:	04050513          	addi	a0,a0,64
	bltu a0, a1, 1b
    9fe000e6:	fcb56ee3          	bltu	a0,a1,9fe000c2 <_start+0xc2>
2:

	// argc, argv, envp is 0
	li  a0, 0
    9fe000ea:	4501                	li	a0,0
	li  a1, 0
    9fe000ec:	4581                	li	a1,0
	li  a2, 0
    9fe000ee:	4601                	li	a2,0
	jal main
    9fe000f0:	531020ef          	jal	ra,9fe02e20 <main>
1:
	wfi
    9fe000f4:	10500073          	wfi
	j 1b
    9fe000f8:	bff5                	j	9fe000f4 <_start+0xf4>

000000009fe000fa <secondary>:

secondary:
	// TODO: Multicore is not supported
	wfi
    9fe000fa:	10500073          	wfi
	j secondary
    9fe000fe:	bff5                	j	9fe000fa <secondary>

000000009fe00100 <memcpy>:
//WEAK(memcpy)
.global memcpy
.type  memcpy, %function

memcpy:
	move t6, a0  /* Preserve return value */
    9fe00100:	8faa                	mv	t6,a0

	/* Defer to byte-oriented copy for small sizes */
	sltiu a3, a2, 128
    9fe00102:	08063693          	sltiu	a3,a2,128
	bnez a3, 4f
    9fe00106:	eedd                	bnez	a3,9fe001c4 <memcpy+0xc4>
	/* Use word-oriented copy only if low-order bits match */
	andi a3, t6, SZREG-1
    9fe00108:	007ff693          	andi	a3,t6,7
	andi a4, a1, SZREG-1
    9fe0010c:	0075f713          	andi	a4,a1,7
	bne a3, a4, 4f
    9fe00110:	0ae69a63          	bne	a3,a4,9fe001c4 <memcpy+0xc4>

	beqz a3, 2f  /* Skip if already aligned */
    9fe00114:	ce99                	beqz	a3,9fe00132 <memcpy+0x32>
	/*
	 * Round to nearest double word-aligned address
	 * greater than or equal to start address
	 */
	andi a3, a1, ~(SZREG-1)
    9fe00116:	ff85f693          	andi	a3,a1,-8
	addi a3, a3, SZREG
    9fe0011a:	06a1                	addi	a3,a3,8
	/* Handle initial misalignment */
	sub a4, a3, a1
    9fe0011c:	40b68733          	sub	a4,a3,a1
1:
	lb a5, 0(a1)
    9fe00120:	00058783          	lb	a5,0(a1)
	addi a1, a1, 1
    9fe00124:	0585                	addi	a1,a1,1
	sb a5, 0(t6)
    9fe00126:	00ff8023          	sb	a5,0(t6)
	addi t6, t6, 1
    9fe0012a:	0f85                	addi	t6,t6,1
	bltu a1, a3, 1b
    9fe0012c:	fed5eae3          	bltu	a1,a3,9fe00120 <memcpy+0x20>
	sub a2, a2, a4  /* Update count */
    9fe00130:	8e19                	sub	a2,a2,a4

2:
	andi a4, a2, ~((16*SZREG)-1)
    9fe00132:	f8067713          	andi	a4,a2,-128
	beqz a4, 4f
    9fe00136:	c759                	beqz	a4,9fe001c4 <memcpy+0xc4>
	add a3, a1, a4
    9fe00138:	00e586b3          	add	a3,a1,a4
3:
	REG_L a4,       0(a1)
    9fe0013c:	6198                	ld	a4,0(a1)
	REG_L a5,   SZREG(a1)
    9fe0013e:	659c                	ld	a5,8(a1)
	REG_L a6, 2*SZREG(a1)
    9fe00140:	0105b803          	ld	a6,16(a1)
	REG_L a7, 3*SZREG(a1)
    9fe00144:	0185b883          	ld	a7,24(a1)
	REG_L t0, 4*SZREG(a1)
    9fe00148:	0205b283          	ld	t0,32(a1)
	REG_L t1, 5*SZREG(a1)
    9fe0014c:	0285b303          	ld	t1,40(a1)
	REG_L t2, 6*SZREG(a1)
    9fe00150:	0305b383          	ld	t2,48(a1)
	REG_L t3, 7*SZREG(a1)
    9fe00154:	0385be03          	ld	t3,56(a1)
	REG_L t4, 8*SZREG(a1)
    9fe00158:	0405be83          	ld	t4,64(a1)
	REG_L t5, 9*SZREG(a1)
    9fe0015c:	0485bf03          	ld	t5,72(a1)
	REG_S a4,       0(t6)
    9fe00160:	00efb023          	sd	a4,0(t6)
	REG_S a5,   SZREG(t6)
    9fe00164:	00ffb423          	sd	a5,8(t6)
	REG_S a6, 2*SZREG(t6)
    9fe00168:	010fb823          	sd	a6,16(t6)
	REG_S a7, 3*SZREG(t6)
    9fe0016c:	011fbc23          	sd	a7,24(t6)
	REG_S t0, 4*SZREG(t6)
    9fe00170:	025fb023          	sd	t0,32(t6)
	REG_S t1, 5*SZREG(t6)
    9fe00174:	026fb423          	sd	t1,40(t6)
	REG_S t2, 6*SZREG(t6)
    9fe00178:	027fb823          	sd	t2,48(t6)
	REG_S t3, 7*SZREG(t6)
    9fe0017c:	03cfbc23          	sd	t3,56(t6)
	REG_S t4, 8*SZREG(t6)
    9fe00180:	05dfb023          	sd	t4,64(t6)
	REG_S t5, 9*SZREG(t6)
    9fe00184:	05efb423          	sd	t5,72(t6)
	REG_L a4, 10*SZREG(a1)
    9fe00188:	69b8                	ld	a4,80(a1)
	REG_L a5, 11*SZREG(a1)
    9fe0018a:	6dbc                	ld	a5,88(a1)
	REG_L a6, 12*SZREG(a1)
    9fe0018c:	0605b803          	ld	a6,96(a1)
	REG_L a7, 13*SZREG(a1)
    9fe00190:	0685b883          	ld	a7,104(a1)
	REG_L t0, 14*SZREG(a1)
    9fe00194:	0705b283          	ld	t0,112(a1)
	REG_L t1, 15*SZREG(a1)
    9fe00198:	0785b303          	ld	t1,120(a1)
	addi a1, a1, 16*SZREG
    9fe0019c:	08058593          	addi	a1,a1,128
	REG_S a4, 10*SZREG(t6)
    9fe001a0:	04efb823          	sd	a4,80(t6)
	REG_S a5, 11*SZREG(t6)
    9fe001a4:	04ffbc23          	sd	a5,88(t6)
	REG_S a6, 12*SZREG(t6)
    9fe001a8:	070fb023          	sd	a6,96(t6)
	REG_S a7, 13*SZREG(t6)
    9fe001ac:	071fb423          	sd	a7,104(t6)
	REG_S t0, 14*SZREG(t6)
    9fe001b0:	065fb823          	sd	t0,112(t6)
	REG_S t1, 15*SZREG(t6)
    9fe001b4:	066fbc23          	sd	t1,120(t6)
	addi t6, t6, 16*SZREG
    9fe001b8:	080f8f93          	addi	t6,t6,128
	bltu a1, a3, 3b
    9fe001bc:	f8d5e0e3          	bltu	a1,a3,9fe0013c <memcpy+0x3c>
	andi a2, a2, (16*SZREG)-1  /* Update count */
    9fe001c0:	07f67613          	andi	a2,a2,127

4:
	/* Handle trailing misalignment */
	beqz a2, 6f
    9fe001c4:	ca05                	beqz	a2,9fe001f4 <memcpy+0xf4>
	add a3, a1, a2
    9fe001c6:	00c586b3          	add	a3,a1,a2

	/* Use word-oriented copy if co-aligned to word boundary */
	or a5, a1, t6
    9fe001ca:	01f5e7b3          	or	a5,a1,t6
	or a5, a5, a3
    9fe001ce:	8fd5                	or	a5,a5,a3
	andi a5, a5, 3
    9fe001d0:	8b8d                	andi	a5,a5,3
	bnez a5, 5f
    9fe001d2:	eb89                	bnez	a5,9fe001e4 <memcpy+0xe4>
7:
	lw a4, 0(a1)
    9fe001d4:	4198                	lw	a4,0(a1)
	addi a1, a1, 4
    9fe001d6:	0591                	addi	a1,a1,4
	sw a4, 0(t6)
    9fe001d8:	00efa023          	sw	a4,0(t6)
	addi t6, t6, 4
    9fe001dc:	0f91                	addi	t6,t6,4
	bltu a1, a3, 7b
    9fe001de:	fed5ebe3          	bltu	a1,a3,9fe001d4 <memcpy+0xd4>

	ret
    9fe001e2:	8082                	ret

5:
	lb a4, 0(a1)
    9fe001e4:	00058703          	lb	a4,0(a1)
	addi a1, a1, 1
    9fe001e8:	0585                	addi	a1,a1,1
	sb a4, 0(t6)
    9fe001ea:	00ef8023          	sb	a4,0(t6)
	addi t6, t6, 1
    9fe001ee:	0f85                	addi	t6,t6,1
	bltu a1, a3, 5b
    9fe001f0:	fed5eae3          	bltu	a1,a3,9fe001e4 <memcpy+0xe4>
6:
	ret
    9fe001f4:	8082                	ret
	...

000000009fe00200 <freertos_risc_v_trap_handler>:
/*-----------------------------------------------------------*/

.align 8
.func
freertos_risc_v_trap_handler:
	addi sp, sp, -portCONTEXT_SIZE
    9fe00200:	7151                	addi	sp,sp,-240
	store_x x1, 1 * portWORD_SIZE( sp )
    9fe00202:	e406                	sd	ra,8(sp)
	store_x x5, 2 * portWORD_SIZE( sp )
    9fe00204:	e816                	sd	t0,16(sp)
	store_x x6, 3 * portWORD_SIZE( sp )
    9fe00206:	ec1a                	sd	t1,24(sp)
	store_x x7, 4 * portWORD_SIZE( sp )
    9fe00208:	f01e                	sd	t2,32(sp)
	store_x x8, 5 * portWORD_SIZE( sp )
    9fe0020a:	f422                	sd	s0,40(sp)
	store_x x9, 6 * portWORD_SIZE( sp )
    9fe0020c:	f826                	sd	s1,48(sp)
	store_x x10, 7 * portWORD_SIZE( sp )
    9fe0020e:	fc2a                	sd	a0,56(sp)
	store_x x11, 8 * portWORD_SIZE( sp )
    9fe00210:	e0ae                	sd	a1,64(sp)
	store_x x12, 9 * portWORD_SIZE( sp )
    9fe00212:	e4b2                	sd	a2,72(sp)
	store_x x13, 10 * portWORD_SIZE( sp )
    9fe00214:	e8b6                	sd	a3,80(sp)
	store_x x14, 11 * portWORD_SIZE( sp )
    9fe00216:	ecba                	sd	a4,88(sp)
	store_x x15, 12 * portWORD_SIZE( sp )
    9fe00218:	f0be                	sd	a5,96(sp)
	store_x x16, 13 * portWORD_SIZE( sp )
    9fe0021a:	f4c2                	sd	a6,104(sp)
	store_x x17, 14 * portWORD_SIZE( sp )
    9fe0021c:	f8c6                	sd	a7,112(sp)
	store_x x18, 15 * portWORD_SIZE( sp )
    9fe0021e:	fcca                	sd	s2,120(sp)
	store_x x19, 16 * portWORD_SIZE( sp )
    9fe00220:	e14e                	sd	s3,128(sp)
	store_x x20, 17 * portWORD_SIZE( sp )
    9fe00222:	e552                	sd	s4,136(sp)
	store_x x21, 18 * portWORD_SIZE( sp )
    9fe00224:	e956                	sd	s5,144(sp)
	store_x x22, 19 * portWORD_SIZE( sp )
    9fe00226:	ed5a                	sd	s6,152(sp)
	store_x x23, 20 * portWORD_SIZE( sp )
    9fe00228:	f15e                	sd	s7,160(sp)
	store_x x24, 21 * portWORD_SIZE( sp )
    9fe0022a:	f562                	sd	s8,168(sp)
	store_x x25, 22 * portWORD_SIZE( sp )
    9fe0022c:	f966                	sd	s9,176(sp)
	store_x x26, 23 * portWORD_SIZE( sp )
    9fe0022e:	fd6a                	sd	s10,184(sp)
	store_x x27, 24 * portWORD_SIZE( sp )
    9fe00230:	e1ee                	sd	s11,192(sp)
	store_x x28, 25 * portWORD_SIZE( sp )
    9fe00232:	e5f2                	sd	t3,200(sp)
	store_x x29, 26 * portWORD_SIZE( sp )
    9fe00234:	e9f6                	sd	t4,208(sp)
	store_x x30, 27 * portWORD_SIZE( sp )
    9fe00236:	edfa                	sd	t5,216(sp)
	store_x x31, 28 * portWORD_SIZE( sp )
    9fe00238:	f1fe                	sd	t6,224(sp)

	csrr t0, mstatus					/* Required for MPIE bit. */
    9fe0023a:	300022f3          	csrr	t0,mstatus
	store_x t0, 29 * portWORD_SIZE( sp )
    9fe0023e:	f596                	sd	t0,232(sp)

	portasmSAVE_ADDITIONAL_REGISTERS	/* Defined in freertos_risc_v_chip_specific_extensions.h to save any registers unique to the RISC-V implementation. */
    9fe00240:	716d                	addi	sp,sp,-272
    9fe00242:	a402                	fsd	ft0,8(sp)
    9fe00244:	a806                	fsd	ft1,16(sp)
    9fe00246:	ac0a                	fsd	ft2,24(sp)
    9fe00248:	b00e                	fsd	ft3,32(sp)
    9fe0024a:	b412                	fsd	ft4,40(sp)
    9fe0024c:	b816                	fsd	ft5,48(sp)
    9fe0024e:	bc1a                	fsd	ft6,56(sp)
    9fe00250:	a09e                	fsd	ft7,64(sp)
    9fe00252:	a4a2                	fsd	fs0,72(sp)
    9fe00254:	a8a6                	fsd	fs1,80(sp)
    9fe00256:	acaa                	fsd	fa0,88(sp)
    9fe00258:	b0ae                	fsd	fa1,96(sp)
    9fe0025a:	b4b2                	fsd	fa2,104(sp)
    9fe0025c:	b8b6                	fsd	fa3,112(sp)
    9fe0025e:	bcba                	fsd	fa4,120(sp)
    9fe00260:	a13e                	fsd	fa5,128(sp)
    9fe00262:	a542                	fsd	fa6,136(sp)
    9fe00264:	a946                	fsd	fa7,144(sp)
    9fe00266:	ad4a                	fsd	fs2,152(sp)
    9fe00268:	b14e                	fsd	fs3,160(sp)
    9fe0026a:	b552                	fsd	fs4,168(sp)
    9fe0026c:	b956                	fsd	fs5,176(sp)
    9fe0026e:	bd5a                	fsd	fs6,184(sp)
    9fe00270:	a1de                	fsd	fs7,192(sp)
    9fe00272:	a5e2                	fsd	fs8,200(sp)
    9fe00274:	a9e6                	fsd	fs9,208(sp)
    9fe00276:	adea                	fsd	fs10,216(sp)
    9fe00278:	b1ee                	fsd	fs11,224(sp)
    9fe0027a:	b5f2                	fsd	ft8,232(sp)
    9fe0027c:	b9f6                	fsd	ft9,240(sp)
    9fe0027e:	bdfa                	fsd	ft10,248(sp)
    9fe00280:	a27e                	fsd	ft11,256(sp)
    9fe00282:	003022f3          	frsr	t0
    9fe00286:	e616                	sd	t0,264(sp)

	load_x  t0, pxCurrentTCB			/* Load pxCurrentTCB. */
    9fe00288:	00020297          	auipc	t0,0x20
    9fe0028c:	9c02b283          	ld	t0,-1600(t0) # 9fe1fc48 <pxCurrentTCB>
	store_x  sp, 0( t0 )				/* Write sp to first TCB member. */
    9fe00290:	0022b023          	sd	sp,0(t0)

	csrr a0, mcause
    9fe00294:	34202573          	csrr	a0,mcause
	csrr a1, mepc
    9fe00298:	341025f3          	csrr	a1,mepc

000000009fe0029c <test_if_asynchronous>:

test_if_asynchronous:
	srli a2, a0, __riscv_xlen - 1		/* MSB of mcause is 1 if handing an asynchronous interrupt - shift to LSB to clear other bits. */
    9fe0029c:	03f55613          	srli	a2,a0,0x3f
	beq a2, x0, handle_synchronous		/* Branch past interrupt handing if not asynchronous. */
    9fe002a0:	c62d                	beqz	a2,9fe0030a <handle_synchronous>
	store_x a1, 0( sp )					/* Asynch so save unmodified exception return address. */
    9fe002a2:	e02e                	sd	a1,0(sp)

000000009fe002a4 <handle_asynchronous>:

#if( portasmHAS_MTIME != 0 )

	test_if_mtimer:						/* If there is a CLINT then the mtimer is used to generate the tick interrupt. */

		addi t0, x0, 1
    9fe002a4:	00100293          	li	t0,1

		slli t0, t0, __riscv_xlen - 1   /* LSB is already set, shift into MSB.  Shift 31 on 32-bit or 63 on 64-bit cores. */
    9fe002a8:	12fe                	slli	t0,t0,0x3f
		addi t1, t0, 7					/* 0x8000[]0007 == machine timer interrupt. */
    9fe002aa:	00728313          	addi	t1,t0,7
		bne a0, t1, test_if_external_interrupt
    9fe002ae:	04651463          	bne	a0,t1,9fe002f6 <test_if_external_interrupt>
#ifdef THEAD_C906
		load_x t0, pulMachineTimerCompareRegisterL  /* Load address of compare Lo register into t0. */
    9fe002b2:	00020297          	auipc	t0,0x20
    9fe002b6:	a362b283          	ld	t0,-1482(t0) # 9fe1fce8 <pulMachineTimerCompareRegisterL>
#else
		load_x t0, pullMachineTimerCompareRegister  /* Load address of compare register into t0. */
#endif
		load_x t1, pullNextTime  		/* Load the address of ullNextTime into t1. */
    9fe002ba:	00013317          	auipc	t1,0x13
    9fe002be:	ede33303          	ld	t1,-290(t1) # 9fe13198 <pullNextTime>

		#if( __riscv_xlen == 64 )

#ifdef THEAD_C906
			/* Update the 64-bit mtimer compare match value in two 32-bit writes. */
			ld t2, 0(t1)			 	/* Load ullNextTime into t2. */
    9fe002c2:	00033383          	ld	t2,0(t1)
			sw t2, 0(t0)				/* Store ullNextTime into compare register L. */
    9fe002c6:	0072a023          	sw	t2,0(t0)
			srli t3, t2, 32
    9fe002ca:	0203de13          	srli	t3,t2,0x20
			sw t3, 4(t0)				/* Store ullNextTime into compare register H. */
    9fe002ce:	01c2a223          	sw	t3,4(t0)
			ld t0, uxTimerIncrementsForOneTick  /* Load the value of ullTimerIncrementForOneTick into t0 (could this be optimized by storing in an array next to pullNextTime?). */
    9fe002d2:	00012297          	auipc	t0,0x12
    9fe002d6:	1762b283          	ld	t0,374(t0) # 9fe12448 <uxTimerIncrementsForOneTick>
			add t4, t0, t2				/* Add ullNextTime to the timer increments for one tick. */
    9fe002da:	00728eb3          	add	t4,t0,t2
			sd t4, 0(t1)				/* Store ullNextTime. */
    9fe002de:	01d33023          	sd	t4,0(t1)
			add t4, t0, t2				/* Add ullNextTime to the timer increments for one tick. */
			sd t4, 0(t1)				/* Store ullNextTime. */
#endif
		#endif /* __riscv_xlen == 64 */

		load_x sp, xISRStackTop			/* Switch to ISR stack before function call. */
    9fe002e2:	00012117          	auipc	sp,0x12
    9fe002e6:	16e13103          	ld	sp,366(sp) # 9fe12450 <xISRStackTop>
		jal xTaskIncrementTick
    9fe002ea:	1580f0ef          	jal	ra,9fe0f442 <xTaskIncrementTick>
		beqz a0, processed_source		/* Don't switch context if incrementing tick didn't unblock a task. */
    9fe002ee:	c521                	beqz	a0,9fe00336 <processed_source>
		jal vTaskSwitchContext
    9fe002f0:	17e0f0ef          	jal	ra,9fe0f46e <vTaskSwitchContext>
		j processed_source
    9fe002f4:	a089                	j	9fe00336 <processed_source>

000000009fe002f6 <test_if_external_interrupt>:

	test_if_external_interrupt:			/* If there is a CLINT and the mtimer interrupt is not pending then check to see if an external interrupt is pending. */
		addi t1, t1, 4					/* 0x80000007 + 4 = 0x8000000b == Machine external interrupt. */
    9fe002f6:	0311                	addi	t1,t1,4
		bne a0, t1, as_yet_unhandled	/* Something as yet unhandled. */
    9fe002f8:	02651c63          	bne	a0,t1,9fe00330 <as_yet_unhandled>

#endif /* portasmHAS_MTIME */

	load_x sp, xISRStackTop				/* Switch to ISR stack before function call. */
    9fe002fc:	00012117          	auipc	sp,0x12
    9fe00300:	15413103          	ld	sp,340(sp) # 9fe12450 <xISRStackTop>
	jal portasmHANDLE_INTERRUPT			/* Jump to the interrupt handler if there is no CLINT or if there is a CLINT and it has been determined that an external interrupt is pending. */
    9fe00304:	2160c0ef          	jal	ra,9fe0c51a <do_irq>
	j processed_source
    9fe00308:	a03d                	j	9fe00336 <processed_source>

000000009fe0030a <handle_synchronous>:

handle_synchronous:
	addi a1, a1, 4						/* Synchronous so updated exception return address to the instruction after the instruction that generated the exeption. */
    9fe0030a:	0591                	addi	a1,a1,4
	store_x a1, 0( sp )					/* Save updated exception return address. */
    9fe0030c:	e02e                	sd	a1,0(sp)

000000009fe0030e <test_if_environment_call>:

test_if_environment_call:
	li t0, 11 							/* 11 == environment call. */
    9fe0030e:	42ad                	li	t0,11
	bne a0, t0, is_exception			/* Not an M environment call, so some other exception. */
    9fe00310:	00551963          	bne	a0,t0,9fe00322 <is_exception>
	load_x sp, xISRStackTop				/* Switch to ISR stack before function call. */
    9fe00314:	00012117          	auipc	sp,0x12
    9fe00318:	13c13103          	ld	sp,316(sp) # 9fe12450 <xISRStackTop>
	jal vTaskSwitchContext
    9fe0031c:	1520f0ef          	jal	ra,9fe0f46e <vTaskSwitchContext>
	j processed_source
    9fe00320:	a819                	j	9fe00336 <processed_source>

000000009fe00322 <is_exception>:

is_exception:
	csrr t0, mcause						/* For viewing in the debugger only. */
    9fe00322:	342022f3          	csrr	t0,mcause
	csrr t1, mepc						/* For viewing in the debugger only */
    9fe00326:	34102373          	csrr	t1,mepc
	csrr t2, mstatus
    9fe0032a:	300023f3          	csrr	t2,mstatus
	j is_exception						/* No other exceptions handled yet. */
    9fe0032e:	bfd5                	j	9fe00322 <is_exception>

000000009fe00330 <as_yet_unhandled>:

as_yet_unhandled:
	csrr t0, mcause						/* For viewing in the debugger only. */
    9fe00330:	342022f3          	csrr	t0,mcause
	j as_yet_unhandled
    9fe00334:	bff5                	j	9fe00330 <as_yet_unhandled>

000000009fe00336 <processed_source>:

processed_source:
	load_x  t1, pxCurrentTCB			/* Load pxCurrentTCB. */
    9fe00336:	00020317          	auipc	t1,0x20
    9fe0033a:	91233303          	ld	t1,-1774(t1) # 9fe1fc48 <pxCurrentTCB>
	load_x  sp, 0( t1 )				 	/* Read sp from first TCB member. */
    9fe0033e:	00033103          	ld	sp,0(t1)

	/* Load mret with the address of the next instruction in the task to run next. */
	load_x t0, 0( sp )
    9fe00342:	6282                	ld	t0,0(sp)
	csrw mepc, t0
    9fe00344:	34129073          	csrw	mepc,t0

	portasmRESTORE_ADDITIONAL_REGISTERS	/* Defined in freertos_risc_v_chip_specific_extensions.h to restore any registers unique to the RISC-V implementation. */
    9fe00348:	2022                	fld	ft0,8(sp)
    9fe0034a:	20c2                	fld	ft1,16(sp)
    9fe0034c:	2162                	fld	ft2,24(sp)
    9fe0034e:	3182                	fld	ft3,32(sp)
    9fe00350:	3222                	fld	ft4,40(sp)
    9fe00352:	32c2                	fld	ft5,48(sp)
    9fe00354:	3362                	fld	ft6,56(sp)
    9fe00356:	2386                	fld	ft7,64(sp)
    9fe00358:	2426                	fld	fs0,72(sp)
    9fe0035a:	24c6                	fld	fs1,80(sp)
    9fe0035c:	2566                	fld	fa0,88(sp)
    9fe0035e:	3586                	fld	fa1,96(sp)
    9fe00360:	3626                	fld	fa2,104(sp)
    9fe00362:	36c6                	fld	fa3,112(sp)
    9fe00364:	3766                	fld	fa4,120(sp)
    9fe00366:	278a                	fld	fa5,128(sp)
    9fe00368:	282a                	fld	fa6,136(sp)
    9fe0036a:	28ca                	fld	fa7,144(sp)
    9fe0036c:	296a                	fld	fs2,152(sp)
    9fe0036e:	398a                	fld	fs3,160(sp)
    9fe00370:	3a2a                	fld	fs4,168(sp)
    9fe00372:	3aca                	fld	fs5,176(sp)
    9fe00374:	3b6a                	fld	fs6,184(sp)
    9fe00376:	2b8e                	fld	fs7,192(sp)
    9fe00378:	2c2e                	fld	fs8,200(sp)
    9fe0037a:	2cce                	fld	fs9,208(sp)
    9fe0037c:	2d6e                	fld	fs10,216(sp)
    9fe0037e:	3d8e                	fld	fs11,224(sp)
    9fe00380:	3e2e                	fld	ft8,232(sp)
    9fe00382:	3ece                	fld	ft9,240(sp)
    9fe00384:	3f6e                	fld	ft10,248(sp)
    9fe00386:	2f92                	fld	ft11,256(sp)
    9fe00388:	62b2                	ld	t0,264(sp)
    9fe0038a:	00329073          	fssr	t0
    9fe0038e:	6151                	addi	sp,sp,272

	/* Load mstatus with the interrupt enable bits used by the task. */
	load_x  t0, 29 * portWORD_SIZE( sp )
    9fe00390:	72ae                	ld	t0,232(sp)
	csrw mstatus, t0						/* Required for MPIE bit. */
    9fe00392:	30029073          	csrw	mstatus,t0

	load_x  x1, 1 * portWORD_SIZE( sp )
    9fe00396:	60a2                	ld	ra,8(sp)
	load_x  x5, 2 * portWORD_SIZE( sp )		/* t0 */
    9fe00398:	62c2                	ld	t0,16(sp)
	load_x  x6, 3 * portWORD_SIZE( sp )		/* t1 */
    9fe0039a:	6362                	ld	t1,24(sp)
	load_x  x7, 4 * portWORD_SIZE( sp )		/* t2 */
    9fe0039c:	7382                	ld	t2,32(sp)
	load_x  x8, 5 * portWORD_SIZE( sp )		/* s0/fp */
    9fe0039e:	7422                	ld	s0,40(sp)
	load_x  x9, 6 * portWORD_SIZE( sp )		/* s1 */
    9fe003a0:	74c2                	ld	s1,48(sp)
	load_x  x10, 7 * portWORD_SIZE( sp )	/* a0 */
    9fe003a2:	7562                	ld	a0,56(sp)
	load_x  x11, 8 * portWORD_SIZE( sp )	/* a1 */
    9fe003a4:	6586                	ld	a1,64(sp)
	load_x  x12, 9 * portWORD_SIZE( sp )	/* a2 */
    9fe003a6:	6626                	ld	a2,72(sp)
	load_x  x13, 10 * portWORD_SIZE( sp )	/* a3 */
    9fe003a8:	66c6                	ld	a3,80(sp)
	load_x  x14, 11 * portWORD_SIZE( sp )	/* a4 */
    9fe003aa:	6766                	ld	a4,88(sp)
	load_x  x15, 12 * portWORD_SIZE( sp )	/* a5 */
    9fe003ac:	7786                	ld	a5,96(sp)
	load_x  x16, 13 * portWORD_SIZE( sp )	/* a6 */
    9fe003ae:	7826                	ld	a6,104(sp)
	load_x  x17, 14 * portWORD_SIZE( sp )	/* a7 */
    9fe003b0:	78c6                	ld	a7,112(sp)
	load_x  x18, 15 * portWORD_SIZE( sp )	/* s2 */
    9fe003b2:	7966                	ld	s2,120(sp)
	load_x  x19, 16 * portWORD_SIZE( sp )	/* s3 */
    9fe003b4:	698a                	ld	s3,128(sp)
	load_x  x20, 17 * portWORD_SIZE( sp )	/* s4 */
    9fe003b6:	6a2a                	ld	s4,136(sp)
	load_x  x21, 18 * portWORD_SIZE( sp )	/* s5 */
    9fe003b8:	6aca                	ld	s5,144(sp)
	load_x  x22, 19 * portWORD_SIZE( sp )	/* s6 */
    9fe003ba:	6b6a                	ld	s6,152(sp)
	load_x  x23, 20 * portWORD_SIZE( sp )	/* s7 */
    9fe003bc:	7b8a                	ld	s7,160(sp)
	load_x  x24, 21 * portWORD_SIZE( sp )	/* s8 */
    9fe003be:	7c2a                	ld	s8,168(sp)
	load_x  x25, 22 * portWORD_SIZE( sp )	/* s9 */
    9fe003c0:	7cca                	ld	s9,176(sp)
	load_x  x26, 23 * portWORD_SIZE( sp )	/* s10 */
    9fe003c2:	7d6a                	ld	s10,184(sp)
	load_x  x27, 24 * portWORD_SIZE( sp )	/* s11 */
    9fe003c4:	6d8e                	ld	s11,192(sp)
	load_x  x28, 25 * portWORD_SIZE( sp )	/* t3 */
    9fe003c6:	6e2e                	ld	t3,200(sp)
	load_x  x29, 26 * portWORD_SIZE( sp )	/* t4 */
    9fe003c8:	6ece                	ld	t4,208(sp)
	load_x  x30, 27 * portWORD_SIZE( sp )	/* t5 */
    9fe003ca:	6f6e                	ld	t5,216(sp)
	load_x  x31, 28 * portWORD_SIZE( sp )	/* t6 */
    9fe003cc:	7f8e                	ld	t6,224(sp)
	addi sp, sp, portCONTEXT_SIZE
    9fe003ce:	616d                	addi	sp,sp,240

	mret
    9fe003d0:	30200073          	mret
    9fe003d4:	00000013          	nop
    9fe003d8:	00000013          	nop
    9fe003dc:	00000013          	nop
    9fe003e0:	00000013          	nop
    9fe003e4:	00000013          	nop
    9fe003e8:	00000013          	nop
    9fe003ec:	00000013          	nop
    9fe003f0:	00000013          	nop
    9fe003f4:	00000013          	nop
    9fe003f8:	00000013          	nop
    9fe003fc:	00000013          	nop

000000009fe00400 <xPortStartFirstTask>:

#if( portasmHAS_SIFIVE_CLINT != 0 )
	/* If there is a clint then interrupts can branch directly to the FreeRTOS
	trap handler.  Otherwise the interrupt controller will need to be configured
	outside of this file. */
	la t0, freertos_risc_v_trap_handler
    9fe00400:	00000297          	auipc	t0,0x0
    9fe00404:	e0028293          	addi	t0,t0,-512 # 9fe00200 <freertos_risc_v_trap_handler>
	csrw mtvec, t0
    9fe00408:	30529073          	csrw	mtvec,t0
#endif /* portasmHAS_CLILNT */

	load_x  sp, pxCurrentTCB			/* Load pxCurrentTCB. */
    9fe0040c:	00020117          	auipc	sp,0x20
    9fe00410:	83c13103          	ld	sp,-1988(sp) # 9fe1fc48 <pxCurrentTCB>
	load_x  sp, 0( sp )				 	/* Read sp from first TCB member. */
    9fe00414:	6102                	ld	sp,0(sp)

	load_x  x1, 0( sp ) /* Note for starting the scheduler the exception return address is used as the function return address. */
    9fe00416:	6082                	ld	ra,0(sp)

	portasmRESTORE_ADDITIONAL_REGISTERS	/* Defined in freertos_risc_v_chip_specific_extensions.h to restore any registers unique to the RISC-V implementation. */
    9fe00418:	2022                	fld	ft0,8(sp)
    9fe0041a:	20c2                	fld	ft1,16(sp)
    9fe0041c:	2162                	fld	ft2,24(sp)
    9fe0041e:	3182                	fld	ft3,32(sp)
    9fe00420:	3222                	fld	ft4,40(sp)
    9fe00422:	32c2                	fld	ft5,48(sp)
    9fe00424:	3362                	fld	ft6,56(sp)
    9fe00426:	2386                	fld	ft7,64(sp)
    9fe00428:	2426                	fld	fs0,72(sp)
    9fe0042a:	24c6                	fld	fs1,80(sp)
    9fe0042c:	2566                	fld	fa0,88(sp)
    9fe0042e:	3586                	fld	fa1,96(sp)
    9fe00430:	3626                	fld	fa2,104(sp)
    9fe00432:	36c6                	fld	fa3,112(sp)
    9fe00434:	3766                	fld	fa4,120(sp)
    9fe00436:	278a                	fld	fa5,128(sp)
    9fe00438:	282a                	fld	fa6,136(sp)
    9fe0043a:	28ca                	fld	fa7,144(sp)
    9fe0043c:	296a                	fld	fs2,152(sp)
    9fe0043e:	398a                	fld	fs3,160(sp)
    9fe00440:	3a2a                	fld	fs4,168(sp)
    9fe00442:	3aca                	fld	fs5,176(sp)
    9fe00444:	3b6a                	fld	fs6,184(sp)
    9fe00446:	2b8e                	fld	fs7,192(sp)
    9fe00448:	2c2e                	fld	fs8,200(sp)
    9fe0044a:	2cce                	fld	fs9,208(sp)
    9fe0044c:	2d6e                	fld	fs10,216(sp)
    9fe0044e:	3d8e                	fld	fs11,224(sp)
    9fe00450:	3e2e                	fld	ft8,232(sp)
    9fe00452:	3ece                	fld	ft9,240(sp)
    9fe00454:	3f6e                	fld	ft10,248(sp)
    9fe00456:	2f92                	fld	ft11,256(sp)
    9fe00458:	62b2                	ld	t0,264(sp)
    9fe0045a:	00329073          	fssr	t0
    9fe0045e:	6151                	addi	sp,sp,272

	load_x  x6, 3 * portWORD_SIZE( sp )		/* t1 */
    9fe00460:	6362                	ld	t1,24(sp)
	load_x  x7, 4 * portWORD_SIZE( sp )		/* t2 */
    9fe00462:	7382                	ld	t2,32(sp)
	load_x  x8, 5 * portWORD_SIZE( sp )		/* s0/fp */
    9fe00464:	7422                	ld	s0,40(sp)
	load_x  x9, 6 * portWORD_SIZE( sp )		/* s1 */
    9fe00466:	74c2                	ld	s1,48(sp)
	load_x  x10, 7 * portWORD_SIZE( sp )	/* a0 */
    9fe00468:	7562                	ld	a0,56(sp)
	load_x  x11, 8 * portWORD_SIZE( sp )	/* a1 */
    9fe0046a:	6586                	ld	a1,64(sp)
	load_x  x12, 9 * portWORD_SIZE( sp )	/* a2 */
    9fe0046c:	6626                	ld	a2,72(sp)
	load_x  x13, 10 * portWORD_SIZE( sp )	/* a3 */
    9fe0046e:	66c6                	ld	a3,80(sp)
	load_x  x14, 11 * portWORD_SIZE( sp )	/* a4 */
    9fe00470:	6766                	ld	a4,88(sp)
	load_x  x15, 12 * portWORD_SIZE( sp )	/* a5 */
    9fe00472:	7786                	ld	a5,96(sp)
	load_x  x16, 13 * portWORD_SIZE( sp )	/* a6 */
    9fe00474:	7826                	ld	a6,104(sp)
	load_x  x17, 14 * portWORD_SIZE( sp )	/* a7 */
    9fe00476:	78c6                	ld	a7,112(sp)
	load_x  x18, 15 * portWORD_SIZE( sp )	/* s2 */
    9fe00478:	7966                	ld	s2,120(sp)
	load_x  x19, 16 * portWORD_SIZE( sp )	/* s3 */
    9fe0047a:	698a                	ld	s3,128(sp)
	load_x  x20, 17 * portWORD_SIZE( sp )	/* s4 */
    9fe0047c:	6a2a                	ld	s4,136(sp)
	load_x  x21, 18 * portWORD_SIZE( sp )	/* s5 */
    9fe0047e:	6aca                	ld	s5,144(sp)
	load_x  x22, 19 * portWORD_SIZE( sp )	/* s6 */
    9fe00480:	6b6a                	ld	s6,152(sp)
	load_x  x23, 20 * portWORD_SIZE( sp )	/* s7 */
    9fe00482:	7b8a                	ld	s7,160(sp)
	load_x  x24, 21 * portWORD_SIZE( sp )	/* s8 */
    9fe00484:	7c2a                	ld	s8,168(sp)
	load_x  x25, 22 * portWORD_SIZE( sp )	/* s9 */
    9fe00486:	7cca                	ld	s9,176(sp)
	load_x  x26, 23 * portWORD_SIZE( sp )	/* s10 */
    9fe00488:	7d6a                	ld	s10,184(sp)
	load_x  x27, 24 * portWORD_SIZE( sp )	/* s11 */
    9fe0048a:	6d8e                	ld	s11,192(sp)
	load_x  x28, 25 * portWORD_SIZE( sp )	/* t3 */
    9fe0048c:	6e2e                	ld	t3,200(sp)
	load_x  x29, 26 * portWORD_SIZE( sp )	/* t4 */
    9fe0048e:	6ece                	ld	t4,208(sp)
	load_x  x30, 27 * portWORD_SIZE( sp )	/* t5 */
    9fe00490:	6f6e                	ld	t5,216(sp)
	load_x  x31, 28 * portWORD_SIZE( sp )	/* t6 */
    9fe00492:	7f8e                	ld	t6,224(sp)

	load_x  x5, 29 * portWORD_SIZE( sp )	/* Initial mstatus into x5 (t0) */
    9fe00494:	72ae                	ld	t0,232(sp)
	addi x5, x5, 0x08						/* Set MIE bit so the first task starts with interrupts enabled - required as returns with ret not eret. */
    9fe00496:	02a1                	addi	t0,t0,8
	csrrw  x0, mstatus, x5					/* Interrupts enabled from here! */
    9fe00498:	30029073          	csrw	mstatus,t0
	load_x  x5, 2 * portWORD_SIZE( sp )		/* Initial x5 (t0) value. */
    9fe0049c:	62c2                	ld	t0,16(sp)

	addi	sp, sp, portCONTEXT_SIZE
    9fe0049e:	616d                	addi	sp,sp,240
	ret
    9fe004a0:	8082                	ret
    9fe004a2:	00000013          	nop
    9fe004a6:	00000013          	nop
    9fe004aa:	00000013          	nop
    9fe004ae:	00000013          	nop
    9fe004b2:	00000013          	nop
    9fe004b6:	00000013          	nop
    9fe004ba:	00000013          	nop
    9fe004be:	00000013          	nop
    9fe004c2:	00000013          	nop
    9fe004c6:	00000013          	nop
    9fe004ca:	00000013          	nop
    9fe004ce:	00000013          	nop
    9fe004d2:	00000013          	nop
    9fe004d6:	00000013          	nop
    9fe004da:	00000013          	nop
    9fe004de:	00000013          	nop
    9fe004e2:	00000013          	nop
    9fe004e6:	00000013          	nop
    9fe004ea:	00000013          	nop
    9fe004ee:	00000013          	nop
    9fe004f2:	00000013          	nop
    9fe004f6:	00000013          	nop
    9fe004fa:	00000013          	nop
    9fe004fe:	0001                	nop

000000009fe00500 <pxPortInitialiseStack>:
 */
.align 8
.func
pxPortInitialiseStack:

	csrr t0, mstatus					/* Obtain current mstatus value. */
    9fe00500:	300022f3          	csrr	t0,mstatus
	andi t0, t0, ~0x8					/* Ensure interrupts are disabled when the stack is restored within an ISR.  Required when a task is created after the schedulre has been started, otherwise interrupts would be disabled anyway. */
    9fe00504:	ff72f293          	andi	t0,t0,-9
	addi t1, x0, 0x188					/* Generate the value 0x1880, which are the MPIE and MPP bits to set in mstatus. */
    9fe00508:	18800313          	li	t1,392
	slli t1, t1, 4
    9fe0050c:	0312                	slli	t1,t1,0x4
	or t0, t0, t1						/* Set MPIE and MPP bits in mstatus value. */
    9fe0050e:	0062e2b3          	or	t0,t0,t1

	addi a0, a0, -portWORD_SIZE
    9fe00512:	1561                	addi	a0,a0,-8
	store_x t0, 0(a0)					/* mstatus onto the stack. */
    9fe00514:	00553023          	sd	t0,0(a0)
	addi a0, a0, -(22 * portWORD_SIZE)	/* Space for registers x11-x31. */
    9fe00518:	f5050513          	addi	a0,a0,-176
	store_x a2, 0(a0)					/* Task parameters (pvParameters parameter) goes into register X10/a0 on the stack. */
    9fe0051c:	e110                	sd	a2,0(a0)
	addi a0, a0, -(6 * portWORD_SIZE)	/* Space for registers x5-x9. */
    9fe0051e:	fd050513          	addi	a0,a0,-48
	store_x x0, 0(a0)					/* Return address onto the stack, could be portTASK_RETURN_ADDRESS */
    9fe00522:	00053023          	sd	zero,0(a0)
	addi t0, x0, portasmADDITIONAL_CONTEXT_SIZE /* The number of chip specific additional registers. */
    9fe00526:	02200293          	li	t0,34

000000009fe0052a <chip_specific_stack_frame>:
chip_specific_stack_frame:				/* First add any chip specific registers to the stack frame being created. */
	beq t0, x0, 1f						/* No more chip specific registers to save. */
    9fe0052a:	00028763          	beqz	t0,9fe00538 <chip_specific_stack_frame+0xe>
	addi a0, a0, -portWORD_SIZE			/* Make space for chip specific register. */
    9fe0052e:	1561                	addi	a0,a0,-8
	store_x x0, 0(a0)					/* Give the chip specific register an initial value of zero. */
    9fe00530:	00053023          	sd	zero,0(a0)
	addi t0, t0, -1						/* Decrement the count of chip specific registers remaining. */
    9fe00534:	12fd                	addi	t0,t0,-1
	j chip_specific_stack_frame			/* Until no more chip specific registers. */
    9fe00536:	bfd5                	j	9fe0052a <chip_specific_stack_frame>
1:
	addi a0, a0, -portWORD_SIZE
    9fe00538:	1561                	addi	a0,a0,-8
	store_x a1, 0(a0)					/* mret value (pxCode parameter) onto the stack. */
    9fe0053a:	e10c                	sd	a1,0(a0)
	ret
    9fe0053c:	8082                	ret
	...

000000009fe00590 <atan>:
    9fe00590:	e20507d3          	fmv.x.d	a5,fa0
    9fe00594:	1101                	addi	sp,sp,-32
    9fe00596:	e426                	sd	s1,8(sp)
    9fe00598:	4207d493          	srai	s1,a5,0x20
    9fe0059c:	e822                	sd	s0,16(sp)
    9fe0059e:	02149413          	slli	s0,s1,0x21
    9fe005a2:	ec06                	sd	ra,24(sp)
    9fe005a4:	44100737          	lui	a4,0x44100
    9fe005a8:	9005                	srli	s0,s0,0x21
    9fe005aa:	02e44f63          	blt	s0,a4,9fe005e8 <atan+0x58>
    9fe005ae:	7ff00737          	lui	a4,0x7ff00
    9fe005b2:	02874263          	blt	a4,s0,9fe005d6 <atan+0x46>
    9fe005b6:	00e40d63          	beq	s0,a4,9fe005d0 <atan+0x40>
    9fe005ba:	12905663          	blez	s1,9fe006e6 <atan+0x156>
    9fe005be:	60e2                	ld	ra,24(sp)
    9fe005c0:	6442                	ld	s0,16(sp)
    9fe005c2:	64a2                	ld	s1,8(sp)
    9fe005c4:	00012797          	auipc	a5,0x12
    9fe005c8:	e047b507          	fld	fa0,-508(a5) # 9fe123c8 <__func__.1+0x210>
    9fe005cc:	6105                	addi	sp,sp,32
    9fe005ce:	8082                	ret
    9fe005d0:	0007869b          	sext.w	a3,a5
    9fe005d4:	d2fd                	beqz	a3,9fe005ba <atan+0x2a>
    9fe005d6:	f20787d3          	fmv.d.x	fa5,a5
    9fe005da:	02f7f553          	fadd.d	fa0,fa5,fa5
    9fe005de:	60e2                	ld	ra,24(sp)
    9fe005e0:	6442                	ld	s0,16(sp)
    9fe005e2:	64a2                	ld	s1,8(sp)
    9fe005e4:	6105                	addi	sp,sp,32
    9fe005e6:	8082                	ret
    9fe005e8:	3fdc0737          	lui	a4,0x3fdc0
    9fe005ec:	10e45663          	bge	s0,a4,9fe006f8 <atan+0x168>
    9fe005f0:	3e200737          	lui	a4,0x3e200
    9fe005f4:	0ce44b63          	blt	s0,a4,9fe006ca <atan+0x13a>
    9fe005f8:	577d                	li	a4,-1
    9fe005fa:	f20786d3          	fmv.d.x	fa3,a5
    9fe005fe:	00012697          	auipc	a3,0x12
    9fe00602:	e826b787          	fld	fa5,-382(a3) # 9fe12480 <xISRStackTop+0x30>
    9fe00606:	00012697          	auipc	a3,0x12
    9fe0060a:	e826b507          	fld	fa0,-382(a3) # 9fe12488 <xISRStackTop+0x38>
    9fe0060e:	12d6f653          	fmul.d	fa2,fa3,fa3
    9fe00612:	00012697          	auipc	a3,0x12
    9fe00616:	e9e6b707          	fld	fa4,-354(a3) # 9fe124b0 <xISRStackTop+0x60>
    9fe0061a:	00012697          	auipc	a3,0x12
    9fe0061e:	e9e6b307          	fld	ft6,-354(a3) # 9fe124b8 <xISRStackTop+0x68>
    9fe00622:	00012697          	auipc	a3,0x12
    9fe00626:	e6e6b287          	fld	ft5,-402(a3) # 9fe12490 <xISRStackTop+0x40>
    9fe0062a:	00012697          	auipc	a3,0x12
    9fe0062e:	e966b207          	fld	ft4,-362(a3) # 9fe124c0 <xISRStackTop+0x70>
    9fe00632:	00012697          	auipc	a3,0x12
    9fe00636:	e666b187          	fld	ft3,-410(a3) # 9fe12498 <xISRStackTop+0x48>
    9fe0063a:	00012697          	auipc	a3,0x12
    9fe0063e:	e8e6b107          	fld	ft2,-370(a3) # 9fe124c8 <xISRStackTop+0x78>
    9fe00642:	12c676d3          	fmul.d	fa3,fa2,fa2
    9fe00646:	00012697          	auipc	a3,0x12
    9fe0064a:	e5a6b087          	fld	ft1,-422(a3) # 9fe124a0 <xISRStackTop+0x50>
    9fe0064e:	00012697          	auipc	a3,0x12
    9fe00652:	e826b007          	fld	ft0,-382(a3) # 9fe124d0 <xISRStackTop+0x80>
    9fe00656:	00012697          	auipc	a3,0x12
    9fe0065a:	e526b587          	fld	fa1,-430(a3) # 9fe124a8 <xISRStackTop+0x58>
    9fe0065e:	56fd                	li	a3,-1
    9fe00660:	52f6f543          	fmadd.d	fa0,fa3,fa5,fa0
    9fe00664:	32e6f7c3          	fmadd.d	fa5,fa3,fa4,ft6
    9fe00668:	2ad57543          	fmadd.d	fa0,fa0,fa3,ft5
    9fe0066c:	22d7f7c3          	fmadd.d	fa5,fa5,fa3,ft4
    9fe00670:	1ad57543          	fmadd.d	fa0,fa0,fa3,ft3
    9fe00674:	12d7f7c3          	fmadd.d	fa5,fa5,fa3,ft2
    9fe00678:	0ad57543          	fmadd.d	fa0,fa0,fa3,ft1
    9fe0067c:	02d7f7c3          	fmadd.d	fa5,fa5,fa3,ft0
    9fe00680:	5ad57543          	fmadd.d	fa0,fa0,fa3,fa1
    9fe00684:	12d7f7d3          	fmul.d	fa5,fa5,fa3
    9fe00688:	7ac57543          	fmadd.d	fa0,fa0,fa2,fa5
    9fe0068c:	f20787d3          	fmv.d.x	fa5,a5
    9fe00690:	12a7f553          	fmul.d	fa0,fa5,fa0
    9fe00694:	08d70e63          	beq	a4,a3,9fe00730 <atan+0x1a0>
    9fe00698:	070e                	slli	a4,a4,0x3
    9fe0069a:	00010697          	auipc	a3,0x10
    9fe0069e:	2fe68693          	addi	a3,a3,766 # 9fe10998 <atanhi>
    9fe006a2:	9736                	add	a4,a4,a3
    9fe006a4:	3318                	fld	fa4,32(a4)
    9fe006a6:	231c                	fld	fa5,0(a4)
    9fe006a8:	0ae57553          	fsub.d	fa0,fa0,fa4
    9fe006ac:	f2078753          	fmv.d.x	fa4,a5
    9fe006b0:	0ae57553          	fsub.d	fa0,fa0,fa4
    9fe006b4:	0aa7f553          	fsub.d	fa0,fa5,fa0
    9fe006b8:	f204d3e3          	bgez	s1,9fe005de <atan+0x4e>
    9fe006bc:	60e2                	ld	ra,24(sp)
    9fe006be:	6442                	ld	s0,16(sp)
    9fe006c0:	64a2                	ld	s1,8(sp)
    9fe006c2:	22a51553          	fneg.d	fa0,fa0
    9fe006c6:	6105                	addi	sp,sp,32
    9fe006c8:	8082                	ret
    9fe006ca:	00012717          	auipc	a4,0x12
    9fe006ce:	d9673787          	fld	fa5,-618(a4) # 9fe12460 <xISRStackTop+0x10>
    9fe006d2:	02f577d3          	fadd.d	fa5,fa0,fa5
    9fe006d6:	00012717          	auipc	a4,0x12
    9fe006da:	bfa73707          	fld	fa4,-1030(a4) # 9fe122d0 <__func__.1+0x118>
    9fe006de:	a2f71753          	flt.d	a4,fa4,fa5
    9fe006e2:	db19                	beqz	a4,9fe005f8 <atan+0x68>
    9fe006e4:	bded                	j	9fe005de <atan+0x4e>
    9fe006e6:	60e2                	ld	ra,24(sp)
    9fe006e8:	6442                	ld	s0,16(sp)
    9fe006ea:	64a2                	ld	s1,8(sp)
    9fe006ec:	00012797          	auipc	a5,0x12
    9fe006f0:	d6c7b507          	fld	fa0,-660(a5) # 9fe12458 <xISRStackTop+0x8>
    9fe006f4:	6105                	addi	sp,sp,32
    9fe006f6:	8082                	ret
    9fe006f8:	250000ef          	jal	ra,9fe00948 <fabs>
    9fe006fc:	3ff307b7          	lui	a5,0x3ff30
    9fe00700:	02f45f63          	bge	s0,a5,9fe0073e <atan+0x1ae>
    9fe00704:	3fe607b7          	lui	a5,0x3fe60
    9fe00708:	06f45b63          	bge	s0,a5,9fe0077e <atan+0x1ee>
    9fe0070c:	00012797          	auipc	a5,0x12
    9fe00710:	d5c7b707          	fld	fa4,-676(a5) # 9fe12468 <xISRStackTop+0x18>
    9fe00714:	00012797          	auipc	a5,0x12
    9fe00718:	d5c7b787          	fld	fa5,-676(a5) # 9fe12470 <xISRStackTop+0x20>
    9fe0071c:	7ae577c3          	fmadd.d	fa5,fa0,fa4,fa5
    9fe00720:	02e57553          	fadd.d	fa0,fa0,fa4
    9fe00724:	4701                	li	a4,0
    9fe00726:	1aa7f7d3          	fdiv.d	fa5,fa5,fa0
    9fe0072a:	e20787d3          	fmv.x.d	a5,fa5
    9fe0072e:	b5f1                	j	9fe005fa <atan+0x6a>
    9fe00730:	60e2                	ld	ra,24(sp)
    9fe00732:	6442                	ld	s0,16(sp)
    9fe00734:	64a2                	ld	s1,8(sp)
    9fe00736:	0aa7f553          	fsub.d	fa0,fa5,fa0
    9fe0073a:	6105                	addi	sp,sp,32
    9fe0073c:	8082                	ret
    9fe0073e:	400387b7          	lui	a5,0x40038
    9fe00742:	02f45463          	bge	s0,a5,9fe0076a <atan+0x1da>
    9fe00746:	00012797          	auipc	a5,0x12
    9fe0074a:	d327b787          	fld	fa5,-718(a5) # 9fe12478 <xISRStackTop+0x28>
    9fe0074e:	00012797          	auipc	a5,0x12
    9fe00752:	b827b687          	fld	fa3,-1150(a5) # 9fe122d0 <__func__.1+0x118>
    9fe00756:	0af57753          	fsub.d	fa4,fa0,fa5
    9fe0075a:	6af57543          	fmadd.d	fa0,fa0,fa5,fa3
    9fe0075e:	4709                	li	a4,2
    9fe00760:	1aa777d3          	fdiv.d	fa5,fa4,fa0
    9fe00764:	e20787d3          	fmv.x.d	a5,fa5
    9fe00768:	bd49                	j	9fe005fa <atan+0x6a>
    9fe0076a:	00012797          	auipc	a5,0x12
    9fe0076e:	d067b787          	fld	fa5,-762(a5) # 9fe12470 <xISRStackTop+0x20>
    9fe00772:	1aa7f7d3          	fdiv.d	fa5,fa5,fa0
    9fe00776:	470d                	li	a4,3
    9fe00778:	e20787d3          	fmv.x.d	a5,fa5
    9fe0077c:	bdbd                	j	9fe005fa <atan+0x6a>
    9fe0077e:	00012797          	auipc	a5,0x12
    9fe00782:	b527b787          	fld	fa5,-1198(a5) # 9fe122d0 <__func__.1+0x118>
    9fe00786:	0af57753          	fsub.d	fa4,fa0,fa5
    9fe0078a:	02f57553          	fadd.d	fa0,fa0,fa5
    9fe0078e:	4705                	li	a4,1
    9fe00790:	1aa777d3          	fdiv.d	fa5,fa4,fa0
    9fe00794:	e20787d3          	fmv.x.d	a5,fa5
    9fe00798:	b58d                	j	9fe005fa <atan+0x6a>

000000009fe0079a <ceil>:
    9fe0079a:	e20507d3          	fmv.x.d	a5,fa0
    9fe0079e:	464d                	li	a2,19
    9fe007a0:	4347d713          	srai	a4,a5,0x34
    9fe007a4:	7ff77713          	andi	a4,a4,2047
    9fe007a8:	c017081b          	addiw	a6,a4,-1023
    9fe007ac:	4207d893          	srai	a7,a5,0x20
    9fe007b0:	0007851b          	sext.w	a0,a5
    9fe007b4:	09064863          	blt	a2,a6,9fe00844 <ceil+0xaa>
    9fe007b8:	06084163          	bltz	a6,9fe0081a <ceil+0x80>
    9fe007bc:	00100737          	lui	a4,0x100
    9fe007c0:	fff7059b          	addiw	a1,a4,-1
    9fe007c4:	4105d5bb          	sraw	a1,a1,a6
    9fe007c8:	00b8f6b3          	and	a3,a7,a1
    9fe007cc:	8ec9                	or	a3,a3,a0
    9fe007ce:	2681                	sext.w	a3,a3
    9fe007d0:	e2050653          	fmv.x.d	a2,fa0
    9fe007d4:	c2a1                	beqz	a3,9fe00814 <ceil+0x7a>
    9fe007d6:	00012697          	auipc	a3,0x12
    9fe007da:	c8a6b787          	fld	fa5,-886(a3) # 9fe12460 <xISRStackTop+0x10>
    9fe007de:	02f577d3          	fadd.d	fa5,fa0,fa5
    9fe007e2:	f2000753          	fmv.d.x	fa4,zero
    9fe007e6:	a2f717d3          	flt.d	a5,fa4,fa5
    9fe007ea:	cf91                	beqz	a5,9fe00806 <ceil+0x6c>
    9fe007ec:	01105663          	blez	a7,9fe007f8 <ceil+0x5e>
    9fe007f0:	4107573b          	sraw	a4,a4,a6
    9fe007f4:	011708bb          	addw	a7,a4,a7
    9fe007f8:	fff5c713          	not	a4,a1
    9fe007fc:	01177733          	and	a4,a4,a7
    9fe00800:	0007089b          	sext.w	a7,a4
    9fe00804:	4501                	li	a0,0
    9fe00806:	02051793          	slli	a5,a0,0x20
    9fe0080a:	9381                	srli	a5,a5,0x20
    9fe0080c:	02089713          	slli	a4,a7,0x20
    9fe00810:	00f76633          	or	a2,a4,a5
    9fe00814:	f2060553          	fmv.d.x	fa0,a2
    9fe00818:	8082                	ret
    9fe0081a:	00012717          	auipc	a4,0x12
    9fe0081e:	c4673787          	fld	fa5,-954(a4) # 9fe12460 <xISRStackTop+0x10>
    9fe00822:	02f577d3          	fadd.d	fa5,fa0,fa5
    9fe00826:	f2000753          	fmv.d.x	fa4,zero
    9fe0082a:	a2f717d3          	flt.d	a5,fa4,fa5
    9fe0082e:	dfe1                	beqz	a5,9fe00806 <ceil+0x6c>
    9fe00830:	0808cb63          	bltz	a7,9fe008c6 <ceil+0x12c>
    9fe00834:	00a8e6b3          	or	a3,a7,a0
    9fe00838:	4501                	li	a0,0
    9fe0083a:	3ff008b7          	lui	a7,0x3ff00
    9fe0083e:	f6e1                	bnez	a3,9fe00806 <ceil+0x6c>
    9fe00840:	4881                	li	a7,0
    9fe00842:	b7d1                	j	9fe00806 <ceil+0x6c>
    9fe00844:	03300613          	li	a2,51
    9fe00848:	01065d63          	bge	a2,a6,9fe00862 <ceil+0xc8>
    9fe0084c:	40000713          	li	a4,1024
    9fe00850:	e2050653          	fmv.x.d	a2,fa0
    9fe00854:	fce810e3          	bne	a6,a4,9fe00814 <ceil+0x7a>
    9fe00858:	02a577d3          	fadd.d	fa5,fa0,fa0
    9fe0085c:	e2078653          	fmv.x.d	a2,fa5
    9fe00860:	bf55                	j	9fe00814 <ceil+0x7a>
    9fe00862:	567d                	li	a2,-1
    9fe00864:	bed7071b          	addiw	a4,a4,-1043
    9fe00868:	00e6573b          	srlw	a4,a2,a4
    9fe0086c:	00e57e33          	and	t3,a0,a4
    9fe00870:	2e01                	sext.w	t3,t3
    9fe00872:	e2050653          	fmv.x.d	a2,fa0
    9fe00876:	f80e0fe3          	beqz	t3,9fe00814 <ceil+0x7a>
    9fe0087a:	00012617          	auipc	a2,0x12
    9fe0087e:	be663787          	fld	fa5,-1050(a2) # 9fe12460 <xISRStackTop+0x10>
    9fe00882:	02f577d3          	fadd.d	fa5,fa0,fa5
    9fe00886:	f2000753          	fmv.d.x	fa4,zero
    9fe0088a:	a2f717d3          	flt.d	a5,fa4,fa5
    9fe0088e:	dfa5                	beqz	a5,9fe00806 <ceil+0x6c>
    9fe00890:	03105263          	blez	a7,9fe008b4 <ceil+0x11a>
    9fe00894:	47d1                	li	a5,20
    9fe00896:	02f80663          	beq	a6,a5,9fe008c2 <ceil+0x128>
    9fe0089a:	03400793          	li	a5,52
    9fe0089e:	410787bb          	subw	a5,a5,a6
    9fe008a2:	4585                	li	a1,1
    9fe008a4:	00f595bb          	sllw	a1,a1,a5
    9fe008a8:	00a586bb          	addw	a3,a1,a0
    9fe008ac:	02a6f163          	bgeu	a3,a0,9fe008ce <ceil+0x134>
    9fe008b0:	2885                	addiw	a7,a7,1
    9fe008b2:	8536                	mv	a0,a3
    9fe008b4:	fff74713          	not	a4,a4
    9fe008b8:	00a777b3          	and	a5,a4,a0
    9fe008bc:	0007851b          	sext.w	a0,a5
    9fe008c0:	b799                	j	9fe00806 <ceil+0x6c>
    9fe008c2:	2885                	addiw	a7,a7,1
    9fe008c4:	bfc5                	j	9fe008b4 <ceil+0x11a>
    9fe008c6:	4501                	li	a0,0
    9fe008c8:	800008b7          	lui	a7,0x80000
    9fe008cc:	bf2d                	j	9fe00806 <ceil+0x6c>
    9fe008ce:	8536                	mv	a0,a3
    9fe008d0:	b7d5                	j	9fe008b4 <ceil+0x11a>

000000009fe008d2 <cos>:
    9fe008d2:	e20507d3          	fmv.x.d	a5,fa0
    9fe008d6:	3fe926b7          	lui	a3,0x3fe92
    9fe008da:	1fb68693          	addi	a3,a3,507 # 3fe921fb <CVIMMAP_DRAM_SIZE+0x1fe921fb>
    9fe008de:	00179713          	slli	a4,a5,0x1
    9fe008e2:	9305                	srli	a4,a4,0x21
    9fe008e4:	02e6de63          	bge	a3,a4,9fe00920 <cos+0x4e>
    9fe008e8:	7ff006b7          	lui	a3,0x7ff00
    9fe008ec:	00d74563          	blt	a4,a3,9fe008f6 <cos+0x24>
    9fe008f0:	0aa57553          	fsub.d	fa0,fa0,fa0
    9fe008f4:	8082                	ret
    9fe008f6:	1101                	addi	sp,sp,-32
    9fe008f8:	850a                	mv	a0,sp
    9fe008fa:	ec06                	sd	ra,24(sp)
    9fe008fc:	372010ef          	jal	ra,9fe01c6e <__ieee754_rem_pio2>
    9fe00900:	890d                	andi	a0,a0,3
    9fe00902:	4785                	li	a5,1
    9fe00904:	02f50263          	beq	a0,a5,9fe00928 <cos+0x56>
    9fe00908:	4789                	li	a5,2
    9fe0090a:	25a2                	fld	fa1,8(sp)
    9fe0090c:	2502                	fld	fa0,0(sp)
    9fe0090e:	02f50863          	beq	a0,a5,9fe0093e <cos+0x6c>
    9fe00912:	c11d                	beqz	a0,9fe00938 <cos+0x66>
    9fe00914:	4505                	li	a0,1
    9fe00916:	09a020ef          	jal	ra,9fe029b0 <__kernel_sin>
    9fe0091a:	60e2                	ld	ra,24(sp)
    9fe0091c:	6105                	addi	sp,sp,32
    9fe0091e:	8082                	ret
    9fe00920:	f20005d3          	fmv.d.x	fa1,zero
    9fe00924:	7ec0106f          	j	9fe02110 <__kernel_cos>
    9fe00928:	25a2                	fld	fa1,8(sp)
    9fe0092a:	2502                	fld	fa0,0(sp)
    9fe0092c:	4505                	li	a0,1
    9fe0092e:	082020ef          	jal	ra,9fe029b0 <__kernel_sin>
    9fe00932:	22a51553          	fneg.d	fa0,fa0
    9fe00936:	b7d5                	j	9fe0091a <cos+0x48>
    9fe00938:	7d8010ef          	jal	ra,9fe02110 <__kernel_cos>
    9fe0093c:	bff9                	j	9fe0091a <cos+0x48>
    9fe0093e:	7d2010ef          	jal	ra,9fe02110 <__kernel_cos>
    9fe00942:	22a51553          	fneg.d	fa0,fa0
    9fe00946:	bfd1                	j	9fe0091a <cos+0x48>

000000009fe00948 <fabs>:
    9fe00948:	e20506d3          	fmv.x.d	a3,fa0
    9fe0094c:	57fd                	li	a5,-1
    9fe0094e:	9381                	srli	a5,a5,0x20
    9fe00950:	00169713          	slli	a4,a3,0x1
    9fe00954:	9305                	srli	a4,a4,0x21
    9fe00956:	1702                	slli	a4,a4,0x20
    9fe00958:	8ff5                	and	a5,a5,a3
    9fe0095a:	8fd9                	or	a5,a5,a4
    9fe0095c:	f2078553          	fmv.d.x	fa0,a5
    9fe00960:	8082                	ret

000000009fe00962 <floor>:
    9fe00962:	e20507d3          	fmv.x.d	a5,fa0
    9fe00966:	464d                	li	a2,19
    9fe00968:	4347d713          	srai	a4,a5,0x34
    9fe0096c:	7ff77713          	andi	a4,a4,2047
    9fe00970:	c017081b          	addiw	a6,a4,-1023
    9fe00974:	4207d893          	srai	a7,a5,0x20
    9fe00978:	0007851b          	sext.w	a0,a5
    9fe0097c:	09064363          	blt	a2,a6,9fe00a02 <floor+0xa0>
    9fe00980:	06084163          	bltz	a6,9fe009e2 <floor+0x80>
    9fe00984:	001005b7          	lui	a1,0x100
    9fe00988:	fff5869b          	addiw	a3,a1,-1
    9fe0098c:	4106d6bb          	sraw	a3,a3,a6
    9fe00990:	00d8f733          	and	a4,a7,a3
    9fe00994:	8f49                	or	a4,a4,a0
    9fe00996:	2701                	sext.w	a4,a4
    9fe00998:	e2050653          	fmv.x.d	a2,fa0
    9fe0099c:	c321                	beqz	a4,9fe009dc <floor+0x7a>
    9fe0099e:	00012717          	auipc	a4,0x12
    9fe009a2:	ac273787          	fld	fa5,-1342(a4) # 9fe12460 <xISRStackTop+0x10>
    9fe009a6:	02f577d3          	fadd.d	fa5,fa0,fa5
    9fe009aa:	f2000753          	fmv.d.x	fa4,zero
    9fe009ae:	a2f717d3          	flt.d	a5,fa4,fa5
    9fe009b2:	cf91                	beqz	a5,9fe009ce <floor+0x6c>
    9fe009b4:	0008d663          	bgez	a7,9fe009c0 <floor+0x5e>
    9fe009b8:	4105d73b          	sraw	a4,a1,a6
    9fe009bc:	011708bb          	addw	a7,a4,a7
    9fe009c0:	fff6c713          	not	a4,a3
    9fe009c4:	01177733          	and	a4,a4,a7
    9fe009c8:	0007089b          	sext.w	a7,a4
    9fe009cc:	4501                	li	a0,0
    9fe009ce:	02051793          	slli	a5,a0,0x20
    9fe009d2:	9381                	srli	a5,a5,0x20
    9fe009d4:	02089713          	slli	a4,a7,0x20
    9fe009d8:	00f76633          	or	a2,a4,a5
    9fe009dc:	f2060553          	fmv.d.x	fa0,a2
    9fe009e0:	8082                	ret
    9fe009e2:	00012717          	auipc	a4,0x12
    9fe009e6:	a7e73787          	fld	fa5,-1410(a4) # 9fe12460 <xISRStackTop+0x10>
    9fe009ea:	02f577d3          	fadd.d	fa5,fa0,fa5
    9fe009ee:	f2000753          	fmv.d.x	fa4,zero
    9fe009f2:	a2f717d3          	flt.d	a5,fa4,fa5
    9fe009f6:	dfe1                	beqz	a5,9fe009ce <floor+0x6c>
    9fe009f8:	0608c463          	bltz	a7,9fe00a60 <floor+0xfe>
    9fe009fc:	4501                	li	a0,0
    9fe009fe:	4881                	li	a7,0
    9fe00a00:	b7f9                	j	9fe009ce <floor+0x6c>
    9fe00a02:	03300613          	li	a2,51
    9fe00a06:	01065d63          	bge	a2,a6,9fe00a20 <floor+0xbe>
    9fe00a0a:	40000713          	li	a4,1024
    9fe00a0e:	e2050653          	fmv.x.d	a2,fa0
    9fe00a12:	fce815e3          	bne	a6,a4,9fe009dc <floor+0x7a>
    9fe00a16:	02a577d3          	fadd.d	fa5,fa0,fa0
    9fe00a1a:	e2078653          	fmv.x.d	a2,fa5
    9fe00a1e:	bf7d                	j	9fe009dc <floor+0x7a>
    9fe00a20:	567d                	li	a2,-1
    9fe00a22:	bed7071b          	addiw	a4,a4,-1043
    9fe00a26:	00e6573b          	srlw	a4,a2,a4
    9fe00a2a:	00e57e33          	and	t3,a0,a4
    9fe00a2e:	2e01                	sext.w	t3,t3
    9fe00a30:	e2050653          	fmv.x.d	a2,fa0
    9fe00a34:	fa0e04e3          	beqz	t3,9fe009dc <floor+0x7a>
    9fe00a38:	00012617          	auipc	a2,0x12
    9fe00a3c:	a2863787          	fld	fa5,-1496(a2) # 9fe12460 <xISRStackTop+0x10>
    9fe00a40:	02f577d3          	fadd.d	fa5,fa0,fa5
    9fe00a44:	f2000753          	fmv.d.x	fa4,zero
    9fe00a48:	a2f717d3          	flt.d	a5,fa4,fa5
    9fe00a4c:	d3c9                	beqz	a5,9fe009ce <floor+0x6c>
    9fe00a4e:	0208c463          	bltz	a7,9fe00a76 <floor+0x114>
    9fe00a52:	fff74713          	not	a4,a4
    9fe00a56:	00a777b3          	and	a5,a4,a0
    9fe00a5a:	0007851b          	sext.w	a0,a5
    9fe00a5e:	bf85                	j	9fe009ce <floor+0x6c>
    9fe00a60:	02189313          	slli	t1,a7,0x21
    9fe00a64:	02135313          	srli	t1,t1,0x21
    9fe00a68:	006566b3          	or	a3,a0,t1
    9fe00a6c:	4501                	li	a0,0
    9fe00a6e:	d2a5                	beqz	a3,9fe009ce <floor+0x6c>
    9fe00a70:	bff008b7          	lui	a7,0xbff00
    9fe00a74:	bfa9                	j	9fe009ce <floor+0x6c>
    9fe00a76:	47d1                	li	a5,20
    9fe00a78:	02f80063          	beq	a6,a5,9fe00a98 <floor+0x136>
    9fe00a7c:	03400793          	li	a5,52
    9fe00a80:	410787bb          	subw	a5,a5,a6
    9fe00a84:	4585                	li	a1,1
    9fe00a86:	00f595bb          	sllw	a1,a1,a5
    9fe00a8a:	00a586bb          	addw	a3,a1,a0
    9fe00a8e:	00a6f763          	bgeu	a3,a0,9fe00a9c <floor+0x13a>
    9fe00a92:	2885                	addiw	a7,a7,1
    9fe00a94:	8536                	mv	a0,a3
    9fe00a96:	bf75                	j	9fe00a52 <floor+0xf0>
    9fe00a98:	2885                	addiw	a7,a7,1
    9fe00a9a:	bf65                	j	9fe00a52 <floor+0xf0>
    9fe00a9c:	8536                	mv	a0,a3
    9fe00a9e:	bf55                	j	9fe00a52 <floor+0xf0>

000000009fe00aa0 <round>:
    9fe00aa0:	e20507d3          	fmv.x.d	a5,fa0
    9fe00aa4:	484d                	li	a6,19
    9fe00aa6:	4347d693          	srai	a3,a5,0x34
    9fe00aaa:	7ff6f693          	andi	a3,a3,2047
    9fe00aae:	c016861b          	addiw	a2,a3,-1023
    9fe00ab2:	4207d713          	srai	a4,a5,0x20
    9fe00ab6:	8532                	mv	a0,a2
    9fe00ab8:	88ba                	mv	a7,a4
    9fe00aba:	0007859b          	sext.w	a1,a5
    9fe00abe:	04c84c63          	blt	a6,a2,9fe00b16 <round+0x76>
    9fe00ac2:	02064e63          	bltz	a2,9fe00afe <round+0x5e>
    9fe00ac6:	001006b7          	lui	a3,0x100
    9fe00aca:	36fd                	addiw	a3,a3,-1
    9fe00acc:	40c6d6bb          	sraw	a3,a3,a2
    9fe00ad0:	8f75                	and	a4,a4,a3
    9fe00ad2:	8dd9                	or	a1,a1,a4
    9fe00ad4:	2581                	sext.w	a1,a1
    9fe00ad6:	c18d                	beqz	a1,9fe00af8 <round+0x58>
    9fe00ad8:	00080737          	lui	a4,0x80
    9fe00adc:	40c7573b          	sraw	a4,a4,a2
    9fe00ae0:	011708bb          	addw	a7,a4,a7
    9fe00ae4:	fff6c713          	not	a4,a3
    9fe00ae8:	01177733          	and	a4,a4,a7
    9fe00aec:	2701                	sext.w	a4,a4
    9fe00aee:	4781                	li	a5,0
    9fe00af0:	1782                	slli	a5,a5,0x20
    9fe00af2:	9381                	srli	a5,a5,0x20
    9fe00af4:	1702                	slli	a4,a4,0x20
    9fe00af6:	8fd9                	or	a5,a5,a4
    9fe00af8:	f2078553          	fmv.d.x	fa0,a5
    9fe00afc:	8082                	ret
    9fe00afe:	80000737          	lui	a4,0x80000
    9fe00b02:	57fd                	li	a5,-1
    9fe00b04:	00e8f733          	and	a4,a7,a4
    9fe00b08:	fef612e3          	bne	a2,a5,9fe00aec <round+0x4c>
    9fe00b0c:	3ff007b7          	lui	a5,0x3ff00
    9fe00b10:	8f5d                	or	a4,a4,a5
    9fe00b12:	4781                	li	a5,0
    9fe00b14:	bff1                	j	9fe00af0 <round+0x50>
    9fe00b16:	03300813          	li	a6,51
    9fe00b1a:	00c85b63          	bge	a6,a2,9fe00b30 <round+0x90>
    9fe00b1e:	40000713          	li	a4,1024
    9fe00b22:	fce61be3          	bne	a2,a4,9fe00af8 <round+0x58>
    9fe00b26:	02a577d3          	fadd.d	fa5,fa0,fa0
    9fe00b2a:	e20787d3          	fmv.x.d	a5,fa5
    9fe00b2e:	b7e9                	j	9fe00af8 <round+0x58>
    9fe00b30:	567d                	li	a2,-1
    9fe00b32:	bed6869b          	addiw	a3,a3,-1043
    9fe00b36:	00d656bb          	srlw	a3,a2,a3
    9fe00b3a:	00d5f633          	and	a2,a1,a3
    9fe00b3e:	2601                	sext.w	a2,a2
    9fe00b40:	de45                	beqz	a2,9fe00af8 <round+0x58>
    9fe00b42:	03300793          	li	a5,51
    9fe00b46:	40a7853b          	subw	a0,a5,a0
    9fe00b4a:	4785                	li	a5,1
    9fe00b4c:	00a797bb          	sllw	a5,a5,a0
    9fe00b50:	9fad                	addw	a5,a5,a1
    9fe00b52:	0007861b          	sext.w	a2,a5
    9fe00b56:	00b67363          	bgeu	a2,a1,9fe00b5c <round+0xbc>
    9fe00b5a:	2705                	addiw	a4,a4,1
    9fe00b5c:	fff6c693          	not	a3,a3
    9fe00b60:	8ff5                	and	a5,a5,a3
    9fe00b62:	2781                	sext.w	a5,a5
    9fe00b64:	b771                	j	9fe00af0 <round+0x50>

000000009fe00b66 <sin>:
    9fe00b66:	e20507d3          	fmv.x.d	a5,fa0
    9fe00b6a:	3fe926b7          	lui	a3,0x3fe92
    9fe00b6e:	1fb68693          	addi	a3,a3,507 # 3fe921fb <CVIMMAP_DRAM_SIZE+0x1fe921fb>
    9fe00b72:	00179713          	slli	a4,a5,0x1
    9fe00b76:	9305                	srli	a4,a4,0x21
    9fe00b78:	02e6df63          	bge	a3,a4,9fe00bb6 <sin+0x50>
    9fe00b7c:	7ff006b7          	lui	a3,0x7ff00
    9fe00b80:	00d74563          	blt	a4,a3,9fe00b8a <sin+0x24>
    9fe00b84:	0aa57553          	fsub.d	fa0,fa0,fa0
    9fe00b88:	8082                	ret
    9fe00b8a:	1101                	addi	sp,sp,-32
    9fe00b8c:	850a                	mv	a0,sp
    9fe00b8e:	ec06                	sd	ra,24(sp)
    9fe00b90:	0de010ef          	jal	ra,9fe01c6e <__ieee754_rem_pio2>
    9fe00b94:	890d                	andi	a0,a0,3
    9fe00b96:	4785                	li	a5,1
    9fe00b98:	02f50463          	beq	a0,a5,9fe00bc0 <sin+0x5a>
    9fe00b9c:	4789                	li	a5,2
    9fe00b9e:	25a2                	fld	fa1,8(sp)
    9fe00ba0:	2502                	fld	fa0,0(sp)
    9fe00ba2:	02f50863          	beq	a0,a5,9fe00bd2 <sin+0x6c>
    9fe00ba6:	c115                	beqz	a0,9fe00bca <sin+0x64>
    9fe00ba8:	568010ef          	jal	ra,9fe02110 <__kernel_cos>
    9fe00bac:	22a51553          	fneg.d	fa0,fa0
    9fe00bb0:	60e2                	ld	ra,24(sp)
    9fe00bb2:	6105                	addi	sp,sp,32
    9fe00bb4:	8082                	ret
    9fe00bb6:	f20005d3          	fmv.d.x	fa1,zero
    9fe00bba:	4501                	li	a0,0
    9fe00bbc:	5f50106f          	j	9fe029b0 <__kernel_sin>
    9fe00bc0:	25a2                	fld	fa1,8(sp)
    9fe00bc2:	2502                	fld	fa0,0(sp)
    9fe00bc4:	54c010ef          	jal	ra,9fe02110 <__kernel_cos>
    9fe00bc8:	b7e5                	j	9fe00bb0 <sin+0x4a>
    9fe00bca:	4505                	li	a0,1
    9fe00bcc:	5e5010ef          	jal	ra,9fe029b0 <__kernel_sin>
    9fe00bd0:	b7c5                	j	9fe00bb0 <sin+0x4a>
    9fe00bd2:	4505                	li	a0,1
    9fe00bd4:	5dd010ef          	jal	ra,9fe029b0 <__kernel_sin>
    9fe00bd8:	22a51553          	fneg.d	fa0,fa0
    9fe00bdc:	bfd1                	j	9fe00bb0 <sin+0x4a>

000000009fe00bde <atan2>:
    9fe00bde:	a495                	j	9fe00e42 <__ieee754_atan2>

000000009fe00be0 <exp>:
    9fe00be0:	1101                	addi	sp,sp,-32
    9fe00be2:	a422                	fsd	fs0,8(sp)
    9fe00be4:	a026                	fsd	fs1,0(sp)
    9fe00be6:	22a50453          	fmv.d	fs0,fa0
    9fe00bea:	ec06                	sd	ra,24(sp)
    9fe00bec:	440000ef          	jal	ra,9fe0102c <__ieee754_exp>
    9fe00bf0:	0001f717          	auipc	a4,0x1f
    9fe00bf4:	f7072703          	lw	a4,-144(a4) # 9fe1fb60 <__fdlib_version>
    9fe00bf8:	57fd                	li	a5,-1
    9fe00bfa:	22a504d3          	fmv.d	fs1,fa0
    9fe00bfe:	02f70563          	beq	a4,a5,9fe00c28 <exp+0x48>
    9fe00c02:	22840553          	fmv.d	fa0,fs0
    9fe00c06:	64f010ef          	jal	ra,9fe02a54 <finite>
    9fe00c0a:	cd19                	beqz	a0,9fe00c28 <exp+0x48>
    9fe00c0c:	00012797          	auipc	a5,0x12
    9fe00c10:	8d47b787          	fld	fa5,-1836(a5) # 9fe124e0 <xISRStackTop+0x90>
    9fe00c14:	a28797d3          	flt.d	a5,fa5,fs0
    9fe00c18:	e79d                	bnez	a5,9fe00c46 <exp+0x66>
    9fe00c1a:	00012797          	auipc	a5,0x12
    9fe00c1e:	8ce7b787          	fld	fa5,-1842(a5) # 9fe124e8 <xISRStackTop+0x98>
    9fe00c22:	a2f417d3          	flt.d	a5,fs0,fa5
    9fe00c26:	eb81                	bnez	a5,9fe00c36 <exp+0x56>
    9fe00c28:	60e2                	ld	ra,24(sp)
    9fe00c2a:	22948553          	fmv.d	fa0,fs1
    9fe00c2e:	2422                	fld	fs0,8(sp)
    9fe00c30:	2482                	fld	fs1,0(sp)
    9fe00c32:	6105                	addi	sp,sp,32
    9fe00c34:	8082                	ret
    9fe00c36:	0da020ef          	jal	ra,9fe02d10 <__errno>
    9fe00c3a:	02200793          	li	a5,34
    9fe00c3e:	f20004d3          	fmv.d.x	fs1,zero
    9fe00c42:	c11c                	sw	a5,0(a0)
    9fe00c44:	b7d5                	j	9fe00c28 <exp+0x48>
    9fe00c46:	0ca020ef          	jal	ra,9fe02d10 <__errno>
    9fe00c4a:	02200793          	li	a5,34
    9fe00c4e:	c11c                	sw	a5,0(a0)
    9fe00c50:	00012797          	auipc	a5,0x12
    9fe00c54:	8887b487          	fld	fs1,-1912(a5) # 9fe124d8 <xISRStackTop+0x88>
    9fe00c58:	bfc1                	j	9fe00c28 <exp+0x48>

000000009fe00c5a <log>:
    9fe00c5a:	1101                	addi	sp,sp,-32
    9fe00c5c:	a422                	fsd	fs0,8(sp)
    9fe00c5e:	ec06                	sd	ra,24(sp)
    9fe00c60:	22a50453          	fmv.d	fs0,fa0
    9fe00c64:	646000ef          	jal	ra,9fe012aa <__ieee754_log>
    9fe00c68:	0001f717          	auipc	a4,0x1f
    9fe00c6c:	ef872703          	lw	a4,-264(a4) # 9fe1fb60 <__fdlib_version>
    9fe00c70:	57fd                	li	a5,-1
    9fe00c72:	02f70663          	beq	a4,a5,9fe00c9e <log+0x44>
    9fe00c76:	a28427d3          	feq.d	a5,fs0,fs0
    9fe00c7a:	c395                	beqz	a5,9fe00c9e <log+0x44>
    9fe00c7c:	f20007d3          	fmv.d.x	fa5,zero
    9fe00c80:	a28797d3          	flt.d	a5,fa5,fs0
    9fe00c84:	ef89                	bnez	a5,9fe00c9e <log+0x44>
    9fe00c86:	a2f427d3          	feq.d	a5,fs0,fa5
    9fe00c8a:	cf91                	beqz	a5,9fe00ca6 <log+0x4c>
    9fe00c8c:	084020ef          	jal	ra,9fe02d10 <__errno>
    9fe00c90:	02200793          	li	a5,34
    9fe00c94:	c11c                	sw	a5,0(a0)
    9fe00c96:	00012797          	auipc	a5,0x12
    9fe00c9a:	85a7b507          	fld	fa0,-1958(a5) # 9fe124f0 <xISRStackTop+0xa0>
    9fe00c9e:	60e2                	ld	ra,24(sp)
    9fe00ca0:	2422                	fld	fs0,8(sp)
    9fe00ca2:	6105                	addi	sp,sp,32
    9fe00ca4:	8082                	ret
    9fe00ca6:	06a020ef          	jal	ra,9fe02d10 <__errno>
    9fe00caa:	60e2                	ld	ra,24(sp)
    9fe00cac:	2422                	fld	fs0,8(sp)
    9fe00cae:	02100793          	li	a5,33
    9fe00cb2:	c11c                	sw	a5,0(a0)
    9fe00cb4:	00011517          	auipc	a0,0x11
    9fe00cb8:	4fc50513          	addi	a0,a0,1276 # 9fe121b0 <__func__.0+0x30>
    9fe00cbc:	6105                	addi	sp,sp,32
    9fe00cbe:	5ab0106f          	j	9fe02a68 <nan>

000000009fe00cc2 <pow>:
    9fe00cc2:	7179                	addi	sp,sp,-48
    9fe00cc4:	ac22                	fsd	fs0,24(sp)
    9fe00cc6:	a826                	fsd	fs1,16(sp)
    9fe00cc8:	a44a                	fsd	fs2,8(sp)
    9fe00cca:	22a504d3          	fmv.d	fs1,fa0
    9fe00cce:	22b58453          	fmv.d	fs0,fa1
    9fe00cd2:	f406                	sd	ra,40(sp)
    9fe00cd4:	a04e                	fsd	fs3,0(sp)
    9fe00cd6:	025000ef          	jal	ra,9fe014fa <__ieee754_pow>
    9fe00cda:	0001f717          	auipc	a4,0x1f
    9fe00cde:	e8672703          	lw	a4,-378(a4) # 9fe1fb60 <__fdlib_version>
    9fe00ce2:	57fd                	li	a5,-1
    9fe00ce4:	22a50953          	fmv.d	fs2,fa0
    9fe00ce8:	02f70863          	beq	a4,a5,9fe00d18 <pow+0x56>
    9fe00cec:	a28427d3          	feq.d	a5,fs0,fs0
    9fe00cf0:	c785                	beqz	a5,9fe00d18 <pow+0x56>
    9fe00cf2:	a294a7d3          	feq.d	a5,fs1,fs1
    9fe00cf6:	c7a5                	beqz	a5,9fe00d5e <pow+0x9c>
    9fe00cf8:	f20009d3          	fmv.d.x	fs3,zero
    9fe00cfc:	a334a7d3          	feq.d	a5,fs1,fs3
    9fe00d00:	c78d                	beqz	a5,9fe00d2a <pow+0x68>
    9fe00d02:	a33427d3          	feq.d	a5,fs0,fs3
    9fe00d06:	e3ad                	bnez	a5,9fe00d68 <pow+0xa6>
    9fe00d08:	22840553          	fmv.d	fa0,fs0
    9fe00d0c:	549010ef          	jal	ra,9fe02a54 <finite>
    9fe00d10:	c501                	beqz	a0,9fe00d18 <pow+0x56>
    9fe00d12:	a33417d3          	flt.d	a5,fs0,fs3
    9fe00d16:	e3c5                	bnez	a5,9fe00db6 <pow+0xf4>
    9fe00d18:	70a2                	ld	ra,40(sp)
    9fe00d1a:	23290553          	fmv.d	fa0,fs2
    9fe00d1e:	2462                	fld	fs0,24(sp)
    9fe00d20:	24c2                	fld	fs1,16(sp)
    9fe00d22:	2922                	fld	fs2,8(sp)
    9fe00d24:	2982                	fld	fs3,0(sp)
    9fe00d26:	6145                	addi	sp,sp,48
    9fe00d28:	8082                	ret
    9fe00d2a:	52b010ef          	jal	ra,9fe02a54 <finite>
    9fe00d2e:	c931                	beqz	a0,9fe00d82 <pow+0xc0>
    9fe00d30:	f20007d3          	fmv.d.x	fa5,zero
    9fe00d34:	a2f927d3          	feq.d	a5,fs2,fa5
    9fe00d38:	d3e5                	beqz	a5,9fe00d18 <pow+0x56>
    9fe00d3a:	22948553          	fmv.d	fa0,fs1
    9fe00d3e:	517010ef          	jal	ra,9fe02a54 <finite>
    9fe00d42:	d979                	beqz	a0,9fe00d18 <pow+0x56>
    9fe00d44:	22840553          	fmv.d	fa0,fs0
    9fe00d48:	50d010ef          	jal	ra,9fe02a54 <finite>
    9fe00d4c:	d571                	beqz	a0,9fe00d18 <pow+0x56>
    9fe00d4e:	7c3010ef          	jal	ra,9fe02d10 <__errno>
    9fe00d52:	02200793          	li	a5,34
    9fe00d56:	f2000953          	fmv.d.x	fs2,zero
    9fe00d5a:	c11c                	sw	a5,0(a0)
    9fe00d5c:	bf75                	j	9fe00d18 <pow+0x56>
    9fe00d5e:	f20007d3          	fmv.d.x	fa5,zero
    9fe00d62:	a2f427d3          	feq.d	a5,fs0,fa5
    9fe00d66:	dbcd                	beqz	a5,9fe00d18 <pow+0x56>
    9fe00d68:	70a2                	ld	ra,40(sp)
    9fe00d6a:	00011797          	auipc	a5,0x11
    9fe00d6e:	5667b907          	fld	fs2,1382(a5) # 9fe122d0 <__func__.1+0x118>
    9fe00d72:	23290553          	fmv.d	fa0,fs2
    9fe00d76:	2462                	fld	fs0,24(sp)
    9fe00d78:	24c2                	fld	fs1,16(sp)
    9fe00d7a:	2922                	fld	fs2,8(sp)
    9fe00d7c:	2982                	fld	fs3,0(sp)
    9fe00d7e:	6145                	addi	sp,sp,48
    9fe00d80:	8082                	ret
    9fe00d82:	22948553          	fmv.d	fa0,fs1
    9fe00d86:	4cf010ef          	jal	ra,9fe02a54 <finite>
    9fe00d8a:	d15d                	beqz	a0,9fe00d30 <pow+0x6e>
    9fe00d8c:	22840553          	fmv.d	fa0,fs0
    9fe00d90:	4c5010ef          	jal	ra,9fe02a54 <finite>
    9fe00d94:	dd51                	beqz	a0,9fe00d30 <pow+0x6e>
    9fe00d96:	a32927d3          	feq.d	a5,fs2,fs2
    9fe00d9a:	c7a1                	beqz	a5,9fe00de2 <pow+0x120>
    9fe00d9c:	775010ef          	jal	ra,9fe02d10 <__errno>
    9fe00da0:	a33497d3          	flt.d	a5,fs1,fs3
    9fe00da4:	02200713          	li	a4,34
    9fe00da8:	c118                	sw	a4,0(a0)
    9fe00daa:	e385                	bnez	a5,9fe00dca <pow+0x108>
    9fe00dac:	00011797          	auipc	a5,0x11
    9fe00db0:	72c7b907          	fld	fs2,1836(a5) # 9fe124d8 <xISRStackTop+0x88>
    9fe00db4:	b795                	j	9fe00d18 <pow+0x56>
    9fe00db6:	75b010ef          	jal	ra,9fe02d10 <__errno>
    9fe00dba:	02100793          	li	a5,33
    9fe00dbe:	c11c                	sw	a5,0(a0)
    9fe00dc0:	00011797          	auipc	a5,0x11
    9fe00dc4:	7307b907          	fld	fs2,1840(a5) # 9fe124f0 <xISRStackTop+0xa0>
    9fe00dc8:	bf81                	j	9fe00d18 <pow+0x56>
    9fe00dca:	22840553          	fmv.d	fa0,fs0
    9fe00dce:	4a5010ef          	jal	ra,9fe02a72 <rint>
    9fe00dd2:	a28527d3          	feq.d	a5,fa0,fs0
    9fe00dd6:	fbf9                	bnez	a5,9fe00dac <pow+0xea>
    9fe00dd8:	00011797          	auipc	a5,0x11
    9fe00ddc:	7187b907          	fld	fs2,1816(a5) # 9fe124f0 <xISRStackTop+0xa0>
    9fe00de0:	bf25                	j	9fe00d18 <pow+0x56>
    9fe00de2:	72f010ef          	jal	ra,9fe02d10 <__errno>
    9fe00de6:	02100793          	li	a5,33
    9fe00dea:	1b39f953          	fdiv.d	fs2,fs3,fs3
    9fe00dee:	c11c                	sw	a5,0(a0)
    9fe00df0:	b725                	j	9fe00d18 <pow+0x56>

000000009fe00df2 <sqrt>:
    9fe00df2:	1101                	addi	sp,sp,-32
    9fe00df4:	a422                	fsd	fs0,8(sp)
    9fe00df6:	ec06                	sd	ra,24(sp)
    9fe00df8:	22a50453          	fmv.d	fs0,fa0
    9fe00dfc:	a026                	fsd	fs1,0(sp)
    9fe00dfe:	136010ef          	jal	ra,9fe01f34 <__ieee754_sqrt>
    9fe00e02:	0001f717          	auipc	a4,0x1f
    9fe00e06:	d5e72703          	lw	a4,-674(a4) # 9fe1fb60 <__fdlib_version>
    9fe00e0a:	57fd                	li	a5,-1
    9fe00e0c:	00f70a63          	beq	a4,a5,9fe00e20 <sqrt+0x2e>
    9fe00e10:	a28427d3          	feq.d	a5,fs0,fs0
    9fe00e14:	c791                	beqz	a5,9fe00e20 <sqrt+0x2e>
    9fe00e16:	f20004d3          	fmv.d.x	fs1,zero
    9fe00e1a:	a29417d3          	flt.d	a5,fs0,fs1
    9fe00e1e:	e791                	bnez	a5,9fe00e2a <sqrt+0x38>
    9fe00e20:	60e2                	ld	ra,24(sp)
    9fe00e22:	2422                	fld	fs0,8(sp)
    9fe00e24:	2482                	fld	fs1,0(sp)
    9fe00e26:	6105                	addi	sp,sp,32
    9fe00e28:	8082                	ret
    9fe00e2a:	6e7010ef          	jal	ra,9fe02d10 <__errno>
    9fe00e2e:	60e2                	ld	ra,24(sp)
    9fe00e30:	02100793          	li	a5,33
    9fe00e34:	c11c                	sw	a5,0(a0)
    9fe00e36:	1a94f553          	fdiv.d	fa0,fs1,fs1
    9fe00e3a:	2422                	fld	fs0,8(sp)
    9fe00e3c:	2482                	fld	fs1,0(sp)
    9fe00e3e:	6105                	addi	sp,sp,32
    9fe00e40:	8082                	ret

000000009fe00e42 <__ieee754_atan2>:
    9fe00e42:	e2058653          	fmv.x.d	a2,fa1
    9fe00e46:	80000737          	lui	a4,0x80000
    9fe00e4a:	fff74713          	not	a4,a4
    9fe00e4e:	0006051b          	sext.w	a0,a2
    9fe00e52:	40c007bb          	negw	a5,a2
    9fe00e56:	42065593          	srai	a1,a2,0x20
    9fe00e5a:	8fc9                	or	a5,a5,a0
    9fe00e5c:	00e5f8b3          	and	a7,a1,a4
    9fe00e60:	01f7d79b          	srliw	a5,a5,0x1f
    9fe00e64:	00f8e7b3          	or	a5,a7,a5
    9fe00e68:	7ff00837          	lui	a6,0x7ff00
    9fe00e6c:	2781                	sext.w	a5,a5
    9fe00e6e:	e20506d3          	fmv.x.d	a3,fa0
    9fe00e72:	06f86c63          	bltu	a6,a5,9fe00eea <__ieee754_atan2+0xa8>
    9fe00e76:	4206de13          	srai	t3,a3,0x20
    9fe00e7a:	00068e9b          	sext.w	t4,a3
    9fe00e7e:	40d007bb          	negw	a5,a3
    9fe00e82:	00ee7733          	and	a4,t3,a4
    9fe00e86:	00fee7b3          	or	a5,t4,a5
    9fe00e8a:	00070f9b          	sext.w	t6,a4
    9fe00e8e:	01f7d79b          	srliw	a5,a5,0x1f
    9fe00e92:	00ffe7b3          	or	a5,t6,a5
    9fe00e96:	2781                	sext.w	a5,a5
    9fe00e98:	04f86963          	bltu	a6,a5,9fe00eea <__ieee754_atan2+0xa8>
    9fe00e9c:	c01007b7          	lui	a5,0xc0100
    9fe00ea0:	9fad                	addw	a5,a5,a1
    9fe00ea2:	8fc9                	or	a5,a5,a0
    9fe00ea4:	2781                	sext.w	a5,a5
    9fe00ea6:	c7f9                	beqz	a5,9fe00f74 <__ieee754_atan2+0x132>
    9fe00ea8:	1141                	addi	sp,sp,-16
    9fe00eaa:	e022                	sd	s0,0(sp)
    9fe00eac:	41e5d41b          	sraiw	s0,a1,0x1e
    9fe00eb0:	8809                	andi	s0,s0,2
    9fe00eb2:	01fe5f1b          	srliw	t5,t3,0x1f
    9fe00eb6:	01e46433          	or	s0,s0,t5
    9fe00eba:	e406                	sd	ra,8(sp)
    9fe00ebc:	01feeeb3          	or	t4,t4,t6
    9fe00ec0:	2401                	sext.w	s0,s0
    9fe00ec2:	020e9d63          	bnez	t4,9fe00efc <__ieee754_atan2+0xba>
    9fe00ec6:	4789                	li	a5,2
    9fe00ec8:	0af40f63          	beq	s0,a5,9fe00f86 <__ieee754_atan2+0x144>
    9fe00ecc:	470d                	li	a4,3
    9fe00ece:	e20507d3          	fmv.x.d	a5,fa0
    9fe00ed2:	00e41663          	bne	s0,a4,9fe00ede <__ieee754_atan2+0x9c>
    9fe00ed6:	00011797          	auipc	a5,0x11
    9fe00eda:	6227b783          	ld	a5,1570(a5) # 9fe124f8 <xISRStackTop+0xa8>
    9fe00ede:	60a2                	ld	ra,8(sp)
    9fe00ee0:	6402                	ld	s0,0(sp)
    9fe00ee2:	f2078553          	fmv.d.x	fa0,a5
    9fe00ee6:	0141                	addi	sp,sp,16
    9fe00ee8:	8082                	ret
    9fe00eea:	f20607d3          	fmv.d.x	fa5,a2
    9fe00eee:	f2068753          	fmv.d.x	fa4,a3
    9fe00ef2:	02e7f7d3          	fadd.d	fa5,fa5,fa4
    9fe00ef6:	22f78553          	fmv.d	fa0,fa5
    9fe00efa:	8082                	ret
    9fe00efc:	01156533          	or	a0,a0,a7
    9fe00f00:	2501                	sext.w	a0,a0
    9fe00f02:	c93d                	beqz	a0,9fe00f78 <__ieee754_atan2+0x136>
    9fe00f04:	0b088063          	beq	a7,a6,9fe00fa4 <__ieee754_atan2+0x162>
    9fe00f08:	070f8863          	beq	t6,a6,9fe00f78 <__ieee754_atan2+0x136>
    9fe00f0c:	411f873b          	subw	a4,t6,a7
    9fe00f10:	4147571b          	sraiw	a4,a4,0x14
    9fe00f14:	03c00793          	li	a5,60
    9fe00f18:	08e7c163          	blt	a5,a4,9fe00f9a <__ieee754_atan2+0x158>
    9fe00f1c:	0005d863          	bgez	a1,9fe00f2c <__ieee754_atan2+0xea>
    9fe00f20:	fc400593          	li	a1,-60
    9fe00f24:	00000793          	li	a5,0
    9fe00f28:	00b74e63          	blt	a4,a1,9fe00f44 <__ieee754_atan2+0x102>
    9fe00f2c:	f20687d3          	fmv.d.x	fa5,a3
    9fe00f30:	f2060753          	fmv.d.x	fa4,a2
    9fe00f34:	1ae7f553          	fdiv.d	fa0,fa5,fa4
    9fe00f38:	a11ff0ef          	jal	ra,9fe00948 <fabs>
    9fe00f3c:	e54ff0ef          	jal	ra,9fe00590 <atan>
    9fe00f40:	e20507d3          	fmv.x.d	a5,fa0
    9fe00f44:	4705                	li	a4,1
    9fe00f46:	0ae40563          	beq	s0,a4,9fe00ff0 <__ieee754_atan2+0x1ae>
    9fe00f4a:	4709                	li	a4,2
    9fe00f4c:	08e40163          	beq	s0,a4,9fe00fce <__ieee754_atan2+0x18c>
    9fe00f50:	d459                	beqz	s0,9fe00ede <__ieee754_atan2+0x9c>
    9fe00f52:	f2078753          	fmv.d.x	fa4,a5
    9fe00f56:	00011717          	auipc	a4,0x11
    9fe00f5a:	5ba73787          	fld	fa5,1466(a4) # 9fe12510 <xISRStackTop+0xc0>
    9fe00f5e:	0af777d3          	fsub.d	fa5,fa4,fa5
    9fe00f62:	00011797          	auipc	a5,0x11
    9fe00f66:	59e7b707          	fld	fa4,1438(a5) # 9fe12500 <xISRStackTop+0xb0>
    9fe00f6a:	0ae7f7d3          	fsub.d	fa5,fa5,fa4
    9fe00f6e:	e20787d3          	fmv.x.d	a5,fa5
    9fe00f72:	b7b5                	j	9fe00ede <__ieee754_atan2+0x9c>
    9fe00f74:	e1cff06f          	j	9fe00590 <atan>
    9fe00f78:	000e4c63          	bltz	t3,9fe00f90 <__ieee754_atan2+0x14e>
    9fe00f7c:	00011797          	auipc	a5,0x11
    9fe00f80:	44c7b783          	ld	a5,1100(a5) # 9fe123c8 <__func__.1+0x210>
    9fe00f84:	bfa9                	j	9fe00ede <__ieee754_atan2+0x9c>
    9fe00f86:	00011797          	auipc	a5,0x11
    9fe00f8a:	57a7b783          	ld	a5,1402(a5) # 9fe12500 <xISRStackTop+0xb0>
    9fe00f8e:	bf81                	j	9fe00ede <__ieee754_atan2+0x9c>
    9fe00f90:	00011797          	auipc	a5,0x11
    9fe00f94:	4c87b783          	ld	a5,1224(a5) # 9fe12458 <xISRStackTop+0x8>
    9fe00f98:	b799                	j	9fe00ede <__ieee754_atan2+0x9c>
    9fe00f9a:	00011797          	auipc	a5,0x11
    9fe00f9e:	42e7b783          	ld	a5,1070(a5) # 9fe123c8 <__func__.1+0x210>
    9fe00fa2:	b74d                	j	9fe00f44 <__ieee754_atan2+0x102>
    9fe00fa4:	347d                	addiw	s0,s0,-1
    9fe00fa6:	0004069b          	sext.w	a3,s0
    9fe00faa:	051f8e63          	beq	t6,a7,9fe01006 <__ieee754_atan2+0x1c4>
    9fe00fae:	4709                	li	a4,2
    9fe00fb0:	00000793          	li	a5,0
    9fe00fb4:	f2d765e3          	bltu	a4,a3,9fe00ede <__ieee754_atan2+0x9c>
    9fe00fb8:	02041793          	slli	a5,s0,0x20
    9fe00fbc:	01d7d413          	srli	s0,a5,0x1d
    9fe00fc0:	00010797          	auipc	a5,0x10
    9fe00fc4:	a1878793          	addi	a5,a5,-1512 # 9fe109d8 <CSWTCH.8>
    9fe00fc8:	943e                	add	s0,s0,a5
    9fe00fca:	6c1c                	ld	a5,24(s0)
    9fe00fcc:	bf09                	j	9fe00ede <__ieee754_atan2+0x9c>
    9fe00fce:	f2078753          	fmv.d.x	fa4,a5
    9fe00fd2:	00011717          	auipc	a4,0x11
    9fe00fd6:	53e73787          	fld	fa5,1342(a4) # 9fe12510 <xISRStackTop+0xc0>
    9fe00fda:	0af777d3          	fsub.d	fa5,fa4,fa5
    9fe00fde:	00011797          	auipc	a5,0x11
    9fe00fe2:	5227b707          	fld	fa4,1314(a5) # 9fe12500 <xISRStackTop+0xb0>
    9fe00fe6:	0af777d3          	fsub.d	fa5,fa4,fa5
    9fe00fea:	e20787d3          	fmv.x.d	a5,fa5
    9fe00fee:	bdc5                	j	9fe00ede <__ieee754_atan2+0x9c>
    9fe00ff0:	0207d713          	srli	a4,a5,0x20
    9fe00ff4:	800006b7          	lui	a3,0x80000
    9fe00ff8:	8f35                	xor	a4,a4,a3
    9fe00ffa:	56fd                	li	a3,-1
    9fe00ffc:	9281                	srli	a3,a3,0x20
    9fe00ffe:	1702                	slli	a4,a4,0x20
    9fe01000:	8ff5                	and	a5,a5,a3
    9fe01002:	8fd9                	or	a5,a5,a4
    9fe01004:	bde9                	j	9fe00ede <__ieee754_atan2+0x9c>
    9fe01006:	4789                	li	a5,2
    9fe01008:	00d7ed63          	bltu	a5,a3,9fe01022 <__ieee754_atan2+0x1e0>
    9fe0100c:	02041793          	slli	a5,s0,0x20
    9fe01010:	01d7d413          	srli	s0,a5,0x1d
    9fe01014:	00010797          	auipc	a5,0x10
    9fe01018:	9c478793          	addi	a5,a5,-1596 # 9fe109d8 <CSWTCH.8>
    9fe0101c:	943e                	add	s0,s0,a5
    9fe0101e:	601c                	ld	a5,0(s0)
    9fe01020:	bd7d                	j	9fe00ede <__ieee754_atan2+0x9c>
    9fe01022:	00011797          	auipc	a5,0x11
    9fe01026:	4e67b783          	ld	a5,1254(a5) # 9fe12508 <xISRStackTop+0xb8>
    9fe0102a:	bd55                	j	9fe00ede <__ieee754_atan2+0x9c>

000000009fe0102c <__ieee754_exp>:
    9fe0102c:	e20507d3          	fmv.x.d	a5,fa0
    9fe01030:	40863637          	lui	a2,0x40863
    9fe01034:	e4160613          	addi	a2,a2,-447 # 40862e41 <CVIMMAP_DRAM_SIZE+0x20862e41>
    9fe01038:	4207d693          	srai	a3,a5,0x20
    9fe0103c:	02169713          	slli	a4,a3,0x21
    9fe01040:	9305                	srli	a4,a4,0x21
    9fe01042:	03f7d513          	srli	a0,a5,0x3f
    9fe01046:	0007a593          	slti	a1,a5,0
    9fe0104a:	02e67463          	bgeu	a2,a4,9fe01072 <__ieee754_exp+0x46>
    9fe0104e:	7ff00637          	lui	a2,0x7ff00
    9fe01052:	0ac76763          	bltu	a4,a2,9fe01100 <__ieee754_exp+0xd4>
    9fe01056:	02c69713          	slli	a4,a3,0x2c
    9fe0105a:	9331                	srli	a4,a4,0x2c
    9fe0105c:	8f5d                	or	a4,a4,a5
    9fe0105e:	2701                	sext.w	a4,a4
    9fe01060:	1e071963          	bnez	a4,9fe01252 <__ieee754_exp+0x226>
    9fe01064:	00000713          	li	a4,0
    9fe01068:	1a059f63          	bnez	a1,9fe01226 <__ieee754_exp+0x1fa>
    9fe0106c:	e2050753          	fmv.x.d	a4,fa0
    9fe01070:	aa5d                	j	9fe01226 <__ieee754_exp+0x1fa>
    9fe01072:	3fd636b7          	lui	a3,0x3fd63
    9fe01076:	e4268693          	addi	a3,a3,-446 # 3fd62e42 <CVIMMAP_DRAM_SIZE+0x1fd62e42>
    9fe0107a:	0ee6e663          	bltu	a3,a4,9fe01166 <__ieee754_exp+0x13a>
    9fe0107e:	3e3006b7          	lui	a3,0x3e300
    9fe01082:	1ad76563          	bltu	a4,a3,9fe0122c <__ieee754_exp+0x200>
    9fe01086:	00011717          	auipc	a4,0x11
    9fe0108a:	24a73707          	fld	fa4,586(a4) # 9fe122d0 <__func__.1+0x118>
    9fe0108e:	f20787d3          	fmv.d.x	fa5,a5
    9fe01092:	00011717          	auipc	a4,0x11
    9fe01096:	49e73687          	fld	fa3,1182(a4) # 9fe12530 <xISRStackTop+0xe0>
    9fe0109a:	00011717          	auipc	a4,0x11
    9fe0109e:	49e73007          	fld	ft0,1182(a4) # 9fe12538 <xISRStackTop+0xe8>
    9fe010a2:	12f7f7d3          	fmul.d	fa5,fa5,fa5
    9fe010a6:	00011717          	auipc	a4,0x11
    9fe010aa:	49a73507          	fld	fa0,1178(a4) # 9fe12540 <xISRStackTop+0xf0>
    9fe010ae:	00011717          	auipc	a4,0x11
    9fe010b2:	49a73587          	fld	fa1,1178(a4) # 9fe12548 <xISRStackTop+0xf8>
    9fe010b6:	00011717          	auipc	a4,0x11
    9fe010ba:	49a73607          	fld	fa2,1178(a4) # 9fe12550 <xISRStackTop+0x100>
    9fe010be:	02d7f6c3          	fmadd.d	fa3,fa5,fa3,ft0
    9fe010c2:	52d7f6c3          	fmadd.d	fa3,fa5,fa3,fa0
    9fe010c6:	5ad7f6c3          	fmadd.d	fa3,fa5,fa3,fa1
    9fe010ca:	62d7f6c3          	fmadd.d	fa3,fa5,fa3,fa2
    9fe010ce:	f2078653          	fmv.d.x	fa2,a5
    9fe010d2:	62d7f7cb          	fnmsub.d	fa5,fa5,fa3,fa2
    9fe010d6:	12f676d3          	fmul.d	fa3,fa2,fa5
    9fe010da:	00011717          	auipc	a4,0x11
    9fe010de:	38e73607          	fld	fa2,910(a4) # 9fe12468 <xISRStackTop+0x18>
    9fe010e2:	0ac7f7d3          	fsub.d	fa5,fa5,fa2
    9fe010e6:	1af6f7d3          	fdiv.d	fa5,fa3,fa5
    9fe010ea:	f20786d3          	fmv.d.x	fa3,a5
    9fe010ee:	0ad7f7d3          	fsub.d	fa5,fa5,fa3
    9fe010f2:	0af777d3          	fsub.d	fa5,fa4,fa5
    9fe010f6:	e2078753          	fmv.x.d	a4,fa5
    9fe010fa:	f2070553          	fmv.d.x	fa0,a4
    9fe010fe:	8082                	ret
    9fe01100:	00011717          	auipc	a4,0x11
    9fe01104:	3e073787          	fld	fa5,992(a4) # 9fe124e0 <xISRStackTop+0x90>
    9fe01108:	a2a79753          	flt.d	a4,fa5,fa0
    9fe0110c:	14071a63          	bnez	a4,9fe01260 <__ieee754_exp+0x234>
    9fe01110:	00011717          	auipc	a4,0x11
    9fe01114:	3d873787          	fld	fa5,984(a4) # 9fe124e8 <xISRStackTop+0x98>
    9fe01118:	a2f516d3          	flt.d	a3,fa0,fa5
    9fe0111c:	00000713          	li	a4,0
    9fe01120:	10069363          	bnez	a3,9fe01226 <__ieee754_exp+0x1fa>
    9fe01124:	00010717          	auipc	a4,0x10
    9fe01128:	8e470713          	addi	a4,a4,-1820 # 9fe10a08 <ln2HI>
    9fe0112c:	058e                	slli	a1,a1,0x3
    9fe0112e:	95ba                	add	a1,a1,a4
    9fe01130:	f2078753          	fmv.d.x	fa4,a5
    9fe01134:	3194                	fld	fa3,32(a1)
    9fe01136:	00011717          	auipc	a4,0x11
    9fe0113a:	3e273787          	fld	fa5,994(a4) # 9fe12518 <xISRStackTop+0xc8>
    9fe0113e:	00011717          	auipc	a4,0x11
    9fe01142:	3e273587          	fld	fa1,994(a4) # 9fe12520 <xISRStackTop+0xd0>
    9fe01146:	6af777c3          	fmadd.d	fa5,fa4,fa5,fa3
    9fe0114a:	00011717          	auipc	a4,0x11
    9fe0114e:	3de73687          	fld	fa3,990(a4) # 9fe12528 <xISRStackTop+0xd8>
    9fe01152:	c2079753          	fcvt.w.d	a4,fa5,rtz
    9fe01156:	d20707d3          	fcvt.d.w	fa5,a4
    9fe0115a:	2701                	sext.w	a4,a4
    9fe0115c:	72b7f5cb          	fnmsub.d	fa1,fa5,fa1,fa4
    9fe01160:	12d7f753          	fmul.d	fa4,fa5,fa3
    9fe01164:	a025                	j	9fe0118c <__ieee754_exp+0x160>
    9fe01166:	3ff0a6b7          	lui	a3,0x3ff0a
    9fe0116a:	2b168693          	addi	a3,a3,689 # 3ff0a2b1 <CVIMMAP_DRAM_SIZE+0x1ff0a2b1>
    9fe0116e:	fae6ebe3          	bltu	a3,a4,9fe01124 <__ieee754_exp+0xf8>
    9fe01172:	00010717          	auipc	a4,0x10
    9fe01176:	89670713          	addi	a4,a4,-1898 # 9fe10a08 <ln2HI>
    9fe0117a:	058e                	slli	a1,a1,0x3
    9fe0117c:	95ba                	add	a1,a1,a4
    9fe0117e:	2198                	fld	fa4,0(a1)
    9fe01180:	4705                	li	a4,1
    9fe01182:	9f09                	subw	a4,a4,a0
    9fe01184:	0ae575d3          	fsub.d	fa1,fa0,fa4
    9fe01188:	2998                	fld	fa4,16(a1)
    9fe0118a:	9f09                	subw	a4,a4,a0
    9fe0118c:	0ae5f7d3          	fsub.d	fa5,fa1,fa4
    9fe01190:	00011697          	auipc	a3,0x11
    9fe01194:	3a86b087          	fld	ft1,936(a3) # 9fe12538 <xISRStackTop+0xe8>
    9fe01198:	00011697          	auipc	a3,0x11
    9fe0119c:	3a86b007          	fld	ft0,936(a3) # 9fe12540 <xISRStackTop+0xf0>
    9fe011a0:	00011697          	auipc	a3,0x11
    9fe011a4:	3a86b507          	fld	fa0,936(a3) # 9fe12548 <xISRStackTop+0xf8>
    9fe011a8:	00011697          	auipc	a3,0x11
    9fe011ac:	3a86b607          	fld	fa2,936(a3) # 9fe12550 <xISRStackTop+0x100>
    9fe011b0:	e20787d3          	fmv.x.d	a5,fa5
    9fe011b4:	00011697          	auipc	a3,0x11
    9fe011b8:	37c6b787          	fld	fa5,892(a3) # 9fe12530 <xISRStackTop+0xe0>
    9fe011bc:	f20786d3          	fmv.d.x	fa3,a5
    9fe011c0:	12d6f6d3          	fmul.d	fa3,fa3,fa3
    9fe011c4:	0af6f7c3          	fmadd.d	fa5,fa3,fa5,ft1
    9fe011c8:	02d7f7c3          	fmadd.d	fa5,fa5,fa3,ft0
    9fe011cc:	52d7f7c3          	fmadd.d	fa5,fa5,fa3,fa0
    9fe011d0:	62d7f7c3          	fmadd.d	fa5,fa5,fa3,fa2
    9fe011d4:	f2078653          	fmv.d.x	fa2,a5
    9fe011d8:	62d7f7cb          	fnmsub.d	fa5,fa5,fa3,fa2
    9fe011dc:	12f676d3          	fmul.d	fa3,fa2,fa5
    9fe011e0:	c361                	beqz	a4,9fe012a0 <__ieee754_exp+0x274>
    9fe011e2:	00011797          	auipc	a5,0x11
    9fe011e6:	2867b607          	fld	fa2,646(a5) # 9fe12468 <xISRStackTop+0x18>
    9fe011ea:	0af677d3          	fsub.d	fa5,fa2,fa5
    9fe011ee:	00011797          	auipc	a5,0x11
    9fe011f2:	0e27b607          	fld	fa2,226(a5) # 9fe122d0 <__func__.1+0x118>
    9fe011f6:	c0300613          	li	a2,-1021
    9fe011fa:	1af6f6d3          	fdiv.d	fa3,fa3,fa5
    9fe011fe:	0ad77753          	fsub.d	fa4,fa4,fa3
    9fe01202:	0ab77753          	fsub.d	fa4,fa4,fa1
    9fe01206:	0ae677d3          	fsub.d	fa5,fa2,fa4
    9fe0120a:	e20786d3          	fmv.x.d	a3,fa5
    9fe0120e:	4206d593          	srai	a1,a3,0x20
    9fe01212:	06c74063          	blt	a4,a2,9fe01272 <__ieee754_exp+0x246>
    9fe01216:	0147179b          	slliw	a5,a4,0x14
    9fe0121a:	577d                	li	a4,-1
    9fe0121c:	9fad                	addw	a5,a5,a1
    9fe0121e:	9301                	srli	a4,a4,0x20
    9fe01220:	1782                	slli	a5,a5,0x20
    9fe01222:	8f75                	and	a4,a4,a3
    9fe01224:	8f5d                	or	a4,a4,a5
    9fe01226:	f2070553          	fmv.d.x	fa0,a4
    9fe0122a:	8082                	ret
    9fe0122c:	00011717          	auipc	a4,0x11
    9fe01230:	23473787          	fld	fa5,564(a4) # 9fe12460 <xISRStackTop+0x10>
    9fe01234:	02f577d3          	fadd.d	fa5,fa0,fa5
    9fe01238:	00011717          	auipc	a4,0x11
    9fe0123c:	09873707          	fld	fa4,152(a4) # 9fe122d0 <__func__.1+0x118>
    9fe01240:	a2f71753          	flt.d	a4,fa4,fa5
    9fe01244:	e40705e3          	beqz	a4,9fe0108e <__ieee754_exp+0x62>
    9fe01248:	02e577d3          	fadd.d	fa5,fa0,fa4
    9fe0124c:	e2078753          	fmv.x.d	a4,fa5
    9fe01250:	bfd9                	j	9fe01226 <__ieee754_exp+0x1fa>
    9fe01252:	02a577d3          	fadd.d	fa5,fa0,fa0
    9fe01256:	e2078753          	fmv.x.d	a4,fa5
    9fe0125a:	f2070553          	fmv.d.x	fa0,a4
    9fe0125e:	8082                	ret
    9fe01260:	00011797          	auipc	a5,0x11
    9fe01264:	2007b787          	fld	fa5,512(a5) # 9fe12460 <xISRStackTop+0x10>
    9fe01268:	12f7f7d3          	fmul.d	fa5,fa5,fa5
    9fe0126c:	e2078753          	fmv.x.d	a4,fa5
    9fe01270:	bf5d                	j	9fe01226 <__ieee754_exp+0x1fa>
    9fe01272:	3e87079b          	addiw	a5,a4,1000
    9fe01276:	0147979b          	slliw	a5,a5,0x14
    9fe0127a:	577d                	li	a4,-1
    9fe0127c:	9fad                	addw	a5,a5,a1
    9fe0127e:	9301                	srli	a4,a4,0x20
    9fe01280:	1782                	slli	a5,a5,0x20
    9fe01282:	8f75                	and	a4,a4,a3
    9fe01284:	8f5d                	or	a4,a4,a5
    9fe01286:	f2070753          	fmv.d.x	fa4,a4
    9fe0128a:	00011797          	auipc	a5,0x11
    9fe0128e:	2ce7b787          	fld	fa5,718(a5) # 9fe12558 <xISRStackTop+0x108>
    9fe01292:	12e7f7d3          	fmul.d	fa5,fa5,fa4
    9fe01296:	e2078753          	fmv.x.d	a4,fa5
    9fe0129a:	f2070553          	fmv.d.x	fa0,a4
    9fe0129e:	8082                	ret
    9fe012a0:	00011717          	auipc	a4,0x11
    9fe012a4:	03073707          	fld	fa4,48(a4) # 9fe122d0 <__func__.1+0x118>
    9fe012a8:	bd0d                	j	9fe010da <__ieee754_exp+0xae>

000000009fe012aa <__ieee754_log>:
    9fe012aa:	e20507d3          	fmv.x.d	a5,fa0
    9fe012ae:	00100637          	lui	a2,0x100
    9fe012b2:	4207d713          	srai	a4,a5,0x20
    9fe012b6:	0cc75563          	bge	a4,a2,9fe01380 <__ieee754_log+0xd6>
    9fe012ba:	02171693          	slli	a3,a4,0x21
    9fe012be:	9285                	srli	a3,a3,0x21
    9fe012c0:	8edd                	or	a3,a3,a5
    9fe012c2:	2681                	sext.w	a3,a3
    9fe012c4:	18068363          	beqz	a3,9fe0144a <__ieee754_log+0x1a0>
    9fe012c8:	20074163          	bltz	a4,9fe014ca <__ieee754_log+0x220>
    9fe012cc:	00011717          	auipc	a4,0x11
    9fe012d0:	29c73787          	fld	fa5,668(a4) # 9fe12568 <xISRStackTop+0x118>
    9fe012d4:	12f577d3          	fmul.d	fa5,fa0,fa5
    9fe012d8:	7ff006b7          	lui	a3,0x7ff00
    9fe012dc:	fca00313          	li	t1,-54
    9fe012e0:	e20787d3          	fmv.x.d	a5,fa5
    9fe012e4:	4207d713          	srai	a4,a5,0x20
    9fe012e8:	0ad75163          	bge	a4,a3,9fe0138a <__ieee754_log+0xe0>
    9fe012ec:	00100637          	lui	a2,0x100
    9fe012f0:	fff60893          	addi	a7,a2,-1 # fffff <CVIMMAP_ATF_SIZE+0x7ffff>
    9fe012f4:	000966b7          	lui	a3,0x96
    9fe012f8:	01177833          	and	a6,a4,a7
    9fe012fc:	f646869b          	addiw	a3,a3,-156
    9fe01300:	00d806bb          	addw	a3,a6,a3
    9fe01304:	8ef1                	and	a3,a3,a2
    9fe01306:	3ff005b7          	lui	a1,0x3ff00
    9fe0130a:	8db5                	xor	a1,a1,a3
    9fe0130c:	567d                	li	a2,-1
    9fe0130e:	9201                	srli	a2,a2,0x20
    9fe01310:	00b865b3          	or	a1,a6,a1
    9fe01314:	1582                	slli	a1,a1,0x20
    9fe01316:	8ff1                	and	a5,a5,a2
    9fe01318:	8fcd                	or	a5,a5,a1
    9fe0131a:	4147571b          	sraiw	a4,a4,0x14
    9fe0131e:	0028051b          	addiw	a0,a6,2
    9fe01322:	f2078753          	fmv.d.x	fa4,a5
    9fe01326:	c017071b          	addiw	a4,a4,-1023
    9fe0132a:	0067073b          	addw	a4,a4,t1
    9fe0132e:	01157633          	and	a2,a0,a7
    9fe01332:	4146d69b          	sraiw	a3,a3,0x14
    9fe01336:	00e685bb          	addw	a1,a3,a4
    9fe0133a:	2601                	sext.w	a2,a2
    9fe0133c:	00011717          	auipc	a4,0x11
    9fe01340:	f9473787          	fld	fa5,-108(a4) # 9fe122d0 <__func__.1+0x118>
    9fe01344:	4509                	li	a0,2
    9fe01346:	0af777d3          	fsub.d	fa5,fa4,fa5
    9fe0134a:	04c54563          	blt	a0,a2,9fe01394 <__ieee754_log+0xea>
    9fe0134e:	f2000753          	fmv.d.x	fa4,zero
    9fe01352:	a2e7a7d3          	feq.d	a5,fa5,fa4
    9fe01356:	10078363          	beqz	a5,9fe0145c <__ieee754_log+0x1b2>
    9fe0135a:	22e70553          	fmv.d	fa0,fa4
    9fe0135e:	16058563          	beqz	a1,9fe014c8 <__ieee754_log+0x21e>
    9fe01362:	d20587d3          	fcvt.d.w	fa5,a1
    9fe01366:	00011797          	auipc	a5,0x11
    9fe0136a:	1c27b507          	fld	fa0,450(a5) # 9fe12528 <xISRStackTop+0xd8>
    9fe0136e:	00011797          	auipc	a5,0x11
    9fe01372:	1b27b707          	fld	fa4,434(a5) # 9fe12520 <xISRStackTop+0xd0>
    9fe01376:	12a7f553          	fmul.d	fa0,fa5,fa0
    9fe0137a:	52e7f543          	fmadd.d	fa0,fa5,fa4,fa0
    9fe0137e:	8082                	ret
    9fe01380:	7ff006b7          	lui	a3,0x7ff00
    9fe01384:	4301                	li	t1,0
    9fe01386:	f6d743e3          	blt	a4,a3,9fe012ec <__ieee754_log+0x42>
    9fe0138a:	f20787d3          	fmv.d.x	fa5,a5
    9fe0138e:	02f7f553          	fadd.d	fa0,fa5,fa5
    9fe01392:	8082                	ret
    9fe01394:	00011797          	auipc	a5,0x11
    9fe01398:	0d47b507          	fld	fa0,212(a5) # 9fe12468 <xISRStackTop+0x18>
    9fe0139c:	02a7f553          	fadd.d	fa0,fa5,fa0
    9fe013a0:	00011797          	auipc	a5,0x11
    9fe013a4:	1f07b687          	fld	fa3,496(a5) # 9fe12590 <xISRStackTop+0x140>
    9fe013a8:	00011797          	auipc	a5,0x11
    9fe013ac:	1f07b207          	fld	ft4,496(a5) # 9fe12598 <xISRStackTop+0x148>
    9fe013b0:	00011797          	auipc	a5,0x11
    9fe013b4:	1f07b107          	fld	ft2,496(a5) # 9fe125a0 <xISRStackTop+0x150>
    9fe013b8:	00011797          	auipc	a5,0x11
    9fe013bc:	1c07b707          	fld	fa4,448(a5) # 9fe12578 <xISRStackTop+0x128>
    9fe013c0:	00011797          	auipc	a5,0x11
    9fe013c4:	1c07b187          	fld	ft3,448(a5) # 9fe12580 <xISRStackTop+0x130>
    9fe013c8:	00011797          	auipc	a5,0x11
    9fe013cc:	1e07b007          	fld	ft0,480(a5) # 9fe125a8 <xISRStackTop+0x158>
    9fe013d0:	1aa7f553          	fdiv.d	fa0,fa5,fa0
    9fe013d4:	00011797          	auipc	a5,0x11
    9fe013d8:	1b47b087          	fld	ft1,436(a5) # 9fe12588 <xISRStackTop+0x138>
    9fe013dc:	fff9f637          	lui	a2,0xfff9f
    9fe013e0:	0006c7b7          	lui	a5,0x6c
    9fe013e4:	b866061b          	addiw	a2,a2,-1146
    9fe013e8:	8517879b          	addiw	a5,a5,-1967
    9fe013ec:	0106063b          	addw	a2,a2,a6
    9fe013f0:	4107883b          	subw	a6,a5,a6
    9fe013f4:	01066633          	or	a2,a2,a6
    9fe013f8:	2601                	sext.w	a2,a2
    9fe013fa:	d20582d3          	fcvt.d.w	ft5,a1
    9fe013fe:	12a575d3          	fmul.d	fa1,fa0,fa0
    9fe01402:	12b5f653          	fmul.d	fa2,fa1,fa1
    9fe01406:	22d676c3          	fmadd.d	fa3,fa2,fa3,ft4
    9fe0140a:	1ae67743          	fmadd.d	fa4,fa2,fa4,ft3
    9fe0140e:	12c6f6c3          	fmadd.d	fa3,fa3,fa2,ft2
    9fe01412:	0ac77743          	fmadd.d	fa4,fa4,fa2,ft1
    9fe01416:	02c6f6c3          	fmadd.d	fa3,fa3,fa2,ft0
    9fe0141a:	12b6f6d3          	fmul.d	fa3,fa3,fa1
    9fe0141e:	6ac77743          	fmadd.d	fa4,fa4,fa2,fa3
    9fe01422:	06c05d63          	blez	a2,9fe0149c <__ieee754_log+0x1f2>
    9fe01426:	00011797          	auipc	a5,0x11
    9fe0142a:	e327b687          	fld	fa3,-462(a5) # 9fe12258 <__func__.1+0xa0>
    9fe0142e:	12d7f6d3          	fmul.d	fa3,fa5,fa3
    9fe01432:	12f6f6d3          	fmul.d	fa3,fa3,fa5
    9fe01436:	02d77753          	fadd.d	fa4,fa4,fa3
    9fe0143a:	12a77753          	fmul.d	fa4,fa4,fa0
    9fe0143e:	edc9                	bnez	a1,9fe014d8 <__ieee754_log+0x22e>
    9fe01440:	0ae6f553          	fsub.d	fa0,fa3,fa4
    9fe01444:	0aa7f553          	fsub.d	fa0,fa5,fa0
    9fe01448:	8082                	ret
    9fe0144a:	f2000553          	fmv.d.x	fa0,zero
    9fe0144e:	00011797          	auipc	a5,0x11
    9fe01452:	1127b787          	fld	fa5,274(a5) # 9fe12560 <xISRStackTop+0x110>
    9fe01456:	1aa7f553          	fdiv.d	fa0,fa5,fa0
    9fe0145a:	8082                	ret
    9fe0145c:	00011797          	auipc	a5,0x11
    9fe01460:	1147b707          	fld	fa4,276(a5) # 9fe12570 <xISRStackTop+0x120>
    9fe01464:	00011797          	auipc	a5,0x11
    9fe01468:	df47b687          	fld	fa3,-524(a5) # 9fe12258 <__func__.1+0xa0>
    9fe0146c:	12f7f553          	fmul.d	fa0,fa5,fa5
    9fe01470:	6ae7f74b          	fnmsub.d	fa4,fa5,fa4,fa3
    9fe01474:	12e57553          	fmul.d	fa0,fa0,fa4
    9fe01478:	d5f1                	beqz	a1,9fe01444 <__ieee754_log+0x19a>
    9fe0147a:	d20586d3          	fcvt.d.w	fa3,a1
    9fe0147e:	00011797          	auipc	a5,0x11
    9fe01482:	0aa7b707          	fld	fa4,170(a5) # 9fe12528 <xISRStackTop+0xd8>
    9fe01486:	00011797          	auipc	a5,0x11
    9fe0148a:	09a7b607          	fld	fa2,154(a5) # 9fe12520 <xISRStackTop+0xd0>
    9fe0148e:	52e6f54b          	fnmsub.d	fa0,fa3,fa4,fa0
    9fe01492:	0af57553          	fsub.d	fa0,fa0,fa5
    9fe01496:	52c6f547          	fmsub.d	fa0,fa3,fa2,fa0
    9fe0149a:	8082                	ret
    9fe0149c:	0ae7f753          	fsub.d	fa4,fa5,fa4
    9fe014a0:	12a77753          	fmul.d	fa4,fa4,fa0
    9fe014a4:	e581                	bnez	a1,9fe014ac <__ieee754_log+0x202>
    9fe014a6:	0ae7f553          	fsub.d	fa0,fa5,fa4
    9fe014aa:	8082                	ret
    9fe014ac:	00011797          	auipc	a5,0x11
    9fe014b0:	07c7b507          	fld	fa0,124(a5) # 9fe12528 <xISRStackTop+0xd8>
    9fe014b4:	72a2f54b          	fnmsub.d	fa0,ft5,fa0,fa4
    9fe014b8:	00011797          	auipc	a5,0x11
    9fe014bc:	0687b707          	fld	fa4,104(a5) # 9fe12520 <xISRStackTop+0xd0>
    9fe014c0:	0af57553          	fsub.d	fa0,fa0,fa5
    9fe014c4:	52e2f547          	fmsub.d	fa0,ft5,fa4,fa0
    9fe014c8:	8082                	ret
    9fe014ca:	0aa577d3          	fsub.d	fa5,fa0,fa0
    9fe014ce:	f2000553          	fmv.d.x	fa0,zero
    9fe014d2:	1aa7f553          	fdiv.d	fa0,fa5,fa0
    9fe014d6:	8082                	ret
    9fe014d8:	00011797          	auipc	a5,0x11
    9fe014dc:	0507b507          	fld	fa0,80(a5) # 9fe12528 <xISRStackTop+0xd8>
    9fe014e0:	72a2f543          	fmadd.d	fa0,ft5,fa0,fa4
    9fe014e4:	00011797          	auipc	a5,0x11
    9fe014e8:	03c7b607          	fld	fa2,60(a5) # 9fe12520 <xISRStackTop+0xd0>
    9fe014ec:	0aa6f553          	fsub.d	fa0,fa3,fa0
    9fe014f0:	0af57553          	fsub.d	fa0,fa0,fa5
    9fe014f4:	52c2f547          	fmsub.d	fa0,ft5,fa2,fa0
    9fe014f8:	8082                	ret

000000009fe014fa <__ieee754_pow>:
    9fe014fa:	711d                	addi	sp,sp,-96
    9fe014fc:	f852                	sd	s4,48(sp)
    9fe014fe:	e2058a53          	fmv.x.d	s4,fa1
    9fe01502:	800007b7          	lui	a5,0x80000
    9fe01506:	f456                	sd	s5,40(sp)
    9fe01508:	fff7c793          	not	a5,a5
    9fe0150c:	420a5a93          	srai	s5,s4,0x20
    9fe01510:	fc4e                	sd	s3,56(sp)
    9fe01512:	000a071b          	sext.w	a4,s4
    9fe01516:	00faf9b3          	and	s3,s5,a5
    9fe0151a:	ec86                	sd	ra,88(sp)
    9fe0151c:	e8a2                	sd	s0,80(sp)
    9fe0151e:	e4a6                	sd	s1,72(sp)
    9fe01520:	e0ca                	sd	s2,64(sp)
    9fe01522:	f05a                	sd	s6,32(sp)
    9fe01524:	ec5e                	sd	s7,24(sp)
    9fe01526:	e862                	sd	s8,16(sp)
    9fe01528:	a422                	fsd	fs0,8(sp)
    9fe0152a:	00e9e6b3          	or	a3,s3,a4
    9fe0152e:	c6c1                	beqz	a3,9fe015b6 <__ieee754_pow+0xbc>
    9fe01530:	e2050453          	fmv.x.d	s0,fa0
    9fe01534:	7ff00637          	lui	a2,0x7ff00
    9fe01538:	42045b13          	srai	s6,s0,0x20
    9fe0153c:	00fb74b3          	and	s1,s6,a5
    9fe01540:	8bda                	mv	s7,s6
    9fe01542:	0004091b          	sext.w	s2,s0
    9fe01546:	06964163          	blt	a2,s1,9fe015a8 <__ieee754_pow+0xae>
    9fe0154a:	08c48963          	beq	s1,a2,9fe015dc <__ieee754_pow+0xe2>
    9fe0154e:	05364d63          	blt	a2,s3,9fe015a8 <__ieee754_pow+0xae>
    9fe01552:	7ff007b7          	lui	a5,0x7ff00
    9fe01556:	04f98863          	beq	s3,a5,9fe015a6 <__ieee754_pow+0xac>
    9fe0155a:	4c01                	li	s8,0
    9fe0155c:	0a0b4663          	bltz	s6,9fe01608 <__ieee754_pow+0x10e>
    9fe01560:	ef71                	bnez	a4,9fe0163c <__ieee754_pow+0x142>
    9fe01562:	7ff007b7          	lui	a5,0x7ff00
    9fe01566:	12f98963          	beq	s3,a5,9fe01698 <__ieee754_pow+0x19e>
    9fe0156a:	3ff007b7          	lui	a5,0x3ff00
    9fe0156e:	14f98663          	beq	s3,a5,9fe016ba <__ieee754_pow+0x1c0>
    9fe01572:	400007b7          	lui	a5,0x40000
    9fe01576:	64fa8e63          	beq	s5,a5,9fe01bd2 <__ieee754_pow+0x6d8>
    9fe0157a:	3fe007b7          	lui	a5,0x3fe00
    9fe0157e:	0afa9f63          	bne	s5,a5,9fe0163c <__ieee754_pow+0x142>
    9fe01582:	0a0b4d63          	bltz	s6,9fe0163c <__ieee754_pow+0x142>
    9fe01586:	f2040553          	fmv.d.x	fa0,s0
    9fe0158a:	6446                	ld	s0,80(sp)
    9fe0158c:	60e6                	ld	ra,88(sp)
    9fe0158e:	64a6                	ld	s1,72(sp)
    9fe01590:	6906                	ld	s2,64(sp)
    9fe01592:	79e2                	ld	s3,56(sp)
    9fe01594:	7a42                	ld	s4,48(sp)
    9fe01596:	7aa2                	ld	s5,40(sp)
    9fe01598:	7b02                	ld	s6,32(sp)
    9fe0159a:	6be2                	ld	s7,24(sp)
    9fe0159c:	6c42                	ld	s8,16(sp)
    9fe0159e:	2422                	fld	fs0,8(sp)
    9fe015a0:	6125                	addi	sp,sp,96
    9fe015a2:	1930006f          	j	9fe01f34 <__ieee754_sqrt>
    9fe015a6:	db55                	beqz	a4,9fe0155a <__ieee754_pow+0x60>
    9fe015a8:	c01007b7          	lui	a5,0xc0100
    9fe015ac:	9fa5                	addw	a5,a5,s1
    9fe015ae:	00f967b3          	or	a5,s2,a5
    9fe015b2:	2781                	sext.w	a5,a5
    9fe015b4:	eb85                	bnez	a5,9fe015e4 <__ieee754_pow+0xea>
    9fe015b6:	00011717          	auipc	a4,0x11
    9fe015ba:	d1a73703          	ld	a4,-742(a4) # 9fe122d0 <__func__.1+0x118>
    9fe015be:	60e6                	ld	ra,88(sp)
    9fe015c0:	6446                	ld	s0,80(sp)
    9fe015c2:	64a6                	ld	s1,72(sp)
    9fe015c4:	6906                	ld	s2,64(sp)
    9fe015c6:	79e2                	ld	s3,56(sp)
    9fe015c8:	7a42                	ld	s4,48(sp)
    9fe015ca:	7aa2                	ld	s5,40(sp)
    9fe015cc:	7b02                	ld	s6,32(sp)
    9fe015ce:	6be2                	ld	s7,24(sp)
    9fe015d0:	6c42                	ld	s8,16(sp)
    9fe015d2:	2422                	fld	fs0,8(sp)
    9fe015d4:	f2070553          	fmv.d.x	fa0,a4
    9fe015d8:	6125                	addi	sp,sp,96
    9fe015da:	8082                	ret
    9fe015dc:	00091463          	bnez	s2,9fe015e4 <__ieee754_pow+0xea>
    9fe015e0:	f734d9e3          	bge	s1,s3,9fe01552 <__ieee754_pow+0x58>
    9fe015e4:	6446                	ld	s0,80(sp)
    9fe015e6:	60e6                	ld	ra,88(sp)
    9fe015e8:	64a6                	ld	s1,72(sp)
    9fe015ea:	6906                	ld	s2,64(sp)
    9fe015ec:	79e2                	ld	s3,56(sp)
    9fe015ee:	7a42                	ld	s4,48(sp)
    9fe015f0:	7aa2                	ld	s5,40(sp)
    9fe015f2:	7b02                	ld	s6,32(sp)
    9fe015f4:	6be2                	ld	s7,24(sp)
    9fe015f6:	6c42                	ld	s8,16(sp)
    9fe015f8:	2422                	fld	fs0,8(sp)
    9fe015fa:	00011517          	auipc	a0,0x11
    9fe015fe:	bb650513          	addi	a0,a0,-1098 # 9fe121b0 <__func__.0+0x30>
    9fe01602:	6125                	addi	sp,sp,96
    9fe01604:	4640106f          	j	9fe02a68 <nan>
    9fe01608:	434007b7          	lui	a5,0x43400
    9fe0160c:	12f9d163          	bge	s3,a5,9fe0172e <__ieee754_pow+0x234>
    9fe01610:	3ff007b7          	lui	a5,0x3ff00
    9fe01614:	02f9c363          	blt	s3,a5,9fe0163a <__ieee754_pow+0x140>
    9fe01618:	4149d79b          	sraiw	a5,s3,0x14
    9fe0161c:	c017861b          	addiw	a2,a5,-1023
    9fe01620:	46d1                	li	a3,20
    9fe01622:	5ac6df63          	bge	a3,a2,9fe01be0 <__ieee754_pow+0x6e6>
    9fe01626:	03400693          	li	a3,52
    9fe0162a:	40c687bb          	subw	a5,a3,a2
    9fe0162e:	00f756bb          	srlw	a3,a4,a5
    9fe01632:	00f697bb          	sllw	a5,a3,a5
    9fe01636:	0ee78563          	beq	a5,a4,9fe01720 <__ieee754_pow+0x226>
    9fe0163a:	db05                	beqz	a4,9fe0156a <__ieee754_pow+0x70>
    9fe0163c:	f2040553          	fmv.d.x	fa0,s0
    9fe01640:	b08ff0ef          	jal	ra,9fe00948 <fabs>
    9fe01644:	e2050753          	fmv.x.d	a4,fa0
    9fe01648:	00091a63          	bnez	s2,9fe0165c <__ieee754_pow+0x162>
    9fe0164c:	c8d1                	beqz	s1,9fe016e0 <__ieee754_pow+0x1e6>
    9fe0164e:	022b1793          	slli	a5,s6,0x22
    9fe01652:	9389                	srli	a5,a5,0x22
    9fe01654:	3ff006b7          	lui	a3,0x3ff00
    9fe01658:	08d78463          	beq	a5,a3,9fe016e0 <__ieee754_pow+0x1e6>
    9fe0165c:	01fbdb9b          	srliw	s7,s7,0x1f
    9fe01660:	3bfd                	addiw	s7,s7,-1
    9fe01662:	017c67b3          	or	a5,s8,s7
    9fe01666:	2781                	sext.w	a5,a5
    9fe01668:	cfe9                	beqz	a5,9fe01742 <__ieee754_pow+0x248>
    9fe0166a:	41e007b7          	lui	a5,0x41e00
    9fe0166e:	0f37d363          	bge	a5,s3,9fe01754 <__ieee754_pow+0x25a>
    9fe01672:	43f007b7          	lui	a5,0x43f00
    9fe01676:	4d37dd63          	bge	a5,s3,9fe01b50 <__ieee754_pow+0x656>
    9fe0167a:	3ff007b7          	lui	a5,0x3ff00
    9fe0167e:	04f4cc63          	blt	s1,a5,9fe016d6 <__ieee754_pow+0x1dc>
    9fe01682:	03505963          	blez	s5,9fe016b4 <__ieee754_pow+0x1ba>
    9fe01686:	00011797          	auipc	a5,0x11
    9fe0168a:	dda7b787          	fld	fa5,-550(a5) # 9fe12460 <xISRStackTop+0x10>
    9fe0168e:	12f7f7d3          	fmul.d	fa5,fa5,fa5
    9fe01692:	e2078753          	fmv.x.d	a4,fa5
    9fe01696:	b725                	j	9fe015be <__ieee754_pow+0xc4>
    9fe01698:	c01007b7          	lui	a5,0xc0100
    9fe0169c:	9fa5                	addw	a5,a5,s1
    9fe0169e:	00f967b3          	or	a5,s2,a5
    9fe016a2:	2781                	sext.w	a5,a5
    9fe016a4:	db89                	beqz	a5,9fe015b6 <__ieee754_pow+0xbc>
    9fe016a6:	3ff007b7          	lui	a5,0x3ff00
    9fe016aa:	46f4ce63          	blt	s1,a5,9fe01b26 <__ieee754_pow+0x62c>
    9fe016ae:	8752                	mv	a4,s4
    9fe016b0:	f00ad7e3          	bgez	s5,9fe015be <__ieee754_pow+0xc4>
    9fe016b4:	00000713          	li	a4,0
    9fe016b8:	b719                	j	9fe015be <__ieee754_pow+0xc4>
    9fe016ba:	8722                	mv	a4,s0
    9fe016bc:	f00ad1e3          	bgez	s5,9fe015be <__ieee754_pow+0xc4>
    9fe016c0:	f2040753          	fmv.d.x	fa4,s0
    9fe016c4:	00011797          	auipc	a5,0x11
    9fe016c8:	c0c7b787          	fld	fa5,-1012(a5) # 9fe122d0 <__func__.1+0x118>
    9fe016cc:	1ae7f7d3          	fdiv.d	fa5,fa5,fa4
    9fe016d0:	e2078753          	fmv.x.d	a4,fa5
    9fe016d4:	b5ed                	j	9fe015be <__ieee754_pow+0xc4>
    9fe016d6:	fa0ac8e3          	bltz	s5,9fe01686 <__ieee754_pow+0x18c>
    9fe016da:	00000713          	li	a4,0
    9fe016de:	b5c5                	j	9fe015be <__ieee754_pow+0xc4>
    9fe016e0:	020ac563          	bltz	s5,9fe0170a <__ieee754_pow+0x210>
    9fe016e4:	ec0b5de3          	bgez	s6,9fe015be <__ieee754_pow+0xc4>
    9fe016e8:	c01007b7          	lui	a5,0xc0100
    9fe016ec:	9fa5                	addw	a5,a5,s1
    9fe016ee:	00fc67b3          	or	a5,s8,a5
    9fe016f2:	2781                	sext.w	a5,a5
    9fe016f4:	52079963          	bnez	a5,9fe01c26 <__ieee754_pow+0x72c>
    9fe016f8:	f20707d3          	fmv.d.x	fa5,a4
    9fe016fc:	0af7f7d3          	fsub.d	fa5,fa5,fa5
    9fe01700:	1af7f7d3          	fdiv.d	fa5,fa5,fa5
    9fe01704:	e2078753          	fmv.x.d	a4,fa5
    9fe01708:	bd5d                	j	9fe015be <__ieee754_pow+0xc4>
    9fe0170a:	f2070753          	fmv.d.x	fa4,a4
    9fe0170e:	00011797          	auipc	a5,0x11
    9fe01712:	bc27b787          	fld	fa5,-1086(a5) # 9fe122d0 <__func__.1+0x118>
    9fe01716:	1ae7f7d3          	fdiv.d	fa5,fa5,fa4
    9fe0171a:	e2078753          	fmv.x.d	a4,fa5
    9fe0171e:	b7d9                	j	9fe016e4 <__ieee754_pow+0x1ea>
    9fe01720:	8a85                	andi	a3,a3,1
    9fe01722:	4c09                	li	s8,2
    9fe01724:	40dc0c3b          	subw	s8,s8,a3
    9fe01728:	e40701e3          	beqz	a4,9fe0156a <__ieee754_pow+0x70>
    9fe0172c:	bf01                	j	9fe0163c <__ieee754_pow+0x142>
    9fe0172e:	4c09                	li	s8,2
    9fe01730:	bd05                	j	9fe01560 <__ieee754_pow+0x66>
    9fe01732:	f2040553          	fmv.d.x	fa0,s0
    9fe01736:	a12ff0ef          	jal	ra,9fe00948 <fabs>
    9fe0173a:	e2050753          	fmv.x.d	a4,fa0
    9fe0173e:	f00907e3          	beqz	s2,9fe0164c <__ieee754_pow+0x152>
    9fe01742:	f20407d3          	fmv.d.x	fa5,s0
    9fe01746:	0af7f7d3          	fsub.d	fa5,fa5,fa5
    9fe0174a:	1af7f7d3          	fdiv.d	fa5,fa5,fa5
    9fe0174e:	e2078753          	fmv.x.d	a4,fa5
    9fe01752:	b5b5                	j	9fe015be <__ieee754_pow+0xc4>
    9fe01754:	7ff007b7          	lui	a5,0x7ff00
    9fe01758:	00fb7b33          	and	s6,s6,a5
    9fe0175c:	4681                	li	a3,0
    9fe0175e:	020b1063          	bnez	s6,9fe0177e <__ieee754_pow+0x284>
    9fe01762:	f2070753          	fmv.d.x	fa4,a4
    9fe01766:	00011797          	auipc	a5,0x11
    9fe0176a:	e6a7b787          	fld	fa5,-406(a5) # 9fe125d0 <xISRStackTop+0x180>
    9fe0176e:	fcb00693          	li	a3,-53
    9fe01772:	12f777d3          	fmul.d	fa5,fa4,fa5
    9fe01776:	e2078753          	fmv.x.d	a4,fa5
    9fe0177a:	42075493          	srai	s1,a4,0x20
    9fe0177e:	4144d61b          	sraiw	a2,s1,0x14
    9fe01782:	c016061b          	addiw	a2,a2,-1023
    9fe01786:	02c49793          	slli	a5,s1,0x2c
    9fe0178a:	0003a537          	lui	a0,0x3a
    9fe0178e:	00d605bb          	addw	a1,a2,a3
    9fe01792:	93b1                	srli	a5,a5,0x2c
    9fe01794:	3ff006b7          	lui	a3,0x3ff00
    9fe01798:	88e50513          	addi	a0,a0,-1906 # 3988e <_STACK_SIZE+0x1988e>
    9fe0179c:	8edd                	or	a3,a3,a5
    9fe0179e:	38f55d63          	bge	a0,a5,9fe01b38 <__ieee754_pow+0x63e>
    9fe017a2:	000bb537          	lui	a0,0xbb
    9fe017a6:	67950513          	addi	a0,a0,1657 # bb679 <CVIMMAP_ATF_SIZE+0x3b679>
    9fe017aa:	48f55863          	bge	a0,a5,9fe01c3a <__ieee754_pow+0x740>
    9fe017ae:	f20002d3          	fmv.d.x	ft5,zero
    9fe017b2:	00011797          	auipc	a5,0x11
    9fe017b6:	b1e7b587          	fld	fa1,-1250(a5) # 9fe122d0 <__func__.1+0x118>
    9fe017ba:	22b587d3          	fmv.d	fa5,fa1
    9fe017be:	22528853          	fmv.d	fa6,ft5
    9fe017c2:	fff007b7          	lui	a5,0xfff00
    9fe017c6:	2585                	addiw	a1,a1,1
    9fe017c8:	9ebd                	addw	a3,a3,a5
    9fe017ca:	4801                	li	a6,0
    9fe017cc:	557d                	li	a0,-1
    9fe017ce:	02055793          	srli	a5,a0,0x20
    9fe017d2:	02069613          	slli	a2,a3,0x20
    9fe017d6:	8ff9                	and	a5,a5,a4
    9fe017d8:	8fd1                	or	a5,a5,a2
    9fe017da:	f2078753          	fmv.d.x	fa4,a5
    9fe017de:	20000737          	lui	a4,0x20000
    9fe017e2:	4016d69b          	sraiw	a3,a3,0x1
    9fe017e6:	02e7f1d3          	fadd.d	ft3,fa5,fa4
    9fe017ea:	0af77253          	fsub.d	ft4,fa4,fa5
    9fe017ee:	00080637          	lui	a2,0x80
    9fe017f2:	8ed9                	or	a3,a3,a4
    9fe017f4:	9eb1                	addw	a3,a3,a2
    9fe017f6:	010686bb          	addw	a3,a3,a6
    9fe017fa:	1682                	slli	a3,a3,0x20
    9fe017fc:	1a35f1d3          	fdiv.d	ft3,fa1,ft3
    9fe01800:	f2068753          	fmv.d.x	fa4,a3
    9fe01804:	00011717          	auipc	a4,0x11
    9fe01808:	ddc73507          	fld	fa0,-548(a4) # 9fe125e0 <xISRStackTop+0x190>
    9fe0180c:	00011717          	auipc	a4,0x11
    9fe01810:	dcc73687          	fld	fa3,-564(a4) # 9fe125d8 <xISRStackTop+0x188>
    9fe01814:	0af777d3          	fsub.d	fa5,fa4,fa5
    9fe01818:	f2078753          	fmv.d.x	fa4,a5
    9fe0181c:	00011797          	auipc	a5,0x11
    9fe01820:	e047b387          	fld	ft7,-508(a5) # 9fe12620 <xISRStackTop+0x1d0>
    9fe01824:	00011797          	auipc	a5,0x11
    9fe01828:	dec7b887          	fld	fa7,-532(a5) # 9fe12610 <xISRStackTop+0x1c0>
    9fe0182c:	02051713          	slli	a4,a0,0x20
    9fe01830:	00011617          	auipc	a2,0x11
    9fe01834:	dd863107          	fld	ft2,-552(a2) # 9fe12608 <xISRStackTop+0x1b8>
    9fe01838:	00011617          	auipc	a2,0x11
    9fe0183c:	db063f87          	fld	ft11,-592(a2) # 9fe125e8 <xISRStackTop+0x198>
    9fe01840:	0af777d3          	fsub.d	fa5,fa4,fa5
    9fe01844:	00011797          	auipc	a5,0x11
    9fe01848:	dd47b707          	fld	fa4,-556(a5) # 9fe12618 <xISRStackTop+0x1c8>
    9fe0184c:	00011617          	auipc	a2,0x11
    9fe01850:	da463f07          	fld	ft10,-604(a2) # 9fe125f0 <xISRStackTop+0x1a0>
    9fe01854:	00011617          	auipc	a2,0x11
    9fe01858:	da463e87          	fld	ft9,-604(a2) # 9fe125f8 <xISRStackTop+0x1a8>
    9fe0185c:	00011617          	auipc	a2,0x11
    9fe01860:	da463e07          	fld	ft8,-604(a2) # 9fe12600 <xISRStackTop+0x1b0>
    9fe01864:	f2068453          	fmv.d.x	fs0,a3
    9fe01868:	d20580d3          	fcvt.d.w	ft1,a1
    9fe0186c:	12327653          	fmul.d	fa2,ft4,ft3
    9fe01870:	12c67053          	fmul.d	ft0,fa2,fa2
    9fe01874:	e20607d3          	fmv.x.d	a5,fa2
    9fe01878:	00f77633          	and	a2,a4,a5
    9fe0187c:	f2060653          	fmv.d.x	fa2,a2
    9fe01880:	52d076c3          	fmadd.d	fa3,ft0,fa3,fa0
    9fe01884:	2286724b          	fnmsub.d	ft4,fa2,fs0,ft4
    9fe01888:	f2060453          	fmv.d.x	fs0,a2
    9fe0188c:	f2078653          	fmv.d.x	fa2,a5
    9fe01890:	12007553          	fmul.d	fa0,ft0,ft0
    9fe01894:	02867353          	fadd.d	ft6,fa2,fs0
    9fe01898:	fa06f6c3          	fmadd.d	fa3,fa3,ft0,ft11
    9fe0189c:	22f477cb          	fnmsub.d	fa5,fs0,fa5,ft4
    9fe018a0:	12847643          	fmadd.d	fa2,fs0,fs0,ft2
    9fe018a4:	f206f6c3          	fmadd.d	fa3,fa3,ft0,ft10
    9fe018a8:	1237f7d3          	fmul.d	fa5,fa5,ft3
    9fe018ac:	ea06f6c3          	fmadd.d	fa3,fa3,ft0,ft9
    9fe018b0:	12f37353          	fmul.d	ft6,ft6,fa5
    9fe018b4:	e206f6c3          	fmadd.d	fa3,fa3,ft0,ft8
    9fe018b8:	32d576c3          	fmadd.d	fa3,fa0,fa3,ft6
    9fe018bc:	02d67653          	fadd.d	fa2,fa2,fa3
    9fe018c0:	e20606d3          	fmv.x.d	a3,fa2
    9fe018c4:	8ef9                	and	a3,a3,a4
    9fe018c6:	f2068653          	fmv.d.x	fa2,a3
    9fe018ca:	0a267653          	fsub.d	fa2,fa2,ft2
    9fe018ce:	6284764b          	fnmsub.d	fa2,fs0,fs0,fa2
    9fe018d2:	0ac6f6d3          	fsub.d	fa3,fa3,fa2
    9fe018d6:	f2078653          	fmv.d.x	fa2,a5
    9fe018da:	12c6f6d3          	fmul.d	fa3,fa3,fa2
    9fe018de:	f2068653          	fmv.d.x	fa2,a3
    9fe018e2:	6ac7f7c3          	fmadd.d	fa5,fa5,fa2,fa3
    9fe018e6:	7a8676c3          	fmadd.d	fa3,fa2,fs0,fa5
    9fe018ea:	e20687d3          	fmv.x.d	a5,fa3
    9fe018ee:	8ff9                	and	a5,a5,a4
    9fe018f0:	f2078553          	fmv.d.x	fa0,a5
    9fe018f4:	52c476cb          	fnmsub.d	fa3,fs0,fa2,fa0
    9fe018f8:	0ad7f7d3          	fsub.d	fa5,fa5,fa3
    9fe018fc:	1317f7d3          	fmul.d	fa5,fa5,fa7
    9fe01900:	7aa777c3          	fmadd.d	fa5,fa4,fa0,fa5
    9fe01904:	0307f7d3          	fadd.d	fa5,fa5,fa6
    9fe01908:	7aa3f743          	fmadd.d	fa4,ft7,fa0,fa5
    9fe0190c:	02577753          	fadd.d	fa4,fa4,ft5
    9fe01910:	02177753          	fadd.d	fa4,fa4,ft1
    9fe01914:	e20706d3          	fmv.x.d	a3,fa4
    9fe01918:	8f75                	and	a4,a4,a3
    9fe0191a:	f2070753          	fmv.d.x	fa4,a4
    9fe0191e:	0a1776d3          	fsub.d	fa3,fa4,ft1
    9fe01922:	0a56f6d3          	fsub.d	fa3,fa3,ft5
    9fe01926:	6a7576cb          	fnmsub.d	fa3,fa0,ft7,fa3
    9fe0192a:	0ad7f6d3          	fsub.d	fa3,fa5,fa3
    9fe0192e:	3c7d                	addiw	s8,s8,-1
    9fe01930:	017c6bb3          	or	s7,s8,s7
    9fe01934:	2b81                	sext.w	s7,s7
    9fe01936:	22b58453          	fmv.d	fs0,fa1
    9fe0193a:	000b9663          	bnez	s7,9fe01946 <__ieee754_pow+0x44c>
    9fe0193e:	00011797          	auipc	a5,0x11
    9fe01942:	b327b407          	fld	fs0,-1230(a5) # 9fe12470 <xISRStackTop+0x20>
    9fe01946:	020a5793          	srli	a5,s4,0x20
    9fe0194a:	1782                	slli	a5,a5,0x20
    9fe0194c:	f2078653          	fmv.d.x	fa2,a5
    9fe01950:	f20a07d3          	fmv.d.x	fa5,s4
    9fe01954:	40900637          	lui	a2,0x40900
    9fe01958:	0ac7f7d3          	fsub.d	fa5,fa5,fa2
    9fe0195c:	f20a0653          	fmv.d.x	fa2,s4
    9fe01960:	12c6f6d3          	fmul.d	fa3,fa3,fa2
    9fe01964:	f2078653          	fmv.d.x	fa2,a5
    9fe01968:	12c77653          	fmul.d	fa2,fa4,fa2
    9fe0196c:	6ae7f7c3          	fmadd.d	fa5,fa5,fa4,fa3
    9fe01970:	02c7f753          	fadd.d	fa4,fa5,fa2
    9fe01974:	e20706d3          	fmv.x.d	a3,fa4
    9fe01978:	4206d593          	srai	a1,a3,0x20
    9fe0197c:	0006871b          	sext.w	a4,a3
    9fe01980:	16c5c163          	blt	a1,a2,9fe01ae2 <__ieee754_pow+0x5e8>
    9fe01984:	bf7007b7          	lui	a5,0xbf700
    9fe01988:	9fad                	addw	a5,a5,a1
    9fe0198a:	8fd9                	or	a5,a5,a4
    9fe0198c:	2781                	sext.w	a5,a5
    9fe0198e:	28079163          	bnez	a5,9fe01c10 <__ieee754_pow+0x716>
    9fe01992:	f20686d3          	fmv.d.x	fa3,a3
    9fe01996:	00011797          	auipc	a5,0x11
    9fe0199a:	c927b707          	fld	fa4,-878(a5) # 9fe12628 <xISRStackTop+0x1d8>
    9fe0199e:	02e7f753          	fadd.d	fa4,fa5,fa4
    9fe019a2:	0ac6f6d3          	fsub.d	fa3,fa3,fa2
    9fe019a6:	a2e697d3          	flt.d	a5,fa3,fa4
    9fe019aa:	26079363          	bnez	a5,9fe01c10 <__ieee754_pow+0x716>
    9fe019ae:	4145d79b          	sraiw	a5,a1,0x14
    9fe019b2:	7ff7f793          	andi	a5,a5,2047
    9fe019b6:	00100537          	lui	a0,0x100
    9fe019ba:	c027879b          	addiw	a5,a5,-1022
    9fe019be:	40f557bb          	sraw	a5,a0,a5
    9fe019c2:	9fad                	addw	a5,a5,a1
    9fe019c4:	4147d69b          	sraiw	a3,a5,0x14
    9fe019c8:	7ff6f693          	andi	a3,a3,2047
    9fe019cc:	c016869b          	addiw	a3,a3,-1023
    9fe019d0:	fff5061b          	addiw	a2,a0,-1
    9fe019d4:	02c79713          	slli	a4,a5,0x2c
    9fe019d8:	40d6563b          	sraw	a2,a2,a3
    9fe019dc:	9331                	srli	a4,a4,0x2c
    9fe019de:	8f49                	or	a4,a4,a0
    9fe019e0:	fff64613          	not	a2,a2
    9fe019e4:	4551                	li	a0,20
    9fe019e6:	40d506bb          	subw	a3,a0,a3
    9fe019ea:	8ff1                	and	a5,a5,a2
    9fe019ec:	40d7553b          	sraw	a0,a4,a3
    9fe019f0:	1782                	slli	a5,a5,0x20
    9fe019f2:	0005d463          	bgez	a1,9fe019fa <__ieee754_pow+0x500>
    9fe019f6:	40a0053b          	negw	a0,a0
    9fe019fa:	f2078753          	fmv.d.x	fa4,a5
    9fe019fe:	0145161b          	slliw	a2,a0,0x14
    9fe01a02:	0ae67653          	fsub.d	fa2,fa2,fa4
    9fe01a06:	02c7f753          	fadd.d	fa4,fa5,fa2
    9fe01a0a:	e20706d3          	fmv.x.d	a3,fa4
    9fe01a0e:	57fd                	li	a5,-1
    9fe01a10:	02079713          	slli	a4,a5,0x20
    9fe01a14:	8ef9                	and	a3,a3,a4
    9fe01a16:	f2068753          	fmv.d.x	fa4,a3
    9fe01a1a:	00011717          	auipc	a4,0x11
    9fe01a1e:	c1e73687          	fld	fa3,-994(a4) # 9fe12638 <xISRStackTop+0x1e8>
    9fe01a22:	00011717          	auipc	a4,0x11
    9fe01a26:	c1e73287          	fld	ft5,-994(a4) # 9fe12640 <xISRStackTop+0x1f0>
    9fe01a2a:	0ac77653          	fsub.d	fa2,fa4,fa2
    9fe01a2e:	12e6f6d3          	fmul.d	fa3,fa3,fa4
    9fe01a32:	00011717          	auipc	a4,0x11
    9fe01a36:	c1673507          	fld	fa0,-1002(a4) # 9fe12648 <xISRStackTop+0x1f8>
    9fe01a3a:	00011717          	auipc	a4,0x11
    9fe01a3e:	af673707          	fld	fa4,-1290(a4) # 9fe12530 <xISRStackTop+0xe0>
    9fe01a42:	00011717          	auipc	a4,0x11
    9fe01a46:	af673207          	fld	ft4,-1290(a4) # 9fe12538 <xISRStackTop+0xe8>
    9fe01a4a:	00011717          	auipc	a4,0x11
    9fe01a4e:	af673187          	fld	ft3,-1290(a4) # 9fe12540 <xISRStackTop+0xf0>
    9fe01a52:	00011717          	auipc	a4,0x11
    9fe01a56:	af673107          	fld	ft2,-1290(a4) # 9fe12548 <xISRStackTop+0xf8>
    9fe01a5a:	0ac7f7d3          	fsub.d	fa5,fa5,fa2
    9fe01a5e:	00011717          	auipc	a4,0x11
    9fe01a62:	af273087          	fld	ft1,-1294(a4) # 9fe12550 <xISRStackTop+0x100>
    9fe01a66:	00011717          	auipc	a4,0x11
    9fe01a6a:	a0273007          	fld	ft0,-1534(a4) # 9fe12468 <xISRStackTop+0x18>
    9fe01a6e:	6a57f7c3          	fmadd.d	fa5,fa5,ft5,fa3
    9fe01a72:	f20686d3          	fmv.d.x	fa3,a3
    9fe01a76:	f20682d3          	fmv.d.x	ft5,a3
    9fe01a7a:	7ad57643          	fmadd.d	fa2,fa0,fa3,fa5
    9fe01a7e:	12c676d3          	fmul.d	fa3,fa2,fa2
    9fe01a82:	62a2f54b          	fnmsub.d	fa0,ft5,fa0,fa2
    9fe01a86:	22e6f743          	fmadd.d	fa4,fa3,fa4,ft4
    9fe01a8a:	0aa7f7d3          	fsub.d	fa5,fa5,fa0
    9fe01a8e:	1ad77743          	fmadd.d	fa4,fa4,fa3,ft3
    9fe01a92:	7af677c3          	fmadd.d	fa5,fa2,fa5,fa5
    9fe01a96:	12d77743          	fmadd.d	fa4,fa4,fa3,ft2
    9fe01a9a:	0ad77743          	fmadd.d	fa4,fa4,fa3,ft1
    9fe01a9e:	62d7774b          	fnmsub.d	fa4,fa4,fa3,fa2
    9fe01aa2:	12e676d3          	fmul.d	fa3,fa2,fa4
    9fe01aa6:	0a077753          	fsub.d	fa4,fa4,ft0
    9fe01aaa:	1ae6f753          	fdiv.d	fa4,fa3,fa4
    9fe01aae:	0af777d3          	fsub.d	fa5,fa4,fa5
    9fe01ab2:	0ac7f7d3          	fsub.d	fa5,fa5,fa2
    9fe01ab6:	0af5f7d3          	fsub.d	fa5,fa1,fa5
    9fe01aba:	e2078753          	fmv.x.d	a4,fa5
    9fe01abe:	42075693          	srai	a3,a4,0x20
    9fe01ac2:	9e35                	addw	a2,a2,a3
    9fe01ac4:	4146569b          	sraiw	a3,a2,0x14
    9fe01ac8:	18d05c63          	blez	a3,9fe01c60 <__ieee754_pow+0x766>
    9fe01acc:	9381                	srli	a5,a5,0x20
    9fe01ace:	1602                	slli	a2,a2,0x20
    9fe01ad0:	8f7d                	and	a4,a4,a5
    9fe01ad2:	8f51                	or	a4,a4,a2
    9fe01ad4:	f20707d3          	fmv.d.x	fa5,a4
    9fe01ad8:	1287f7d3          	fmul.d	fa5,fa5,fs0
    9fe01adc:	e2078753          	fmv.x.d	a4,fa5
    9fe01ae0:	bcf9                	j	9fe015be <__ieee754_pow+0xc4>
    9fe01ae2:	02159793          	slli	a5,a1,0x21
    9fe01ae6:	4090d637          	lui	a2,0x4090d
    9fe01aea:	9385                	srli	a5,a5,0x21
    9fe01aec:	bff60613          	addi	a2,a2,-1025 # 4090cbff <CVIMMAP_DRAM_SIZE+0x2090cbff>
    9fe01af0:	10f65863          	bge	a2,a5,9fe01c00 <__ieee754_pow+0x706>
    9fe01af4:	3f6f37b7          	lui	a5,0x3f6f3
    9fe01af8:	4007879b          	addiw	a5,a5,1024
    9fe01afc:	9fad                	addw	a5,a5,a1
    9fe01afe:	8fd9                	or	a5,a5,a4
    9fe01b00:	2781                	sext.w	a5,a5
    9fe01b02:	e799                	bnez	a5,9fe01b10 <__ieee754_pow+0x616>
    9fe01b04:	0ac77753          	fsub.d	fa4,fa4,fa2
    9fe01b08:	a2e787d3          	fle.d	a5,fa5,fa4
    9fe01b0c:	ea0781e3          	beqz	a5,9fe019ae <__ieee754_pow+0x4b4>
    9fe01b10:	00011797          	auipc	a5,0x11
    9fe01b14:	b207b787          	fld	fa5,-1248(a5) # 9fe12630 <xISRStackTop+0x1e0>
    9fe01b18:	12f47453          	fmul.d	fs0,fs0,fa5
    9fe01b1c:	12f477d3          	fmul.d	fa5,fs0,fa5
    9fe01b20:	e2078753          	fmv.x.d	a4,fa5
    9fe01b24:	bc69                	j	9fe015be <__ieee754_pow+0xc4>
    9fe01b26:	b80ad7e3          	bgez	s5,9fe016b4 <__ieee754_pow+0x1ba>
    9fe01b2a:	f20a07d3          	fmv.d.x	fa5,s4
    9fe01b2e:	22f797d3          	fneg.d	fa5,fa5
    9fe01b32:	e2078753          	fmv.x.d	a4,fa5
    9fe01b36:	b461                	j	9fe015be <__ieee754_pow+0xc4>
    9fe01b38:	f20002d3          	fmv.d.x	ft5,zero
    9fe01b3c:	00010797          	auipc	a5,0x10
    9fe01b40:	7947b587          	fld	fa1,1940(a5) # 9fe122d0 <__func__.1+0x118>
    9fe01b44:	22b587d3          	fmv.d	fa5,fa1
    9fe01b48:	22528853          	fmv.d	fa6,ft5
    9fe01b4c:	4801                	li	a6,0
    9fe01b4e:	b9bd                	j	9fe017cc <__ieee754_pow+0x2d2>
    9fe01b50:	3ff007b7          	lui	a5,0x3ff00
    9fe01b54:	ffe78693          	addi	a3,a5,-2 # 3feffffe <CVIMMAP_DRAM_SIZE+0x1feffffe>
    9fe01b58:	b696dfe3          	bge	a3,s1,9fe016d6 <__ieee754_pow+0x1dc>
    9fe01b5c:	b297c3e3          	blt	a5,s1,9fe01682 <__ieee754_pow+0x188>
    9fe01b60:	f20707d3          	fmv.d.x	fa5,a4
    9fe01b64:	00010797          	auipc	a5,0x10
    9fe01b68:	76c7b587          	fld	fa1,1900(a5) # 9fe122d0 <__func__.1+0x118>
    9fe01b6c:	00011797          	auipc	a5,0x11
    9fe01b70:	a047b707          	fld	fa4,-1532(a5) # 9fe12570 <xISRStackTop+0x120>
    9fe01b74:	0ab7f7d3          	fsub.d	fa5,fa5,fa1
    9fe01b78:	00010797          	auipc	a5,0x10
    9fe01b7c:	7687b607          	fld	fa2,1896(a5) # 9fe122e0 <__func__.1+0x128>
    9fe01b80:	00010797          	auipc	a5,0x10
    9fe01b84:	6d87b087          	fld	ft1,1752(a5) # 9fe12258 <__func__.1+0xa0>
    9fe01b88:	00011797          	auipc	a5,0x11
    9fe01b8c:	9907b007          	fld	ft0,-1648(a5) # 9fe12518 <xISRStackTop+0xc8>
    9fe01b90:	00011797          	auipc	a5,0x11
    9fe01b94:	a307b687          	fld	fa3,-1488(a5) # 9fe125c0 <xISRStackTop+0x170>
    9fe01b98:	00011797          	auipc	a5,0x11
    9fe01b9c:	a307b507          	fld	fa0,-1488(a5) # 9fe125c8 <xISRStackTop+0x178>
    9fe01ba0:	72c7f64b          	fnmsub.d	fa2,fa5,fa2,fa4
    9fe01ba4:	12f7f753          	fmul.d	fa4,fa5,fa5
    9fe01ba8:	0af6764b          	fnmsub.d	fa2,fa2,fa5,ft1
    9fe01bac:	12c77753          	fmul.d	fa4,fa4,fa2
    9fe01bb0:	12077753          	fmul.d	fa4,fa4,ft0
    9fe01bb4:	72d7f6c7          	fmsub.d	fa3,fa5,fa3,fa4
    9fe01bb8:	6aa7f743          	fmadd.d	fa4,fa5,fa0,fa3
    9fe01bbc:	e20707d3          	fmv.x.d	a5,fa4
    9fe01bc0:	9381                	srli	a5,a5,0x20
    9fe01bc2:	1782                	slli	a5,a5,0x20
    9fe01bc4:	f2078753          	fmv.d.x	fa4,a5
    9fe01bc8:	72a7f7cb          	fnmsub.d	fa5,fa5,fa0,fa4
    9fe01bcc:	0af6f6d3          	fsub.d	fa3,fa3,fa5
    9fe01bd0:	bbb9                	j	9fe0192e <__ieee754_pow+0x434>
    9fe01bd2:	f20407d3          	fmv.d.x	fa5,s0
    9fe01bd6:	12f7f7d3          	fmul.d	fa5,fa5,fa5
    9fe01bda:	e2078753          	fmv.x.d	a4,fa5
    9fe01bde:	b2c5                	j	9fe015be <__ieee754_pow+0xc4>
    9fe01be0:	b40719e3          	bnez	a4,9fe01732 <__ieee754_pow+0x238>
    9fe01be4:	4751                	li	a4,20
    9fe01be6:	40c707bb          	subw	a5,a4,a2
    9fe01bea:	40f9d73b          	sraw	a4,s3,a5
    9fe01bee:	00f717bb          	sllw	a5,a4,a5
    9fe01bf2:	97379ce3          	bne	a5,s3,9fe0156a <__ieee754_pow+0x70>
    9fe01bf6:	8b05                	andi	a4,a4,1
    9fe01bf8:	4c09                	li	s8,2
    9fe01bfa:	40ec0c3b          	subw	s8,s8,a4
    9fe01bfe:	b2b5                	j	9fe0156a <__ieee754_pow+0x70>
    9fe01c00:	3fe00737          	lui	a4,0x3fe00
    9fe01c04:	4601                	li	a2,0
    9fe01c06:	4501                	li	a0,0
    9fe01c08:	e0f753e3          	bge	a4,a5,9fe01a0e <__ieee754_pow+0x514>
    9fe01c0c:	83d1                	srli	a5,a5,0x14
    9fe01c0e:	b365                	j	9fe019b6 <__ieee754_pow+0x4bc>
    9fe01c10:	00011797          	auipc	a5,0x11
    9fe01c14:	8507b787          	fld	fa5,-1968(a5) # 9fe12460 <xISRStackTop+0x10>
    9fe01c18:	12f47453          	fmul.d	fs0,fs0,fa5
    9fe01c1c:	12f477d3          	fmul.d	fa5,fs0,fa5
    9fe01c20:	e2078753          	fmv.x.d	a4,fa5
    9fe01c24:	ba69                	j	9fe015be <__ieee754_pow+0xc4>
    9fe01c26:	4785                	li	a5,1
    9fe01c28:	98fc1be3          	bne	s8,a5,9fe015be <__ieee754_pow+0xc4>
    9fe01c2c:	f20707d3          	fmv.d.x	fa5,a4
    9fe01c30:	22f797d3          	fneg.d	fa5,fa5
    9fe01c34:	e2078753          	fmv.x.d	a4,fa5
    9fe01c38:	b259                	j	9fe015be <__ieee754_pow+0xc4>
    9fe01c3a:	00011797          	auipc	a5,0x11
    9fe01c3e:	9767b287          	fld	ft5,-1674(a5) # 9fe125b0 <xISRStackTop+0x160>
    9fe01c42:	00011797          	auipc	a5,0x11
    9fe01c46:	9767b807          	fld	fa6,-1674(a5) # 9fe125b8 <xISRStackTop+0x168>
    9fe01c4a:	00040837          	lui	a6,0x40
    9fe01c4e:	00011797          	auipc	a5,0x11
    9fe01c52:	82a7b787          	fld	fa5,-2006(a5) # 9fe12478 <xISRStackTop+0x28>
    9fe01c56:	00010797          	auipc	a5,0x10
    9fe01c5a:	67a7b587          	fld	fa1,1658(a5) # 9fe122d0 <__func__.1+0x118>
    9fe01c5e:	b6bd                	j	9fe017cc <__ieee754_pow+0x2d2>
    9fe01c60:	22f78553          	fmv.d	fa0,fa5
    9fe01c64:	779000ef          	jal	ra,9fe02bdc <scalbn>
    9fe01c68:	e2050753          	fmv.x.d	a4,fa0
    9fe01c6c:	b5a5                	j	9fe01ad4 <__ieee754_pow+0x5da>

000000009fe01c6e <__ieee754_rem_pio2>:
    9fe01c6e:	e20507d3          	fmv.x.d	a5,fa0
    9fe01c72:	7139                	addi	sp,sp,-64
    9fe01c74:	f04a                	sd	s2,32(sp)
    9fe01c76:	4207d913          	srai	s2,a5,0x20
    9fe01c7a:	f822                	sd	s0,48(sp)
    9fe01c7c:	3fe92737          	lui	a4,0x3fe92
    9fe01c80:	02191413          	slli	s0,s2,0x21
    9fe01c84:	f426                	sd	s1,40(sp)
    9fe01c86:	fc06                	sd	ra,56(sp)
    9fe01c88:	1fb70713          	addi	a4,a4,507 # 3fe921fb <CVIMMAP_DRAM_SIZE+0x1fe921fb>
    9fe01c8c:	9005                	srli	s0,s0,0x21
    9fe01c8e:	84aa                	mv	s1,a0
    9fe01c90:	0e875a63          	bge	a4,s0,9fe01d84 <__ieee754_rem_pio2+0x116>
    9fe01c94:	4002e737          	lui	a4,0x4002e
    9fe01c98:	97b70713          	addi	a4,a4,-1669 # 4002d97b <CVIMMAP_DRAM_SIZE+0x2002d97b>
    9fe01c9c:	04874363          	blt	a4,s0,9fe01ce2 <__ieee754_rem_pio2+0x74>
    9fe01ca0:	00011717          	auipc	a4,0x11
    9fe01ca4:	9b073787          	fld	fa5,-1616(a4) # 9fe12650 <xISRStackTop+0x200>
    9fe01ca8:	3ff92737          	lui	a4,0x3ff92
    9fe01cac:	1fb70713          	addi	a4,a4,507 # 3ff921fb <CVIMMAP_DRAM_SIZE+0x1ff921fb>
    9fe01cb0:	23205c63          	blez	s2,9fe01ee8 <__ieee754_rem_pio2+0x27a>
    9fe01cb4:	0af577d3          	fsub.d	fa5,fa0,fa5
    9fe01cb8:	0ee40663          	beq	s0,a4,9fe01da4 <__ieee754_rem_pio2+0x136>
    9fe01cbc:	00011797          	auipc	a5,0x11
    9fe01cc0:	99c7b707          	fld	fa4,-1636(a5) # 9fe12658 <xISRStackTop+0x208>
    9fe01cc4:	0ae7f6d3          	fsub.d	fa3,fa5,fa4
    9fe01cc8:	4505                	li	a0,1
    9fe01cca:	0ad7f7d3          	fsub.d	fa5,fa5,fa3
    9fe01cce:	a094                	fsd	fa3,0(s1)
    9fe01cd0:	0ae7f7d3          	fsub.d	fa5,fa5,fa4
    9fe01cd4:	a49c                	fsd	fa5,8(s1)
    9fe01cd6:	70e2                	ld	ra,56(sp)
    9fe01cd8:	7442                	ld	s0,48(sp)
    9fe01cda:	74a2                	ld	s1,40(sp)
    9fe01cdc:	7902                	ld	s2,32(sp)
    9fe01cde:	6121                	addi	sp,sp,64
    9fe01ce0:	8082                	ret
    9fe01ce2:	41392737          	lui	a4,0x41392
    9fe01ce6:	1fb70713          	addi	a4,a4,507 # 413921fb <CVIMMAP_DRAM_SIZE+0x213921fb>
    9fe01cea:	0e875663          	bge	a4,s0,9fe01dd6 <__ieee754_rem_pio2+0x168>
    9fe01cee:	7ff00737          	lui	a4,0x7ff00
    9fe01cf2:	0ae45363          	bge	s0,a4,9fe01d98 <__ieee754_rem_pio2+0x12a>
    9fe01cf6:	4144561b          	sraiw	a2,s0,0x14
    9fe01cfa:	bea6061b          	addiw	a2,a2,-1046
    9fe01cfe:	86be                	mv	a3,a5
    9fe01d00:	0146179b          	slliw	a5,a2,0x14
    9fe01d04:	9c1d                	subw	s0,s0,a5
    9fe01d06:	1682                	slli	a3,a3,0x20
    9fe01d08:	9281                	srli	a3,a3,0x20
    9fe01d0a:	1402                	slli	s0,s0,0x20
    9fe01d0c:	8c55                	or	s0,s0,a3
    9fe01d0e:	f20407d3          	fmv.d.x	fa5,s0
    9fe01d12:	f20406d3          	fmv.d.x	fa3,s0
    9fe01d16:	00011717          	auipc	a4,0x11
    9fe01d1a:	97273707          	fld	fa4,-1678(a4) # 9fe12688 <xISRStackTop+0x238>
    9fe01d1e:	c20797d3          	fcvt.w.d	a5,fa5,rtz
    9fe01d22:	468d                	li	a3,3
    9fe01d24:	d20787d3          	fcvt.d.w	fa5,a5
    9fe01d28:	0af6f6d3          	fsub.d	fa3,fa3,fa5
    9fe01d2c:	a43e                	fsd	fa5,8(sp)
    9fe01d2e:	12e6f7d3          	fmul.d	fa5,fa3,fa4
    9fe01d32:	c20797d3          	fcvt.w.d	a5,fa5,rtz
    9fe01d36:	d20786d3          	fcvt.d.w	fa3,a5
    9fe01d3a:	2781                	sext.w	a5,a5
    9fe01d3c:	0ad7f7d3          	fsub.d	fa5,fa5,fa3
    9fe01d40:	a836                	fsd	fa3,16(sp)
    9fe01d42:	12e7f7d3          	fmul.d	fa5,fa5,fa4
    9fe01d46:	f2000753          	fmv.d.x	fa4,zero
    9fe01d4a:	a2e7a753          	feq.d	a4,fa5,fa4
    9fe01d4e:	ac3e                	fsd	fa5,24(sp)
    9fe01d50:	c701                	beqz	a4,9fe01d58 <__ieee754_rem_pio2+0xea>
    9fe01d52:	00f036b3          	snez	a3,a5
    9fe01d56:	0685                	addi	a3,a3,1
    9fe01d58:	0000f797          	auipc	a5,0xf
    9fe01d5c:	d6078793          	addi	a5,a5,-672 # 9fe10ab8 <two_over_pi>
    9fe01d60:	4709                	li	a4,2
    9fe01d62:	85a6                	mv	a1,s1
    9fe01d64:	0028                	addi	a0,sp,8
    9fe01d66:	4f2000ef          	jal	ra,9fe02258 <__kernel_rem_pio2>
    9fe01d6a:	f60956e3          	bgez	s2,9fe01cd6 <__ieee754_rem_pio2+0x68>
    9fe01d6e:	2098                	fld	fa4,0(s1)
    9fe01d70:	249c                	fld	fa5,8(s1)
    9fe01d72:	40a0053b          	negw	a0,a0
    9fe01d76:	22e71753          	fneg.d	fa4,fa4
    9fe01d7a:	22f797d3          	fneg.d	fa5,fa5
    9fe01d7e:	a098                	fsd	fa4,0(s1)
    9fe01d80:	a49c                	fsd	fa5,8(s1)
    9fe01d82:	bf91                	j	9fe01cd6 <__ieee754_rem_pio2+0x68>
    9fe01d84:	70e2                	ld	ra,56(sp)
    9fe01d86:	7442                	ld	s0,48(sp)
    9fe01d88:	a088                	fsd	fa0,0(s1)
    9fe01d8a:	00053423          	sd	zero,8(a0) # 100008 <CVIMMAP_ATF_SIZE+0x80008>
    9fe01d8e:	74a2                	ld	s1,40(sp)
    9fe01d90:	7902                	ld	s2,32(sp)
    9fe01d92:	4501                	li	a0,0
    9fe01d94:	6121                	addi	sp,sp,64
    9fe01d96:	8082                	ret
    9fe01d98:	0aa577d3          	fsub.d	fa5,fa0,fa0
    9fe01d9c:	4501                	li	a0,0
    9fe01d9e:	a49c                	fsd	fa5,8(s1)
    9fe01da0:	a09c                	fsd	fa5,0(s1)
    9fe01da2:	bf15                	j	9fe01cd6 <__ieee754_rem_pio2+0x68>
    9fe01da4:	00011797          	auipc	a5,0x11
    9fe01da8:	8bc7b707          	fld	fa4,-1860(a5) # 9fe12660 <xISRStackTop+0x210>
    9fe01dac:	0ae7f7d3          	fsub.d	fa5,fa5,fa4
    9fe01db0:	00011797          	auipc	a5,0x11
    9fe01db4:	8b87b707          	fld	fa4,-1864(a5) # 9fe12668 <xISRStackTop+0x218>
    9fe01db8:	70e2                	ld	ra,56(sp)
    9fe01dba:	7442                	ld	s0,48(sp)
    9fe01dbc:	7902                	ld	s2,32(sp)
    9fe01dbe:	4505                	li	a0,1
    9fe01dc0:	0ae7f6d3          	fsub.d	fa3,fa5,fa4
    9fe01dc4:	0ad7f7d3          	fsub.d	fa5,fa5,fa3
    9fe01dc8:	a094                	fsd	fa3,0(s1)
    9fe01dca:	0ae7f7d3          	fsub.d	fa5,fa5,fa4
    9fe01dce:	a49c                	fsd	fa5,8(s1)
    9fe01dd0:	74a2                	ld	s1,40(sp)
    9fe01dd2:	6121                	addi	sp,sp,64
    9fe01dd4:	8082                	ret
    9fe01dd6:	b73fe0ef          	jal	ra,9fe00948 <fabs>
    9fe01dda:	00011797          	auipc	a5,0x11
    9fe01dde:	8967b687          	fld	fa3,-1898(a5) # 9fe12670 <xISRStackTop+0x220>
    9fe01de2:	00010797          	auipc	a5,0x10
    9fe01de6:	4767b607          	fld	fa2,1142(a5) # 9fe12258 <__func__.1+0xa0>
    9fe01dea:	62d576c3          	fmadd.d	fa3,fa0,fa3,fa2
    9fe01dee:	00011797          	auipc	a5,0x11
    9fe01df2:	8627b787          	fld	fa5,-1950(a5) # 9fe12650 <xISRStackTop+0x200>
    9fe01df6:	00011797          	auipc	a5,0x11
    9fe01dfa:	8627b707          	fld	fa4,-1950(a5) # 9fe12658 <xISRStackTop+0x208>
    9fe01dfe:	47fd                	li	a5,31
    9fe01e00:	c20696d3          	fcvt.w.d	a3,fa3,rtz
    9fe01e04:	d20686d3          	fcvt.d.w	fa3,a3
    9fe01e08:	0006851b          	sext.w	a0,a3
    9fe01e0c:	52f6f54b          	fnmsub.d	fa0,fa3,fa5,fa0
    9fe01e10:	12e6f7d3          	fmul.d	fa5,fa3,fa4
    9fe01e14:	04a7c563          	blt	a5,a0,9fe01e5e <__ieee754_rem_pio2+0x1f0>
    9fe01e18:	0af57753          	fsub.d	fa4,fa0,fa5
    9fe01e1c:	fff6879b          	addiw	a5,a3,-1
    9fe01e20:	00279713          	slli	a4,a5,0x2
    9fe01e24:	0000f797          	auipc	a5,0xf
    9fe01e28:	c1478793          	addi	a5,a5,-1004 # 9fe10a38 <npio2_hw>
    9fe01e2c:	97ba                	add	a5,a5,a4
    9fe01e2e:	4398                	lw	a4,0(a5)
    9fe01e30:	e20707d3          	fmv.x.d	a5,fa4
    9fe01e34:	02870963          	beq	a4,s0,9fe01e66 <__ieee754_rem_pio2+0x1f8>
    9fe01e38:	e09c                	sd	a5,0(s1)
    9fe01e3a:	f2078753          	fmv.d.x	fa4,a5
    9fe01e3e:	0ae57553          	fsub.d	fa0,fa0,fa4
    9fe01e42:	0af57553          	fsub.d	fa0,fa0,fa5
    9fe01e46:	a488                	fsd	fa0,8(s1)
    9fe01e48:	e80957e3          	bgez	s2,9fe01cd6 <__ieee754_rem_pio2+0x68>
    9fe01e4c:	22e717d3          	fneg.d	fa5,fa4
    9fe01e50:	22a51553          	fneg.d	fa0,fa0
    9fe01e54:	40d0053b          	negw	a0,a3
    9fe01e58:	a09c                	fsd	fa5,0(s1)
    9fe01e5a:	a488                	fsd	fa0,8(s1)
    9fe01e5c:	bdad                	j	9fe01cd6 <__ieee754_rem_pio2+0x68>
    9fe01e5e:	0af57753          	fsub.d	fa4,fa0,fa5
    9fe01e62:	e20707d3          	fmv.x.d	a5,fa4
    9fe01e66:	0347d713          	srli	a4,a5,0x34
    9fe01e6a:	4144541b          	sraiw	s0,s0,0x14
    9fe01e6e:	7ff77713          	andi	a4,a4,2047
    9fe01e72:	40e4073b          	subw	a4,s0,a4
    9fe01e76:	4641                	li	a2,16
    9fe01e78:	fce650e3          	bge	a2,a4,9fe01e38 <__ieee754_rem_pio2+0x1ca>
    9fe01e7c:	00010797          	auipc	a5,0x10
    9fe01e80:	7e47b607          	fld	fa2,2020(a5) # 9fe12660 <xISRStackTop+0x210>
    9fe01e84:	52c6f74b          	fnmsub.d	fa4,fa3,fa2,fa0
    9fe01e88:	00010797          	auipc	a5,0x10
    9fe01e8c:	7e07b787          	fld	fa5,2016(a5) # 9fe12668 <xISRStackTop+0x218>
    9fe01e90:	03100613          	li	a2,49
    9fe01e94:	0ae57553          	fsub.d	fa0,fa0,fa4
    9fe01e98:	52c6f54b          	fnmsub.d	fa0,fa3,fa2,fa0
    9fe01e9c:	52f6f7c7          	fmsub.d	fa5,fa3,fa5,fa0
    9fe01ea0:	0af77653          	fsub.d	fa2,fa4,fa5
    9fe01ea4:	e20607d3          	fmv.x.d	a5,fa2
    9fe01ea8:	0347d713          	srli	a4,a5,0x34
    9fe01eac:	7ff77713          	andi	a4,a4,2047
    9fe01eb0:	9c19                	subw	s0,s0,a4
    9fe01eb2:	00864663          	blt	a2,s0,9fe01ebe <__ieee754_rem_pio2+0x250>
    9fe01eb6:	22e70553          	fmv.d	fa0,fa4
    9fe01eba:	a090                	fsd	fa2,0(s1)
    9fe01ebc:	bfbd                	j	9fe01e3a <__ieee754_rem_pio2+0x1cc>
    9fe01ebe:	00010797          	auipc	a5,0x10
    9fe01ec2:	7ba7b607          	fld	fa2,1978(a5) # 9fe12678 <xISRStackTop+0x228>
    9fe01ec6:	72c6f54b          	fnmsub.d	fa0,fa3,fa2,fa4
    9fe01eca:	00010797          	auipc	a5,0x10
    9fe01ece:	7b67b787          	fld	fa5,1974(a5) # 9fe12680 <xISRStackTop+0x230>
    9fe01ed2:	0aa77753          	fsub.d	fa4,fa4,fa0
    9fe01ed6:	72c6f74b          	fnmsub.d	fa4,fa3,fa2,fa4
    9fe01eda:	72f6f7c7          	fmsub.d	fa5,fa3,fa5,fa4
    9fe01ede:	0af57753          	fsub.d	fa4,fa0,fa5
    9fe01ee2:	e20707d3          	fmv.x.d	a5,fa4
    9fe01ee6:	bf89                	j	9fe01e38 <__ieee754_rem_pio2+0x1ca>
    9fe01ee8:	02f577d3          	fadd.d	fa5,fa0,fa5
    9fe01eec:	02e40063          	beq	s0,a4,9fe01f0c <__ieee754_rem_pio2+0x29e>
    9fe01ef0:	00010797          	auipc	a5,0x10
    9fe01ef4:	7687b707          	fld	fa4,1896(a5) # 9fe12658 <xISRStackTop+0x208>
    9fe01ef8:	02e7f6d3          	fadd.d	fa3,fa5,fa4
    9fe01efc:	557d                	li	a0,-1
    9fe01efe:	0ad7f7d3          	fsub.d	fa5,fa5,fa3
    9fe01f02:	a094                	fsd	fa3,0(s1)
    9fe01f04:	02e7f7d3          	fadd.d	fa5,fa5,fa4
    9fe01f08:	a49c                	fsd	fa5,8(s1)
    9fe01f0a:	b3f1                	j	9fe01cd6 <__ieee754_rem_pio2+0x68>
    9fe01f0c:	00010797          	auipc	a5,0x10
    9fe01f10:	7547b707          	fld	fa4,1876(a5) # 9fe12660 <xISRStackTop+0x210>
    9fe01f14:	02e7f7d3          	fadd.d	fa5,fa5,fa4
    9fe01f18:	00010797          	auipc	a5,0x10
    9fe01f1c:	7507b707          	fld	fa4,1872(a5) # 9fe12668 <xISRStackTop+0x218>
    9fe01f20:	557d                	li	a0,-1
    9fe01f22:	02e7f6d3          	fadd.d	fa3,fa5,fa4
    9fe01f26:	0ad7f7d3          	fsub.d	fa5,fa5,fa3
    9fe01f2a:	a094                	fsd	fa3,0(s1)
    9fe01f2c:	02e7f7d3          	fadd.d	fa5,fa5,fa4
    9fe01f30:	a49c                	fsd	fa5,8(s1)
    9fe01f32:	b355                	j	9fe01cd6 <__ieee754_rem_pio2+0x68>

000000009fe01f34 <__ieee754_sqrt>:
    9fe01f34:	e2050553          	fmv.x.d	a0,fa0
    9fe01f38:	7ff00737          	lui	a4,0x7ff00
    9fe01f3c:	7ff006b7          	lui	a3,0x7ff00
    9fe01f40:	42055793          	srai	a5,a0,0x20
    9fe01f44:	8f7d                	and	a4,a4,a5
    9fe01f46:	0005061b          	sext.w	a2,a0
    9fe01f4a:	18d70e63          	beq	a4,a3,9fe020e6 <__ieee754_sqrt+0x1b2>
    9fe01f4e:	10f05a63          	blez	a5,9fe02062 <__ieee754_sqrt+0x12e>
    9fe01f52:	4147d593          	srai	a1,a5,0x14
    9fe01f56:	12058763          	beqz	a1,9fe02084 <__ieee754_sqrt+0x150>
    9fe01f5a:	02c79693          	slli	a3,a5,0x2c
    9fe01f5e:	92b1                	srli	a3,a3,0x2c
    9fe01f60:	001007b7          	lui	a5,0x100
    9fe01f64:	8edd                	or	a3,a3,a5
    9fe01f66:	c015859b          	addiw	a1,a1,-1023
    9fe01f6a:	0016969b          	slliw	a3,a3,0x1
    9fe01f6e:	01f6579b          	srliw	a5,a2,0x1f
    9fe01f72:	0016171b          	slliw	a4,a2,0x1
    9fe01f76:	0015f813          	andi	a6,a1,1
    9fe01f7a:	9fb5                	addw	a5,a5,a3
    9fe01f7c:	853a                	mv	a0,a4
    9fe01f7e:	00080963          	beqz	a6,9fe01f90 <__ieee754_sqrt+0x5c>
    9fe01f82:	0017979b          	slliw	a5,a5,0x1
    9fe01f86:	01f5551b          	srliw	a0,a0,0x1f
    9fe01f8a:	0026171b          	slliw	a4,a2,0x2
    9fe01f8e:	9fa9                	addw	a5,a5,a0
    9fe01f90:	4015df1b          	sraiw	t5,a1,0x1
    9fe01f94:	4e81                	li	t4,0
    9fe01f96:	45d9                	li	a1,22
    9fe01f98:	4681                	li	a3,0
    9fe01f9a:	00200637          	lui	a2,0x200
    9fe01f9e:	00c688bb          	addw	a7,a3,a2
    9fe01fa2:	01f7581b          	srliw	a6,a4,0x1f
    9fe01fa6:	35fd                	addiw	a1,a1,-1
    9fe01fa8:	0017171b          	slliw	a4,a4,0x1
    9fe01fac:	0117c863          	blt	a5,a7,9fe01fbc <__ieee754_sqrt+0x88>
    9fe01fb0:	411787bb          	subw	a5,a5,a7
    9fe01fb4:	00c886bb          	addw	a3,a7,a2
    9fe01fb8:	00ce8ebb          	addw	t4,t4,a2
    9fe01fbc:	0017979b          	slliw	a5,a5,0x1
    9fe01fc0:	00f807bb          	addw	a5,a6,a5
    9fe01fc4:	8205                	srli	a2,a2,0x1
    9fe01fc6:	fde1                	bnez	a1,9fe01f9e <__ieee754_sqrt+0x6a>
    9fe01fc8:	4e01                	li	t3,0
    9fe01fca:	02000513          	li	a0,32
    9fe01fce:	80000637          	lui	a2,0x80000
    9fe01fd2:	a839                	j	9fe01ff0 <__ieee754_sqrt+0xbc>
    9fe01fd4:	0ed78863          	beq	a5,a3,9fe020c4 <__ieee754_sqrt+0x190>
    9fe01fd8:	01f7581b          	srliw	a6,a4,0x1f
    9fe01fdc:	0017979b          	slliw	a5,a5,0x1
    9fe01fe0:	357d                	addiw	a0,a0,-1
    9fe01fe2:	0017171b          	slliw	a4,a4,0x1
    9fe01fe6:	010787bb          	addw	a5,a5,a6
    9fe01fea:	0016561b          	srliw	a2,a2,0x1
    9fe01fee:	c121                	beqz	a0,9fe0202e <__ieee754_sqrt+0xfa>
    9fe01ff0:	00b608bb          	addw	a7,a2,a1
    9fe01ff4:	8846                	mv	a6,a7
    9fe01ff6:	fcf6dfe3          	bge	a3,a5,9fe01fd4 <__ieee754_sqrt+0xa0>
    9fe01ffa:	00c885bb          	addw	a1,a7,a2
    9fe01ffe:	8336                	mv	t1,a3
    9fe02000:	0a08cc63          	bltz	a7,9fe020b8 <__ieee754_sqrt+0x184>
    9fe02004:	9f95                	subw	a5,a5,a3
    9fe02006:	01177363          	bgeu	a4,a7,9fe0200c <__ieee754_sqrt+0xd8>
    9fe0200a:	37fd                	addiw	a5,a5,-1
    9fe0200c:	4107073b          	subw	a4,a4,a6
    9fe02010:	01f7581b          	srliw	a6,a4,0x1f
    9fe02014:	0017979b          	slliw	a5,a5,0x1
    9fe02018:	357d                	addiw	a0,a0,-1
    9fe0201a:	01c60e3b          	addw	t3,a2,t3
    9fe0201e:	869a                	mv	a3,t1
    9fe02020:	0017171b          	slliw	a4,a4,0x1
    9fe02024:	010787bb          	addw	a5,a5,a6
    9fe02028:	0016561b          	srliw	a2,a2,0x1
    9fe0202c:	f171                	bnez	a0,9fe01ff0 <__ieee754_sqrt+0xbc>
    9fe0202e:	8fd9                	or	a5,a5,a4
    9fe02030:	e3dd                	bnez	a5,9fe020d6 <__ieee754_sqrt+0x1a2>
    9fe02032:	001e551b          	srliw	a0,t3,0x1
    9fe02036:	401ed71b          	sraiw	a4,t4,0x1
    9fe0203a:	3fe007b7          	lui	a5,0x3fe00
    9fe0203e:	001efe93          	andi	t4,t4,1
    9fe02042:	9f3d                	addw	a4,a4,a5
    9fe02044:	000e8563          	beqz	t4,9fe0204e <__ieee754_sqrt+0x11a>
    9fe02048:	800007b7          	lui	a5,0x80000
    9fe0204c:	8d5d                	or	a0,a0,a5
    9fe0204e:	014f179b          	slliw	a5,t5,0x14
    9fe02052:	9fb9                	addw	a5,a5,a4
    9fe02054:	1502                	slli	a0,a0,0x20
    9fe02056:	9101                	srli	a0,a0,0x20
    9fe02058:	1782                	slli	a5,a5,0x20
    9fe0205a:	8d5d                	or	a0,a0,a5
    9fe0205c:	f2050553          	fmv.d.x	fa0,a0
    9fe02060:	8082                	ret
    9fe02062:	02179713          	slli	a4,a5,0x21
    9fe02066:	9305                	srli	a4,a4,0x21
    9fe02068:	8f51                	or	a4,a4,a2
    9fe0206a:	db6d                	beqz	a4,9fe0205c <__ieee754_sqrt+0x128>
    9fe0206c:	4581                	li	a1,0
    9fe0206e:	e3d9                	bnez	a5,9fe020f4 <__ieee754_sqrt+0x1c0>
    9fe02070:	00b6571b          	srliw	a4,a2,0xb
    9fe02074:	35ad                	addiw	a1,a1,-21
    9fe02076:	0156161b          	slliw	a2,a2,0x15
    9fe0207a:	87ba                	mv	a5,a4
    9fe0207c:	db75                	beqz	a4,9fe02070 <__ieee754_sqrt+0x13c>
    9fe0207e:	01475693          	srli	a3,a4,0x14
    9fe02082:	e2d1                	bnez	a3,9fe02106 <__ieee754_sqrt+0x1d2>
    9fe02084:	4681                	li	a3,0
    9fe02086:	00100837          	lui	a6,0x100
    9fe0208a:	0017979b          	slliw	a5,a5,0x1
    9fe0208e:	0107f733          	and	a4,a5,a6
    9fe02092:	2701                	sext.w	a4,a4
    9fe02094:	8536                	mv	a0,a3
    9fe02096:	2685                	addiw	a3,a3,1
    9fe02098:	db6d                	beqz	a4,9fe0208a <__ieee754_sqrt+0x156>
    9fe0209a:	02000893          	li	a7,32
    9fe0209e:	8832                	mv	a6,a2
    9fe020a0:	40d888bb          	subw	a7,a7,a3
    9fe020a4:	0007871b          	sext.w	a4,a5
    9fe020a8:	00d6163b          	sllw	a2,a2,a3
    9fe020ac:	011857bb          	srlw	a5,a6,a7
    9fe020b0:	8fd9                	or	a5,a5,a4
    9fe020b2:	9d89                	subw	a1,a1,a0
    9fe020b4:	2781                	sext.w	a5,a5
    9fe020b6:	b555                	j	9fe01f5a <__ieee754_sqrt+0x26>
    9fe020b8:	8336                	mv	t1,a3
    9fe020ba:	f405c5e3          	bltz	a1,9fe02004 <__ieee754_sqrt+0xd0>
    9fe020be:	0016831b          	addiw	t1,a3,1
    9fe020c2:	b789                	j	9fe02004 <__ieee754_sqrt+0xd0>
    9fe020c4:	f1176ae3          	bltu	a4,a7,9fe01fd8 <__ieee754_sqrt+0xa4>
    9fe020c8:	00c885bb          	addw	a1,a7,a2
    9fe020cc:	fe08c6e3          	bltz	a7,9fe020b8 <__ieee754_sqrt+0x184>
    9fe020d0:	833e                	mv	t1,a5
    9fe020d2:	4781                	li	a5,0
    9fe020d4:	bf25                	j	9fe0200c <__ieee754_sqrt+0xd8>
    9fe020d6:	57fd                	li	a5,-1
    9fe020d8:	02fe0563          	beq	t3,a5,9fe02102 <__ieee754_sqrt+0x1ce>
    9fe020dc:	001e051b          	addiw	a0,t3,1
    9fe020e0:	0015551b          	srliw	a0,a0,0x1
    9fe020e4:	bf89                	j	9fe02036 <__ieee754_sqrt+0x102>
    9fe020e6:	52a577c3          	fmadd.d	fa5,fa0,fa0,fa0
    9fe020ea:	e2078553          	fmv.x.d	a0,fa5
    9fe020ee:	f2050553          	fmv.d.x	fa0,a0
    9fe020f2:	8082                	ret
    9fe020f4:	0aa577d3          	fsub.d	fa5,fa0,fa0
    9fe020f8:	1af7f7d3          	fdiv.d	fa5,fa5,fa5
    9fe020fc:	e2078553          	fmv.x.d	a0,fa5
    9fe02100:	bfb1                	j	9fe0205c <__ieee754_sqrt+0x128>
    9fe02102:	2e85                	addiw	t4,t4,1
    9fe02104:	bf0d                	j	9fe02036 <__ieee754_sqrt+0x102>
    9fe02106:	8832                	mv	a6,a2
    9fe02108:	02000893          	li	a7,32
    9fe0210c:	557d                	li	a0,-1
    9fe0210e:	bf79                	j	9fe020ac <__ieee754_sqrt+0x178>

000000009fe02110 <__kernel_cos>:
    9fe02110:	e20507d3          	fmv.x.d	a5,fa0
    9fe02114:	3e4006b7          	lui	a3,0x3e400
    9fe02118:	00179713          	slli	a4,a5,0x1
    9fe0211c:	9305                	srli	a4,a4,0x21
    9fe0211e:	08d75063          	bge	a4,a3,9fe0219e <__kernel_cos+0x8e>
    9fe02122:	c2051753          	fcvt.w.d	a4,fa0,rtz
    9fe02126:	2701                	sext.w	a4,a4
    9fe02128:	12070363          	beqz	a4,9fe0224e <__kernel_cos+0x13e>
    9fe0212c:	12a576d3          	fmul.d	fa3,fa0,fa0
    9fe02130:	00010717          	auipc	a4,0x10
    9fe02134:	57073707          	fld	fa4,1392(a4) # 9fe126a0 <xISRStackTop+0x250>
    9fe02138:	00010717          	auipc	a4,0x10
    9fe0213c:	57073087          	fld	ft1,1392(a4) # 9fe126a8 <xISRStackTop+0x258>
    9fe02140:	00010717          	auipc	a4,0x10
    9fe02144:	57073007          	fld	ft0,1392(a4) # 9fe126b0 <xISRStackTop+0x260>
    9fe02148:	00010717          	auipc	a4,0x10
    9fe0214c:	57073787          	fld	fa5,1392(a4) # 9fe126b8 <xISRStackTop+0x268>
    9fe02150:	00010717          	auipc	a4,0x10
    9fe02154:	57073507          	fld	fa0,1392(a4) # 9fe126c0 <xISRStackTop+0x270>
    9fe02158:	00010717          	auipc	a4,0x10
    9fe0215c:	57073607          	fld	fa2,1392(a4) # 9fe126c8 <xISRStackTop+0x278>
    9fe02160:	0ae6f743          	fmadd.d	fa4,fa3,fa4,ft1
    9fe02164:	02e6f743          	fmadd.d	fa4,fa3,fa4,ft0
    9fe02168:	7ae6f7c3          	fmadd.d	fa5,fa3,fa4,fa5
    9fe0216c:	52f6f7c3          	fmadd.d	fa5,fa3,fa5,fa0
    9fe02170:	62f6f7c3          	fmadd.d	fa5,fa3,fa5,fa2
    9fe02174:	12f6f7d3          	fmul.d	fa5,fa3,fa5
    9fe02178:	f2078753          	fmv.d.x	fa4,a5
    9fe0217c:	00010797          	auipc	a5,0x10
    9fe02180:	1547b507          	fld	fa0,340(a5) # 9fe122d0 <__func__.1+0x118>
    9fe02184:	12b775d3          	fmul.d	fa1,fa4,fa1
    9fe02188:	00010797          	auipc	a5,0x10
    9fe0218c:	0d07b707          	fld	fa4,208(a5) # 9fe12258 <__func__.1+0xa0>
    9fe02190:	5af6f7c7          	fmsub.d	fa5,fa3,fa5,fa1
    9fe02194:	7ae6f7c7          	fmsub.d	fa5,fa3,fa4,fa5
    9fe02198:	0af57553          	fsub.d	fa0,fa0,fa5
    9fe0219c:	8082                	ret
    9fe0219e:	12a576d3          	fmul.d	fa3,fa0,fa0
    9fe021a2:	00010697          	auipc	a3,0x10
    9fe021a6:	4fe6b707          	fld	fa4,1278(a3) # 9fe126a0 <xISRStackTop+0x250>
    9fe021aa:	00010697          	auipc	a3,0x10
    9fe021ae:	4fe6b787          	fld	fa5,1278(a3) # 9fe126a8 <xISRStackTop+0x258>
    9fe021b2:	00010697          	auipc	a3,0x10
    9fe021b6:	4fe6b087          	fld	ft1,1278(a3) # 9fe126b0 <xISRStackTop+0x260>
    9fe021ba:	00010697          	auipc	a3,0x10
    9fe021be:	4fe6b007          	fld	ft0,1278(a3) # 9fe126b8 <xISRStackTop+0x268>
    9fe021c2:	00010697          	auipc	a3,0x10
    9fe021c6:	4fe6b507          	fld	fa0,1278(a3) # 9fe126c0 <xISRStackTop+0x270>
    9fe021ca:	00010697          	auipc	a3,0x10
    9fe021ce:	4fe6b607          	fld	fa2,1278(a3) # 9fe126c8 <xISRStackTop+0x278>
    9fe021d2:	7ae6f7c3          	fmadd.d	fa5,fa3,fa4,fa5
    9fe021d6:	3fd336b7          	lui	a3,0x3fd33
    9fe021da:	33268693          	addi	a3,a3,818 # 3fd33332 <CVIMMAP_DRAM_SIZE+0x1fd33332>
    9fe021de:	0ad7f7c3          	fmadd.d	fa5,fa5,fa3,ft1
    9fe021e2:	02d7f7c3          	fmadd.d	fa5,fa5,fa3,ft0
    9fe021e6:	52d7f7c3          	fmadd.d	fa5,fa5,fa3,fa0
    9fe021ea:	62d7f7c3          	fmadd.d	fa5,fa5,fa3,fa2
    9fe021ee:	12d7f7d3          	fmul.d	fa5,fa5,fa3
    9fe021f2:	f8e6d3e3          	bge	a3,a4,9fe02178 <__kernel_cos+0x68>
    9fe021f6:	3fe906b7          	lui	a3,0x3fe90
    9fe021fa:	04e6c163          	blt	a3,a4,9fe0223c <__kernel_cos+0x12c>
    9fe021fe:	ffe006b7          	lui	a3,0xffe00
    9fe02202:	9f35                	addw	a4,a4,a3
    9fe02204:	1702                	slli	a4,a4,0x20
    9fe02206:	f2070753          	fmv.d.x	fa4,a4
    9fe0220a:	00010697          	auipc	a3,0x10
    9fe0220e:	0c66b507          	fld	fa0,198(a3) # 9fe122d0 <__func__.1+0x118>
    9fe02212:	f2070653          	fmv.d.x	fa2,a4
    9fe02216:	0ae57553          	fsub.d	fa0,fa0,fa4
    9fe0221a:	f2078753          	fmv.d.x	fa4,a5
    9fe0221e:	12b775d3          	fmul.d	fa1,fa4,fa1
    9fe02222:	00010797          	auipc	a5,0x10
    9fe02226:	0367b707          	fld	fa4,54(a5) # 9fe12258 <__func__.1+0xa0>
    9fe0222a:	62e6f747          	fmsub.d	fa4,fa3,fa4,fa2
    9fe0222e:	5af6f6c7          	fmsub.d	fa3,fa3,fa5,fa1
    9fe02232:	0ad77753          	fsub.d	fa4,fa4,fa3
    9fe02236:	0ae57553          	fsub.d	fa0,fa0,fa4
    9fe0223a:	8082                	ret
    9fe0223c:	00010717          	auipc	a4,0x10
    9fe02240:	45473507          	fld	fa0,1108(a4) # 9fe12690 <xISRStackTop+0x240>
    9fe02244:	00010717          	auipc	a4,0x10
    9fe02248:	45473607          	fld	fa2,1108(a4) # 9fe12698 <xISRStackTop+0x248>
    9fe0224c:	b7f9                	j	9fe0221a <__kernel_cos+0x10a>
    9fe0224e:	00010797          	auipc	a5,0x10
    9fe02252:	0827b507          	fld	fa0,130(a5) # 9fe122d0 <__func__.1+0x118>
    9fe02256:	8082                	ret

000000009fe02258 <__kernel_rem_pio2>:
    9fe02258:	d0010113          	addi	sp,sp,-768
    9fe0225c:	2d313c23          	sd	s3,728(sp)
    9fe02260:	e43a                	sd	a4,8(sp)
    9fe02262:	89b6                	mv	s3,a3
    9fe02264:	00271693          	slli	a3,a4,0x2
    9fe02268:	0000f717          	auipc	a4,0xf
    9fe0226c:	95870713          	addi	a4,a4,-1704 # 9fe10bc0 <init_jk>
    9fe02270:	9736                	add	a4,a4,a3
    9fe02272:	2d413823          	sd	s4,720(sp)
    9fe02276:	2b713c23          	sd	s7,696(sp)
    9fe0227a:	2b913423          	sd	s9,680(sp)
    9fe0227e:	2ba13023          	sd	s10,672(sp)
    9fe02282:	29b13c23          	sd	s11,664(sp)
    9fe02286:	fff9889b          	addiw	a7,s3,-1
    9fe0228a:	2e113c23          	sd	ra,760(sp)
    9fe0228e:	2e813823          	sd	s0,752(sp)
    9fe02292:	2e913423          	sd	s1,744(sp)
    9fe02296:	2f213023          	sd	s2,736(sp)
    9fe0229a:	2d513423          	sd	s5,712(sp)
    9fe0229e:	2d613023          	sd	s6,704(sp)
    9fe022a2:	2b813823          	sd	s8,688(sp)
    9fe022a6:	28813427          	fsd	fs0,648(sp)
    9fe022aa:	28913027          	fsd	fs1,640(sp)
    9fe022ae:	27213c27          	fsd	fs2,632(sp)
    9fe022b2:	27313827          	fsd	fs3,624(sp)
    9fe022b6:	27413427          	fsd	fs4,616(sp)
    9fe022ba:	27513027          	fsd	fs5,608(sp)
    9fe022be:	25613c27          	fsd	fs6,600(sp)
    9fe022c2:	56b1                	li	a3,-20
    9fe022c4:	e02e                	sd	a1,0(sp)
    9fe022c6:	00072c83          	lw	s9,0(a4)
    9fe022ca:	8bb2                	mv	s7,a2
    9fe022cc:	8daa                	mv	s11,a0
    9fe022ce:	8a3e                	mv	s4,a5
    9fe022d0:	00088d1b          	sext.w	s10,a7
    9fe022d4:	60d64463          	blt	a2,a3,9fe028dc <__kernel_rem_pio2+0x684>
    9fe022d8:	47e1                	li	a5,24
    9fe022da:	ffd6049b          	addiw	s1,a2,-3
    9fe022de:	02f4c4bb          	divw	s1,s1,a5
    9fe022e2:	0014879b          	addiw	a5,s1,1
    9fe022e6:	0027971b          	slliw	a4,a5,0x2
    9fe022ea:	9f99                	subw	a5,a5,a4
    9fe022ec:	0037979b          	slliw	a5,a5,0x3
    9fe022f0:	00fb8b3b          	addw	s6,s7,a5
    9fe022f4:	019886bb          	addw	a3,a7,s9
    9fe022f8:	411485bb          	subw	a1,s1,a7
    9fe022fc:	c85a                	sw	s6,16(sp)
    9fe022fe:	8736                	mv	a4,a3
    9fe02300:	0005879b          	sext.w	a5,a1
    9fe02304:	0206c663          	bltz	a3,9fe02330 <__kernel_rem_pio2+0xd8>
    9fe02308:	0017061b          	addiw	a2,a4,1
    9fe0230c:	00279693          	slli	a3,a5,0x2
    9fe02310:	1898                	addi	a4,sp,112
    9fe02312:	96d2                	add	a3,a3,s4
    9fe02314:	9e2d                	addw	a2,a2,a1
    9fe02316:	f20007d3          	fmv.d.x	fa5,zero
    9fe0231a:	0007c563          	bltz	a5,9fe02324 <__kernel_rem_pio2+0xcc>
    9fe0231e:	428c                	lw	a1,0(a3)
    9fe02320:	d20587d3          	fcvt.d.w	fa5,a1
    9fe02324:	2785                	addiw	a5,a5,1
    9fe02326:	a31c                	fsd	fa5,0(a4)
    9fe02328:	0721                	addi	a4,a4,8
    9fe0232a:	0691                	addi	a3,a3,4
    9fe0232c:	fec795e3          	bne	a5,a2,9fe02316 <__kernel_rem_pio2+0xbe>
    9fe02330:	040cc563          	bltz	s9,9fe0237a <__kernel_rem_pio2+0x122>
    9fe02334:	fff9869b          	addiw	a3,s3,-1
    9fe02338:	02069793          	slli	a5,a3,0x20
    9fe0233c:	01d7d693          	srli	a3,a5,0x1d
    9fe02340:	008d8793          	addi	a5,s11,8
    9fe02344:	1b0c                	addi	a1,sp,432
    9fe02346:	866a                	mv	a2,s10
    9fe02348:	013c853b          	addw	a0,s9,s3
    9fe0234c:	96be                	add	a3,a3,a5
    9fe0234e:	f20007d3          	fmv.d.x	fa5,zero
    9fe02352:	000d4f63          	bltz	s10,9fe02370 <__kernel_rem_pio2+0x118>
    9fe02356:	189c                	addi	a5,sp,112
    9fe02358:	00361713          	slli	a4,a2,0x3
    9fe0235c:	973e                	add	a4,a4,a5
    9fe0235e:	87ee                	mv	a5,s11
    9fe02360:	2394                	fld	fa3,0(a5)
    9fe02362:	2318                	fld	fa4,0(a4)
    9fe02364:	07a1                	addi	a5,a5,8
    9fe02366:	1761                	addi	a4,a4,-8
    9fe02368:	7ae6f7c3          	fmadd.d	fa5,fa3,fa4,fa5
    9fe0236c:	fed79ae3          	bne	a5,a3,9fe02360 <__kernel_rem_pio2+0x108>
    9fe02370:	a19c                	fsd	fa5,0(a1)
    9fe02372:	2605                	addiw	a2,a2,1
    9fe02374:	05a1                	addi	a1,a1,8
    9fe02376:	fca61ce3          	bne	a2,a0,9fe0234e <__kernel_rem_pio2+0xf6>
    9fe0237a:	02089793          	slli	a5,a7,0x20
    9fe0237e:	002c9913          	slli	s2,s9,0x2
    9fe02382:	01d7d893          	srli	a7,a5,0x1d
    9fe02386:	1961                	addi	s2,s2,-8
    9fe02388:	101c                	addi	a5,sp,32
    9fe0238a:	993e                	add	s2,s2,a5
    9fe0238c:	fffc841b          	addiw	s0,s9,-1
    9fe02390:	00010797          	auipc	a5,0x10
    9fe02394:	3507b487          	fld	fs1,848(a5) # 9fe126e0 <xISRStackTop+0x290>
    9fe02398:	00010797          	auipc	a5,0x10
    9fe0239c:	3507b407          	fld	fs0,848(a5) # 9fe126e8 <xISRStackTop+0x298>
    9fe023a0:	00010797          	auipc	a5,0x10
    9fe023a4:	f307b907          	fld	fs2,-208(a5) # 9fe122d0 <__func__.1+0x118>
    9fe023a8:	00010797          	auipc	a5,0x10
    9fe023ac:	3307ba87          	fld	fs5,816(a5) # 9fe126d8 <xISRStackTop+0x288>
    9fe023b0:	00010797          	auipc	a5,0x10
    9fe023b4:	2d87ba07          	fld	fs4,728(a5) # 9fe12688 <xISRStackTop+0x238>
    9fe023b8:	00010797          	auipc	a5,0x10
    9fe023bc:	ea07b987          	fld	fs3,-352(a5) # 9fe12258 <__func__.1+0xa0>
    9fe023c0:	040a                	slli	s0,s0,0x2
    9fe023c2:	0c9c                	addi	a5,sp,592
    9fe023c4:	011d8c33          	add	s8,s11,a7
    9fe023c8:	8ae6                	mv	s5,s9
    9fe023ca:	943e                	add	s0,s0,a5
    9fe023cc:	003a9793          	slli	a5,s5,0x3
    9fe023d0:	0c98                	addi	a4,sp,592
    9fe023d2:	973e                	add	a4,a4,a5
    9fe023d4:	f6073507          	fld	fa0,-160(a4)
    9fe023d8:	05505263          	blez	s5,9fe0241c <__kernel_rem_pio2+0x1c4>
    9fe023dc:	fffa859b          	addiw	a1,s5,-1
    9fe023e0:	ff878713          	addi	a4,a5,-8
    9fe023e4:	1b14                	addi	a3,sp,432
    9fe023e6:	02059793          	slli	a5,a1,0x20
    9fe023ea:	01e7d593          	srli	a1,a5,0x1e
    9fe023ee:	9736                	add	a4,a4,a3
    9fe023f0:	1054                	addi	a3,sp,36
    9fe023f2:	101c                	addi	a5,sp,32
    9fe023f4:	95b6                	add	a1,a1,a3
    9fe023f6:	135577d3          	fmul.d	fa5,fa0,fs5
    9fe023fa:	2314                	fld	fa3,0(a4)
    9fe023fc:	0791                	addi	a5,a5,4
    9fe023fe:	1761                	addi	a4,a4,-8
    9fe02400:	c2079653          	fcvt.w.d	a2,fa5,rtz
    9fe02404:	d20607d3          	fcvt.d.w	fa5,a2
    9fe02408:	5347f74b          	fnmsub.d	fa4,fa5,fs4,fa0
    9fe0240c:	02d7f553          	fadd.d	fa0,fa5,fa3
    9fe02410:	c2071653          	fcvt.w.d	a2,fa4,rtz
    9fe02414:	fec7ae23          	sw	a2,-4(a5)
    9fe02418:	fcb79fe3          	bne	a5,a1,9fe023f6 <__kernel_rem_pio2+0x19e>
    9fe0241c:	855a                	mv	a0,s6
    9fe0241e:	7be000ef          	jal	ra,9fe02bdc <scalbn>
    9fe02422:	22a50b53          	fmv.d	fs6,fa0
    9fe02426:	12957553          	fmul.d	fa0,fa0,fs1
    9fe0242a:	d38fe0ef          	jal	ra,9fe00962 <floor>
    9fe0242e:	b285754b          	fnmsub.d	fa0,fa0,fs0,fs6
    9fe02432:	c2051653          	fcvt.w.d	a2,fa0,rtz
    9fe02436:	d2060b53          	fcvt.d.w	fs6,a2
    9fe0243a:	00060b9b          	sext.w	s7,a2
    9fe0243e:	0b657b53          	fsub.d	fs6,fa0,fs6
    9fe02442:	0f605f63          	blez	s6,9fe02540 <__kernel_rem_pio2+0x2e8>
    9fe02446:	fffa879b          	addiw	a5,s5,-1
    9fe0244a:	0c98                	addi	a4,sp,592
    9fe0244c:	078a                	slli	a5,a5,0x2
    9fe0244e:	97ba                	add	a5,a5,a4
    9fe02450:	dd07a883          	lw	a7,-560(a5)
    9fe02454:	4761                	li	a4,24
    9fe02456:	4167073b          	subw	a4,a4,s6
    9fe0245a:	40e8de3b          	sraw	t3,a7,a4
    9fe0245e:	00ee173b          	sllw	a4,t3,a4
    9fe02462:	40e8873b          	subw	a4,a7,a4
    9fe02466:	48dd                	li	a7,23
    9fe02468:	416888bb          	subw	a7,a7,s6
    9fe0246c:	dce7a823          	sw	a4,-560(a5)
    9fe02470:	411758bb          	sraw	a7,a4,a7
    9fe02474:	01c60bbb          	addw	s7,a2,t3
    9fe02478:	0f104163          	bgtz	a7,9fe0255a <__kernel_rem_pio2+0x302>
    9fe0247c:	f2000753          	fmv.d.x	fa4,zero
    9fe02480:	a2eb27d3          	feq.d	a5,fs6,fa4
    9fe02484:	1a078263          	beqz	a5,9fe02628 <__kernel_rem_pio2+0x3d0>
    9fe02488:	fffa831b          	addiw	t1,s5,-1
    9fe0248c:	03934b63          	blt	t1,s9,9fe024c2 <__kernel_rem_pio2+0x26a>
    9fe02490:	fffcc713          	not	a4,s9
    9fe02494:	002a9593          	slli	a1,s5,0x2
    9fe02498:	0157073b          	addw	a4,a4,s5
    9fe0249c:	0834                	addi	a3,sp,24
    9fe0249e:	ffc58793          	addi	a5,a1,-4 # 3feffffc <CVIMMAP_DRAM_SIZE+0x1feffffc>
    9fe024a2:	95b6                	add	a1,a1,a3
    9fe024a4:	02071693          	slli	a3,a4,0x20
    9fe024a8:	01e6d713          	srli	a4,a3,0x1e
    9fe024ac:	1014                	addi	a3,sp,32
    9fe024ae:	8d99                	sub	a1,a1,a4
    9fe024b0:	97b6                	add	a5,a5,a3
    9fe024b2:	4701                	li	a4,0
    9fe024b4:	4390                	lw	a2,0(a5)
    9fe024b6:	17f1                	addi	a5,a5,-4
    9fe024b8:	8f51                	or	a4,a4,a2
    9fe024ba:	feb79de3          	bne	a5,a1,9fe024b4 <__kernel_rem_pio2+0x25c>
    9fe024be:	30071f63          	bnez	a4,9fe027dc <__kernel_rem_pio2+0x584>
    9fe024c2:	dd042783          	lw	a5,-560(s0)
    9fe024c6:	30079763          	bnez	a5,9fe027d4 <__kernel_rem_pio2+0x57c>
    9fe024ca:	87ca                	mv	a5,s2
    9fe024cc:	4705                	li	a4,1
    9fe024ce:	4390                	lw	a2,0(a5)
    9fe024d0:	2705                	addiw	a4,a4,1
    9fe024d2:	17f1                	addi	a5,a5,-4
    9fe024d4:	de6d                	beqz	a2,9fe024ce <__kernel_rem_pio2+0x276>
    9fe024d6:	001a851b          	addiw	a0,s5,1
    9fe024da:	00ea88bb          	addw	a7,s5,a4
    9fe024de:	00ad07bb          	addw	a5,s10,a0
    9fe024e2:	013a8333          	add	t1,s5,s3
    9fe024e6:	40f30333          	sub	t1,t1,a5
    9fe024ea:	00a48633          	add	a2,s1,a0
    9fe024ee:	078e                	slli	a5,a5,0x3
    9fe024f0:	1898                	addi	a4,sp,112
    9fe024f2:	060a                	slli	a2,a2,0x2
    9fe024f4:	00351593          	slli	a1,a0,0x3
    9fe024f8:	030e                	slli	t1,t1,0x3
    9fe024fa:	00f706b3          	add	a3,a4,a5
    9fe024fe:	1b1c                	addi	a5,sp,432
    9fe02500:	9652                	add	a2,a2,s4
    9fe02502:	95be                	add	a1,a1,a5
    9fe02504:	1361                	addi	t1,t1,-8
    9fe02506:	421c                	lw	a5,0(a2)
    9fe02508:	f20007d3          	fmv.d.x	fa5,zero
    9fe0250c:	d2078753          	fcvt.d.w	fa4,a5
    9fe02510:	a298                	fsd	fa4,0(a3)
    9fe02512:	000d4e63          	bltz	s10,9fe0252e <__kernel_rem_pio2+0x2d6>
    9fe02516:	00d30733          	add	a4,t1,a3
    9fe0251a:	87ee                	mv	a5,s11
    9fe0251c:	a021                	j	9fe02524 <__kernel_rem_pio2+0x2cc>
    9fe0251e:	2318                	fld	fa4,0(a4)
    9fe02520:	07a1                	addi	a5,a5,8
    9fe02522:	1761                	addi	a4,a4,-8
    9fe02524:	2394                	fld	fa3,0(a5)
    9fe02526:	7ae6f7c3          	fmadd.d	fa5,fa3,fa4,fa5
    9fe0252a:	ff879ae3          	bne	a5,s8,9fe0251e <__kernel_rem_pio2+0x2c6>
    9fe0252e:	a19c                	fsd	fa5,0(a1)
    9fe02530:	2505                	addiw	a0,a0,1
    9fe02532:	0611                	addi	a2,a2,4
    9fe02534:	06a1                	addi	a3,a3,8
    9fe02536:	05a1                	addi	a1,a1,8
    9fe02538:	fca8d7e3          	bge	a7,a0,9fe02506 <__kernel_rem_pio2+0x2ae>
    9fe0253c:	8ac6                	mv	s5,a7
    9fe0253e:	b579                	j	9fe023cc <__kernel_rem_pio2+0x174>
    9fe02540:	260b1d63          	bnez	s6,9fe027ba <__kernel_rem_pio2+0x562>
    9fe02544:	fffa879b          	addiw	a5,s5,-1
    9fe02548:	078a                	slli	a5,a5,0x2
    9fe0254a:	0c98                	addi	a4,sp,592
    9fe0254c:	97ba                	add	a5,a5,a4
    9fe0254e:	dd07a883          	lw	a7,-560(a5)
    9fe02552:	4178d89b          	sraiw	a7,a7,0x17
    9fe02556:	f31053e3          	blez	a7,9fe0247c <__kernel_rem_pio2+0x224>
    9fe0255a:	2b85                	addiw	s7,s7,1
    9fe0255c:	39505e63          	blez	s5,9fe028f8 <__kernel_rem_pio2+0x6a0>
    9fe02560:	5782                	lw	a5,32(sp)
    9fe02562:	24079963          	bnez	a5,9fe027b4 <__kernel_rem_pio2+0x55c>
    9fe02566:	4705                	li	a4,1
    9fe02568:	06ea8763          	beq	s5,a4,9fe025d6 <__kernel_rem_pio2+0x37e>
    9fe0256c:	5792                	lw	a5,36(sp)
    9fe0256e:	1050                	addi	a2,sp,36
    9fe02570:	0017051b          	addiw	a0,a4,1
    9fe02574:	0611                	addi	a2,a2,4
    9fe02576:	eb89                	bnez	a5,9fe02588 <__kernel_rem_pio2+0x330>
    9fe02578:	04aa8f63          	beq	s5,a0,9fe025d6 <__kernel_rem_pio2+0x37e>
    9fe0257c:	421c                	lw	a5,0(a2)
    9fe0257e:	872a                	mv	a4,a0
    9fe02580:	0017051b          	addiw	a0,a4,1
    9fe02584:	0611                	addi	a2,a2,4
    9fe02586:	dbed                	beqz	a5,9fe02578 <__kernel_rem_pio2+0x320>
    9fe02588:	00271613          	slli	a2,a4,0x2
    9fe0258c:	0c94                	addi	a3,sp,592
    9fe0258e:	01000737          	lui	a4,0x1000
    9fe02592:	9636                	add	a2,a2,a3
    9fe02594:	40f707bb          	subw	a5,a4,a5
    9fe02598:	dcf62823          	sw	a5,-560(a2) # ffffffff7ffffdd0 <_end+0xfffffffee01400d0>
    9fe0259c:	03555c63          	bge	a0,s5,9fe025d4 <__kernel_rem_pio2+0x37c>
    9fe025a0:	fffa879b          	addiw	a5,s5,-1
    9fe025a4:	9f89                	subw	a5,a5,a0
    9fe025a6:	1782                	slli	a5,a5,0x20
    9fe025a8:	00251613          	slli	a2,a0,0x2
    9fe025ac:	9381                	srli	a5,a5,0x20
    9fe025ae:	00c685b3          	add	a1,a3,a2
    9fe025b2:	97aa                	add	a5,a5,a0
    9fe025b4:	1014                	addi	a3,sp,32
    9fe025b6:	078a                	slli	a5,a5,0x2
    9fe025b8:	9636                	add	a2,a2,a3
    9fe025ba:	1054                	addi	a3,sp,36
    9fe025bc:	dd05a583          	lw	a1,-560(a1)
    9fe025c0:	97b6                	add	a5,a5,a3
    9fe025c2:	377d                	addiw	a4,a4,-1
    9fe025c4:	a011                	j	9fe025c8 <__kernel_rem_pio2+0x370>
    9fe025c6:	420c                	lw	a1,0(a2)
    9fe025c8:	40b705bb          	subw	a1,a4,a1
    9fe025cc:	c20c                	sw	a1,0(a2)
    9fe025ce:	0611                	addi	a2,a2,4
    9fe025d0:	fef61be3          	bne	a2,a5,9fe025c6 <__kernel_rem_pio2+0x36e>
    9fe025d4:	4785                	li	a5,1
    9fe025d6:	03605363          	blez	s6,9fe025fc <__kernel_rem_pio2+0x3a4>
    9fe025da:	4705                	li	a4,1
    9fe025dc:	2eeb0463          	beq	s6,a4,9fe028c4 <__kernel_rem_pio2+0x66c>
    9fe025e0:	4709                	li	a4,2
    9fe025e2:	00eb1d63          	bne	s6,a4,9fe025fc <__kernel_rem_pio2+0x3a4>
    9fe025e6:	fffa871b          	addiw	a4,s5,-1
    9fe025ea:	070a                	slli	a4,a4,0x2
    9fe025ec:	0c94                	addi	a3,sp,592
    9fe025ee:	9736                	add	a4,a4,a3
    9fe025f0:	dd072603          	lw	a2,-560(a4) # fffdd0 <CVIMMAP_FREERTOS_SIZE+0xdffdd0>
    9fe025f4:	162a                	slli	a2,a2,0x2a
    9fe025f6:	9229                	srli	a2,a2,0x2a
    9fe025f8:	dcc72823          	sw	a2,-560(a4)
    9fe025fc:	4709                	li	a4,2
    9fe025fe:	e6e89fe3          	bne	a7,a4,9fe0247c <__kernel_rem_pio2+0x224>
    9fe02602:	0b697b53          	fsub.d	fs6,fs2,fs6
    9fe02606:	e6078be3          	beqz	a5,9fe0247c <__kernel_rem_pio2+0x224>
    9fe0260a:	23290553          	fmv.d	fa0,fs2
    9fe0260e:	855a                	mv	a0,s6
    9fe02610:	ec46                	sd	a7,24(sp)
    9fe02612:	5ca000ef          	jal	ra,9fe02bdc <scalbn>
    9fe02616:	0aab7b53          	fsub.d	fs6,fs6,fa0
    9fe0261a:	f2000753          	fmv.d.x	fa4,zero
    9fe0261e:	68e2                	ld	a7,24(sp)
    9fe02620:	a2eb27d3          	feq.d	a5,fs6,fa4
    9fe02624:	e60792e3          	bnez	a5,9fe02488 <__kernel_rem_pio2+0x230>
    9fe02628:	4442                	lw	s0,16(sp)
    9fe0262a:	236b0553          	fmv.d	fa0,fs6
    9fe0262e:	ec46                	sd	a7,24(sp)
    9fe02630:	4080053b          	negw	a0,s0
    9fe02634:	5a8000ef          	jal	ra,9fe02bdc <scalbn>
    9fe02638:	00010797          	auipc	a5,0x10
    9fe0263c:	0507b607          	fld	fa2,80(a5) # 9fe12688 <xISRStackTop+0x238>
    9fe02640:	a2a607d3          	fle.d	a5,fa2,fa0
    9fe02644:	68e2                	ld	a7,24(sp)
    9fe02646:	30078063          	beqz	a5,9fe02946 <__kernel_rem_pio2+0x6ee>
    9fe0264a:	00010797          	auipc	a5,0x10
    9fe0264e:	08e7b687          	fld	fa3,142(a5) # 9fe126d8 <xISRStackTop+0x288>
    9fe02652:	12d576d3          	fmul.d	fa3,fa0,fa3
    9fe02656:	0c9c                	addi	a5,sp,592
    9fe02658:	002a9713          	slli	a4,s5,0x2
    9fe0265c:	001a831b          	addiw	t1,s5,1
    9fe02660:	973e                	add	a4,a4,a5
    9fe02662:	0c94                	addi	a3,sp,592
    9fe02664:	00231793          	slli	a5,t1,0x2
    9fe02668:	97b6                	add	a5,a5,a3
    9fe0266a:	c20696d3          	fcvt.w.d	a3,fa3,rtz
    9fe0266e:	01840b1b          	addiw	s6,s0,24
    9fe02672:	d2068753          	fcvt.d.w	fa4,a3
    9fe02676:	52c777cb          	fnmsub.d	fa5,fa4,fa2,fa0
    9fe0267a:	c2079653          	fcvt.w.d	a2,fa5,rtz
    9fe0267e:	dcc72823          	sw	a2,-560(a4)
    9fe02682:	dcd7a823          	sw	a3,-560(a5)
    9fe02686:	23290553          	fmv.d	fa0,fs2
    9fe0268a:	855a                	mv	a0,s6
    9fe0268c:	ec1a                	sd	t1,24(sp)
    9fe0268e:	e846                	sd	a7,16(sp)
    9fe02690:	54c000ef          	jal	ra,9fe02bdc <scalbn>
    9fe02694:	6362                	ld	t1,24(sp)
    9fe02696:	68c2                	ld	a7,16(sp)
    9fe02698:	2e034863          	bltz	t1,9fe02988 <__kernel_rem_pio2+0x730>
    9fe0269c:	1b18                	addi	a4,sp,432
    9fe0269e:	00331f13          	slli	t5,t1,0x3
    9fe026a2:	01e705b3          	add	a1,a4,t5
    9fe026a6:	00231793          	slli	a5,t1,0x2
    9fe026aa:	1018                	addi	a4,sp,32
    9fe026ac:	97ba                	add	a5,a5,a4
    9fe026ae:	0870                	addi	a2,sp,28
    9fe026b0:	872e                	mv	a4,a1
    9fe026b2:	00010697          	auipc	a3,0x10
    9fe026b6:	0266b687          	fld	fa3,38(a3) # 9fe126d8 <xISRStackTop+0x288>
    9fe026ba:	4394                	lw	a3,0(a5)
    9fe026bc:	1761                	addi	a4,a4,-8
    9fe026be:	17f1                	addi	a5,a5,-4
    9fe026c0:	d20687d3          	fcvt.d.w	fa5,a3
    9fe026c4:	12a7f7d3          	fmul.d	fa5,fa5,fa0
    9fe026c8:	12d57553          	fmul.d	fa0,fa0,fa3
    9fe026cc:	a71c                	fsd	fa5,8(a4)
    9fe026ce:	fec796e3          	bne	a5,a2,9fe026ba <__kernel_rem_pio2+0x462>
    9fe026d2:	11010813          	addi	a6,sp,272
    9fe026d6:	851a                	mv	a0,t1
    9fe026d8:	4e81                	li	t4,0
    9fe026da:	00010797          	auipc	a5,0x10
    9fe026de:	ff67b607          	fld	fa2,-10(a5) # 9fe126d0 <xISRStackTop+0x280>
    9fe026e2:	5ffd                	li	t6,-1
    9fe026e4:	1e0ccf63          	bltz	s9,9fe028e2 <__kernel_rem_pio2+0x68a>
    9fe026e8:	22c60753          	fmv.d	fa4,fa2
    9fe026ec:	f20007d3          	fmv.d.x	fa5,zero
    9fe026f0:	0000e697          	auipc	a3,0xe
    9fe026f4:	4e068693          	addi	a3,a3,1248 # 9fe10bd0 <PIo2>
    9fe026f8:	872e                	mv	a4,a1
    9fe026fa:	4781                	li	a5,0
    9fe026fc:	000e861b          	sext.w	a2,t4
    9fe02700:	a029                	j	9fe0270a <__kernel_rem_pio2+0x4b2>
    9fe02702:	0721                	addi	a4,a4,8
    9fe02704:	00f64a63          	blt	a2,a5,9fe02718 <__kernel_rem_pio2+0x4c0>
    9fe02708:	2298                	fld	fa4,0(a3)
    9fe0270a:	2314                	fld	fa3,0(a4)
    9fe0270c:	2785                	addiw	a5,a5,1
    9fe0270e:	06a1                	addi	a3,a3,8
    9fe02710:	7ae6f7c3          	fmadd.d	fa5,fa3,fa4,fa5
    9fe02714:	fefcd7e3          	bge	s9,a5,9fe02702 <__kernel_rem_pio2+0x4aa>
    9fe02718:	00f83027          	fsd	fa5,0(a6) # 100000 <CVIMMAP_ATF_SIZE+0x80000>
    9fe0271c:	357d                	addiw	a0,a0,-1
    9fe0271e:	0e85                	addi	t4,t4,1
    9fe02720:	0821                	addi	a6,a6,8
    9fe02722:	15e1                	addi	a1,a1,-8
    9fe02724:	fdf510e3          	bne	a0,t6,9fe026e4 <__kernel_rem_pio2+0x48c>
    9fe02728:	6722                	ld	a4,8(sp)
    9fe0272a:	4789                	li	a5,2
    9fe0272c:	0ce7cc63          	blt	a5,a4,9fe02804 <__kernel_rem_pio2+0x5ac>
    9fe02730:	1ce04663          	bgtz	a4,9fe028fc <__kernel_rem_pio2+0x6a4>
    9fe02734:	e31d                	bnez	a4,9fe0275a <__kernel_rem_pio2+0x502>
    9fe02736:	f20007d3          	fmv.d.x	fa5,zero
    9fe0273a:	0a1c                	addi	a5,sp,272
    9fe0273c:	9f3e                	add	t5,t5,a5
    9fe0273e:	17e1                	addi	a5,a5,-8
    9fe02740:	000f3707          	fld	fa4,0(t5)
    9fe02744:	1f61                	addi	t5,t5,-8
    9fe02746:	02e7f7d3          	fadd.d	fa5,fa5,fa4
    9fe0274a:	ffe79be3          	bne	a5,t5,9fe02740 <__kernel_rem_pio2+0x4e8>
    9fe0274e:	00088463          	beqz	a7,9fe02756 <__kernel_rem_pio2+0x4fe>
    9fe02752:	22f797d3          	fneg.d	fa5,fa5
    9fe02756:	6782                	ld	a5,0(sp)
    9fe02758:	a39c                	fsd	fa5,0(a5)
    9fe0275a:	2f813083          	ld	ra,760(sp)
    9fe0275e:	2f013403          	ld	s0,752(sp)
    9fe02762:	2e813483          	ld	s1,744(sp)
    9fe02766:	2e013903          	ld	s2,736(sp)
    9fe0276a:	2d813983          	ld	s3,728(sp)
    9fe0276e:	2d013a03          	ld	s4,720(sp)
    9fe02772:	2c813a83          	ld	s5,712(sp)
    9fe02776:	2c013b03          	ld	s6,704(sp)
    9fe0277a:	2b013c03          	ld	s8,688(sp)
    9fe0277e:	2a813c83          	ld	s9,680(sp)
    9fe02782:	2a013d03          	ld	s10,672(sp)
    9fe02786:	29813d83          	ld	s11,664(sp)
    9fe0278a:	28813407          	fld	fs0,648(sp)
    9fe0278e:	28013487          	fld	fs1,640(sp)
    9fe02792:	27813907          	fld	fs2,632(sp)
    9fe02796:	27013987          	fld	fs3,624(sp)
    9fe0279a:	26813a07          	fld	fs4,616(sp)
    9fe0279e:	26013a87          	fld	fs5,608(sp)
    9fe027a2:	25813b07          	fld	fs6,600(sp)
    9fe027a6:	007bf513          	andi	a0,s7,7
    9fe027aa:	2b813b83          	ld	s7,696(sp)
    9fe027ae:	30010113          	addi	sp,sp,768
    9fe027b2:	8082                	ret
    9fe027b4:	4505                	li	a0,1
    9fe027b6:	4701                	li	a4,0
    9fe027b8:	bbc1                	j	9fe02588 <__kernel_rem_pio2+0x330>
    9fe027ba:	a36987d3          	fle.d	a5,fs3,fs6
    9fe027be:	4881                	li	a7,0
    9fe027c0:	ca078ee3          	beqz	a5,9fe0247c <__kernel_rem_pio2+0x224>
    9fe027c4:	00160b9b          	addiw	s7,a2,1
    9fe027c8:	4889                	li	a7,2
    9fe027ca:	d9504be3          	bgtz	s5,9fe02560 <__kernel_rem_pio2+0x308>
    9fe027ce:	0b697b53          	fsub.d	fs6,fs2,fs6
    9fe027d2:	b16d                	j	9fe0247c <__kernel_rem_pio2+0x224>
    9fe027d4:	001a851b          	addiw	a0,s5,1
    9fe027d8:	88aa                	mv	a7,a0
    9fe027da:	b311                	j	9fe024de <__kernel_rem_pio2+0x286>
    9fe027dc:	00231793          	slli	a5,t1,0x2
    9fe027e0:	0c98                	addi	a4,sp,592
    9fe027e2:	973e                	add	a4,a4,a5
    9fe027e4:	46c2                	lw	a3,16(sp)
    9fe027e6:	dd072703          	lw	a4,-560(a4)
    9fe027ea:	fe868b1b          	addiw	s6,a3,-24
    9fe027ee:	e8071ce3          	bnez	a4,9fe02686 <__kernel_rem_pio2+0x42e>
    9fe027f2:	17f1                	addi	a5,a5,-4
    9fe027f4:	1018                	addi	a4,sp,32
    9fe027f6:	97ba                	add	a5,a5,a4
    9fe027f8:	4398                	lw	a4,0(a5)
    9fe027fa:	337d                	addiw	t1,t1,-1
    9fe027fc:	17f1                	addi	a5,a5,-4
    9fe027fe:	3b21                	addiw	s6,s6,-24
    9fe02800:	df65                	beqz	a4,9fe027f8 <__kernel_rem_pio2+0x5a0>
    9fe02802:	b551                	j	9fe02686 <__kernel_rem_pio2+0x42e>
    9fe02804:	6722                	ld	a4,8(sp)
    9fe02806:	478d                	li	a5,3
    9fe02808:	f4f719e3          	bne	a4,a5,9fe0275a <__kernel_rem_pio2+0x502>
    9fe0280c:	04030163          	beqz	t1,9fe0284e <__kernel_rem_pio2+0x5f6>
    9fe02810:	fff3069b          	addiw	a3,t1,-1
    9fe02814:	0c9c                	addi	a5,sp,592
    9fe02816:	97fa                	add	a5,a5,t5
    9fe02818:	02069613          	slli	a2,a3,0x20
    9fe0281c:	0218                	addi	a4,sp,256
    9fe0281e:	01d65693          	srli	a3,a2,0x1d
    9fe02822:	ec07b707          	fld	fa4,-320(a5)
    9fe02826:	977a                	add	a4,a4,t5
    9fe02828:	ff8f0793          	addi	a5,t5,-8
    9fe0282c:	0a10                	addi	a2,sp,272
    9fe0282e:	97b2                	add	a5,a5,a2
    9fe02830:	8f15                	sub	a4,a4,a3
    9fe02832:	239c                	fld	fa5,0(a5)
    9fe02834:	22e706d3          	fmv.d	fa3,fa4
    9fe02838:	17e1                	addi	a5,a5,-8
    9fe0283a:	02f77753          	fadd.d	fa4,fa4,fa5
    9fe0283e:	0ae7f7d3          	fsub.d	fa5,fa5,fa4
    9fe02842:	a798                	fsd	fa4,8(a5)
    9fe02844:	02d7f7d3          	fadd.d	fa5,fa5,fa3
    9fe02848:	ab9c                	fsd	fa5,16(a5)
    9fe0284a:	fef714e3          	bne	a4,a5,9fe02832 <__kernel_rem_pio2+0x5da>
    9fe0284e:	4785                	li	a5,1
    9fe02850:	f20007d3          	fmv.d.x	fa5,zero
    9fe02854:	0467df63          	bge	a5,t1,9fe028b2 <__kernel_rem_pio2+0x65a>
    9fe02858:	ffe3069b          	addiw	a3,t1,-2
    9fe0285c:	02069713          	slli	a4,a3,0x20
    9fe02860:	0c9c                	addi	a5,sp,592
    9fe02862:	97fa                	add	a5,a5,t5
    9fe02864:	01d75693          	srli	a3,a4,0x1d
    9fe02868:	0218                	addi	a4,sp,256
    9fe0286a:	ec07b707          	fld	fa4,-320(a5)
    9fe0286e:	977a                	add	a4,a4,t5
    9fe02870:	ff8f0793          	addi	a5,t5,-8
    9fe02874:	0a10                	addi	a2,sp,272
    9fe02876:	97b2                	add	a5,a5,a2
    9fe02878:	8f15                	sub	a4,a4,a3
    9fe0287a:	239c                	fld	fa5,0(a5)
    9fe0287c:	22e706d3          	fmv.d	fa3,fa4
    9fe02880:	17e1                	addi	a5,a5,-8
    9fe02882:	02f77753          	fadd.d	fa4,fa4,fa5
    9fe02886:	0ae7f7d3          	fsub.d	fa5,fa5,fa4
    9fe0288a:	a798                	fsd	fa4,8(a5)
    9fe0288c:	02d7f7d3          	fadd.d	fa5,fa5,fa3
    9fe02890:	ab9c                	fsd	fa5,16(a5)
    9fe02892:	fee794e3          	bne	a5,a4,9fe0287a <__kernel_rem_pio2+0x622>
    9fe02896:	023c                	addi	a5,sp,264
    9fe02898:	f20007d3          	fmv.d.x	fa5,zero
    9fe0289c:	97fa                	add	a5,a5,t5
    9fe0289e:	0a18                	addi	a4,sp,272
    9fe028a0:	9f3a                	add	t5,t5,a4
    9fe028a2:	8f95                	sub	a5,a5,a3
    9fe028a4:	000f3707          	fld	fa4,0(t5)
    9fe028a8:	1f61                	addi	t5,t5,-8
    9fe028aa:	02e7f7d3          	fadd.d	fa5,fa5,fa4
    9fe028ae:	ffe79be3          	bne	a5,t5,9fe028a4 <__kernel_rem_pio2+0x64c>
    9fe028b2:	26d2                	fld	fa3,272(sp)
    9fe028b4:	2772                	fld	fa4,280(sp)
    9fe028b6:	0a089263          	bnez	a7,9fe0295a <__kernel_rem_pio2+0x702>
    9fe028ba:	6782                	ld	a5,0(sp)
    9fe028bc:	a394                	fsd	fa3,0(a5)
    9fe028be:	a798                	fsd	fa4,8(a5)
    9fe028c0:	ab9c                	fsd	fa5,16(a5)
    9fe028c2:	bd61                	j	9fe0275a <__kernel_rem_pio2+0x502>
    9fe028c4:	fffa871b          	addiw	a4,s5,-1
    9fe028c8:	070a                	slli	a4,a4,0x2
    9fe028ca:	0c94                	addi	a3,sp,592
    9fe028cc:	9736                	add	a4,a4,a3
    9fe028ce:	dd072603          	lw	a2,-560(a4)
    9fe028d2:	1626                	slli	a2,a2,0x29
    9fe028d4:	9225                	srli	a2,a2,0x29
    9fe028d6:	dcc72823          	sw	a2,-560(a4)
    9fe028da:	b30d                	j	9fe025fc <__kernel_rem_pio2+0x3a4>
    9fe028dc:	57a1                	li	a5,-24
    9fe028de:	4481                	li	s1,0
    9fe028e0:	bc01                	j	9fe022f0 <__kernel_rem_pio2+0x98>
    9fe028e2:	f20007d3          	fmv.d.x	fa5,zero
    9fe028e6:	357d                	addiw	a0,a0,-1
    9fe028e8:	0e85                	addi	t4,t4,1
    9fe028ea:	00f83027          	fsd	fa5,0(a6)
    9fe028ee:	15e1                	addi	a1,a1,-8
    9fe028f0:	0821                	addi	a6,a6,8
    9fe028f2:	dff519e3          	bne	a0,t6,9fe026e4 <__kernel_rem_pio2+0x48c>
    9fe028f6:	bd0d                	j	9fe02728 <__kernel_rem_pio2+0x4d0>
    9fe028f8:	4781                	li	a5,0
    9fe028fa:	b9f1                	j	9fe025d6 <__kernel_rem_pio2+0x37e>
    9fe028fc:	f20007d3          	fmv.d.x	fa5,zero
    9fe02900:	0a1c                	addi	a5,sp,272
    9fe02902:	9f3e                	add	t5,t5,a5
    9fe02904:	023c                	addi	a5,sp,264
    9fe02906:	000f3707          	fld	fa4,0(t5)
    9fe0290a:	1f61                	addi	t5,t5,-8
    9fe0290c:	02e7f7d3          	fadd.d	fa5,fa5,fa4
    9fe02910:	ffe79be3          	bne	a5,t5,9fe02906 <__kernel_rem_pio2+0x6ae>
    9fe02914:	04089e63          	bnez	a7,9fe02970 <__kernel_rem_pio2+0x718>
    9fe02918:	6782                	ld	a5,0(sp)
    9fe0291a:	2752                	fld	fa4,272(sp)
    9fe0291c:	a39c                	fsd	fa5,0(a5)
    9fe0291e:	0af777d3          	fsub.d	fa5,fa4,fa5
    9fe02922:	00605f63          	blez	t1,9fe02940 <__kernel_rem_pio2+0x6e8>
    9fe02926:	0a38                	addi	a4,sp,280
    9fe02928:	4785                	li	a5,1
    9fe0292a:	2318                	fld	fa4,0(a4)
    9fe0292c:	2785                	addiw	a5,a5,1
    9fe0292e:	0721                	addi	a4,a4,8
    9fe02930:	02e7f7d3          	fadd.d	fa5,fa5,fa4
    9fe02934:	fef35be3          	bge	t1,a5,9fe0292a <__kernel_rem_pio2+0x6d2>
    9fe02938:	00088463          	beqz	a7,9fe02940 <__kernel_rem_pio2+0x6e8>
    9fe0293c:	22f797d3          	fneg.d	fa5,fa5
    9fe02940:	6782                	ld	a5,0(sp)
    9fe02942:	a79c                	fsd	fa5,8(a5)
    9fe02944:	bd19                	j	9fe0275a <__kernel_rem_pio2+0x502>
    9fe02946:	c2051753          	fcvt.w.d	a4,fa0,rtz
    9fe0294a:	002a9793          	slli	a5,s5,0x2
    9fe0294e:	0c94                	addi	a3,sp,592
    9fe02950:	97b6                	add	a5,a5,a3
    9fe02952:	dce7a823          	sw	a4,-560(a5)
    9fe02956:	8356                	mv	t1,s5
    9fe02958:	b33d                	j	9fe02686 <__kernel_rem_pio2+0x42e>
    9fe0295a:	6782                	ld	a5,0(sp)
    9fe0295c:	22d696d3          	fneg.d	fa3,fa3
    9fe02960:	22e71753          	fneg.d	fa4,fa4
    9fe02964:	22f797d3          	fneg.d	fa5,fa5
    9fe02968:	a394                	fsd	fa3,0(a5)
    9fe0296a:	a798                	fsd	fa4,8(a5)
    9fe0296c:	ab9c                	fsd	fa5,16(a5)
    9fe0296e:	b3f5                	j	9fe0275a <__kernel_rem_pio2+0x502>
    9fe02970:	22f79753          	fneg.d	fa4,fa5
    9fe02974:	6782                	ld	a5,0(sp)
    9fe02976:	a398                	fsd	fa4,0(a5)
    9fe02978:	2752                	fld	fa4,272(sp)
    9fe0297a:	0af777d3          	fsub.d	fa5,fa4,fa5
    9fe0297e:	fa6044e3          	bgtz	t1,9fe02926 <__kernel_rem_pio2+0x6ce>
    9fe02982:	22f797d3          	fneg.d	fa5,fa5
    9fe02986:	bf6d                	j	9fe02940 <__kernel_rem_pio2+0x6e8>
    9fe02988:	6722                	ld	a4,8(sp)
    9fe0298a:	4789                	li	a5,2
    9fe0298c:	00e7cb63          	blt	a5,a4,9fe029a2 <__kernel_rem_pio2+0x74a>
    9fe02990:	f20007d3          	fmv.d.x	fa5,zero
    9fe02994:	f8e040e3          	bgtz	a4,9fe02914 <__kernel_rem_pio2+0x6bc>
    9fe02998:	dc0711e3          	bnez	a4,9fe0275a <__kernel_rem_pio2+0x502>
    9fe0299c:	da088de3          	beqz	a7,9fe02756 <__kernel_rem_pio2+0x4fe>
    9fe029a0:	bb4d                	j	9fe02752 <__kernel_rem_pio2+0x4fa>
    9fe029a2:	6722                	ld	a4,8(sp)
    9fe029a4:	478d                	li	a5,3
    9fe029a6:	f20007d3          	fmv.d.x	fa5,zero
    9fe029aa:	f0f704e3          	beq	a4,a5,9fe028b2 <__kernel_rem_pio2+0x65a>
    9fe029ae:	b375                	j	9fe0275a <__kernel_rem_pio2+0x502>

000000009fe029b0 <__kernel_sin>:
    9fe029b0:	e20507d3          	fmv.x.d	a5,fa0
    9fe029b4:	3e4006b7          	lui	a3,0x3e400
    9fe029b8:	00179713          	slli	a4,a5,0x1
    9fe029bc:	9305                	srli	a4,a4,0x21
    9fe029be:	00d75663          	bge	a4,a3,9fe029ca <__kernel_sin+0x1a>
    9fe029c2:	c2051753          	fcvt.w.d	a4,fa0,rtz
    9fe029c6:	2701                	sext.w	a4,a4
    9fe029c8:	c749                	beqz	a4,9fe02a52 <__kernel_sin+0xa2>
    9fe029ca:	f20787d3          	fmv.d.x	fa5,a5
    9fe029ce:	00010717          	auipc	a4,0x10
    9fe029d2:	d2a73507          	fld	fa0,-726(a4) # 9fe126f8 <xISRStackTop+0x2a8>
    9fe029d6:	00010717          	auipc	a4,0x10
    9fe029da:	d2a73007          	fld	ft0,-726(a4) # 9fe12700 <xISRStackTop+0x2b0>
    9fe029de:	12f7f753          	fmul.d	fa4,fa5,fa5
    9fe029e2:	00010717          	auipc	a4,0x10
    9fe029e6:	d0e73787          	fld	fa5,-754(a4) # 9fe126f0 <xISRStackTop+0x2a0>
    9fe029ea:	00010717          	auipc	a4,0x10
    9fe029ee:	d1e73607          	fld	fa2,-738(a4) # 9fe12708 <xISRStackTop+0x2b8>
    9fe029f2:	00010717          	auipc	a4,0x10
    9fe029f6:	d1e73687          	fld	fa3,-738(a4) # 9fe12710 <xISRStackTop+0x2c0>
    9fe029fa:	52f777c3          	fmadd.d	fa5,fa4,fa5,fa0
    9fe029fe:	f2078553          	fmv.d.x	fa0,a5
    9fe02a02:	12e57553          	fmul.d	fa0,fa0,fa4
    9fe02a06:	02e7f7c3          	fmadd.d	fa5,fa5,fa4,ft0
    9fe02a0a:	62e7f7c3          	fmadd.d	fa5,fa5,fa4,fa2
    9fe02a0e:	6ae7f7c3          	fmadd.d	fa5,fa5,fa4,fa3
    9fe02a12:	ed01                	bnez	a0,9fe02a2a <__kernel_sin+0x7a>
    9fe02a14:	00010717          	auipc	a4,0x10
    9fe02a18:	d0473687          	fld	fa3,-764(a4) # 9fe12718 <xISRStackTop+0x2c8>
    9fe02a1c:	6af777c3          	fmadd.d	fa5,fa4,fa5,fa3
    9fe02a20:	f2078753          	fmv.d.x	fa4,a5
    9fe02a24:	72a7f543          	fmadd.d	fa0,fa5,fa0,fa4
    9fe02a28:	8082                	ret
    9fe02a2a:	12f577d3          	fmul.d	fa5,fa0,fa5
    9fe02a2e:	00010717          	auipc	a4,0x10
    9fe02a32:	82a73687          	fld	fa3,-2006(a4) # 9fe12258 <__func__.1+0xa0>
    9fe02a36:	00010717          	auipc	a4,0x10
    9fe02a3a:	cea73607          	fld	fa2,-790(a4) # 9fe12720 <xISRStackTop+0x2d0>
    9fe02a3e:	7ad5f7c7          	fmsub.d	fa5,fa1,fa3,fa5
    9fe02a42:	5ae7f5c7          	fmsub.d	fa1,fa5,fa4,fa1
    9fe02a46:	f20787d3          	fmv.d.x	fa5,a5
    9fe02a4a:	5ac57543          	fmadd.d	fa0,fa0,fa2,fa1
    9fe02a4e:	0aa7f553          	fsub.d	fa0,fa5,fa0
    9fe02a52:	8082                	ret

000000009fe02a54 <finite>:
    9fe02a54:	e2050553          	fmv.x.d	a0,fa0
    9fe02a58:	801007b7          	lui	a5,0x80100
    9fe02a5c:	0506                	slli	a0,a0,0x1
    9fe02a5e:	9105                	srli	a0,a0,0x21
    9fe02a60:	9d3d                	addw	a0,a0,a5
    9fe02a62:	01f5551b          	srliw	a0,a0,0x1f
    9fe02a66:	8082                	ret

000000009fe02a68 <nan>:
    9fe02a68:	00010797          	auipc	a5,0x10
    9fe02a6c:	cc07b507          	fld	fa0,-832(a5) # 9fe12728 <xISRStackTop+0x2d8>
    9fe02a70:	8082                	ret

000000009fe02a72 <rint>:
    9fe02a72:	e20507d3          	fmv.x.d	a5,fa0
    9fe02a76:	454d                	li	a0,19
    9fe02a78:	1141                	addi	sp,sp,-16
    9fe02a7a:	4347d613          	srai	a2,a5,0x34
    9fe02a7e:	7ff67613          	andi	a2,a2,2047
    9fe02a82:	c016059b          	addiw	a1,a2,-1023
    9fe02a86:	4207d713          	srai	a4,a5,0x20
    9fe02a8a:	0007869b          	sext.w	a3,a5
    9fe02a8e:	0007a893          	slti	a7,a5,0
    9fe02a92:	0eb54d63          	blt	a0,a1,9fe02b8c <rint+0x11a>
    9fe02a96:	0605cd63          	bltz	a1,9fe02b10 <rint+0x9e>
    9fe02a9a:	00100637          	lui	a2,0x100
    9fe02a9e:	367d                	addiw	a2,a2,-1
    9fe02aa0:	40b6563b          	sraw	a2,a2,a1
    9fe02aa4:	00c77833          	and	a6,a4,a2
    9fe02aa8:	00d86833          	or	a6,a6,a3
    9fe02aac:	2801                	sext.w	a6,a6
    9fe02aae:	04080d63          	beqz	a6,9fe02b08 <rint+0x96>
    9fe02ab2:	0016561b          	srliw	a2,a2,0x1
    9fe02ab6:	00c777b3          	and	a5,a4,a2
    9fe02aba:	8edd                	or	a3,a3,a5
    9fe02abc:	2681                	sext.w	a3,a3
    9fe02abe:	ce99                	beqz	a3,9fe02adc <rint+0x6a>
    9fe02ac0:	800006b7          	lui	a3,0x80000
    9fe02ac4:	00a58363          	beq	a1,a0,9fe02aca <rint+0x58>
    9fe02ac8:	4681                	li	a3,0
    9fe02aca:	fff64613          	not	a2,a2
    9fe02ace:	000407b7          	lui	a5,0x40
    9fe02ad2:	8f71                	and	a4,a4,a2
    9fe02ad4:	40b7d5bb          	sraw	a1,a5,a1
    9fe02ad8:	8f4d                	or	a4,a4,a1
    9fe02ada:	2701                	sext.w	a4,a4
    9fe02adc:	1682                	slli	a3,a3,0x20
    9fe02ade:	00389793          	slli	a5,a7,0x3
    9fe02ae2:	0000e617          	auipc	a2,0xe
    9fe02ae6:	12e60613          	addi	a2,a2,302 # 9fe10c10 <TWO52>
    9fe02aea:	9281                	srli	a3,a3,0x20
    9fe02aec:	1702                	slli	a4,a4,0x20
    9fe02aee:	97b2                	add	a5,a5,a2
    9fe02af0:	8f55                	or	a4,a4,a3
    9fe02af2:	2398                	fld	fa4,0(a5)
    9fe02af4:	f20707d3          	fmv.d.x	fa5,a4
    9fe02af8:	02f777d3          	fadd.d	fa5,fa4,fa5
    9fe02afc:	a43e                	fsd	fa5,8(sp)
    9fe02afe:	27a2                	fld	fa5,8(sp)
    9fe02b00:	0ae7f7d3          	fsub.d	fa5,fa5,fa4
    9fe02b04:	e20787d3          	fmv.x.d	a5,fa5
    9fe02b08:	f2078553          	fmv.d.x	fa0,a5
    9fe02b0c:	0141                	addi	sp,sp,16
    9fe02b0e:	8082                	ret
    9fe02b10:	800005b7          	lui	a1,0x80000
    9fe02b14:	fff5c593          	not	a1,a1
    9fe02b18:	00b77633          	and	a2,a4,a1
    9fe02b1c:	8e55                	or	a2,a2,a3
    9fe02b1e:	d66d                	beqz	a2,9fe02b08 <rint+0x96>
    9fe02b20:	883a                	mv	a6,a4
    9fe02b22:	1732                	slli	a4,a4,0x2c
    9fe02b24:	9331                	srli	a4,a4,0x2c
    9fe02b26:	8ed9                	or	a3,a3,a4
    9fe02b28:	40d0073b          	negw	a4,a3
    9fe02b2c:	8f55                	or	a4,a4,a3
    9fe02b2e:	00c7571b          	srliw	a4,a4,0xc
    9fe02b32:	000806b7          	lui	a3,0x80
    9fe02b36:	8f75                	and	a4,a4,a3
    9fe02b38:	0000e617          	auipc	a2,0xe
    9fe02b3c:	0d860613          	addi	a2,a2,216 # 9fe10c10 <TWO52>
    9fe02b40:	088e                	slli	a7,a7,0x3
    9fe02b42:	7681                	lui	a3,0xfffe0
    9fe02b44:	00d876b3          	and	a3,a6,a3
    9fe02b48:	98b2                	add	a7,a7,a2
    9fe02b4a:	567d                	li	a2,-1
    9fe02b4c:	9201                	srli	a2,a2,0x20
    9fe02b4e:	8f55                	or	a4,a4,a3
    9fe02b50:	8ff1                	and	a5,a5,a2
    9fe02b52:	1702                	slli	a4,a4,0x20
    9fe02b54:	8f5d                	or	a4,a4,a5
    9fe02b56:	0008b707          	fld	fa4,0(a7) # ffffffffbff00000 <_end+0xffffffff20040300>
    9fe02b5a:	f20707d3          	fmv.d.x	fa5,a4
    9fe02b5e:	800006b7          	lui	a3,0x80000
    9fe02b62:	00d876b3          	and	a3,a6,a3
    9fe02b66:	02f777d3          	fadd.d	fa5,fa4,fa5
    9fe02b6a:	a43e                	fsd	fa5,8(sp)
    9fe02b6c:	27a2                	fld	fa5,8(sp)
    9fe02b6e:	0141                	addi	sp,sp,16
    9fe02b70:	0ae7f7d3          	fsub.d	fa5,fa5,fa4
    9fe02b74:	e2078753          	fmv.x.d	a4,fa5
    9fe02b78:	02075793          	srli	a5,a4,0x20
    9fe02b7c:	8fed                	and	a5,a5,a1
    9fe02b7e:	8fd5                	or	a5,a5,a3
    9fe02b80:	1782                	slli	a5,a5,0x20
    9fe02b82:	8e79                	and	a2,a2,a4
    9fe02b84:	8fd1                	or	a5,a5,a2
    9fe02b86:	f2078553          	fmv.d.x	fa0,a5
    9fe02b8a:	8082                	ret
    9fe02b8c:	03300513          	li	a0,51
    9fe02b90:	00b55b63          	bge	a0,a1,9fe02ba6 <rint+0x134>
    9fe02b94:	40000713          	li	a4,1024
    9fe02b98:	f6e598e3          	bne	a1,a4,9fe02b08 <rint+0x96>
    9fe02b9c:	02a577d3          	fadd.d	fa5,fa0,fa0
    9fe02ba0:	e20787d3          	fmv.x.d	a5,fa5
    9fe02ba4:	b795                	j	9fe02b08 <rint+0x96>
    9fe02ba6:	bed6061b          	addiw	a2,a2,-1043
    9fe02baa:	55fd                	li	a1,-1
    9fe02bac:	00c5d5bb          	srlw	a1,a1,a2
    9fe02bb0:	00b6f533          	and	a0,a3,a1
    9fe02bb4:	2501                	sext.w	a0,a0
    9fe02bb6:	8836                	mv	a6,a3
    9fe02bb8:	d921                	beqz	a0,9fe02b08 <rint+0x96>
    9fe02bba:	0015d59b          	srliw	a1,a1,0x1
    9fe02bbe:	00b6f7b3          	and	a5,a3,a1
    9fe02bc2:	2781                	sext.w	a5,a5
    9fe02bc4:	df81                	beqz	a5,9fe02adc <rint+0x6a>
    9fe02bc6:	fff5c593          	not	a1,a1
    9fe02bca:	400007b7          	lui	a5,0x40000
    9fe02bce:	0105f6b3          	and	a3,a1,a6
    9fe02bd2:	40c7d63b          	sraw	a2,a5,a2
    9fe02bd6:	8ed1                	or	a3,a3,a2
    9fe02bd8:	2681                	sext.w	a3,a3
    9fe02bda:	b709                	j	9fe02adc <rint+0x6a>

000000009fe02bdc <scalbn>:
    9fe02bdc:	e20507d3          	fmv.x.d	a5,fa0
    9fe02be0:	4347d713          	srai	a4,a5,0x34
    9fe02be4:	7ff77713          	andi	a4,a4,2047
    9fe02be8:	4207d693          	srai	a3,a5,0x20
    9fe02bec:	ef25                	bnez	a4,9fe02c64 <scalbn+0x88>
    9fe02bee:	1686                	slli	a3,a3,0x21
    9fe02bf0:	9285                	srli	a3,a3,0x21
    9fe02bf2:	8edd                	or	a3,a3,a5
    9fe02bf4:	2681                	sext.w	a3,a3
    9fe02bf6:	c6a5                	beqz	a3,9fe02c5e <scalbn+0x82>
    9fe02bf8:	00010717          	auipc	a4,0x10
    9fe02bfc:	97073787          	fld	fa5,-1680(a4) # 9fe12568 <xISRStackTop+0x118>
    9fe02c00:	12f577d3          	fmul.d	fa5,fa0,fa5
    9fe02c04:	7751                	lui	a4,0xffff4
    9fe02c06:	cb070713          	addi	a4,a4,-848 # ffffffffffff3cb0 <_end+0xffffffff60133fb0>
    9fe02c0a:	e20787d3          	fmv.x.d	a5,fa5
    9fe02c0e:	0ce54f63          	blt	a0,a4,9fe02cec <scalbn+0x110>
    9fe02c12:	4347d713          	srai	a4,a5,0x34
    9fe02c16:	7ff77713          	andi	a4,a4,2047
    9fe02c1a:	4207d693          	srai	a3,a5,0x20
    9fe02c1e:	fca7071b          	addiw	a4,a4,-54
    9fe02c22:	00e5063b          	addw	a2,a0,a4
    9fe02c26:	7fe00593          	li	a1,2046
    9fe02c2a:	8732                	mv	a4,a2
    9fe02c2c:	04c5c763          	blt	a1,a2,9fe02c7a <scalbn+0x9e>
    9fe02c30:	08c04f63          	bgtz	a2,9fe02cce <scalbn+0xf2>
    9fe02c34:	fcb00593          	li	a1,-53
    9fe02c38:	06b65063          	bge	a2,a1,9fe02c98 <scalbn+0xbc>
    9fe02c3c:	6731                	lui	a4,0xc
    9fe02c3e:	35070713          	addi	a4,a4,848 # c350 <_EL1_STACK_SIZE+0xbb50>
    9fe02c42:	02a74c63          	blt	a4,a0,9fe02c7a <scalbn+0x9e>
    9fe02c46:	f20787d3          	fmv.d.x	fa5,a5
    9fe02c4a:	00010717          	auipc	a4,0x10
    9fe02c4e:	9e673707          	fld	fa4,-1562(a4) # 9fe12630 <xISRStackTop+0x1e0>
    9fe02c52:	22f707d3          	fsgnj.d	fa5,fa4,fa5
    9fe02c56:	12e7f7d3          	fmul.d	fa5,fa5,fa4
    9fe02c5a:	e20787d3          	fmv.x.d	a5,fa5
    9fe02c5e:	f2078553          	fmv.d.x	fa0,a5
    9fe02c62:	8082                	ret
    9fe02c64:	7ff00613          	li	a2,2047
    9fe02c68:	fac71de3          	bne	a4,a2,9fe02c22 <scalbn+0x46>
    9fe02c6c:	02a577d3          	fadd.d	fa5,fa0,fa0
    9fe02c70:	e20787d3          	fmv.x.d	a5,fa5
    9fe02c74:	f2078553          	fmv.d.x	fa0,a5
    9fe02c78:	8082                	ret
    9fe02c7a:	f20787d3          	fmv.d.x	fa5,a5
    9fe02c7e:	0000f717          	auipc	a4,0xf
    9fe02c82:	7e273707          	fld	fa4,2018(a4) # 9fe12460 <xISRStackTop+0x10>
    9fe02c86:	22f707d3          	fsgnj.d	fa5,fa4,fa5
    9fe02c8a:	12e7f7d3          	fmul.d	fa5,fa5,fa4
    9fe02c8e:	e20787d3          	fmv.x.d	a5,fa5
    9fe02c92:	f2078553          	fmv.d.x	fa0,a5
    9fe02c96:	8082                	ret
    9fe02c98:	0366071b          	addiw	a4,a2,54
    9fe02c9c:	80100637          	lui	a2,0x80100
    9fe02ca0:	167d                	addi	a2,a2,-1
    9fe02ca2:	8ef1                	and	a3,a3,a2
    9fe02ca4:	0147171b          	slliw	a4,a4,0x14
    9fe02ca8:	8f55                	or	a4,a4,a3
    9fe02caa:	56fd                	li	a3,-1
    9fe02cac:	9281                	srli	a3,a3,0x20
    9fe02cae:	1702                	slli	a4,a4,0x20
    9fe02cb0:	8ff5                	and	a5,a5,a3
    9fe02cb2:	8fd9                	or	a5,a5,a4
    9fe02cb4:	f2078753          	fmv.d.x	fa4,a5
    9fe02cb8:	00010717          	auipc	a4,0x10
    9fe02cbc:	a7873787          	fld	fa5,-1416(a4) # 9fe12730 <xISRStackTop+0x2e0>
    9fe02cc0:	12e7f7d3          	fmul.d	fa5,fa5,fa4
    9fe02cc4:	e20787d3          	fmv.x.d	a5,fa5
    9fe02cc8:	f2078553          	fmv.d.x	fa0,a5
    9fe02ccc:	8082                	ret
    9fe02cce:	80100637          	lui	a2,0x80100
    9fe02cd2:	167d                	addi	a2,a2,-1
    9fe02cd4:	8ef1                	and	a3,a3,a2
    9fe02cd6:	0147171b          	slliw	a4,a4,0x14
    9fe02cda:	8f55                	or	a4,a4,a3
    9fe02cdc:	56fd                	li	a3,-1
    9fe02cde:	9281                	srli	a3,a3,0x20
    9fe02ce0:	1702                	slli	a4,a4,0x20
    9fe02ce2:	8ff5                	and	a5,a5,a3
    9fe02ce4:	8fd9                	or	a5,a5,a4
    9fe02ce6:	f2078553          	fmv.d.x	fa0,a5
    9fe02cea:	8082                	ret
    9fe02cec:	f2078753          	fmv.d.x	fa4,a5
    9fe02cf0:	00010717          	auipc	a4,0x10
    9fe02cf4:	94073787          	fld	fa5,-1728(a4) # 9fe12630 <xISRStackTop+0x1e0>
    9fe02cf8:	12f777d3          	fmul.d	fa5,fa4,fa5
    9fe02cfc:	e20787d3          	fmv.x.d	a5,fa5
    9fe02d00:	f2078553          	fmv.d.x	fa0,a5
    9fe02d04:	8082                	ret

000000009fe02d06 <abs>:
    9fe02d06:	41f5579b          	sraiw	a5,a0,0x1f
    9fe02d0a:	8d3d                	xor	a0,a0,a5
    9fe02d0c:	9d1d                	subw	a0,a0,a5
    9fe02d0e:	8082                	ret

000000009fe02d10 <__errno>:
    9fe02d10:	00010517          	auipc	a0,0x10
    9fe02d14:	46053503          	ld	a0,1120(a0) # 9fe13170 <_impure_ptr>
    9fe02d18:	8082                	ret

000000009fe02d1a <memmove>:
    9fe02d1a:	02a5f263          	bgeu	a1,a0,9fe02d3e <memmove+0x24>
    9fe02d1e:	00c587b3          	add	a5,a1,a2
    9fe02d22:	00f57e63          	bgeu	a0,a5,9fe02d3e <memmove+0x24>
    9fe02d26:	00c50733          	add	a4,a0,a2
    9fe02d2a:	ca5d                	beqz	a2,9fe02de0 <memmove+0xc6>
    9fe02d2c:	fff7c683          	lbu	a3,-1(a5) # 3fffffff <CVIMMAP_DRAM_SIZE+0x1fffffff>
    9fe02d30:	17fd                	addi	a5,a5,-1
    9fe02d32:	177d                	addi	a4,a4,-1
    9fe02d34:	00d70023          	sb	a3,0(a4)
    9fe02d38:	fef59ae3          	bne	a1,a5,9fe02d2c <memmove+0x12>
    9fe02d3c:	8082                	ret
    9fe02d3e:	47fd                	li	a5,31
    9fe02d40:	02c7e163          	bltu	a5,a2,9fe02d62 <memmove+0x48>
    9fe02d44:	87aa                	mv	a5,a0
    9fe02d46:	fff60693          	addi	a3,a2,-1 # ffffffff800fffff <_end+0xfffffffee02402ff>
    9fe02d4a:	c245                	beqz	a2,9fe02dea <memmove+0xd0>
    9fe02d4c:	0685                	addi	a3,a3,1
    9fe02d4e:	96be                	add	a3,a3,a5
    9fe02d50:	0005c703          	lbu	a4,0(a1) # ffffffff80000000 <_end+0xfffffffee0140300>
    9fe02d54:	0785                	addi	a5,a5,1
    9fe02d56:	0585                	addi	a1,a1,1
    9fe02d58:	fee78fa3          	sb	a4,-1(a5)
    9fe02d5c:	fed79ae3          	bne	a5,a3,9fe02d50 <memmove+0x36>
    9fe02d60:	8082                	ret
    9fe02d62:	00a5e7b3          	or	a5,a1,a0
    9fe02d66:	8b9d                	andi	a5,a5,7
    9fe02d68:	efad                	bnez	a5,9fe02de2 <memmove+0xc8>
    9fe02d6a:	fe060893          	addi	a7,a2,-32
    9fe02d6e:	fe08f893          	andi	a7,a7,-32
    9fe02d72:	02088893          	addi	a7,a7,32
    9fe02d76:	01150833          	add	a6,a0,a7
    9fe02d7a:	872e                	mv	a4,a1
    9fe02d7c:	87aa                	mv	a5,a0
    9fe02d7e:	6314                	ld	a3,0(a4)
    9fe02d80:	02070713          	addi	a4,a4,32
    9fe02d84:	02078793          	addi	a5,a5,32
    9fe02d88:	fed7b023          	sd	a3,-32(a5)
    9fe02d8c:	fe873683          	ld	a3,-24(a4)
    9fe02d90:	fed7b423          	sd	a3,-24(a5)
    9fe02d94:	ff073683          	ld	a3,-16(a4)
    9fe02d98:	fed7b823          	sd	a3,-16(a5)
    9fe02d9c:	ff873683          	ld	a3,-8(a4)
    9fe02da0:	fed7bc23          	sd	a3,-8(a5)
    9fe02da4:	fcf81de3          	bne	a6,a5,9fe02d7e <memmove+0x64>
    9fe02da8:	01867713          	andi	a4,a2,24
    9fe02dac:	95c6                	add	a1,a1,a7
    9fe02dae:	01f67813          	andi	a6,a2,31
    9fe02db2:	cf0d                	beqz	a4,9fe02dec <memmove+0xd2>
    9fe02db4:	872e                	mv	a4,a1
    9fe02db6:	88be                	mv	a7,a5
    9fe02db8:	4e1d                	li	t3,7
    9fe02dba:	00073303          	ld	t1,0(a4)
    9fe02dbe:	0721                	addi	a4,a4,8
    9fe02dc0:	40e806b3          	sub	a3,a6,a4
    9fe02dc4:	0068b023          	sd	t1,0(a7)
    9fe02dc8:	96ae                	add	a3,a3,a1
    9fe02dca:	08a1                	addi	a7,a7,8
    9fe02dcc:	fede67e3          	bltu	t3,a3,9fe02dba <memmove+0xa0>
    9fe02dd0:	ff880713          	addi	a4,a6,-8
    9fe02dd4:	9b61                	andi	a4,a4,-8
    9fe02dd6:	0721                	addi	a4,a4,8
    9fe02dd8:	8a1d                	andi	a2,a2,7
    9fe02dda:	97ba                	add	a5,a5,a4
    9fe02ddc:	95ba                	add	a1,a1,a4
    9fe02dde:	b7a5                	j	9fe02d46 <memmove+0x2c>
    9fe02de0:	8082                	ret
    9fe02de2:	fff60693          	addi	a3,a2,-1
    9fe02de6:	87aa                	mv	a5,a0
    9fe02de8:	b795                	j	9fe02d4c <memmove+0x32>
    9fe02dea:	8082                	ret
    9fe02dec:	8642                	mv	a2,a6
    9fe02dee:	bfa1                	j	9fe02d46 <memmove+0x2c>

000000009fe02df0 <__clzdi2>:
    9fe02df0:	03800793          	li	a5,56
    9fe02df4:	00f55733          	srl	a4,a0,a5
    9fe02df8:	0ff77713          	andi	a4,a4,255
    9fe02dfc:	e319                	bnez	a4,9fe02e02 <__clzdi2+0x12>
    9fe02dfe:	17e1                	addi	a5,a5,-8
    9fe02e00:	fbf5                	bnez	a5,9fe02df4 <__clzdi2+0x4>
    9fe02e02:	04000713          	li	a4,64
    9fe02e06:	8f1d                	sub	a4,a4,a5
    9fe02e08:	00f55533          	srl	a0,a0,a5
    9fe02e0c:	0000e797          	auipc	a5,0xe
    9fe02e10:	e1478793          	addi	a5,a5,-492 # 9fe10c20 <__clz_tab>
    9fe02e14:	953e                	add	a0,a0,a5
    9fe02e16:	00054503          	lbu	a0,0(a0)
    9fe02e1a:	40a7053b          	subw	a0,a4,a0
    9fe02e1e:	8082                	ret

000000009fe02e20 <main>:
uint8_t ucHeap[ configTOTAL_HEAP_SIZE ] __attribute__ ( ( section( ".heap" ) ) );
#endif
/*-----------------------------------------------------------*/

int main(void)
{
    9fe02e20:	1141                	addi	sp,sp,-16
    9fe02e22:	e406                	sd	ra,8(sp)
	pre_system_init();
    9fe02e24:	662090ef          	jal	ra,9fe0c486 <pre_system_init>
	printf("CVIRTOS Build Date:%s  (Time :%s) \n", __DATE__, __TIME__);
    9fe02e28:	0000e617          	auipc	a2,0xe
    9fe02e2c:	ef860613          	addi	a2,a2,-264 # 9fe10d20 <__clz_tab+0x100>
    9fe02e30:	0000e597          	auipc	a1,0xe
    9fe02e34:	f0058593          	addi	a1,a1,-256 # 9fe10d30 <__clz_tab+0x110>
    9fe02e38:	0000e517          	auipc	a0,0xe
    9fe02e3c:	f0850513          	addi	a0,a0,-248 # 9fe10d40 <__clz_tab+0x120>
    9fe02e40:	154090ef          	jal	ra,9fe0bf94 <printf>
	mmu_enable();
	printf("enable I/D cache & MMU done\n");
#endif
	/* Configure the hardware ready to run the demo. */
	prvSetupHardware();
	post_system_init();
    9fe02e44:	5c2090ef          	jal	ra,9fe0c406 <post_system_init>

#ifdef CVIRTOS
	{
		main_cvirtos();
    9fe02e48:	51a000ef          	jal	ra,9fe03362 <main_cvirtos>
#error "Not correct running definition"
#endif

	/* Don't expect to reach here. */
	return 0;
}
    9fe02e4c:	60a2                	ld	ra,8(sp)
    9fe02e4e:	4501                	li	a0,0
    9fe02e50:	0141                	addi	sp,sp,16
    9fe02e52:	8082                	ret

000000009fe02e54 <vApplicationMallocFailedHook>:
#endif
}
/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook(void)
{
    9fe02e54:	1141                	addi	sp,sp,-16
    9fe02e56:	e406                	sd	ra,8(sp)
	/* Called if a call to pvPortMalloc() fails because there is insufficient
	free memory available in the FreeRTOS heap.  pvPortMalloc() is called
	internally by FreeRTOS API functions that create tasks, queues, software
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */
	taskDISABLE_INTERRUPTS();
    9fe02e58:	30047073          	csrci	mstatus,8
	dump_uart_disable();
    9fe02e5c:	075090ef          	jal	ra,9fe0c6d0 <dump_uart_disable>
	printf("vApplicationMallocFailedHook\n");
    9fe02e60:	0000e517          	auipc	a0,0xe
    9fe02e64:	f0850513          	addi	a0,a0,-248 # 9fe10d68 <__clz_tab+0x148>
    9fe02e68:	12c090ef          	jal	ra,9fe0bf94 <printf>
	for (;;)
    9fe02e6c:	a001                	j	9fe02e6c <vApplicationMallocFailedHook+0x18>

000000009fe02e6e <vApplicationStackOverflowHook>:
		;
}
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook(TaskHandle_t pxTask, char *pcTaskName)
{
    9fe02e6e:	1141                	addi	sp,sp,-16
    9fe02e70:	e406                	sd	ra,8(sp)
    9fe02e72:	e022                	sd	s0,0(sp)
    9fe02e74:	842e                	mv	s0,a1
	(void)pcTaskName;
	(void)pxTask;
	dump_uart_disable();
    9fe02e76:	05b090ef          	jal	ra,9fe0c6d0 <dump_uart_disable>
	printf("%s %s\n", __func__, pcTaskName);
    9fe02e7a:	8622                	mv	a2,s0
    9fe02e7c:	0000e597          	auipc	a1,0xe
    9fe02e80:	f1458593          	addi	a1,a1,-236 # 9fe10d90 <__func__.4>
    9fe02e84:	0000e517          	auipc	a0,0xe
    9fe02e88:	f0450513          	addi	a0,a0,-252 # 9fe10d88 <__clz_tab+0x168>
    9fe02e8c:	108090ef          	jal	ra,9fe0bf94 <printf>
	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
    9fe02e90:	30047073          	csrci	mstatus,8
	for (;;)
    9fe02e94:	a001                	j	9fe02e94 <vApplicationStackOverflowHook+0x26>

000000009fe02e96 <vApplicationTickHook>:
		/* Only the comprehensive demo actually uses the tick hook. */
		extern void vFullDemoTickHook(void);
		vFullDemoTickHook();
	}
#endif
}
    9fe02e96:	8082                	ret

000000009fe02e98 <vApplicationGetIdleTaskMemory>:
	static StaticTask_t xIdleTaskTCB;
	static StackType_t uxIdleTaskStack[configMINIMAL_STACK_SIZE];

	/* Pass out a pointer to the StaticTask_t structure in which the Idle task's
	state will be stored. */
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
    9fe02e98:	00016797          	auipc	a5,0x16
    9fe02e9c:	32878793          	addi	a5,a5,808 # 9fe191c0 <xIdleTaskTCB.3>
    9fe02ea0:	e11c                	sd	a5,0(a0)

	/* Pass out the array that will be used as the Idle task's stack. */
	*ppxIdleTaskStackBuffer = uxIdleTaskStack;
    9fe02ea2:	00010797          	auipc	a5,0x10
    9fe02ea6:	31e78793          	addi	a5,a5,798 # 9fe131c0 <__data1_end>
    9fe02eaa:	e19c                	sd	a5,0(a1)

	/* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
	Note that, as the array is necessarily of type StackType_t,
	configMINIMAL_STACK_SIZE is specified in words, not bytes. */
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
    9fe02eac:	40000793          	li	a5,1024
    9fe02eb0:	c21c                	sw	a5,0(a2)
}
    9fe02eb2:	8082                	ret

000000009fe02eb4 <vApplicationGetTimerTaskMemory>:
	static StaticTask_t xTimerTaskTCB;
	static StackType_t uxTimerTaskStack[configTIMER_TASK_STACK_DEPTH];

	/* Pass out a pointer to the StaticTask_t structure in which the Timer
	task's state will be stored. */
	*ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
    9fe02eb4:	00016797          	auipc	a5,0x16
    9fe02eb8:	3b478793          	addi	a5,a5,948 # 9fe19268 <xTimerTaskTCB.1>
    9fe02ebc:	e11c                	sd	a5,0(a0)

	/* Pass out the array that will be used as the Timer task's stack. */
	*ppxTimerTaskStackBuffer = uxTimerTaskStack;
    9fe02ebe:	00012797          	auipc	a5,0x12
    9fe02ec2:	30278793          	addi	a5,a5,770 # 9fe151c0 <uxTimerTaskStack.0>
    9fe02ec6:	e19c                	sd	a5,0(a1)

	/* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
	Note that, as the array is necessarily of type StackType_t,
	configMINIMAL_STACK_SIZE is specified in words, not bytes. */
	*pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
    9fe02ec8:	6785                	lui	a5,0x1
    9fe02eca:	80078793          	addi	a5,a5,-2048 # 800 <_EL1_STACK_SIZE>
    9fe02ece:	c21c                	sw	a5,0(a2)
}
    9fe02ed0:	8082                	ret

000000009fe02ed2 <prvCmdQuRunTask>:

#ifdef FAST_IMAGE_ENABLE
extern JPEG_PIC encoded_pics[MAX_JPEG_NUM];
#endif
void prvCmdQuRunTask(void *pvParameters)
{
    9fe02ed2:	7159                	addi	sp,sp,-112
    9fe02ed4:	f45e                	sd	s7,40(sp)
	int send_to_cpu;

	unsigned int reg_base = MAILBOX_REG_BASE;

	/* set mcu_status to type1 running*/
	transfer_config.mcu_status = MCU_STATUS_RTOS_T1_RUNNING;
    9fe02ed6:	0001ab97          	auipc	s7,0x1a
    9fe02eda:	56ab8b93          	addi	s7,s7,1386 # 9fe1d440 <transfer_config>
{
    9fe02ede:	e0d2                	sd	s4,64(sp)

	if (transfer_config.conf_magic == C906_MAGIC_HEADER)
    9fe02ee0:	000baa03          	lw	s4,0(s7)
    9fe02ee4:	a55ad737          	lui	a4,0xa55ad
		send_to_cpu = SEND_TO_CPU1;
	else if (transfer_config.conf_magic == CA53_MAGIC_HEADER)
		send_to_cpu = SEND_TO_CPU0;
	/* to compatible code with linux side */
	cmdq = &rtos_cmdq;
	mbox_reg = (struct mailbox_set_register *) reg_base;
    9fe02ee8:	019007b7          	lui	a5,0x1900
	if (transfer_config.conf_magic == C906_MAGIC_HEADER)
    9fe02eec:	90670713          	addi	a4,a4,-1786 # ffffffffa55ac906 <_end+0xffffffff056ecc06>
	mbox_done_reg = (struct mailbox_done_register *) (reg_base + 2);
    9fe02ef0:	00278693          	addi	a3,a5,2 # 1900002 <CVIMMAP_FREERTOS_RESERVED_ION_SIZE+0x300002>
	transfer_config.mcu_status = MCU_STATUS_RTOS_T1_RUNNING;
    9fe02ef4:	4615                	li	a2,5
{
    9fe02ef6:	e4ce                	sd	s3,72(sp)
    9fe02ef8:	fc56                	sd	s5,56(sp)
		send_to_cpu = SEND_TO_CPU1;
    9fe02efa:	40ea0a33          	sub	s4,s4,a4
	mbox_reg = (struct mailbox_set_register *) reg_base;
    9fe02efe:	0001da97          	auipc	s5,0x1d
    9fe02f02:	c7aa8a93          	addi	s5,s5,-902 # 9fe1fb78 <mbox_reg>
	mailbox_context = (unsigned long *) (MAILBOX_REG_BUFF);
    9fe02f06:	40078713          	addi	a4,a5,1024
    9fe02f0a:	0001d997          	auipc	s3,0x1d
    9fe02f0e:	c5e98993          	addi	s3,s3,-930 # 9fe1fb68 <mailbox_context>
	mbox_reg = (struct mailbox_set_register *) reg_base;
    9fe02f12:	00fab023          	sd	a5,0(s5)
{
    9fe02f16:	f486                	sd	ra,104(sp)
    9fe02f18:	f0a2                	sd	s0,96(sp)
    9fe02f1a:	eca6                	sd	s1,88(sp)
    9fe02f1c:	e8ca                	sd	s2,80(sp)
    9fe02f1e:	f85a                	sd	s6,48(sp)
    9fe02f20:	f062                	sd	s8,32(sp)
    9fe02f22:	ec66                	sd	s9,24(sp)
	transfer_config.mcu_status = MCU_STATUS_RTOS_T1_RUNNING;
    9fe02f24:	02cb8323          	sb	a2,38(s7)
	mbox_done_reg = (struct mailbox_done_register *) (reg_base + 2);
    9fe02f28:	0001d797          	auipc	a5,0x1d
    9fe02f2c:	c4d7b423          	sd	a3,-952(a5) # 9fe1fb70 <mbox_done_reg>
	mailbox_context = (unsigned long *) (MAILBOX_REG_BUFF);
    9fe02f30:	00e9b023          	sd	a4,0(s3)
{
    9fe02f34:	e86a                	sd	s10,16(sp)
		send_to_cpu = SEND_TO_CPU1;
    9fe02f36:	001a3a13          	seqz	s4,s4

	cvi_spinlock_init();
    9fe02f3a:	3a7090ef          	jal	ra,9fe0cae0 <cvi_spinlock_init>
	printf("prvCmdQuRunTask run\n");
    9fe02f3e:	0000e517          	auipc	a0,0xe
    9fe02f42:	e7250513          	addi	a0,a0,-398 # 9fe10db0 <__func__.4+0x20>
				break;
			case SYS_CMD_INFO_STOP_ISR_DONE:
				// stop interrupt in order to avoid losing frame
				if (rtos_cmdq.ip_id == IP_VI) {
					stop_ip |= STOP_CMD_DONE_VI;
					rtos_cmdq.ip_id = IP_VCODEC;
    9fe02f46:	6c15                	lui	s8,0x5
						debug_printf("rtos_cmdqu_t->cmd_id = %d\n", rtos_cmdqu_t->cmd_id);
						debug_printf("rtos_cmdqu_t->block = %d\n", rtos_cmdqu_t->block);
						debug_printf("rtos_cmdqu_t->param_ptr addr=%x %x\n", &rtos_cmdqu_t->param_ptr, rtos_cmdqu_t->param_ptr);
						debug_printf("*ptr = %x\n", *ptr);
						// clear mailbox
						mbox_reg->cpu_mbox_set[send_to_cpu].cpu_mbox_int_clr.mbox_int_clr = (1 << valid);
    9fe02f48:	001a0b13          	addi	s6,s4,1
					if (rtos_cmdqu_t->resv.valid.linux_valid == 0 && rtos_cmdqu_t->resv.valid.rtos_valid == 0) {
    9fe02f4c:	0ffff437          	lui	s0,0xffff
	printf("prvCmdQuRunTask run\n");
    9fe02f50:	044090ef          	jal	ra,9fe0bf94 <printf>
    9fe02f54:	00010917          	auipc	s2,0x10
    9fe02f58:	f3490913          	addi	s2,s2,-204 # 9fe12e88 <gTaskCtx>
					if (rtos_cmdqu_t->resv.valid.linux_valid == 0 && rtos_cmdqu_t->resv.valid.rtos_valid == 0) {
    9fe02f5c:	0412                	slli	s0,s0,0x4
				for (valid = 0; valid < MAILBOX_MAX_NUM; valid++) {
    9fe02f5e:	44a1                	li	s1,8
						mbox_reg->cpu_mbox_set[send_to_cpu].cpu_mbox_int_clr.mbox_int_clr = (1 << valid);
    9fe02f60:	0b12                	slli	s6,s6,0x4
					rtos_cmdq.ip_id = IP_VCODEC;
    9fe02f62:	301c0c93          	addi	s9,s8,769 # 5301 <_EL1_STACK_SIZE+0x4b01>
		xQueueReceive(gTaskCtx[E_QUEUE_CMDQU].queHandle, &rtos_cmdq, portMAX_DELAY);
    9fe02f66:	1a893503          	ld	a0,424(s2)
    9fe02f6a:	567d                	li	a2,-1
    9fe02f6c:	002c                	addi	a1,sp,8
    9fe02f6e:	4cb0b0ef          	jal	ra,9fe0ec38 <xQueueReceive>
		switch (rtos_cmdq.cmd_id) {
    9fe02f72:	67a2                	ld	a5,8(sp)
    9fe02f74:	4729                	li	a4,10
    9fe02f76:	83a1                	srli	a5,a5,0x8
    9fe02f78:	02f78793          	addi	a5,a5,47
    9fe02f7c:	07f7f793          	andi	a5,a5,127
    9fe02f80:	02f76063          	bltu	a4,a5,9fe02fa0 <prvCmdQuRunTask+0xce>
    9fe02f84:	0000e717          	auipc	a4,0xe
    9fe02f88:	edc70713          	addi	a4,a4,-292 # 9fe10e60 <__func__.4+0xd0>
    9fe02f8c:	078a                	slli	a5,a5,0x2
    9fe02f8e:	97ba                	add	a5,a5,a4
    9fe02f90:	439c                	lw	a5,0(a5)
    9fe02f92:	97ba                	add	a5,a5,a4
    9fe02f94:	8782                	jr	a5
				if (rtos_cmdq.param_ptr >= MAX_JPEG_NUM) {
    9fe02f96:	45b2                	lw	a1,12(sp)
    9fe02f98:	47bd                	li	a5,15
    9fe02f9a:	10b7ed63          	bltu	a5,a1,9fe030b4 <prvCmdQuRunTask+0x1e2>
				rtos_cmdq.param_ptr = 0x0;
    9fe02f9e:	c602                	sw	zero,12(sp)
				drv_spin_lock_irqsave(&mailbox_lock, flags);
    9fe02fa0:	00010517          	auipc	a0,0x10
    9fe02fa4:	1d850513          	addi	a0,a0,472 # 9fe13178 <mailbox_lock>
				rtos_cmdqu_t = (cmdqu_t *) mailbox_context;
    9fe02fa8:	0009bd03          	ld	s10,0(s3)
				drv_spin_lock_irqsave(&mailbox_lock, flags);
    9fe02fac:	469090ef          	jal	ra,9fe0cc14 <_hw_raw_spin_lock_irqsave>
				if(flags == MAILBOX_LOCK_FAILED)
    9fe02fb0:	57fd                	li	a5,-1
				drv_spin_lock_irqsave(&mailbox_lock, flags);
    9fe02fb2:	85aa                	mv	a1,a0
				for (valid = 0; valid < MAILBOX_MAX_NUM; valid++) {
    9fe02fb4:	4701                	li	a4,0
				if(flags == MAILBOX_LOCK_FAILED)
    9fe02fb6:	06f50b63          	beq	a0,a5,9fe0302c <prvCmdQuRunTask+0x15a>
					if (rtos_cmdqu_t->resv.valid.linux_valid == 0 && rtos_cmdqu_t->resv.valid.rtos_valid == 0) {
    9fe02fba:	000d3783          	ld	a5,0(s10)
    9fe02fbe:	8fe1                	and	a5,a5,s0
    9fe02fc0:	10078263          	beqz	a5,9fe030c4 <prvCmdQuRunTask+0x1f2>
				for (valid = 0; valid < MAILBOX_MAX_NUM; valid++) {
    9fe02fc4:	2705                	addiw	a4,a4,1
						// trigger mailbox valid to rtos
						mbox_reg->cpu_mbox_en[send_to_cpu].mbox_info |= (1 << valid);
						mbox_reg->mbox_set.mbox_set = (1 << valid);
						break;
					}
					rtos_cmdqu_t++;
    9fe02fc6:	0d21                	addi	s10,s10,8
				for (valid = 0; valid < MAILBOX_MAX_NUM; valid++) {
    9fe02fc8:	fe9719e3          	bne	a4,s1,9fe02fba <prvCmdQuRunTask+0xe8>
				}
				drv_spin_unlock_irqrestore(&mailbox_lock, flags);
    9fe02fcc:	00010517          	auipc	a0,0x10
    9fe02fd0:	1ac50513          	addi	a0,a0,428 # 9fe13178 <mailbox_lock>
    9fe02fd4:	4a7090ef          	jal	ra,9fe0cc7a <_hw_raw_spin_unlock_irqrestore>
				if (valid >= MAILBOX_MAX_NUM) {
				    printf("No valid mailbox is available\n");
    9fe02fd8:	0000e517          	auipc	a0,0xe
    9fe02fdc:	e6850513          	addi	a0,a0,-408 # 9fe10e40 <__func__.4+0xb0>
    9fe02fe0:	7b5080ef          	jal	ra,9fe0bf94 <printf>
				    return -1;
				}
				break;
		}
	}
}
    9fe02fe4:	70a6                	ld	ra,104(sp)
    9fe02fe6:	7406                	ld	s0,96(sp)
    9fe02fe8:	64e6                	ld	s1,88(sp)
    9fe02fea:	6946                	ld	s2,80(sp)
    9fe02fec:	69a6                	ld	s3,72(sp)
    9fe02fee:	6a06                	ld	s4,64(sp)
    9fe02ff0:	7ae2                	ld	s5,56(sp)
    9fe02ff2:	7b42                	ld	s6,48(sp)
    9fe02ff4:	7ba2                	ld	s7,40(sp)
    9fe02ff6:	7c02                	ld	s8,32(sp)
    9fe02ff8:	6ce2                	ld	s9,24(sp)
    9fe02ffa:	6d42                	ld	s10,16(sp)
    9fe02ffc:	6165                	addi	sp,sp,112
    9fe02ffe:	8082                	ret
				dump_uart_disable();
    9fe03000:	6d0090ef          	jal	ra,9fe0c6d0 <dump_uart_disable>
				break;
    9fe03004:	b78d                	j	9fe02f66 <prvCmdQuRunTask+0x94>
				dump_uart_enable();
    9fe03006:	6b2090ef          	jal	ra,9fe0c6b8 <dump_uart_enable>
				break;
    9fe0300a:	bfb1                	j	9fe02f66 <prvCmdQuRunTask+0x94>
				rtos_cmdq.param_ptr = (unsigned int) dump_uart_msg();
    9fe0300c:	6dc090ef          	jal	ra,9fe0c6e8 <dump_uart_msg>
    9fe03010:	c62a                	sw	a0,12(sp)
				drv_spin_lock_irqsave(&mailbox_lock, flags);
    9fe03012:	00010517          	auipc	a0,0x10
    9fe03016:	16650513          	addi	a0,a0,358 # 9fe13178 <mailbox_lock>
				rtos_cmdqu_t = (cmdqu_t *) mailbox_context;
    9fe0301a:	0009bd03          	ld	s10,0(s3)
				drv_spin_lock_irqsave(&mailbox_lock, flags);
    9fe0301e:	3f7090ef          	jal	ra,9fe0cc14 <_hw_raw_spin_lock_irqsave>
				if(flags == MAILBOX_LOCK_FAILED)
    9fe03022:	57fd                	li	a5,-1
				drv_spin_lock_irqsave(&mailbox_lock, flags);
    9fe03024:	85aa                	mv	a1,a0
				for (valid = 0; valid < MAILBOX_MAX_NUM; valid++) {
    9fe03026:	4701                	li	a4,0
				if(flags == MAILBOX_LOCK_FAILED)
    9fe03028:	f8f519e3          	bne	a0,a5,9fe02fba <prvCmdQuRunTask+0xe8>
					printf("[%s][%d] drv_spin_lock_irqsave failed! ip_id = %d , cmd_id = %d\n" , cmdq->ip_id , cmdq->cmd_id);
    9fe0302c:	6622                	ld	a2,8(sp)
    9fe0302e:	00814583          	lbu	a1,8(sp)
    9fe03032:	0000e517          	auipc	a0,0xe
    9fe03036:	dc650513          	addi	a0,a0,-570 # 9fe10df8 <__func__.4+0x68>
    9fe0303a:	8221                	srli	a2,a2,0x8
    9fe0303c:	07f67613          	andi	a2,a2,127
    9fe03040:	755080ef          	jal	ra,9fe0bf94 <printf>
					break;
    9fe03044:	b70d                	j	9fe02f66 <prvCmdQuRunTask+0x94>
				if (rtos_cmdq.ip_id == IP_VI) {
    9fe03046:	00814703          	lbu	a4,8(sp)
					stop_ip |= STOP_CMD_DONE_VI;
    9fe0304a:	0001d817          	auipc	a6,0x1d
    9fe0304e:	b3680813          	addi	a6,a6,-1226 # 9fe1fb80 <stop_ip.0>
				if (rtos_cmdq.ip_id == IP_VI) {
    9fe03052:	468d                	li	a3,3
					stop_ip |= STOP_CMD_DONE_VI;
    9fe03054:	00082783          	lw	a5,0(a6)
				if (rtos_cmdq.ip_id == IP_VI) {
    9fe03058:	0ed70563          	beq	a4,a3,9fe03142 <prvCmdQuRunTask+0x270>
				if (rtos_cmdq.ip_id == IP_VCODEC)
    9fe0305c:	4685                	li	a3,1
    9fe0305e:	00d71663          	bne	a4,a3,9fe0306a <prvCmdQuRunTask+0x198>
					stop_ip |= STOP_CMD_DONE_VCODE;
    9fe03062:	0047e793          	ori	a5,a5,4
    9fe03066:	00f82023          	sw	a5,0(a6)
				if (stop_ip != STOP_CMD_DONE_ALL)
    9fe0306a:	4719                	li	a4,6
    9fe0306c:	eee79de3          	bne	a5,a4,9fe02f66 <prvCmdQuRunTask+0x94>
					rtos_cmdq.ip_id = IP_SYSTEM;
    9fe03070:	00f10423          	sb	a5,8(sp)
    9fe03074:	b735                	j	9fe02fa0 <prvCmdQuRunTask+0xce>
				rtos_cmdq.ip_id = IP_VI;
    9fe03076:	00815783          	lhu	a5,8(sp)
    9fe0307a:	7761                	lui	a4,0xffff8
				xQueueSend(gTaskCtx[E_QUEUE_VI].queHandle, &rtos_cmdq, 0U);
    9fe0307c:	0d093503          	ld	a0,208(s2)
				rtos_cmdq.ip_id = IP_VI;
    9fe03080:	8ff9                	and	a5,a5,a4
    9fe03082:	303c0713          	addi	a4,s8,771
    9fe03086:	8fd9                	or	a5,a5,a4
				xQueueSend(gTaskCtx[E_QUEUE_VI].queHandle, &rtos_cmdq, 0U);
    9fe03088:	4681                	li	a3,0
    9fe0308a:	4601                	li	a2,0
    9fe0308c:	002c                	addi	a1,sp,8
				rtos_cmdq.ip_id = IP_VI;
    9fe0308e:	00f11423          	sh	a5,8(sp)
				stop_ip = 0;
    9fe03092:	0001d797          	auipc	a5,0x1d
    9fe03096:	ae07a723          	sw	zero,-1298(a5) # 9fe1fb80 <stop_ip.0>
				xQueueSend(gTaskCtx[E_QUEUE_VI].queHandle, &rtos_cmdq, 0U);
    9fe0309a:	19f0b0ef          	jal	ra,9fe0ea38 <xQueueGenericSend>
				break;
    9fe0309e:	b5e1                	j	9fe02f66 <prvCmdQuRunTask+0x94>
				rtos_cmdq.cmd_id = SYS_CMD_INFO_RTOS_INIT_DONE;
    9fe030a0:	00914783          	lbu	a5,9(sp)
				rtos_cmdq.param_ptr = &transfer_config;
    9fe030a4:	c65e                	sw	s7,12(sp)
				rtos_cmdq.cmd_id = SYS_CMD_INFO_RTOS_INIT_DONE;
    9fe030a6:	f807f793          	andi	a5,a5,-128
    9fe030aa:	0527e793          	ori	a5,a5,82
    9fe030ae:	00f104a3          	sb	a5,9(sp)
				goto send_label;
    9fe030b2:	b5fd                	j	9fe02fa0 <prvCmdQuRunTask+0xce>
					printf("SYS_CMD_INFO_DUMP_JPG idx = %d, set idx to 0\n", rtos_cmdq.param_ptr);
    9fe030b4:	0000e517          	auipc	a0,0xe
    9fe030b8:	d1450513          	addi	a0,a0,-748 # 9fe10dc8 <__func__.4+0x38>
    9fe030bc:	6d9080ef          	jal	ra,9fe0bf94 <printf>
				rtos_cmdq.param_ptr = 0x0;
    9fe030c0:	c602                	sw	zero,12(sp)
			    goto send_label;
    9fe030c2:	bdf9                	j	9fe02fa0 <prvCmdQuRunTask+0xce>
						cmdq->resv.valid.rtos_valid = 1;
    9fe030c4:	4785                	li	a5,1
    9fe030c6:	00f105a3          	sb	a5,11(sp)
						*ptr = ((cmdq->ip_id << 0) | (cmdq->cmd_id << 8) | (cmdq->block << 15) |
    9fe030ca:	66a2                	ld	a3,8(sp)
								(cmdq->resv.valid.linux_valid << 16) |
    9fe030cc:	00a14603          	lbu	a2,10(sp)
						*ptr = ((cmdq->ip_id << 0) | (cmdq->cmd_id << 8) | (cmdq->block << 15) |
    9fe030d0:	00814503          	lbu	a0,8(sp)
    9fe030d4:	0086d793          	srli	a5,a3,0x8
    9fe030d8:	07f7f793          	andi	a5,a5,127
								(cmdq->resv.valid.linux_valid << 16) |
    9fe030dc:	0106161b          	slliw	a2,a2,0x10
						*ptr = ((cmdq->ip_id << 0) | (cmdq->cmd_id << 8) | (cmdq->block << 15) |
    9fe030e0:	0087979b          	slliw	a5,a5,0x8
    9fe030e4:	82bd                	srli	a3,a3,0xf
    9fe030e6:	8fd1                	or	a5,a5,a2
    9fe030e8:	8a85                	andi	a3,a3,1
    9fe030ea:	8fc9                	or	a5,a5,a0
    9fe030ec:	00f6969b          	slliw	a3,a3,0xf
    9fe030f0:	8fd5                	or	a5,a5,a3
								(cmdq->resv.valid.linux_valid << 16) |
    9fe030f2:	010006b7          	lui	a3,0x1000
    9fe030f6:	8fd5                	or	a5,a5,a3
						*ptr = ((cmdq->ip_id << 0) | (cmdq->cmd_id << 8) | (cmdq->block << 15) |
    9fe030f8:	00fd2023          	sw	a5,0(s10)
						rtos_cmdqu_t->param_ptr = cmdq->param_ptr;
    9fe030fc:	46b2                	lw	a3,12(sp)
						mbox_reg->cpu_mbox_set[send_to_cpu].cpu_mbox_int_clr.mbox_int_clr = (1 << valid);
    9fe030fe:	4785                	li	a5,1
    9fe03100:	00e7973b          	sllw	a4,a5,a4
						rtos_cmdqu_t->param_ptr = cmdq->param_ptr;
    9fe03104:	00dd2223          	sw	a3,4(s10)
						mbox_reg->cpu_mbox_set[send_to_cpu].cpu_mbox_int_clr.mbox_int_clr = (1 << valid);
    9fe03108:	000ab683          	ld	a3,0(s5)
    9fe0310c:	0ff77613          	andi	a2,a4,255
    9fe03110:	002a1793          	slli	a5,s4,0x2
    9fe03114:	01668533          	add	a0,a3,s6
    9fe03118:	00c50023          	sb	a2,0(a0)
						mbox_reg->cpu_mbox_en[send_to_cpu].mbox_info |= (1 << valid);
    9fe0311c:	97b6                	add	a5,a5,a3
    9fe0311e:	0007c683          	lbu	a3,0(a5)
				drv_spin_unlock_irqrestore(&mailbox_lock, flags);
    9fe03122:	00010517          	auipc	a0,0x10
    9fe03126:	05650513          	addi	a0,a0,86 # 9fe13178 <mailbox_lock>
						mbox_reg->cpu_mbox_en[send_to_cpu].mbox_info |= (1 << valid);
    9fe0312a:	8f55                	or	a4,a4,a3
    9fe0312c:	0ff77713          	andi	a4,a4,255
    9fe03130:	00e78023          	sb	a4,0(a5)
						mbox_reg->mbox_set.mbox_set = (1 << valid);
    9fe03134:	000ab783          	ld	a5,0(s5)
    9fe03138:	06c78023          	sb	a2,96(a5)
				drv_spin_unlock_irqrestore(&mailbox_lock, flags);
    9fe0313c:	33f090ef          	jal	ra,9fe0cc7a <_hw_raw_spin_unlock_irqrestore>
				if (valid >= MAILBOX_MAX_NUM) {
    9fe03140:	b51d                	j	9fe02f66 <prvCmdQuRunTask+0x94>
					rtos_cmdq.ip_id = IP_VCODEC;
    9fe03142:	00815703          	lhu	a4,8(sp)
    9fe03146:	76e1                	lui	a3,0xffff8
					xQueueSend(gTaskCtx[E_QUEUE_VCODEC].queHandle, &rtos_cmdq, 0U);
    9fe03148:	08893503          	ld	a0,136(s2)
					rtos_cmdq.ip_id = IP_VCODEC;
    9fe0314c:	8f75                	and	a4,a4,a3
					stop_ip |= STOP_CMD_DONE_VI;
    9fe0314e:	0027e793          	ori	a5,a5,2
					rtos_cmdq.ip_id = IP_VCODEC;
    9fe03152:	01976733          	or	a4,a4,s9
					xQueueSend(gTaskCtx[E_QUEUE_VCODEC].queHandle, &rtos_cmdq, 0U);
    9fe03156:	4681                	li	a3,0
    9fe03158:	4601                	li	a2,0
    9fe0315a:	002c                	addi	a1,sp,8
					stop_ip |= STOP_CMD_DONE_VI;
    9fe0315c:	00f82023          	sw	a5,0(a6)
					rtos_cmdq.ip_id = IP_VCODEC;
    9fe03160:	00e11423          	sh	a4,8(sp)
					xQueueSend(gTaskCtx[E_QUEUE_VCODEC].queHandle, &rtos_cmdq, 0U);
    9fe03164:	0d50b0ef          	jal	ra,9fe0ea38 <xQueueGenericSend>
					break;
    9fe03168:	bbfd                	j	9fe02f66 <prvCmdQuRunTask+0x94>

000000009fe0316a <prvQueueISR>:

void prvQueueISR(void)
{
    9fe0316a:	711d                	addi	sp,sp,-96
    9fe0316c:	e862                	sd	s8,16(sp)
	unsigned char valid_val;
	int i;
	cmdqu_t *cmdq;
	BaseType_t YieldRequired = pdFALSE;

	set_val = mbox_reg->cpu_mbox_set[RECEIVE_CPU].cpu_mbox_int_int.mbox_int;
    9fe0316e:	0001dc17          	auipc	s8,0x1d
    9fe03172:	a0ac0c13          	addi	s8,s8,-1526 # 9fe1fb78 <mbox_reg>
    9fe03176:	000c3783          	ld	a5,0(s8)
{
    9fe0317a:	ec86                	sd	ra,88(sp)
    9fe0317c:	e8a2                	sd	s0,80(sp)
    9fe0317e:	e4a6                	sd	s1,72(sp)
    9fe03180:	e0ca                	sd	s2,64(sp)
    9fe03182:	fc4e                	sd	s3,56(sp)
    9fe03184:	f852                	sd	s4,48(sp)
    9fe03186:	f456                	sd	s5,40(sp)
    9fe03188:	f05a                	sd	s6,32(sp)
    9fe0318a:	ec5e                	sd	s7,24(sp)
	set_val = mbox_reg->cpu_mbox_set[RECEIVE_CPU].cpu_mbox_int_int.mbox_int;
    9fe0318c:	0387c403          	lbu	s0,56(a5)
	BaseType_t YieldRequired = pdFALSE;
    9fe03190:	e002                	sd	zero,0(sp)
	set_val = mbox_reg->cpu_mbox_set[RECEIVE_CPU].cpu_mbox_int_int.mbox_int;
    9fe03192:	0ff47413          	andi	s0,s0,255
	/* Now, we do not implement info back feature */
	// done_val = mbox_done_reg->cpu_mbox_done[RECEIVE_CPU].cpu_mbox_int_int.mbox_int;

	if (set_val) {
    9fe03196:	c455                	beqz	s0,9fe03242 <prvQueueISR+0xd8>
		for(i = 0; i < MAILBOX_MAX_NUM; i++) {
			valid_val = set_val  & (1 << i);
    9fe03198:	0184141b          	slliw	s0,s0,0x18
    9fe0319c:	4184541b          	sraiw	s0,s0,0x18
    9fe031a0:	4b81                	li	s7,0
    9fe031a2:	4485                	li	s1,1

			if (valid_val) {
				cmdqu_t rtos_cmdq;
				cmdq = (cmdqu_t *)(mailbox_context) + i;
    9fe031a4:	0001d997          	auipc	s3,0x1d
    9fe031a8:	9c498993          	addi	s3,s3,-1596 # 9fe1fb68 <mailbox_context>
				*((unsigned long *) &rtos_cmdq) = *((unsigned long *)cmdq);
				/* need to clear mailbox interrupt before clear mailbox buffer */
				*((unsigned long*) cmdq) = 0;

				/* mailbox buffer context is send from linux*/
				if (rtos_cmdq.resv.valid.linux_valid == 1) {
    9fe031ac:	4905                	li	s2,1
						printf("unknown ip_id =%d cmd_id=%d\n", rtos_cmdq.ip_id, rtos_cmdq.cmd_id);
						break;
					}
					portYIELD_FROM_ISR(YieldRequired);
				} else
					printf("rtos cmdq is not valid %d, ip=%d , cmd=%d\n",
    9fe031ae:	0000ea97          	auipc	s5,0xe
    9fe031b2:	d02a8a93          	addi	s5,s5,-766 # 9fe10eb0 <__func__.4+0x120>
    9fe031b6:	0000ea17          	auipc	s4,0xe
    9fe031ba:	d26a0a13          	addi	s4,s4,-730 # 9fe10edc <__func__.4+0x14c>
						xQueueSendFromISR(gTaskCtx[E_QUEUE_CAMERA].queHandle, &rtos_cmdq, &YieldRequired);
    9fe031be:	00010b17          	auipc	s6,0x10
    9fe031c2:	ccab0b13          	addi	s6,s6,-822 # 9fe12e88 <gTaskCtx>
			valid_val = set_val  & (1 << i);
    9fe031c6:	017497bb          	sllw	a5,s1,s7
    9fe031ca:	8fe1                	and	a5,a5,s0
    9fe031cc:	0ff7f693          	andi	a3,a5,255
    9fe031d0:	0187979b          	slliw	a5,a5,0x18
    9fe031d4:	4187d79b          	sraiw	a5,a5,0x18
			if (valid_val) {
    9fe031d8:	c2ad                	beqz	a3,9fe0323a <prvQueueISR+0xd0>
				mbox_reg->cpu_mbox_set[RECEIVE_CPU].cpu_mbox_int_clr.mbox_int_clr = valid_val;
    9fe031da:	000c3603          	ld	a2,0(s8)
				cmdq = (cmdqu_t *)(mailbox_context) + i;
    9fe031de:	0009b703          	ld	a4,0(s3)
				mbox_reg->cpu_mbox_en[RECEIVE_CPU].mbox_info &= ~valid_val;
    9fe031e2:	fff7c793          	not	a5,a5
				mbox_reg->cpu_mbox_set[RECEIVE_CPU].cpu_mbox_int_clr.mbox_int_clr = valid_val;
    9fe031e6:	02d60823          	sb	a3,48(a2)
				mbox_reg->cpu_mbox_en[RECEIVE_CPU].mbox_info &= ~valid_val;
    9fe031ea:	00864683          	lbu	a3,8(a2)
				cmdq = (cmdqu_t *)(mailbox_context) + i;
    9fe031ee:	003b9593          	slli	a1,s7,0x3
    9fe031f2:	972e                	add	a4,a4,a1
				mbox_reg->cpu_mbox_en[RECEIVE_CPU].mbox_info &= ~valid_val;
    9fe031f4:	0ff6f693          	andi	a3,a3,255
    9fe031f8:	8ff5                	and	a5,a5,a3
    9fe031fa:	00f60423          	sb	a5,8(a2)
				*((unsigned long *) &rtos_cmdq) = *((unsigned long *)cmdq);
    9fe031fe:	631c                	ld	a5,0(a4)
    9fe03200:	e43e                	sd	a5,8(sp)
				*((unsigned long*) cmdq) = 0;
    9fe03202:	00073023          	sd	zero,0(a4) # ffffffffffff8000 <_end+0xffffffff60138300>
				if (rtos_cmdq.resv.valid.linux_valid == 1) {
    9fe03206:	00a14783          	lbu	a5,10(sp)
    9fe0320a:	01279d63          	bne	a5,s2,9fe03224 <prvQueueISR+0xba>
					switch (rtos_cmdq.ip_id) {
    9fe0320e:	00814583          	lbu	a1,8(sp)
    9fe03212:	479d                	li	a5,7
    9fe03214:	0cb7e363          	bltu	a5,a1,9fe032da <prvQueueISR+0x170>
    9fe03218:	00259793          	slli	a5,a1,0x2
    9fe0321c:	97d2                	add	a5,a5,s4
    9fe0321e:	439c                	lw	a5,0(a5)
    9fe03220:	97d2                	add	a5,a5,s4
    9fe03222:	8782                	jr	a5
						rtos_cmdq.resv.valid.rtos_valid, rtos_cmdq.ip_id, rtos_cmdq.cmd_id);
    9fe03224:	66a2                	ld	a3,8(sp)
					printf("rtos cmdq is not valid %d, ip=%d , cmd=%d\n",
    9fe03226:	00814603          	lbu	a2,8(sp)
    9fe0322a:	00b14583          	lbu	a1,11(sp)
						rtos_cmdq.resv.valid.rtos_valid, rtos_cmdq.ip_id, rtos_cmdq.cmd_id);
    9fe0322e:	82a1                	srli	a3,a3,0x8
					printf("rtos cmdq is not valid %d, ip=%d , cmd=%d\n",
    9fe03230:	07f6f693          	andi	a3,a3,127
    9fe03234:	8556                	mv	a0,s5
    9fe03236:	55f080ef          	jal	ra,9fe0bf94 <printf>
		for(i = 0; i < MAILBOX_MAX_NUM; i++) {
    9fe0323a:	0b85                	addi	s7,s7,1
    9fe0323c:	47a1                	li	a5,8
    9fe0323e:	f8fb94e3          	bne	s7,a5,9fe031c6 <prvQueueISR+0x5c>
			}
		}
	}
}
    9fe03242:	60e6                	ld	ra,88(sp)
    9fe03244:	6446                	ld	s0,80(sp)
    9fe03246:	64a6                	ld	s1,72(sp)
    9fe03248:	6906                	ld	s2,64(sp)
    9fe0324a:	79e2                	ld	s3,56(sp)
    9fe0324c:	7a42                	ld	s4,48(sp)
    9fe0324e:	7aa2                	ld	s5,40(sp)
    9fe03250:	7b02                	ld	s6,32(sp)
    9fe03252:	6be2                	ld	s7,24(sp)
    9fe03254:	6c42                	ld	s8,16(sp)
    9fe03256:	6125                	addi	sp,sp,96
    9fe03258:	8082                	ret
						xQueueSendFromISR(gTaskCtx[E_QUEUE_CAMERA].queHandle, &rtos_cmdq, &YieldRequired);
    9fe0325a:	118b3503          	ld	a0,280(s6)
    9fe0325e:	4681                	li	a3,0
    9fe03260:	860a                	mv	a2,sp
    9fe03262:	002c                	addi	a1,sp,8
    9fe03264:	0f50b0ef          	jal	ra,9fe0eb58 <xQueueGenericSendFromISR>
					portYIELD_FROM_ISR(YieldRequired);
    9fe03268:	6782                	ld	a5,0(sp)
    9fe0326a:	dbe1                	beqz	a5,9fe0323a <prvQueueISR+0xd0>
    9fe0326c:	2020c0ef          	jal	ra,9fe0f46e <vTaskSwitchContext>
		for(i = 0; i < MAILBOX_MAX_NUM; i++) {
    9fe03270:	0b85                	addi	s7,s7,1
    9fe03272:	47a1                	li	a5,8
    9fe03274:	f4fb99e3          	bne	s7,a5,9fe031c6 <prvQueueISR+0x5c>
    9fe03278:	b7e9                	j	9fe03242 <prvQueueISR+0xd8>
						xQueueSendFromISR(gTaskCtx[E_QUEUE_ISP].queHandle, &rtos_cmdq, &YieldRequired);
    9fe0327a:	040b3503          	ld	a0,64(s6)
    9fe0327e:	4681                	li	a3,0
    9fe03280:	860a                	mv	a2,sp
    9fe03282:	002c                	addi	a1,sp,8
    9fe03284:	0d50b0ef          	jal	ra,9fe0eb58 <xQueueGenericSendFromISR>
						break;
    9fe03288:	b7c5                	j	9fe03268 <prvQueueISR+0xfe>
						xQueueSendFromISR(gTaskCtx[E_QUEUE_VCODEC].queHandle, &rtos_cmdq, &YieldRequired);
    9fe0328a:	088b3503          	ld	a0,136(s6)
    9fe0328e:	4681                	li	a3,0
    9fe03290:	860a                	mv	a2,sp
    9fe03292:	002c                	addi	a1,sp,8
    9fe03294:	0c50b0ef          	jal	ra,9fe0eb58 <xQueueGenericSendFromISR>
						break;
    9fe03298:	bfc1                	j	9fe03268 <prvQueueISR+0xfe>
						xQueueSendFromISR(gTaskCtx[E_QUEUE_VI].queHandle, &rtos_cmdq, &YieldRequired);
    9fe0329a:	0d0b3503          	ld	a0,208(s6)
    9fe0329e:	4681                	li	a3,0
    9fe032a0:	860a                	mv	a2,sp
    9fe032a2:	002c                	addi	a1,sp,8
    9fe032a4:	0b50b0ef          	jal	ra,9fe0eb58 <xQueueGenericSendFromISR>
						break;
    9fe032a8:	b7c1                	j	9fe03268 <prvQueueISR+0xfe>
						xQueueSendFromISR(gTaskCtx[E_QUEUE_RGN].queHandle, &rtos_cmdq, &YieldRequired);
    9fe032aa:	160b3503          	ld	a0,352(s6)
    9fe032ae:	4681                	li	a3,0
    9fe032b0:	860a                	mv	a2,sp
    9fe032b2:	002c                	addi	a1,sp,8
    9fe032b4:	0a50b0ef          	jal	ra,9fe0eb58 <xQueueGenericSendFromISR>
						break;
    9fe032b8:	bf45                	j	9fe03268 <prvQueueISR+0xfe>
						xQueueSendFromISR(gTaskCtx[E_QUEUE_AUDIO].queHandle, &rtos_cmdq, &YieldRequired);
    9fe032ba:	1f0b3503          	ld	a0,496(s6)
    9fe032be:	4681                	li	a3,0
    9fe032c0:	860a                	mv	a2,sp
    9fe032c2:	002c                	addi	a1,sp,8
    9fe032c4:	0950b0ef          	jal	ra,9fe0eb58 <xQueueGenericSendFromISR>
						break;
    9fe032c8:	b745                	j	9fe03268 <prvQueueISR+0xfe>
						xQueueSendFromISR(gTaskCtx[E_QUEUE_CMDQU].queHandle, &rtos_cmdq, &YieldRequired);
    9fe032ca:	1a8b3503          	ld	a0,424(s6)
    9fe032ce:	4681                	li	a3,0
    9fe032d0:	860a                	mv	a2,sp
    9fe032d2:	002c                	addi	a1,sp,8
    9fe032d4:	0850b0ef          	jal	ra,9fe0eb58 <xQueueGenericSendFromISR>
						break;
    9fe032d8:	bf41                	j	9fe03268 <prvQueueISR+0xfe>
						printf("unknown ip_id =%d cmd_id=%d\n", rtos_cmdq.ip_id, rtos_cmdq.cmd_id);
    9fe032da:	6622                	ld	a2,8(sp)
    9fe032dc:	0000e517          	auipc	a0,0xe
    9fe032e0:	bb450513          	addi	a0,a0,-1100 # 9fe10e90 <__func__.4+0x100>
    9fe032e4:	8221                	srli	a2,a2,0x8
    9fe032e6:	07f67613          	andi	a2,a2,127
    9fe032ea:	4ab080ef          	jal	ra,9fe0bf94 <printf>
						break;
    9fe032ee:	bfad                	j	9fe03268 <prvQueueISR+0xfe>

000000009fe032f0 <main_GetMODHandle>:
	if (handle_idx >= E_QUEUE_MAX)
    9fe032f0:	4799                	li	a5,6
    9fe032f2:	00a7ef63          	bltu	a5,a0,9fe03310 <main_GetMODHandle+0x20>
	return gTaskCtx[handle_idx].queHandle;
    9fe032f6:	1502                	slli	a0,a0,0x20
    9fe032f8:	9101                	srli	a0,a0,0x20
    9fe032fa:	00351793          	slli	a5,a0,0x3
    9fe032fe:	953e                	add	a0,a0,a5
    9fe03300:	050e                	slli	a0,a0,0x3
    9fe03302:	00010797          	auipc	a5,0x10
    9fe03306:	b8678793          	addi	a5,a5,-1146 # 9fe12e88 <gTaskCtx>
    9fe0330a:	953e                	add	a0,a0,a5
    9fe0330c:	6128                	ld	a0,64(a0)
    9fe0330e:	8082                	ret
		return NULL;
    9fe03310:	4501                	li	a0,0
}
    9fe03312:	8082                	ret

000000009fe03314 <main_create_tasks>:
{
    9fe03314:	1101                	addi	sp,sp,-32
    9fe03316:	e822                	sd	s0,16(sp)
    9fe03318:	e426                	sd	s1,8(sp)
    9fe0331a:	ec06                	sd	ra,24(sp)
    9fe0331c:	00010417          	auipc	s0,0x10
    9fe03320:	b6c40413          	addi	s0,s0,-1172 # 9fe12e88 <gTaskCtx>
    9fe03324:	00010497          	auipc	s1,0x10
    9fe03328:	d5c48493          	addi	s1,s1,-676 # 9fe13080 <nb_notch_coef.1>
		TASK_INIT(i);
    9fe0332c:	03844503          	lbu	a0,56(s0)
    9fe03330:	4601                	li	a2,0
    9fe03332:	45a1                	li	a1,8
    9fe03334:	6980b0ef          	jal	ra,9fe0e9cc <xQueueGenericCreate>
    9fe03338:	e028                	sd	a0,64(s0)
    9fe0333a:	c919                	beqz	a0,9fe03350 <main_create_tasks+0x3c>
    9fe0333c:	7808                	ld	a0,48(s0)
    9fe0333e:	85a2                	mv	a1,s0
    9fe03340:	4781                	li	a5,0
    9fe03342:	4681                	li	a3,0
    9fe03344:	c511                	beqz	a0,9fe03350 <main_create_tasks+0x3c>
    9fe03346:	7418                	ld	a4,40(s0)
    9fe03348:	02045603          	lhu	a2,32(s0)
    9fe0334c:	5600c0ef          	jal	ra,9fe0f8ac <xTaskCreate>
	for (; i < ARRAY_SIZE(gTaskCtx); i++) {
    9fe03350:	04840413          	addi	s0,s0,72
    9fe03354:	fc941ce3          	bne	s0,s1,9fe0332c <main_create_tasks+0x18>
}
    9fe03358:	60e2                	ld	ra,24(sp)
    9fe0335a:	6442                	ld	s0,16(sp)
    9fe0335c:	64a2                	ld	s1,8(sp)
    9fe0335e:	6105                	addi	sp,sp,32
    9fe03360:	8082                	ret

000000009fe03362 <main_cvirtos>:
{
    9fe03362:	1141                	addi	sp,sp,-16
	printf("create cvi task\n");
    9fe03364:	0000e517          	auipc	a0,0xe
    9fe03368:	b9c50513          	addi	a0,a0,-1124 # 9fe10f00 <__func__.4+0x170>
{
    9fe0336c:	e406                	sd	ra,8(sp)
	printf("create cvi task\n");
    9fe0336e:	427080ef          	jal	ra,9fe0bf94 <printf>
	request_irq(MBOX_INT_C906_2ND, prvQueueISR, 0, "mailbox", (void *)0);
    9fe03372:	4701                	li	a4,0
    9fe03374:	0000e697          	auipc	a3,0xe
    9fe03378:	ba468693          	addi	a3,a3,-1116 # 9fe10f18 <__func__.4+0x188>
    9fe0337c:	4601                	li	a2,0
    9fe0337e:	00000597          	auipc	a1,0x0
    9fe03382:	dec58593          	addi	a1,a1,-532 # 9fe0316a <prvQueueISR>
    9fe03386:	03d00513          	li	a0,61
    9fe0338a:	11c090ef          	jal	ra,9fe0c4a6 <request_irq>
	main_create_tasks();
    9fe0338e:	f87ff0ef          	jal	ra,9fe03314 <main_create_tasks>
	vTaskStartScheduler();
    9fe03392:	5960c0ef          	jal	ra,9fe0f928 <vTaskStartScheduler>
    for (;;)
    9fe03396:	a001                	j	9fe03396 <main_cvirtos+0x34>

000000009fe03398 <prvRGNRunTask>:
#else
#define rgn_printf(...)
#endif

void prvRGNRunTask(void *pvParameters)
{
    9fe03398:	7131                	addi	sp,sp,-192
	OSDC_Canvas_Attr_S canvas;
	OSDC_DRAW_OBJ_S *obj_vec = NULL;
	RGN_LINE_ATTR_S *line_attr = NULL;

	rgn_printf("%s run\n", __func__);
	xQueueRGN = main_GetMODHandle(E_QUEUE_RGN);
    9fe0339a:	4511                	li	a0,4
{
    9fe0339c:	fd06                	sd	ra,184(sp)
    9fe0339e:	fcde                	sd	s7,120(sp)
    9fe033a0:	f8e2                	sd	s8,112(sp)
    9fe033a2:	f4e6                	sd	s9,104(sp)
    9fe033a4:	f922                	sd	s0,176(sp)
    9fe033a6:	f526                	sd	s1,168(sp)
    9fe033a8:	f14a                	sd	s2,160(sp)
    9fe033aa:	ed4e                	sd	s3,152(sp)
    9fe033ac:	e952                	sd	s4,144(sp)
    9fe033ae:	e556                	sd	s5,136(sp)
    9fe033b0:	e15a                	sd	s6,128(sp)
    9fe033b2:	f0ea                	sd	s10,96(sp)
    9fe033b4:	ecee                	sd	s11,88(sp)
	xQueueRGN = main_GetMODHandle(E_QUEUE_RGN);
    9fe033b6:	f3bff0ef          	jal	ra,9fe032f0 <main_GetMODHandle>
    9fe033ba:	87aa                	mv	a5,a0
    9fe033bc:	0001cc97          	auipc	s9,0x1c
    9fe033c0:	7ccc8c93          	addi	s9,s9,1996 # 9fe1fb88 <xQueueRGN>
	xQueueRGNCmdqu = main_GetMODHandle(E_QUEUE_CMDQU);
    9fe033c4:	4515                	li	a0,5
	xQueueRGN = main_GetMODHandle(E_QUEUE_RGN);
    9fe033c6:	00fcb023          	sd	a5,0(s9)
	xQueueRGNCmdqu = main_GetMODHandle(E_QUEUE_CMDQU);
    9fe033ca:	f27ff0ef          	jal	ra,9fe032f0 <main_GetMODHandle>
    9fe033ce:	0001c797          	auipc	a5,0x1c
    9fe033d2:	7c278793          	addi	a5,a5,1986 # 9fe1fb90 <xQueueRGNCmdqu>
		}
		vPortFree(line_attr);
		vPortFree(obj_vec);

WRONG_CMD_IP_ID:
		rtos_cmdq.ip_id  = -1;
    9fe033d6:	6c21                	lui	s8,0x8
	xQueueRGNCmdqu = main_GetMODHandle(E_QUEUE_CMDQU);
    9fe033d8:	e388                	sd	a0,0(a5)
		rtos_cmdq.ip_id  = -1;
    9fe033da:	fffc0793          	addi	a5,s8,-1 # 7fff <_EL1_STACK_SIZE+0x77ff>
		if (rtos_cmdq.ip_id != IP_RGN) {
    9fe033de:	4b91                	li	s7,4
		rtos_cmdq.ip_id  = -1;
    9fe033e0:	ec3e                	sd	a5,24(sp)
    9fe033e2:	a025                	j	9fe0340a <prvRGNRunTask+0x72>
			xQueueSend(xQueueRGNCmdqu, &rtos_cmdq, 0U);
    9fe033e4:	0001c797          	auipc	a5,0x1c
    9fe033e8:	7ac78793          	addi	a5,a5,1964 # 9fe1fb90 <xQueueRGNCmdqu>
    9fe033ec:	6388                	ld	a0,0(a5)
    9fe033ee:	4681                	li	a3,0
    9fe033f0:	4601                	li	a2,0
    9fe033f2:	182c                	addi	a1,sp,56
    9fe033f4:	6440b0ef          	jal	ra,9fe0ea38 <xQueueGenericSend>
		rtos_cmdq.ip_id  = -1;
    9fe033f8:	03815783          	lhu	a5,56(sp)
    9fe033fc:	7761                	lui	a4,0xffff8
		rtos_cmdq.cmd_id = -1;
		rtos_cmdq.param_ptr = 0;
    9fe033fe:	de02                	sw	zero,60(sp)
		rtos_cmdq.ip_id  = -1;
    9fe03400:	8ff9                	and	a5,a5,a4
    9fe03402:	6762                	ld	a4,24(sp)
    9fe03404:	8fd9                	or	a5,a5,a4
    9fe03406:	02f11c23          	sh	a5,56(sp)
		xQueueReceive(xQueueRGN, &rtos_cmdq, portMAX_DELAY);
    9fe0340a:	000cb503          	ld	a0,0(s9)
    9fe0340e:	567d                	li	a2,-1
    9fe03410:	182c                	addi	a1,sp,56
    9fe03412:	0270b0ef          	jal	ra,9fe0ec38 <xQueueReceive>
		if (rtos_cmdq.ip_id != IP_RGN) {
    9fe03416:	03814783          	lbu	a5,56(sp)
    9fe0341a:	fd7795e3          	bne	a5,s7,9fe033e4 <prvRGNRunTask+0x4c>
		canvas_cmpr_attr = (RGN_CANVAS_CMPR_ATTR_S *)rtos_cmdq.param_ptr;
    9fe0341e:	03c16a83          	lwu	s5,60(sp)
		canvas.width = canvas_cmpr_attr->u32Width;
    9fe03422:	000aa703          	lw	a4,0(s5)
		obj_num = canvas_cmpr_attr->u32ObjNum;
    9fe03426:	014aa683          	lw	a3,20(s5)
		canvas.height = canvas_cmpr_attr->u32Height;
    9fe0342a:	004aa783          	lw	a5,4(s5)
		canvas.width = canvas_cmpr_attr->u32Width;
    9fe0342e:	c0ba                	sw	a4,64(sp)
		obj_num = canvas_cmpr_attr->u32ObjNum;
    9fe03430:	f036                	sd	a3,32(sp)
		canvas.height = canvas_cmpr_attr->u32Height;
    9fe03432:	c2be                	sw	a5,68(sp)
		obj_num = canvas_cmpr_attr->u32ObjNum;
    9fe03434:	0ff6fb13          	andi	s6,a3,255
		obj_vec = (OSDC_DRAW_OBJ_S *)pvPortMalloc((obj_num ? obj_num : 1) * sizeof(OSDC_DRAW_OBJ_S));
    9fe03438:	020b0563          	beqz	s6,9fe03462 <prvRGNRunTask+0xca>
    9fe0343c:	006b1513          	slli	a0,s6,0x6
    9fe03440:	1360b0ef          	jal	ra,9fe0e576 <pvPortMalloc>
    9fe03444:	8a2a                	mv	s4,a0
		if (obj_vec == NULL) {
    9fe03446:	d94d                	beqz	a0,9fe033f8 <prvRGNRunTask+0x60>
		line_attr = (RGN_LINE_ATTR_S *)pvPortMalloc((obj_num ? obj_num : 1) * sizeof(RGN_LINE_ATTR_S));
    9fe03448:	001b1513          	slli	a0,s6,0x1
    9fe0344c:	955a                	add	a0,a0,s6
    9fe0344e:	050e                	slli	a0,a0,0x3
    9fe03450:	1260b0ef          	jal	ra,9fe0e576 <pvPortMalloc>
    9fe03454:	842a                	mv	s0,a0
		if (line_attr == NULL) {
    9fe03456:	22051b63          	bnez	a0,9fe0368c <prvRGNRunTask+0x2f4>
		vPortFree(obj_vec);
    9fe0345a:	8552                	mv	a0,s4
    9fe0345c:	2800b0ef          	jal	ra,9fe0e6dc <vPortFree>
    9fe03460:	bf61                	j	9fe033f8 <prvRGNRunTask+0x60>
		obj_vec = (OSDC_DRAW_OBJ_S *)pvPortMalloc((obj_num ? obj_num : 1) * sizeof(OSDC_DRAW_OBJ_S));
    9fe03462:	04000513          	li	a0,64
    9fe03466:	1100b0ef          	jal	ra,9fe0e576 <pvPortMalloc>
    9fe0346a:	8a2a                	mv	s4,a0
		if (obj_vec == NULL) {
    9fe0346c:	d551                	beqz	a0,9fe033f8 <prvRGNRunTask+0x60>
		line_attr = (RGN_LINE_ATTR_S *)pvPortMalloc((obj_num ? obj_num : 1) * sizeof(RGN_LINE_ATTR_S));
    9fe0346e:	4561                	li	a0,24
    9fe03470:	1060b0ef          	jal	ra,9fe0e576 <pvPortMalloc>
    9fe03474:	842a                	mv	s0,a0
		if (line_attr == NULL) {
    9fe03476:	d175                	beqz	a0,9fe0345a <prvRGNRunTask+0xc2>
		obj_attr = (RGN_CMPR_OBJ_ATTR_S *)((CVI_U8 *)rtos_cmdq.param_ptr + sizeof(RGN_CANVAS_CMPR_ATTR_S));
    9fe03478:	03c16783          	lwu	a5,60(sp)
    9fe0347c:	4481                	li	s1,0
    9fe0347e:	07e1                	addi	a5,a5,24
    9fe03480:	f43e                	sd	a5,40(sp)
			for (i = 0; i < line_num; ++i) {
    9fe03482:	4995                	li	s3,5
					if (i < line_num - 1) {
    9fe03484:	fff4891b          	addiw	s2,s1,-1
			for (i = 0; i < line_num; ++i) {
    9fe03488:	01840d13          	addi	s10,s0,24
    9fe0348c:	4d81                	li	s11,0
    9fe0348e:	ec85                	bnez	s1,9fe034c6 <prvRGNRunTask+0x12e>
    9fe03490:	a059                	j	9fe03516 <prvRGNRunTask+0x17e>
								= line_attr[i].stPointStart.s32Y;
    9fe03492:	fecd2503          	lw	a0,-20(s10)
					if (i < line_num - 1) {
    9fe03496:	000d859b          	sext.w	a1,s11
				if (delta_x < line_attr[i].u32Thick) {
    9fe0349a:	000c071b          	sext.w	a4,s8
								= line_attr[i].stPointStart.s32Y;
    9fe0349e:	fead2a23          	sw	a0,-12(s10)
					if (i < line_num - 1) {
    9fe034a2:	1325d163          	bge	a1,s2,9fe035c4 <prvRGNRunTask+0x22c>
						line_attr[i + 1].stPointStart.s32Y = line_attr[i].stPointEnd.s32Y
    9fe034a6:	00ad2223          	sw	a0,4(s10)
				if (delta_x < line_attr[i].u32Thick) {
    9fe034aa:	00c77863          	bgeu	a4,a2,9fe034ba <prvRGNRunTask+0x122>
								= line_attr[i].stPointStart.s32X;
    9fe034ae:	fe8d2703          	lw	a4,-24(s10)
    9fe034b2:	feed2823          	sw	a4,-16(s10)
						line_attr[i + 1].stPointStart.s32X = line_attr[i].stPointEnd.s32X
    9fe034b6:	00ed2023          	sw	a4,0(s10)
			for (i = 0; i < line_num; ++i) {
    9fe034ba:	0d85                	addi	s11,s11,1
    9fe034bc:	000d871b          	sext.w	a4,s11
    9fe034c0:	0d61                	addi	s10,s10,24
    9fe034c2:	04975a63          	bge	a4,s1,9fe03516 <prvRGNRunTask+0x17e>
				delta_x = abs(line_attr[i].stPointStart.s32X - line_attr[i].stPointEnd.s32X);
    9fe034c6:	ff0d2703          	lw	a4,-16(s10)
    9fe034ca:	fe8d2503          	lw	a0,-24(s10)
    9fe034ce:	9d19                	subw	a0,a0,a4
    9fe034d0:	837ff0ef          	jal	ra,9fe02d06 <abs>
				delta_y = abs(line_attr[i].stPointStart.s32Y - line_attr[i].stPointEnd.s32Y);
    9fe034d4:	ff4d2603          	lw	a2,-12(s10)
    9fe034d8:	fecd2583          	lw	a1,-20(s10)
				delta_x = abs(line_attr[i].stPointStart.s32X - line_attr[i].stPointEnd.s32X);
    9fe034dc:	8c2a                	mv	s8,a0
				delta_y = abs(line_attr[i].stPointStart.s32Y - line_attr[i].stPointEnd.s32Y);
    9fe034de:	40c5853b          	subw	a0,a1,a2
    9fe034e2:	825ff0ef          	jal	ra,9fe02d06 <abs>
				if (delta_y < line_attr[i].u32Thick) {
    9fe034e6:	ff8d2603          	lw	a2,-8(s10)
    9fe034ea:	2501                	sext.w	a0,a0
    9fe034ec:	fac563e3          	bltu	a0,a2,9fe03492 <prvRGNRunTask+0xfa>
				if (delta_x < line_attr[i].u32Thick) {
    9fe034f0:	000c071b          	sext.w	a4,s8
    9fe034f4:	fcc773e3          	bgeu	a4,a2,9fe034ba <prvRGNRunTask+0x122>
					if (i < line_num - 1) {
    9fe034f8:	000d871b          	sext.w	a4,s11
    9fe034fc:	fb2749e3          	blt	a4,s2,9fe034ae <prvRGNRunTask+0x116>
								= line_attr[i].stPointStart.s32X;
    9fe03500:	fe8d2703          	lw	a4,-24(s10)
			for (i = 0; i < line_num; ++i) {
    9fe03504:	0d85                	addi	s11,s11,1
    9fe03506:	0d61                	addi	s10,s10,24
								= line_attr[i].stPointStart.s32X;
    9fe03508:	fced2c23          	sw	a4,-40(s10)
						line_attr[0].stPointStart.s32X = line_attr[i].stPointEnd.s32X
    9fe0350c:	c018                	sw	a4,0(s0)
			for (i = 0; i < line_num; ++i) {
    9fe0350e:	000d871b          	sext.w	a4,s11
    9fe03512:	fa974ae3          	blt	a4,s1,9fe034c6 <prvRGNRunTask+0x12e>
			delta_x = abs(line_attr[0].stPointStart.s32X - line_attr[0].stPointEnd.s32X);
    9fe03516:	441c                	lw	a5,8(s0)
    9fe03518:	4008                	lw	a0,0(s0)
    9fe0351a:	9d1d                	subw	a0,a0,a5
    9fe0351c:	feaff0ef          	jal	ra,9fe02d06 <abs>
			delta_y = abs(line_attr[0].stPointStart.s32Y - line_attr[0].stPointEnd.s32Y);
    9fe03520:	4054                	lw	a3,4(s0)
    9fe03522:	4458                	lw	a4,12(s0)
			delta_x = abs(line_attr[0].stPointStart.s32X - line_attr[0].stPointEnd.s32X);
    9fe03524:	8d2a                	mv	s10,a0
			delta_y = abs(line_attr[0].stPointStart.s32Y - line_attr[0].stPointEnd.s32Y);
    9fe03526:	40e6853b          	subw	a0,a3,a4
    9fe0352a:	fdcff0ef          	jal	ra,9fe02d06 <abs>
			if ((delta_x > line_attr[0].u32Thick || delta_x == 0) &&
    9fe0352e:	4818                	lw	a4,16(s0)
    9fe03530:	000d069b          	sext.w	a3,s10
    9fe03534:	00d76463          	bltu	a4,a3,9fe0353c <prvRGNRunTask+0x1a4>
    9fe03538:	000d1763          	bnez	s10,9fe03546 <prvRGNRunTask+0x1ae>
    9fe0353c:	0005079b          	sext.w	a5,a0
    9fe03540:	00f76663          	bltu	a4,a5,9fe0354c <prvRGNRunTask+0x1b4>
					(delta_y > line_attr[0].u32Thick || delta_y == 0))
    9fe03544:	c501                	beqz	a0,9fe0354c <prvRGNRunTask+0x1b4>
		while (j++ < 5) {
    9fe03546:	39fd                	addiw	s3,s3,-1
    9fe03548:	f40990e3          	bnez	s3,9fe03488 <prvRGNRunTask+0xf0>
		if (obj_num) {
    9fe0354c:	0a0b1e63          	bnez	s6,9fe03608 <prvRGNRunTask+0x270>
		switch (canvas_cmpr_attr->enPixelFormat) {
    9fe03550:	00caa783          	lw	a5,12(s5)
    9fe03554:	4719                	li	a4,6
    9fe03556:	1ae78863          	beq	a5,a4,9fe03706 <prvRGNRunTask+0x36e>
    9fe0355a:	03000713          	li	a4,48
    9fe0355e:	1ae78163          	beq	a5,a4,9fe03700 <prvRGNRunTask+0x368>
    9fe03562:	4715                	li	a4,5
    9fe03564:	18e78c63          	beq	a5,a4,9fe036fc <prvRGNRunTask+0x364>
			canvas.format = OSD_ARGB1555;
    9fe03568:	4795                	li	a5,5
    9fe0356a:	c4be                	sw	a5,72(sp)
		switch (rtos_cmdq.cmd_id) {
    9fe0356c:	77e2                	ld	a5,56(sp)
    9fe0356e:	83a1                	srli	a5,a5,0x8
    9fe03570:	07f7f793          	andi	a5,a5,127
    9fe03574:	cfb1                	beqz	a5,9fe035d0 <prvRGNRunTask+0x238>
    9fe03576:	4705                	li	a4,1
    9fe03578:	04e79263          	bne	a5,a4,9fe035bc <prvRGNRunTask+0x224>
			bs_size = CVI_OSDC_EstCmprCanvasSize(&canvas, &obj_vec[0], obj_num);
    9fe0357c:	02014603          	lbu	a2,32(sp)
			pvAddr = (void *)rtos_cmdq.param_ptr;
    9fe03580:	54f2                	lw	s1,60(sp)
			bs_size = CVI_OSDC_EstCmprCanvasSize(&canvas, &obj_vec[0], obj_num);
    9fe03582:	85d2                	mv	a1,s4
    9fe03584:	0088                	addi	a0,sp,64
    9fe03586:	760090ef          	jal	ra,9fe0cce6 <CVI_OSDC_EstCmprCanvasSize>
    9fe0358a:	0005079b          	sext.w	a5,a0
			flush_dcache_range((uintptr_t)pvAddr, ALIGN(sizeof(RGN_CANVAS_CMPR_ATTR_S), 64));
    9fe0358e:	02049513          	slli	a0,s1,0x20
			canvas_cmpr_attr->u32BsSize = bs_size;
    9fe03592:	00faa823          	sw	a5,16(s5)
			flush_dcache_range((uintptr_t)pvAddr, ALIGN(sizeof(RGN_CANVAS_CMPR_ATTR_S), 64));
    9fe03596:	04000593          	li	a1,64
    9fe0359a:	9101                	srli	a0,a0,0x20
			bs_size = CVI_OSDC_EstCmprCanvasSize(&canvas, &obj_vec[0], obj_num);
    9fe0359c:	da3e                	sw	a5,52(sp)
			flush_dcache_range((uintptr_t)pvAddr, ALIGN(sizeof(RGN_CANVAS_CMPR_ATTR_S), 64));
    9fe0359e:	1bb080ef          	jal	ra,9fe0bf58 <flush_dcache_range>
			xQueueSend(xQueueRGNCmdqu, &rtos_cmdq, 0U);
    9fe035a2:	0001c797          	auipc	a5,0x1c
    9fe035a6:	5ee78793          	addi	a5,a5,1518 # 9fe1fb90 <xQueueRGNCmdqu>
    9fe035aa:	6388                	ld	a0,0(a5)
    9fe035ac:	4681                	li	a3,0
    9fe035ae:	4601                	li	a2,0
    9fe035b0:	182c                	addi	a1,sp,56
			rtos_cmdq.ip_id  = IP_RGN;
    9fe035b2:	03710c23          	sb	s7,56(sp)
			rtos_cmdq.param_ptr = 0;
    9fe035b6:	de02                	sw	zero,60(sp)
			xQueueSend(xQueueRGNCmdqu, &rtos_cmdq, 0U);
    9fe035b8:	4800b0ef          	jal	ra,9fe0ea38 <xQueueGenericSend>
		vPortFree(line_attr);
    9fe035bc:	8522                	mv	a0,s0
    9fe035be:	11e0b0ef          	jal	ra,9fe0e6dc <vPortFree>
    9fe035c2:	bd61                	j	9fe0345a <prvRGNRunTask+0xc2>
						line_attr[0].stPointStart.s32Y = line_attr[i].stPointEnd.s32Y
    9fe035c4:	c048                	sw	a0,4(s0)
				if (delta_x < line_attr[i].u32Thick) {
    9fe035c6:	ff8d2603          	lw	a2,-8(s10)
    9fe035ca:	f2c76be3          	bltu	a4,a2,9fe03500 <prvRGNRunTask+0x168>
    9fe035ce:	b5f5                	j	9fe034ba <prvRGNRunTask+0x122>
			pvAddr = (void *)rtos_cmdq.param_ptr;
    9fe035d0:	03c16483          	lwu	s1,60(sp)
			status = CVI_OSDC_DrawCmprCanvas(&canvas, &obj_vec[0], obj_num ? obj_num : 0, pvAddr,
    9fe035d4:	010aa703          	lw	a4,16(s5)
    9fe035d8:	02014603          	lbu	a2,32(sp)
    9fe035dc:	185c                	addi	a5,sp,52
    9fe035de:	86a6                	mv	a3,s1
    9fe035e0:	85d2                	mv	a1,s4
    9fe035e2:	0088                	addi	a0,sp,64
    9fe035e4:	706090ef          	jal	ra,9fe0ccea <CVI_OSDC_DrawCmprCanvas>
			if (status != 1) {
    9fe035e8:	4785                	li	a5,1
    9fe035ea:	14f50063          	beq	a0,a5,9fe0372a <prvRGNRunTask+0x392>
				*(unsigned int *)pvAddr = 0xffffffff;
    9fe035ee:	57fd                	li	a5,-1
    9fe035f0:	c09c                	sw	a5,0(s1)
				*((unsigned int *)pvAddr + 1) = bs_size;
    9fe035f2:	57d2                	lw	a5,52(sp)
    9fe035f4:	c0dc                	sw	a5,4(s1)
			flush_dcache_range((uintptr_t)pvAddr, ALIGN(bs_size, 64));
    9fe035f6:	03f7879b          	addiw	a5,a5,63
    9fe035fa:	fc07f593          	andi	a1,a5,-64
    9fe035fe:	2581                	sext.w	a1,a1
    9fe03600:	8526                	mv	a0,s1
    9fe03602:	157080ef          	jal	ra,9fe0bf58 <flush_dcache_range>
    9fe03606:	bf71                	j	9fe035a2 <prvRGNRunTask+0x20a>
			for (i = 0, j = 0; i < obj_num; ++i) {
    9fe03608:	02014783          	lbu	a5,32(sp)
    9fe0360c:	d3b1                	beqz	a5,9fe03550 <prvRGNRunTask+0x1b8>
    9fe0360e:	79a2                	ld	s3,40(sp)
    9fe03610:	0796                	slli	a5,a5,0x5
    9fe03612:	8b52                	mv	s6,s4
    9fe03614:	00f984b3          	add	s1,s3,a5
    9fe03618:	4901                	li	s2,0
    9fe0361a:	a811                	j	9fe0362e <prvRGNRunTask+0x296>
				} else if (obj_attr[i].enObjType == RGN_CMPR_BIT_MAP) {
    9fe0361c:	4705                	li	a4,1
    9fe0361e:	0ee78663          	beq	a5,a4,9fe0370a <prvRGNRunTask+0x372>
			for (i = 0, j = 0; i < obj_num; ++i) {
    9fe03622:	02098993          	addi	s3,s3,32
    9fe03626:	040b0b13          	addi	s6,s6,64
    9fe0362a:	f33483e3          	beq	s1,s3,9fe03550 <prvRGNRunTask+0x1b8>
				if (obj_attr[i].enObjType == RGN_CMPR_LINE) {
    9fe0362e:	0009a783          	lw	a5,0(s3)
    9fe03632:	4709                	li	a4,2
    9fe03634:	02e78963          	beq	a5,a4,9fe03666 <prvRGNRunTask+0x2ce>
				} else if (obj_attr[i].enObjType == RGN_CMPR_RECT) {
    9fe03638:	f3f5                	bnez	a5,9fe0361c <prvRGNRunTask+0x284>
					CVI_OSDC_SetRectObjAttr(
    9fe0363a:	01c9a883          	lw	a7,28(s3)
    9fe0363e:	0149a583          	lw	a1,20(s3)
    9fe03642:	0109a803          	lw	a6,16(s3)
    9fe03646:	00c9a783          	lw	a5,12(s3)
    9fe0364a:	0089a703          	lw	a4,8(s3)
    9fe0364e:	0049a683          	lw	a3,4(s3)
    9fe03652:	0189a603          	lw	a2,24(s3)
    9fe03656:	011038b3          	snez	a7,a7
    9fe0365a:	e02e                	sd	a1,0(sp)
    9fe0365c:	0088                	addi	a0,sp,64
    9fe0365e:	85da                	mv	a1,s6
    9fe03660:	68e090ef          	jal	ra,9fe0ccee <CVI_OSDC_SetRectObjAttr>
    9fe03664:	bf7d                	j	9fe03622 <prvRGNRunTask+0x28a>
						line_attr[j].u32Color,
    9fe03666:	00191613          	slli	a2,s2,0x1
    9fe0366a:	964a                	add	a2,a2,s2
    9fe0366c:	060e                	slli	a2,a2,0x3
    9fe0366e:	9622                	add	a2,a2,s0
					CVI_OSDC_SetLineObjAttr(
    9fe03670:	01062883          	lw	a7,16(a2)
    9fe03674:	00c62803          	lw	a6,12(a2)
    9fe03678:	461c                	lw	a5,8(a2)
    9fe0367a:	4258                	lw	a4,4(a2)
    9fe0367c:	4214                	lw	a3,0(a2)
    9fe0367e:	4a50                	lw	a2,20(a2)
    9fe03680:	85da                	mv	a1,s6
    9fe03682:	0088                	addi	a0,sp,64
    9fe03684:	676090ef          	jal	ra,9fe0ccfa <CVI_OSDC_SetLineObjAttr>
					j++;
    9fe03688:	2905                	addiw	s2,s2,1
    9fe0368a:	bf61                	j	9fe03622 <prvRGNRunTask+0x28a>
		obj_attr = (RGN_CMPR_OBJ_ATTR_S *)((CVI_U8 *)rtos_cmdq.param_ptr + sizeof(RGN_CANVAS_CMPR_ATTR_S));
    9fe0368c:	03c16603          	lwu	a2,60(sp)
    9fe03690:	02014703          	lbu	a4,32(sp)
			for (i = 0; i < obj_num; ++i) {
    9fe03694:	4481                	li	s1,0
		obj_attr = (RGN_CMPR_OBJ_ATTR_S *)((CVI_U8 *)rtos_cmdq.param_ptr + sizeof(RGN_CANVAS_CMPR_ATTR_S));
    9fe03696:	01860793          	addi	a5,a2,24
    9fe0369a:	f43e                	sd	a5,40(sp)
			for (i = 0; i < obj_num; ++i) {
    9fe0369c:	de0703e3          	beqz	a4,9fe03482 <prvRGNRunTask+0xea>
    9fe036a0:	fff7069b          	addiw	a3,a4,-1
    9fe036a4:	02069713          	slli	a4,a3,0x20
    9fe036a8:	01b75693          	srli	a3,a4,0x1b
    9fe036ac:	03860613          	addi	a2,a2,56
    9fe036b0:	96b2                	add	a3,a3,a2
		line_num = 0;
    9fe036b2:	4481                	li	s1,0
				if (obj_attr[i].enObjType == RGN_CMPR_LINE) {
    9fe036b4:	4398                	lw	a4,0(a5)
    9fe036b6:	4609                	li	a2,2
    9fe036b8:	02c71c63          	bne	a4,a2,9fe036f0 <prvRGNRunTask+0x358>
					line_attr[line_num] = obj_attr[i].stLine;
    9fe036bc:	00149713          	slli	a4,s1,0x1
    9fe036c0:	0047a303          	lw	t1,4(a5)
    9fe036c4:	0087a883          	lw	a7,8(a5)
    9fe036c8:	00c7a803          	lw	a6,12(a5)
    9fe036cc:	4b88                	lw	a0,16(a5)
    9fe036ce:	4bcc                	lw	a1,20(a5)
    9fe036d0:	4f90                	lw	a2,24(a5)
    9fe036d2:	9726                	add	a4,a4,s1
    9fe036d4:	070e                	slli	a4,a4,0x3
    9fe036d6:	9722                	add	a4,a4,s0
					line_num++;
    9fe036d8:	2485                	addiw	s1,s1,1
					line_attr[line_num] = obj_attr[i].stLine;
    9fe036da:	00672023          	sw	t1,0(a4) # ffffffffffff8000 <_end+0xffffffff60138300>
    9fe036de:	01172223          	sw	a7,4(a4)
    9fe036e2:	01072423          	sw	a6,8(a4)
    9fe036e6:	c748                	sw	a0,12(a4)
    9fe036e8:	cb0c                	sw	a1,16(a4)
    9fe036ea:	cb50                	sw	a2,20(a4)
					line_num++;
    9fe036ec:	0ff4f493          	andi	s1,s1,255
			for (i = 0; i < obj_num; ++i) {
    9fe036f0:	02078793          	addi	a5,a5,32
    9fe036f4:	fcd790e3          	bne	a5,a3,9fe036b4 <prvRGNRunTask+0x31c>
			for (i = 0; i < line_num; ++i) {
    9fe036f8:	2481                	sext.w	s1,s1
    9fe036fa:	b361                	j	9fe03482 <prvRGNRunTask+0xea>
			canvas.format = OSD_ARGB4444;
    9fe036fc:	c4de                	sw	s7,72(sp)
			break;
    9fe036fe:	b5bd                	j	9fe0356c <prvRGNRunTask+0x1d4>
			canvas.format = OSD_LUT8;
    9fe03700:	47a1                	li	a5,8
    9fe03702:	c4be                	sw	a5,72(sp)
			break;
    9fe03704:	b5a5                	j	9fe0356c <prvRGNRunTask+0x1d4>
			canvas.format = OSD_ARGB8888;
    9fe03706:	c482                	sw	zero,72(sp)
			break;
    9fe03708:	b595                	j	9fe0356c <prvRGNRunTask+0x1d4>
					CVI_OSDC_SetBitmapObjAttr(
    9fe0370a:	0109a803          	lw	a6,16(s3)
    9fe0370e:	00c9a783          	lw	a5,12(s3)
    9fe03712:	0089a703          	lw	a4,8(s3)
    9fe03716:	0049a683          	lw	a3,4(s3)
    9fe0371a:	0149e603          	lwu	a2,20(s3)
    9fe0371e:	85da                	mv	a1,s6
    9fe03720:	4881                	li	a7,0
    9fe03722:	0088                	addi	a0,sp,64
    9fe03724:	5d2090ef          	jal	ra,9fe0ccf6 <CVI_OSDC_SetBitmapObjAttr>
    9fe03728:	bded                	j	9fe03622 <prvRGNRunTask+0x28a>
				*((unsigned int *)pvAddr + 1) = bs_size;
    9fe0372a:	57d2                	lw	a5,52(sp)
    9fe0372c:	c0dc                	sw	a5,4(s1)
    9fe0372e:	b5e1                	j	9fe035f6 <prvRGNRunTask+0x25e>

000000009fe03730 <cvi_audio_init_test>:
		}	\
	} while (0)
#endif
// just to build & compiler venc sdk, do not need run this
__attribute__((optimize("-O0"))) void cvi_audio_init_test(void)
{
    9fe03730:	1141                	addi	sp,sp,-16
    9fe03732:	e406                	sd	ra,8(sp)
    9fe03734:	e022                	sd	s0,0(sp)
    9fe03736:	0800                	addi	s0,sp,16

	aud_printf("Enter cvitek audio ssp algorithm test mode\n");
    9fe03738:	0000d517          	auipc	a0,0xd
    9fe0373c:	9c850513          	addi	a0,a0,-1592 # 9fe10100 <__rodata_start>
    9fe03740:	055080ef          	jal	ra,9fe0bf94 <printf>
	if (unit_test_triggered == 1) {
    9fe03744:	0001c797          	auipc	a5,0x1c
    9fe03748:	45478793          	addi	a5,a5,1108 # 9fe1fb98 <unit_test_triggered>
    9fe0374c:	439c                	lw	a5,0(a5)
    9fe0374e:	873e                	mv	a4,a5
    9fe03750:	4785                	li	a5,1
    9fe03752:	02f70563          	beq	a4,a5,9fe0377c <cvi_audio_init_test+0x4c>
		//already trigger
		return;

	} else {
		aud_printf("audio_ssp  first trigger test  begin.....!!!\n");
    9fe03756:	0000d517          	auipc	a0,0xd
    9fe0375a:	9da50513          	addi	a0,a0,-1574 # 9fe10130 <__rodata_start+0x30>
    9fe0375e:	037080ef          	jal	ra,9fe0bf94 <printf>
		aud_printf("audio_ssp  first trigger test  end!\n");
    9fe03762:	0000d517          	auipc	a0,0xd
    9fe03766:	9fe50513          	addi	a0,a0,-1538 # 9fe10160 <__rodata_start+0x60>
    9fe0376a:	02b080ef          	jal	ra,9fe0bf94 <printf>
		unit_test_triggered = 1;
    9fe0376e:	0001c797          	auipc	a5,0x1c
    9fe03772:	42a78793          	addi	a5,a5,1066 # 9fe1fb98 <unit_test_triggered>
    9fe03776:	4705                	li	a4,1
    9fe03778:	c398                	sw	a4,0(a5)
    9fe0377a:	a011                	j	9fe0377e <cvi_audio_init_test+0x4e>
		return;
    9fe0377c:	0001                	nop
	}
}
    9fe0377e:	60a2                	ld	ra,8(sp)
    9fe03780:	6402                	ld	s0,0(sp)
    9fe03782:	0141                	addi	sp,sp,16
    9fe03784:	8082                	ret

000000009fe03786 <prvAudioRunTask>:
	}
	return (ret&check_val);

}
void prvAudioRunTask(void *pvParameters)
{
    9fe03786:	716d                	addi	sp,sp,-272
    9fe03788:	e606                	sd	ra,264(sp)
    9fe0378a:	e226                	sd	s1,256(sp)
    9fe0378c:	f9ce                	sd	s3,240(sp)
    9fe0378e:	f1d6                	sd	s5,224(sp)
    9fe03790:	edda                	sd	s6,216(sp)
    9fe03792:	e9de                	sd	s7,208(sp)
    9fe03794:	e5e2                	sd	s8,200(sp)
    9fe03796:	fdca                	sd	s2,248(sp)
    9fe03798:	f5d2                	sd	s4,232(sp)
    9fe0379a:	e1e6                	sd	s9,192(sp)
    9fe0379c:	fd6a                	sd	s10,184(sp)
    9fe0379e:	f96e                	sd	s11,176(sp)
	//for spk out algorithm
	ST_SSP_RTOS_SPK_DATA_RET *pSpkSspRtosData_Ret;
	#ifdef AUDIO_UNIT_TEST
	cmdqu_t rtos_cmdq_back2Kernel;
	#endif
	cvi_audio_init_test();
    9fe037a0:	f91ff0ef          	jal	ra,9fe03730 <cvi_audio_init_test>
	printf("pAudioRunTask run Version:20220519\n");
    9fe037a4:	0000d517          	auipc	a0,0xd
    9fe037a8:	9e450513          	addi	a0,a0,-1564 # 9fe10188 <__rodata_start+0x88>
    9fe037ac:	7e8080ef          	jal	ra,9fe0bf94 <printf>

	xQueueAudioCmdqu = main_GetMODHandle(E_QUEUE_CMDQU);
    9fe037b0:	4515                	li	a0,5
    9fe037b2:	b3fff0ef          	jal	ra,9fe032f0 <main_GetMODHandle>
    9fe037b6:	87aa                	mv	a5,a0
    9fe037b8:	0001cc17          	auipc	s8,0x1c
    9fe037bc:	420c0c13          	addi	s8,s8,1056 # 9fe1fbd8 <xQueueAudioCmdqu>
	xQueueAudio = main_GetMODHandle(E_QUEUE_AUDIO);
    9fe037c0:	4519                	li	a0,6
	xQueueAudioCmdqu = main_GetMODHandle(E_QUEUE_CMDQU);
    9fe037c2:	00fc3023          	sd	a5,0(s8)
	xQueueAudio = main_GetMODHandle(E_QUEUE_AUDIO);
    9fe037c6:	b2bff0ef          	jal	ra,9fe032f0 <main_GetMODHandle>
	unsigned int prev_msg_counter = -1;//counter to check the package from cviaudio_core.ko to rtos
    9fe037ca:	57fd                	li	a5,-1
    9fe037cc:	ec3e                	sd	a5,24(sp)
						if (pindicator->chunks_number >= 5)
							vTaskDelay(pdMS_TO_TICKS(10));
						else if (pindicator->chunks_number >= 3)
							vTaskDelay(pdMS_TO_TICKS(5));
						else
							usleep(3000);
    9fe037ce:	6785                	lui	a5,0x1
	xQueueAudio = main_GetMODHandle(E_QUEUE_AUDIO);
    9fe037d0:	0001ca97          	auipc	s5,0x1c
    9fe037d4:	400a8a93          	addi	s5,s5,1024 # 9fe1fbd0 <xQueueAudio>
							usleep(3000);
    9fe037d8:	bb878793          	addi	a5,a5,-1096 # bb8 <_EL1_STACK_SIZE+0x3b8>
	xQueueAudio = main_GetMODHandle(E_QUEUE_AUDIO);
    9fe037dc:	00aab023          	sd	a0,0(s5)
    9fe037e0:	0001c497          	auipc	s1,0x1c
    9fe037e4:	3d848493          	addi	s1,s1,984 # 9fe1fbb8 <pstSspBufTbl>
    9fe037e8:	0001cb97          	auipc	s7,0x1c
    9fe037ec:	3c8b8b93          	addi	s7,s7,968 # 9fe1fbb0 <pindicator>
		if (rtos_cmdq.ip_id != IP_AUDIO) {
    9fe037f0:	4b15                	li	s6,5
						else if (pindicator->chunks_number >= 3)
    9fe037f2:	4989                	li	s3,2
							usleep(3000);
    9fe037f4:	f43e                	sd	a5,40(sp)
    9fe037f6:	a089                	j	9fe03838 <prvAudioRunTask+0xb2>
			aud_error("invalid ip_id[%d] into AudioRunTask\n", rtos_cmdq.ip_id);
    9fe037f8:	0aa00613          	li	a2,170
    9fe037fc:	0000d597          	auipc	a1,0xd
    9fe03800:	78458593          	addi	a1,a1,1924 # 9fe10f80 <__func__.1>
    9fe03804:	0000d517          	auipc	a0,0xd
    9fe03808:	9ac50513          	addi	a0,a0,-1620 # 9fe101b0 <__rodata_start+0xb0>
    9fe0380c:	788080ef          	jal	ra,9fe0bf94 <printf>
			//printf("CVIAUDIO_RTOS_CMD_SSP_PROC_BLOCK---success[0x%x][0x%x][0x%x]\n", pvincent[0], pvincent[1], pvincent[2]);
			clean_dcache_range((uintptr_t)pstBlockFrm, sizeof(ST_CVIAUDIO_BLOCK_FRAME));
			clean_dcache_range((uintptr_t)pstBlockFrm->mic_in_addr, 1280);
			clean_dcache_range((uintptr_t)pstBlockFrm->output_addr, 1280);
			clean_dcache_range((uintptr_t)pstBlockFrm->ref_in_addr, 1280);
			xQueueSend(xQueueAudioCmdqu, &rtos_cmdq, 0U);
    9fe03810:	000c3503          	ld	a0,0(s8)
    9fe03814:	4681                	li	a3,0
    9fe03816:	4601                	li	a2,0
    9fe03818:	180c                	addi	a1,sp,48
    9fe0381a:	21e0b0ef          	jal	ra,9fe0ea38 <xQueueGenericSend>
	p_cmdqu->ip_id = -1;
    9fe0381e:	03015783          	lhu	a5,48(sp)
    9fe03822:	7761                	lui	a4,0xffff8
		xQueueReceive(xQueueAudio, &rtos_cmdq, portMAX_DELAY);
    9fe03824:	000ab503          	ld	a0,0(s5)
	p_cmdqu->ip_id = -1;
    9fe03828:	8ff9                	and	a5,a5,a4
    9fe0382a:	6721                	lui	a4,0x8
    9fe0382c:	177d                	addi	a4,a4,-1
    9fe0382e:	8fd9                	or	a5,a5,a4
    9fe03830:	02f11823          	sh	a5,48(sp)
	p_cmdqu->param_ptr = -1;
    9fe03834:	57fd                	li	a5,-1
    9fe03836:	da3e                	sw	a5,52(sp)
		xQueueReceive(xQueueAudio, &rtos_cmdq, portMAX_DELAY);
    9fe03838:	567d                	li	a2,-1
    9fe0383a:	180c                	addi	a1,sp,48
    9fe0383c:	3fc0b0ef          	jal	ra,9fe0ec38 <xQueueReceive>
		if (rtos_cmdq.ip_id != IP_AUDIO) {
    9fe03840:	03014683          	lbu	a3,48(sp)
    9fe03844:	fb669ae3          	bne	a3,s6,9fe037f8 <prvAudioRunTask+0x72>
		switch (rtos_cmdq.cmd_id) {
    9fe03848:	76c2                	ld	a3,48(sp)
    9fe0384a:	47b5                	li	a5,13
    9fe0384c:	82a1                	srli	a3,a3,0x8
    9fe0384e:	07f6f693          	andi	a3,a3,127
    9fe03852:	40d7ee63          	bltu	a5,a3,9fe03c6e <prvAudioRunTask+0x4e8>
    9fe03856:	0000d717          	auipc	a4,0xd
    9fe0385a:	6ca70713          	addi	a4,a4,1738 # 9fe10f20 <__func__.4+0x190>
    9fe0385e:	00269793          	slli	a5,a3,0x2
    9fe03862:	97ba                	add	a5,a5,a4
    9fe03864:	439c                	lw	a5,0(a5)
    9fe03866:	97ba                	add	a5,a5,a4
    9fe03868:	8782                	jr	a5
						(ST_CVIAUDIO_MAILBOX_BLOCK *)rtos_cmdq.param_ptr;
    9fe0386a:	03416903          	lwu	s2,52(sp)
			inv_dcache_range((uintptr_t)pstAudBlockMailBox, sizeof(ST_CVIAUDIO_MAILBOX_BLOCK));
    9fe0386e:	45c1                	li	a1,16
    9fe03870:	854a                	mv	a0,s2
    9fe03872:	69e080ef          	jal	ra,9fe0bf10 <inv_dcache_range>
			if (pstAudBlockMailBox->u64RevMask != CVIAUDIO_RTOS_MAGIC_WORD_USERSPACE_BLOCK_MODE) {
    9fe03876:	00093683          	ld	a3,0(s2)
    9fe0387a:	0bb00793          	li	a5,187
    9fe0387e:	50f68463          	beq	a3,a5,9fe03d86 <prvAudioRunTask+0x600>
				aud_error("[CVIAUDIO_RTOS_CMD_SSP_INIT_BLOCK]magic word mismatch[0x%lx]\n",
    9fe03882:	0000d597          	auipc	a1,0xd
    9fe03886:	6fe58593          	addi	a1,a1,1790 # 9fe10f80 <__func__.1>
    9fe0388a:	21300613          	li	a2,531
    9fe0388e:	0000d517          	auipc	a0,0xd
    9fe03892:	d7250513          	addi	a0,a0,-654 # 9fe10600 <__rodata_start+0x500>
    9fe03896:	6fe080ef          	jal	ra,9fe0bf94 <printf>
				rtos_cmdq.param_ptr = CVIAUDIO_RTOS_BLOCK_MODE_FAILURE_FLAG;
    9fe0389a:	0fa00793          	li	a5,250
				clean_dcache_range((uintptr_t)pstAudBlockMailBox, sizeof(ST_CVIAUDIO_MAILBOX_BLOCK));
    9fe0389e:	854a                	mv	a0,s2
    9fe038a0:	45c1                	li	a1,16
				rtos_cmdq.param_ptr = CVIAUDIO_RTOS_BLOCK_MODE_FAILURE_FLAG;
    9fe038a2:	da3e                	sw	a5,52(sp)
			clean_dcache_range((uintptr_t)pstBlockFrm->ref_in_addr, 1280);
    9fe038a4:	690080ef          	jal	ra,9fe0bf34 <clean_dcache_range>
    9fe038a8:	b7a5                	j	9fe03810 <prvAudioRunTask+0x8a>
			inv_dcache_range((uintptr_t)output_addr, 320);
    9fe038aa:	03416503          	lwu	a0,52(sp)
    9fe038ae:	14000593          	li	a1,320
    9fe038b2:	65e080ef          	jal	ra,9fe0bf10 <inv_dcache_range>
			if (ret == 0) {
    9fe038b6:	b7a5                	j	9fe0381e <prvAudioRunTask+0x98>
			if (!paudio_ssp_block) {
    9fe038b8:	0001c797          	auipc	a5,0x1c
    9fe038bc:	2e878793          	addi	a5,a5,744 # 9fe1fba0 <paudio_ssp_block>
    9fe038c0:	639c                	ld	a5,0(a5)
    9fe038c2:	66078063          	beqz	a5,9fe03f22 <prvAudioRunTask+0x79c>
			ST_CVIAUDIO_BLOCK_FRAME *pstBlockFrm = (ST_CVIAUDIO_BLOCK_FRAME *)rtos_cmdq.param_ptr;
    9fe038c6:	03416903          	lwu	s2,52(sp)
			inv_dcache_range((uintptr_t)pstBlockFrm, sizeof(ST_CVIAUDIO_BLOCK_FRAME));
    9fe038ca:	02000593          	li	a1,32
    9fe038ce:	854a                	mv	a0,s2
    9fe038d0:	640080ef          	jal	ra,9fe0bf10 <inv_dcache_range>
			inv_dcache_range((uintptr_t)pstBlockFrm->mic_in_addr, 1280);
    9fe038d4:	00893503          	ld	a0,8(s2)
    9fe038d8:	50000593          	li	a1,1280
    9fe038dc:	634080ef          	jal	ra,9fe0bf10 <inv_dcache_range>
			inv_dcache_range((uintptr_t)pstBlockFrm->output_addr, 1280);
    9fe038e0:	01893503          	ld	a0,24(s2)
    9fe038e4:	50000593          	li	a1,1280
    9fe038e8:	628080ef          	jal	ra,9fe0bf10 <inv_dcache_range>
			inv_dcache_range((uintptr_t)pstBlockFrm->ref_in_addr, 1280);
    9fe038ec:	01093503          	ld	a0,16(s2)
    9fe038f0:	50000593          	li	a1,1280
    9fe038f4:	61c080ef          	jal	ra,9fe0bf10 <inv_dcache_range>
			if (pstBlockFrm->u64RevMask != CVIAUDIO_RTOS_MAGIC_WORD_USERSPACE_BLOCK_MODE) {
    9fe038f8:	00093683          	ld	a3,0(s2)
    9fe038fc:	0bb00793          	li	a5,187
    9fe03900:	64f68963          	beq	a3,a5,9fe03f52 <prvAudioRunTask+0x7cc>
				aud_error("[CVIAUDIO_RTOS_CMD_SSP_PROC_BLOCK]magic word mismatch[0x%lx]\n",
    9fe03904:	0000d597          	auipc	a1,0xd
    9fe03908:	67c58593          	addi	a1,a1,1660 # 9fe10f80 <__func__.1>
    9fe0390c:	26d00613          	li	a2,621
    9fe03910:	0000d517          	auipc	a0,0xd
    9fe03914:	f9050513          	addi	a0,a0,-112 # 9fe108a0 <__rodata_start+0x7a0>
    9fe03918:	67c080ef          	jal	ra,9fe0bf94 <printf>
				rtos_cmdq.param_ptr = CVIAUDIO_RTOS_BLOCK_MODE_FAILURE_FLAG;
    9fe0391c:	0fa00793          	li	a5,250
				clean_dcache_range((uintptr_t)pstBlockFrm, sizeof(ST_CVIAUDIO_BLOCK_FRAME));
    9fe03920:	854a                	mv	a0,s2
    9fe03922:	02000593          	li	a1,32
				rtos_cmdq.param_ptr = CVIAUDIO_RTOS_BLOCK_MODE_FAILURE_FLAG;
    9fe03926:	da3e                	sw	a5,52(sp)
				clean_dcache_range((uintptr_t)pstBlockFrm, sizeof(ST_CVIAUDIO_BLOCK_FRAME));
    9fe03928:	bfb5                	j	9fe038a4 <prvAudioRunTask+0x11e>
				ST_SSP_RTOS_INIT *pSspRtosCfg = rtos_cmdq.param_ptr;
    9fe0392a:	03416783          	lwu	a5,52(sp)
				pstSspBufTbl = &pSspRtosCfg->buffertbl[0];
    9fe0392e:	00878713          	addi	a4,a5,8
    9fe03932:	e098                	sd	a4,0(s1)
				pSpkSspRtosData_Ret = (ST_SSP_RTOS_SPK_DATA_RET *)pSspRtosCfg->CbPhyAddr;
    9fe03934:	0047e783          	lwu	a5,4(a5)
    9fe03938:	f03e                	sd	a5,32(sp)
				aud_debug("[Rtos][Rtos_space]xxxpSspRtosCfg[0x%p]\n", pSspRtosCfg);
    9fe0393a:	b5d5                	j	9fe0381e <prvAudioRunTask+0x98>
			if (paudio_ssp_handle == NULL || pstSspBufTbl == NULL) {
    9fe0393c:	0001c797          	auipc	a5,0x1c
    9fe03940:	26c78793          	addi	a5,a5,620 # 9fe1fba8 <paudio_ssp_handle>
    9fe03944:	639c                	ld	a5,0(a5)
    9fe03946:	c399                	beqz	a5,9fe0394c <prvAudioRunTask+0x1c6>
    9fe03948:	609c                	ld	a5,0(s1)
    9fe0394a:	ef8d                	bnez	a5,9fe03984 <prvAudioRunTask+0x1fe>
				aud_error("Error cannot process with NULL handle[%s][%d]\n", __func__, __LINE__);
    9fe0394c:	0000d697          	auipc	a3,0xd
    9fe03950:	63468693          	addi	a3,a3,1588 # 9fe10f80 <__func__.1>
    9fe03954:	0fb00713          	li	a4,251
    9fe03958:	0fb00613          	li	a2,251
    9fe0395c:	85b6                	mv	a1,a3
    9fe0395e:	0000d517          	auipc	a0,0xd
    9fe03962:	99a50513          	addi	a0,a0,-1638 # 9fe102f8 <__rodata_start+0x1f8>
    9fe03966:	62e080ef          	jal	ra,9fe0bf94 <printf>
				break;
    9fe0396a:	bd55                	j	9fe0381e <prvAudioRunTask+0x98>
				if (bCheck_input_full) {
    9fe0396c:	14091363          	bnez	s2,9fe03ab2 <prvAudioRunTask+0x32c>
				} while ((ret_val > 0) && ssp_running);
    9fe03970:	ea0807e3          	beqz	a6,9fe0381e <prvAudioRunTask+0x98>
    9fe03974:	0001c797          	auipc	a5,0x1c
    9fe03978:	25478793          	addi	a5,a5,596 # 9fe1fbc8 <ssp_running>
    9fe0397c:	0007c783          	lbu	a5,0(a5)
    9fe03980:	e8078fe3          	beqz	a5,9fe0381e <prvAudioRunTask+0x98>
				ret_val = _audio_task_check_ssp_proc_data_valid(pindicator);
    9fe03984:	000bb903          	ld	s2,0(s7)
	if (!pIndicator) {
    9fe03988:	34090c63          	beqz	s2,9fe03ce0 <prvAudioRunTask+0x55a>
	if (pIndicator->channel_nums > 2 || pIndicator->channel_nums < 1) {
    9fe0398c:	00494683          	lbu	a3,4(s2)
    9fe03990:	4705                	li	a4,1
	unsigned char check_val = 1;
    9fe03992:	4805                	li	a6,1
	if (pIndicator->channel_nums > 2 || pIndicator->channel_nums < 1) {
    9fe03994:	fff6879b          	addiw	a5,a3,-1
    9fe03998:	0ff7f793          	andi	a5,a5,255
    9fe0399c:	00f77f63          	bgeu	a4,a5,9fe039ba <prvAudioRunTask+0x234>
		aud_error("[error][rtos][audio_task]channel numbers[%d] invalid\n",
    9fe039a0:	07700613          	li	a2,119
    9fe039a4:	0000d597          	auipc	a1,0xd
    9fe039a8:	5b458593          	addi	a1,a1,1460 # 9fe10f58 <__func__.0>
    9fe039ac:	0000d517          	auipc	a0,0xd
    9fe039b0:	9f450513          	addi	a0,a0,-1548 # 9fe103a0 <__rodata_start+0x2a0>
    9fe039b4:	5e0080ef          	jal	ra,9fe0bf94 <printf>
		check_val = 0;
    9fe039b8:	4801                	li	a6,0
	if (pIndicator->chunks_number <= 0 ||
    9fe039ba:	00094683          	lbu	a3,0(s2)
    9fe039be:	4761                	li	a4,24
    9fe039c0:	fff6879b          	addiw	a5,a3,-1
    9fe039c4:	0ff7f793          	andi	a5,a5,255
    9fe039c8:	26f76e63          	bltu	a4,a5,9fe03c44 <prvAudioRunTask+0x4be>
	if (pIndicator->Wpt_index > CVIAUDIO_SSP_CHUNK_NUMBERS) {
    9fe039cc:	00194683          	lbu	a3,1(s2)
    9fe039d0:	47e5                	li	a5,25
    9fe039d2:	20d7ed63          	bltu	a5,a3,9fe03bec <prvAudioRunTask+0x466>
	if (!pIndicator->ssp_on) {
    9fe039d6:	00594783          	lbu	a5,5(s2)
    9fe039da:	22078863          	beqz	a5,9fe03c0a <prvAudioRunTask+0x484>
				if (!ret_val) {
    9fe039de:	24080363          	beqz	a6,9fe03c24 <prvAudioRunTask+0x49e>
				if ((pindicator->msg_counter == prev_msg_counter)) {
    9fe039e2:	000bb503          	ld	a0,0(s7)
    9fe039e6:	6762                	ld	a4,24(sp)
    9fe039e8:	455c                	lw	a5,12(a0)
    9fe039ea:	28f70f63          	beq	a4,a5,9fe03c88 <prvAudioRunTask+0x502>
				target_pkt_cnt = pindicator->chunks_number;
    9fe039ee:	00054a03          	lbu	s4,0(a0)
				cur_pt = pindicator->Ppt_index;
    9fe039f2:	00354d03          	lbu	s10,3(a0)
				while (proc_pkt_cnt < target_pkt_cnt) {
    9fe039f6:	5a0a0c63          	beqz	s4,9fe03fae <prvAudioRunTask+0x828>
					if (pstSspBufTbl[cur_pt].bBufOccupy != CVIAUDIO_BUF_TBL_INPUT) {
    9fe039fa:	608c                	ld	a1,0(s1)
				cur_pt = pindicator->Ppt_index;
    9fe039fc:	876a                	mv	a4,s10
				proc_pkt_cnt = 0;
    9fe039fe:	4601                	li	a2,0
					if (pstSspBufTbl[cur_pt].bBufOccupy != CVIAUDIO_BUF_TBL_INPUT) {
    9fe03a00:	00571693          	slli	a3,a4,0x5
    9fe03a04:	96ae                	add	a3,a3,a1
    9fe03a06:	0006c903          	lbu	s2,0(a3)
    9fe03a0a:	4785                	li	a5,1
    9fe03a0c:	1af91c63          	bne	s2,a5,9fe03bc4 <prvAudioRunTask+0x43e>
					cur_pt = (cur_pt + 1) % CVIAUDIO_SSP_CHUNK_NUMBERS;
    9fe03a10:	2705                	addiw	a4,a4,1
    9fe03a12:	47e5                	li	a5,25
    9fe03a14:	02f7673b          	remw	a4,a4,a5
					proc_pkt_cnt += 1;
    9fe03a18:	2605                	addiw	a2,a2,1
    9fe03a1a:	0ff67613          	andi	a2,a2,255
					cur_pt = (cur_pt + 1) % CVIAUDIO_SSP_CHUNK_NUMBERS;
    9fe03a1e:	0ff77713          	andi	a4,a4,255
				while (proc_pkt_cnt < target_pkt_cnt) {
    9fe03a22:	fcca1fe3          	bne	s4,a2,9fe03a00 <prvAudioRunTask+0x27a>
				chn_num = pindicator->channel_nums;
    9fe03a26:	00454783          	lbu	a5,4(a0)
				proc_pkt_cnt = 0;
    9fe03a2a:	4d81                	li	s11,0
				chn_num = pindicator->channel_nums;
    9fe03a2c:	e43e                	sd	a5,8(sp)
				while ((proc_pkt_cnt != target_pkt_cnt) && (bCheck_input_full)) {
    9fe03a2e:	f34d8fe3          	beq	s11,s4,9fe0396c <prvAudioRunTask+0x1e6>
    9fe03a32:	f2090fe3          	beqz	s2,9fe03970 <prvAudioRunTask+0x1ea>
						ret_val = CviAud_Algo_Process(paudio_ssp_handle,
    9fe03a36:	0001c797          	auipc	a5,0x1c
    9fe03a3a:	17278793          	addi	a5,a5,370 # 9fe1fba8 <paudio_ssp_handle>
								pstSspBufTbl[cur_pt].mic_in_addr,
    9fe03a3e:	6098                	ld	a4,0(s1)
						ret_val = CviAud_Algo_Process(paudio_ssp_handle,
    9fe03a40:	6388                	ld	a0,0(a5)
					if (chn_num == 2 || pindicator->ssp_with_aec) {
    9fe03a42:	67a2                	ld	a5,8(sp)
								pstSspBufTbl[cur_pt].mic_in_addr,
    9fe03a44:	005d1c93          	slli	s9,s10,0x5
    9fe03a48:	9766                	add	a4,a4,s9
						ret_val = CviAud_Algo_Process(paudio_ssp_handle,
    9fe03a4a:	670c                	ld	a1,8(a4)
    9fe03a4c:	6f14                	ld	a3,24(a4)
					if (chn_num == 2 || pindicator->ssp_with_aec) {
    9fe03a4e:	01378863          	beq	a5,s3,9fe03a5e <prvAudioRunTask+0x2d8>
    9fe03a52:	000bb603          	ld	a2,0(s7)
    9fe03a56:	00664603          	lbu	a2,6(a2)
    9fe03a5a:	14060d63          	beqz	a2,9fe03bb4 <prvAudioRunTask+0x42e>
						ret_val = CviAud_Algo_Process(paudio_ssp_handle,
    9fe03a5e:	6b10                	ld	a2,16(a4)
    9fe03a60:	0a000713          	li	a4,160
    9fe03a64:	63c000ef          	jal	ra,9fe040a0 <CviAud_Algo_Process>
    9fe03a68:	0ff57813          	andi	a6,a0,255
					if (ret_val <= 0)
    9fe03a6c:	12080563          	beqz	a6,9fe03b96 <prvAudioRunTask+0x410>
						pstSspBufTbl[cur_pt].bBufOccupy = CVIAUDIO_BUF_TBL_AFTER_SSP;
    9fe03a70:	6098                	ld	a4,0(s1)
    9fe03a72:	9766                	add	a4,a4,s9
    9fe03a74:	01370023          	sb	s3,0(a4)
					cur_pt = (cur_pt + 1) % CVIAUDIO_SSP_CHUNK_NUMBERS;
    9fe03a78:	001d079b          	addiw	a5,s10,1
    9fe03a7c:	4765                	li	a4,25
    9fe03a7e:	02e7e7bb          	remw	a5,a5,a4
					proc_pkt_cnt += 1;
    9fe03a82:	001d889b          	addiw	a7,s11,1
    9fe03a86:	0ff8fd93          	andi	s11,a7,255
					cur_pt = (cur_pt + 1) % CVIAUDIO_SSP_CHUNK_NUMBERS;
    9fe03a8a:	0ff7fd13          	andi	s10,a5,255
					if (proc_pkt_cnt > (CVIAUDIO_SSP_CHUNK_NUMBERS + 1)) {
    9fe03a8e:	47ed                	li	a5,27
    9fe03a90:	f8fd9fe3          	bne	s11,a5,9fe03a2e <prvAudioRunTask+0x2a8>
						aud_error("[audio_task]proc_pkt_cnt abnormal..[%d]\n",
    9fe03a94:	46ed                	li	a3,27
    9fe03a96:	14500613          	li	a2,325
    9fe03a9a:	0000d597          	auipc	a1,0xd
    9fe03a9e:	4e658593          	addi	a1,a1,1254 # 9fe10f80 <__func__.1>
    9fe03aa2:	0000d517          	auipc	a0,0xd
    9fe03aa6:	b1650513          	addi	a0,a0,-1258 # 9fe105b8 <__rodata_start+0x4b8>
    9fe03aaa:	e442                	sd	a6,8(sp)
    9fe03aac:	4e8080ef          	jal	ra,9fe0bf94 <printf>
				if (bCheck_input_full) {
    9fe03ab0:	6822                	ld	a6,8(sp)
					pindicator->Ppt_index = cur_pt;
    9fe03ab2:	000bb703          	ld	a4,0(s7)
					clean_dcache_range((uintptr_t)pindicator,
    9fe03ab6:	45c1                	li	a1,16
    9fe03ab8:	e442                	sd	a6,8(sp)
					pindicator->Ppt_index = cur_pt;
    9fe03aba:	01a701a3          	sb	s10,3(a4)
					prev_msg_counter = pindicator->msg_counter;
    9fe03abe:	000bb503          	ld	a0,0(s7)
    9fe03ac2:	455c                	lw	a5,12(a0)
    9fe03ac4:	ec3e                	sd	a5,24(sp)
					pindicator->msg_counter += 1;
    9fe03ac6:	2785                	addiw	a5,a5,1
    9fe03ac8:	c55c                	sw	a5,12(a0)
					clean_dcache_range((uintptr_t)pindicator,
    9fe03aca:	46a080ef          	jal	ra,9fe0bf34 <clean_dcache_range>
					clean_dcache_range((uintptr_t)pstSspBufTbl,
    9fe03ace:	6088                	ld	a0,0(s1)
    9fe03ad0:	32000593          	li	a1,800
    9fe03ad4:	460080ef          	jal	ra,9fe0bf34 <clean_dcache_range>
					xQueueSend(xQueueAudioCmdqu, &rtos_cmdq, 0U);
    9fe03ad8:	000c3503          	ld	a0,0(s8)
    9fe03adc:	4681                	li	a3,0
    9fe03ade:	4601                	li	a2,0
    9fe03ae0:	180c                	addi	a1,sp,48
    9fe03ae2:	7570a0ef          	jal	ra,9fe0ea38 <xQueueGenericSend>
    9fe03ae6:	6822                	ld	a6,8(sp)
    9fe03ae8:	b561                	j	9fe03970 <prvAudioRunTask+0x1ea>
			if (paudio_ssp_handle == NULL) {
    9fe03aea:	0001c797          	auipc	a5,0x1c
    9fe03aee:	0be78793          	addi	a5,a5,190 # 9fe1fba8 <paudio_ssp_handle>
    9fe03af2:	6388                	ld	a0,0(a5)
    9fe03af4:	3e050d63          	beqz	a0,9fe03eee <prvAudioRunTask+0x768>
				CviAud_Algo_DeInit(paudio_ssp_handle);
    9fe03af8:	614000ef          	jal	ra,9fe0410c <CviAud_Algo_DeInit>
				paudio_ssp_handle = NULL;
    9fe03afc:	0001c797          	auipc	a5,0x1c
    9fe03b00:	0a07b623          	sd	zero,172(a5) # 9fe1fba8 <paudio_ssp_handle>
			rtos_cmdq.ip_id = IP_AUDIO;
    9fe03b04:	03015783          	lhu	a5,48(sp)
    9fe03b08:	7761                	lui	a4,0xffff8
			xQueueSend(xQueueAudioCmdqu, &rtos_cmdq, 0U);
    9fe03b0a:	000c3503          	ld	a0,0(s8)
			rtos_cmdq.ip_id = IP_AUDIO;
    9fe03b0e:	8ff9                	and	a5,a5,a4
    9fe03b10:	2057e793          	ori	a5,a5,517
			xQueueSend(xQueueAudioCmdqu, &rtos_cmdq, 0U);
    9fe03b14:	4681                	li	a3,0
    9fe03b16:	4601                	li	a2,0
    9fe03b18:	180c                	addi	a1,sp,48
			rtos_cmdq.ip_id = IP_AUDIO;
    9fe03b1a:	02f11823          	sh	a5,48(sp)
			ssp_running = 0;
    9fe03b1e:	0001c797          	auipc	a5,0x1c
    9fe03b22:	0a078523          	sb	zero,170(a5) # 9fe1fbc8 <ssp_running>
			xQueueSend(xQueueAudioCmdqu, &rtos_cmdq, 0U);
    9fe03b26:	7130a0ef          	jal	ra,9fe0ea38 <xQueueGenericSend>
			break;
    9fe03b2a:	b9d5                	j	9fe0381e <prvAudioRunTask+0x98>
			rtos_cmdq.param_ptr = pSpkSspRtosData_Ret;
    9fe03b2c:	7782                	ld	a5,32(sp)
			xQueueSend(xQueueAudioCmdqu, &rtos_cmdq, 0U);
    9fe03b2e:	000c3503          	ld	a0,0(s8)
    9fe03b32:	4681                	li	a3,0
    9fe03b34:	4601                	li	a2,0
    9fe03b36:	180c                	addi	a1,sp,48
			rtos_cmdq.param_ptr = pSpkSspRtosData_Ret;
    9fe03b38:	da3e                	sw	a5,52(sp)
			xQueueSend(xQueueAudioCmdqu, &rtos_cmdq, 0U);
    9fe03b3a:	6ff0a0ef          	jal	ra,9fe0ea38 <xQueueGenericSend>
			break;
    9fe03b3e:	b1c5                	j	9fe0381e <prvAudioRunTask+0x98>
			if (paudio_ssp_block) {
    9fe03b40:	0001c797          	auipc	a5,0x1c
    9fe03b44:	06078793          	addi	a5,a5,96 # 9fe1fba0 <paudio_ssp_block>
    9fe03b48:	6388                	ld	a0,0(a5)
    9fe03b4a:	3a050f63          	beqz	a0,9fe03f08 <prvAudioRunTask+0x782>
				CviAud_Algo_DeInit(paudio_ssp_block);
    9fe03b4e:	5be000ef          	jal	ra,9fe0410c <CviAud_Algo_DeInit>
				paudio_ssp_block = NULL;
    9fe03b52:	0001c797          	auipc	a5,0x1c
    9fe03b56:	0407b723          	sd	zero,78(a5) # 9fe1fba0 <paudio_ssp_block>
    9fe03b5a:	b95d                	j	9fe03810 <prvAudioRunTask+0x8a>
			ST_CVIAUDIO_MAILBOX *gpstCviaudioMailBox= (ST_CVIAUDIO_MAILBOX *)rtos_cmdq.param_ptr;
    9fe03b5c:	03416903          	lwu	s2,52(sp)
			inv_dcache_range((uintptr_t)gpstCviaudioMailBox, sizeof(ST_CVIAUDIO_MAILBOX));
    9fe03b60:	02000593          	li	a1,32
    9fe03b64:	854a                	mv	a0,s2
    9fe03b66:	3aa080ef          	jal	ra,9fe0bf10 <inv_dcache_range>
			if (gpstCviaudioMailBox->u64RevMask == CVIAUDIO_RTOS_MAGIC_WORD_KERNEL_BIND_MODE) {
    9fe03b6a:	00093703          	ld	a4,0(s2)
    9fe03b6e:	09900793          	li	a5,153
    9fe03b72:	18f70463          	beq	a4,a5,9fe03cfa <prvAudioRunTask+0x574>
				aud_error("[SSP]ERROR [%s][%d]...force break\n", __func__, __LINE__);
    9fe03b76:	0000d697          	auipc	a3,0xd
    9fe03b7a:	40a68693          	addi	a3,a3,1034 # 9fe10f80 <__func__.1>
    9fe03b7e:	0cf00713          	li	a4,207
    9fe03b82:	0cf00613          	li	a2,207
    9fe03b86:	85b6                	mv	a1,a3
    9fe03b88:	0000c517          	auipc	a0,0xc
    9fe03b8c:	67050513          	addi	a0,a0,1648 # 9fe101f8 <__rodata_start+0xf8>
    9fe03b90:	404080ef          	jal	ra,9fe0bf94 <printf>
				break;
    9fe03b94:	b169                	j	9fe0381e <prvAudioRunTask+0x98>
						aud_error("[audio_task]CviAudio_Algo_Process error!!!\n");
    9fe03b96:	13f00613          	li	a2,319
    9fe03b9a:	0000d597          	auipc	a1,0xd
    9fe03b9e:	3e658593          	addi	a1,a1,998 # 9fe10f80 <__func__.1>
    9fe03ba2:	0000d517          	auipc	a0,0xd
    9fe03ba6:	9ce50513          	addi	a0,a0,-1586 # 9fe10570 <__rodata_start+0x470>
    9fe03baa:	e842                	sd	a6,16(sp)
    9fe03bac:	3e8080ef          	jal	ra,9fe0bf94 <printf>
    9fe03bb0:	6842                	ld	a6,16(sp)
    9fe03bb2:	b5d9                	j	9fe03a78 <prvAudioRunTask+0x2f2>
						ret_val = CviAud_Algo_Process(paudio_ssp_handle,
    9fe03bb4:	0a000713          	li	a4,160
    9fe03bb8:	4601                	li	a2,0
    9fe03bba:	4e6000ef          	jal	ra,9fe040a0 <CviAud_Algo_Process>
    9fe03bbe:	0ff57813          	andi	a6,a0,255
    9fe03bc2:	b56d                	j	9fe03a6c <prvAudioRunTask+0x2e6>
						inv_dcache_range((uintptr_t)pindicator, sizeof(ST_SSP_RTOS_INDICATOR));
    9fe03bc4:	45c1                	li	a1,16
    9fe03bc6:	e442                	sd	a6,8(sp)
    9fe03bc8:	348080ef          	jal	ra,9fe0bf10 <inv_dcache_range>
						inv_dcache_range((uintptr_t)pstSspBufTbl,
    9fe03bcc:	6088                	ld	a0,0(s1)
    9fe03bce:	32000593          	li	a1,800
						bCheck_input_full = 0;
    9fe03bd2:	4901                	li	s2,0
						inv_dcache_range((uintptr_t)pstSspBufTbl,
    9fe03bd4:	33c080ef          	jal	ra,9fe0bf10 <inv_dcache_range>
				cur_pt = pindicator->Ppt_index;
    9fe03bd8:	000bb503          	ld	a0,0(s7)
						break;
    9fe03bdc:	6822                	ld	a6,8(sp)
				proc_pkt_cnt = 0;
    9fe03bde:	4d81                	li	s11,0
				chn_num = pindicator->channel_nums;
    9fe03be0:	00454783          	lbu	a5,4(a0)
				cur_pt = pindicator->Ppt_index;
    9fe03be4:	00354d03          	lbu	s10,3(a0)
				chn_num = pindicator->channel_nums;
    9fe03be8:	e43e                	sd	a5,8(sp)
				while ((proc_pkt_cnt != target_pkt_cnt) && (bCheck_input_full)) {
    9fe03bea:	b591                	j	9fe03a2e <prvAudioRunTask+0x2a8>
		aud_error("[error][rtos][audio_task]wpt_index invalid range[%d]\n",
    9fe03bec:	08400613          	li	a2,132
    9fe03bf0:	0000d597          	auipc	a1,0xd
    9fe03bf4:	36858593          	addi	a1,a1,872 # 9fe10f58 <__func__.0>
    9fe03bf8:	0000d517          	auipc	a0,0xd
    9fe03bfc:	8a050513          	addi	a0,a0,-1888 # 9fe10498 <__rodata_start+0x398>
    9fe03c00:	394080ef          	jal	ra,9fe0bf94 <printf>
	if (!pIndicator->ssp_on) {
    9fe03c04:	00594783          	lbu	a5,5(s2)
    9fe03c08:	ef91                	bnez	a5,9fe03c24 <prvAudioRunTask+0x49e>
		aud_error("[error][rtos][audio_task]ssp_on invalid[%d]\n",
    9fe03c0a:	4681                	li	a3,0
    9fe03c0c:	08a00613          	li	a2,138
    9fe03c10:	0000d597          	auipc	a1,0xd
    9fe03c14:	34858593          	addi	a1,a1,840 # 9fe10f58 <__func__.0>
    9fe03c18:	0000d517          	auipc	a0,0xd
    9fe03c1c:	83050513          	addi	a0,a0,-2000 # 9fe10448 <__rodata_start+0x348>
    9fe03c20:	374080ef          	jal	ra,9fe0bf94 <printf>
					aud_error("Error[%s][%d]..force break!!\n", __func__, __LINE__);
    9fe03c24:	0000d697          	auipc	a3,0xd
    9fe03c28:	35c68693          	addi	a3,a3,860 # 9fe10f80 <__func__.1>
    9fe03c2c:	10200713          	li	a4,258
    9fe03c30:	10200613          	li	a2,258
    9fe03c34:	85b6                	mv	a1,a3
    9fe03c36:	0000d517          	auipc	a0,0xd
    9fe03c3a:	8ba50513          	addi	a0,a0,-1862 # 9fe104f0 <__rodata_start+0x3f0>
    9fe03c3e:	356080ef          	jal	ra,9fe0bf94 <printf>
					break;
    9fe03c42:	bef1                	j	9fe0381e <prvAudioRunTask+0x98>
		aud_error("[error][rtos][audio_task]invalid chunks_number[%d]\n",
    9fe03c44:	07e00613          	li	a2,126
    9fe03c48:	0000d597          	auipc	a1,0xd
    9fe03c4c:	31058593          	addi	a1,a1,784 # 9fe10f58 <__func__.0>
    9fe03c50:	0000c517          	auipc	a0,0xc
    9fe03c54:	7a850513          	addi	a0,a0,1960 # 9fe103f8 <__rodata_start+0x2f8>
    9fe03c58:	33c080ef          	jal	ra,9fe0bf94 <printf>
	if (pIndicator->Wpt_index > CVIAUDIO_SSP_CHUNK_NUMBERS) {
    9fe03c5c:	00194683          	lbu	a3,1(s2)
    9fe03c60:	47e5                	li	a5,25
    9fe03c62:	f8d7e5e3          	bltu	a5,a3,9fe03bec <prvAudioRunTask+0x466>
	if (!pIndicator->ssp_on) {
    9fe03c66:	00594783          	lbu	a5,5(s2)
    9fe03c6a:	ffcd                	bnez	a5,9fe03c24 <prvAudioRunTask+0x49e>
    9fe03c6c:	bf79                	j	9fe03c0a <prvAudioRunTask+0x484>
			aud_info("[RTOS]Leaving\n");
			}
			break;
		default:
			aud_error("[error][rtos][audio_task]unrecognized cmd error[%d]\n", rtos_cmdq.cmd_id);
    9fe03c6e:	28c00613          	li	a2,652
    9fe03c72:	0000d597          	auipc	a1,0xd
    9fe03c76:	30e58593          	addi	a1,a1,782 # 9fe10f80 <__func__.1>
    9fe03c7a:	0000d517          	auipc	a0,0xd
    9fe03c7e:	cc650513          	addi	a0,a0,-826 # 9fe10940 <__rodata_start+0x840>
    9fe03c82:	312080ef          	jal	ra,9fe0bf94 <printf>
			break;
    9fe03c86:	be61                	j	9fe0381e <prvAudioRunTask+0x98>
					aud_error("[audio_task] counter same[%d][%d]\n",
    9fe03c88:	86ba                	mv	a3,a4
    9fe03c8a:	10800613          	li	a2,264
    9fe03c8e:	0000d597          	auipc	a1,0xd
    9fe03c92:	2f258593          	addi	a1,a1,754 # 9fe10f80 <__func__.1>
    9fe03c96:	0000d517          	auipc	a0,0xd
    9fe03c9a:	89a50513          	addi	a0,a0,-1894 # 9fe10530 <__rodata_start+0x430>
    9fe03c9e:	e442                	sd	a6,8(sp)
    9fe03ca0:	2f4080ef          	jal	ra,9fe0bf94 <printf>
					inv_dcache_range((uintptr_t)pindicator, sizeof(ST_SSP_RTOS_INDICATOR));
    9fe03ca4:	000bb503          	ld	a0,0(s7)
    9fe03ca8:	45c1                	li	a1,16
    9fe03caa:	266080ef          	jal	ra,9fe0bf10 <inv_dcache_range>
					inv_dcache_range((uintptr_t)pstSspBufTbl,
    9fe03cae:	6088                	ld	a0,0(s1)
    9fe03cb0:	32000593          	li	a1,800
    9fe03cb4:	25c080ef          	jal	ra,9fe0bf10 <inv_dcache_range>
					if (pindicator) {
    9fe03cb8:	000bb503          	ld	a0,0(s7)
    9fe03cbc:	6822                	ld	a6,8(sp)
    9fe03cbe:	d20508e3          	beqz	a0,9fe039ee <prvAudioRunTask+0x268>
						if (pindicator->chunks_number >= 5)
    9fe03cc2:	00054783          	lbu	a5,0(a0)
    9fe03cc6:	4711                	li	a4,4
    9fe03cc8:	2ef76563          	bltu	a4,a5,9fe03fb2 <prvAudioRunTask+0x82c>
						else if (pindicator->chunks_number >= 3)
    9fe03ccc:	e442                	sd	a6,8(sp)
    9fe03cce:	2cf9f963          	bgeu	s3,a5,9fe03fa0 <prvAudioRunTask+0x81a>
							vTaskDelay(pdMS_TO_TICKS(5));
    9fe03cd2:	4505                	li	a0,1
    9fe03cd4:	6a90b0ef          	jal	ra,9fe0fb7c <vTaskDelay>
				target_pkt_cnt = pindicator->chunks_number;
    9fe03cd8:	000bb503          	ld	a0,0(s7)
    9fe03cdc:	6822                	ld	a6,8(sp)
    9fe03cde:	bb01                	j	9fe039ee <prvAudioRunTask+0x268>
		aud_error("[error][rtos][audio_task]Null pt detect in proc data...\n");
    9fe03ce0:	07100613          	li	a2,113
    9fe03ce4:	0000d597          	auipc	a1,0xd
    9fe03ce8:	27458593          	addi	a1,a1,628 # 9fe10f58 <__func__.0>
    9fe03cec:	0000c517          	auipc	a0,0xc
    9fe03cf0:	65c50513          	addi	a0,a0,1628 # 9fe10348 <__rodata_start+0x248>
    9fe03cf4:	2a0080ef          	jal	ra,9fe0bf94 <printf>
				if (!ret_val) {
    9fe03cf8:	b735                	j	9fe03c24 <prvAudioRunTask+0x49e>
				pindicator = (ST_SSP_RTOS_INDICATOR *)gpstCviaudioMailBox->indicatorPhy;
    9fe03cfa:	01893783          	ld	a5,24(s2)
				pstSspBufTbl = (ST_SSP_BUFTBL	*)gpstCviaudioMailBox->buffertblPhy;
    9fe03cfe:	01093703          	ld	a4,16(s2)
				pstVqeConfig = (AI_TALKVQE_CONFIG_S *)gpstCviaudioMailBox->AinVqeCfgPhy;
    9fe03d02:	00893503          	ld	a0,8(s2)
    9fe03d06:	0001c697          	auipc	a3,0x1c
    9fe03d0a:	eba68693          	addi	a3,a3,-326 # 9fe1fbc0 <pstVqeConfig>
				inv_dcache_range((uintptr_t)gpstCviaudioMailBox->AinVqeCfgPhy,
    9fe03d0e:	07800593          	li	a1,120
				pstVqeConfig = (AI_TALKVQE_CONFIG_S *)gpstCviaudioMailBox->AinVqeCfgPhy;
    9fe03d12:	e288                	sd	a0,0(a3)
				pindicator = (ST_SSP_RTOS_INDICATOR *)gpstCviaudioMailBox->indicatorPhy;
    9fe03d14:	00fbb023          	sd	a5,0(s7)
				pstSspBufTbl = (ST_SSP_BUFTBL	*)gpstCviaudioMailBox->buffertblPhy;
    9fe03d18:	e098                	sd	a4,0(s1)
				inv_dcache_range((uintptr_t)gpstCviaudioMailBox->AinVqeCfgPhy,
    9fe03d1a:	1f6080ef          	jal	ra,9fe0bf10 <inv_dcache_range>
				inv_dcache_range((uintptr_t)gpstCviaudioMailBox->buffertblPhy,
    9fe03d1e:	01093503          	ld	a0,16(s2)
    9fe03d22:	02000593          	li	a1,32
    9fe03d26:	1ea080ef          	jal	ra,9fe0bf10 <inv_dcache_range>
				inv_dcache_range((uintptr_t)gpstCviaudioMailBox->indicatorPhy,
    9fe03d2a:	01893503          	ld	a0,24(s2)
    9fe03d2e:	45c1                	li	a1,16
    9fe03d30:	1e0080ef          	jal	ra,9fe0bf10 <inv_dcache_range>
			if (paudio_ssp_handle != NULL) {
    9fe03d34:	0001c797          	auipc	a5,0x1c
    9fe03d38:	e7478793          	addi	a5,a5,-396 # 9fe1fba8 <paudio_ssp_handle>
    9fe03d3c:	639c                	ld	a5,0(a5)
    9fe03d3e:	cf89                	beqz	a5,9fe03d58 <prvAudioRunTask+0x5d2>
				aud_error("Warning ssp audio handle is not NULL\n");
    9fe03d40:	0dd00613          	li	a2,221
    9fe03d44:	0000d597          	auipc	a1,0xd
    9fe03d48:	23c58593          	addi	a1,a1,572 # 9fe10f80 <__func__.1>
    9fe03d4c:	0000c517          	auipc	a0,0xc
    9fe03d50:	4ec50513          	addi	a0,a0,1260 # 9fe10238 <__rodata_start+0x138>
    9fe03d54:	240080ef          	jal	ra,9fe0bf94 <printf>
			paudio_ssp_handle = CviAud_Algo_Init(pstVqeConfig->u32OpenMask, pstVqeConfig);
    9fe03d58:	0001c797          	auipc	a5,0x1c
    9fe03d5c:	e6878793          	addi	a5,a5,-408 # 9fe1fbc0 <pstVqeConfig>
    9fe03d60:	638c                	ld	a1,0(a5)
    9fe03d62:	41c8                	lw	a0,4(a1)
    9fe03d64:	298000ef          	jal	ra,9fe03ffc <CviAud_Algo_Init>
    9fe03d68:	0001c797          	auipc	a5,0x1c
    9fe03d6c:	e4078793          	addi	a5,a5,-448 # 9fe1fba8 <paudio_ssp_handle>
    9fe03d70:	e388                	sd	a0,0(a5)
			if (paudio_ssp_handle == NULL) {
    9fe03d72:	26050763          	beqz	a0,9fe03fe0 <prvAudioRunTask+0x85a>
				ssp_running = 1;
    9fe03d76:	4785                	li	a5,1
    9fe03d78:	0001c717          	auipc	a4,0x1c
    9fe03d7c:	e5070713          	addi	a4,a4,-432 # 9fe1fbc8 <ssp_running>
    9fe03d80:	00f70023          	sb	a5,0(a4)
    9fe03d84:	b471                	j	9fe03810 <prvAudioRunTask+0x8a>
			_pstVqeConfig = (AI_TALKVQE_CONFIG_S_RTOS *)pstAudBlockMailBox->AinVqeCfgPhy;
    9fe03d86:	00893a03          	ld	s4,8(s2)
			inv_dcache_range((uintptr_t)_pstVqeConfig, sizeof(AI_TALKVQE_CONFIG_S_RTOS));
    9fe03d8a:	03000593          	li	a1,48
    9fe03d8e:	8552                	mv	a0,s4
    9fe03d90:	180080ef          	jal	ra,9fe0bf10 <inv_dcache_range>
			printf("SSP_INIT dump-----------------------------------------------------\n");
    9fe03d94:	0000d517          	auipc	a0,0xd
    9fe03d98:	8cc50513          	addi	a0,a0,-1844 # 9fe10660 <__rodata_start+0x560>
    9fe03d9c:	1f8080ef          	jal	ra,9fe0bf94 <printf>
			printf("para_client_config[%d]\n", _pstVqeConfig->para_client_config);
    9fe03da0:	000a4583          	lbu	a1,0(s4)
    9fe03da4:	0000d517          	auipc	a0,0xd
    9fe03da8:	90450513          	addi	a0,a0,-1788 # 9fe106a8 <__rodata_start+0x5a8>
    9fe03dac:	1e8080ef          	jal	ra,9fe0bf94 <printf>
			printf("u32OpenMask[0x%x]\n", _pstVqeConfig->u32OpenMask);
    9fe03db0:	001a4583          	lbu	a1,1(s4)
    9fe03db4:	0000d517          	auipc	a0,0xd
    9fe03db8:	90c50513          	addi	a0,a0,-1780 # 9fe106c0 <__rodata_start+0x5c0>
    9fe03dbc:	1d8080ef          	jal	ra,9fe0bf94 <printf>
			printf("s32WorkSampleRate[%d]\n", _pstVqeConfig->s32WorkSampleRate);
    9fe03dc0:	002a5583          	lhu	a1,2(s4)
    9fe03dc4:	0000d517          	auipc	a0,0xd
    9fe03dc8:	91450513          	addi	a0,a0,-1772 # 9fe106d8 <__rodata_start+0x5d8>
    9fe03dcc:	1c8080ef          	jal	ra,9fe0bf94 <printf>
			printf("stAecCfg.para_aec_filter_len[%d]\n", _pstVqeConfig->stAecCfg.para_aec_filter_len);
    9fe03dd0:	004a4583          	lbu	a1,4(s4)
    9fe03dd4:	0000d517          	auipc	a0,0xd
    9fe03dd8:	91c50513          	addi	a0,a0,-1764 # 9fe106f0 <__rodata_start+0x5f0>
    9fe03ddc:	1b8080ef          	jal	ra,9fe0bf94 <printf>
			printf("stAecCfg.para_aes_std_thrd[%d]\n", _pstVqeConfig->stAecCfg.para_aes_std_thrd);
    9fe03de0:	005a4583          	lbu	a1,5(s4)
    9fe03de4:	0000d517          	auipc	a0,0xd
    9fe03de8:	93450513          	addi	a0,a0,-1740 # 9fe10718 <__rodata_start+0x618>
    9fe03dec:	1a8080ef          	jal	ra,9fe0bf94 <printf>
			printf("stAecCfg.para_aes_supp_coeff[%d]\n", _pstVqeConfig->stAecCfg.para_aes_supp_coeff);
    9fe03df0:	006a4583          	lbu	a1,6(s4)
    9fe03df4:	0000d517          	auipc	a0,0xd
    9fe03df8:	94450513          	addi	a0,a0,-1724 # 9fe10738 <__rodata_start+0x638>
    9fe03dfc:	198080ef          	jal	ra,9fe0bf94 <printf>
			printf("SSP_INIT dump-----------------------------------------------------[end]\n");
    9fe03e00:	0000d517          	auipc	a0,0xd
    9fe03e04:	96050513          	addi	a0,a0,-1696 # 9fe10760 <__rodata_start+0x660>
    9fe03e08:	18c080ef          	jal	ra,9fe0bf94 <printf>
			pVqeConfigSsp->para_client_config = _pstVqeConfig->para_client_config;
    9fe03e0c:	000a4783          	lbu	a5,0(s4)
    9fe03e10:	02f11c23          	sh	a5,56(sp)
			pVqeConfigSsp->u32OpenMask = _pstVqeConfig->u32OpenMask;
    9fe03e14:	001a4783          	lbu	a5,1(s4)
    9fe03e18:	de3e                	sw	a5,60(sp)
			pVqeConfigSsp->s32WorkSampleRate = _pstVqeConfig->s32WorkSampleRate;
    9fe03e1a:	002a5783          	lhu	a5,2(s4)
    9fe03e1e:	c0be                	sw	a5,64(sp)
			pVqeConfigSsp->stAecCfg.para_aec_filter_len = _pstVqeConfig->stAecCfg.para_aec_filter_len;
    9fe03e20:	004a4783          	lbu	a5,4(s4)
    9fe03e24:	04f11423          	sh	a5,72(sp)
			pVqeConfigSsp->stAecCfg.para_aes_std_thrd = _pstVqeConfig->stAecCfg.para_aes_std_thrd;
    9fe03e28:	005a4783          	lbu	a5,5(s4)
    9fe03e2c:	04f11523          	sh	a5,74(sp)
			pVqeConfigSsp->stAecCfg.para_aes_supp_coeff = _pstVqeConfig->stAecCfg.para_aes_supp_coeff;
    9fe03e30:	006a4783          	lbu	a5,6(s4)
    9fe03e34:	04f11623          	sh	a5,76(sp)
			pVqeConfigSsp->stAnrCfg.para_nr_snr_coeff = _pstVqeConfig->stAnrCfg.para_nr_snr_coeff;
    9fe03e38:	00ca4783          	lbu	a5,12(s4)
    9fe03e3c:	04f11823          	sh	a5,80(sp)
			pVqeConfigSsp->stAnrCfg.para_nr_init_sile_time = _pstVqeConfig->stAnrCfg.para_nr_init_sile_time;
    9fe03e40:	00da4783          	lbu	a5,13(s4)
    9fe03e44:	04f11923          	sh	a5,82(sp)
			pVqeConfigSsp->stAgcCfg.para_agc_max_gain = _pstVqeConfig->stAgcCfg.para_agc_max_gain;
    9fe03e48:	014a4783          	lbu	a5,20(s4)
    9fe03e4c:	04f10c23          	sb	a5,88(sp)
			pVqeConfigSsp->stAgcCfg.para_agc_target_high = _pstVqeConfig->stAgcCfg.para_agc_target_high;
    9fe03e50:	015a4783          	lbu	a5,21(s4)
    9fe03e54:	04f10ca3          	sb	a5,89(sp)
			pVqeConfigSsp->stAgcCfg.para_agc_target_low = _pstVqeConfig->stAgcCfg.para_agc_target_low;
    9fe03e58:	016a4783          	lbu	a5,22(s4)
    9fe03e5c:	04f10d23          	sb	a5,90(sp)
			pVqeConfigSsp->stAgcCfg.para_agc_vad_ena = _pstVqeConfig->stAgcCfg.para_agc_vad_ena;
    9fe03e60:	017a4783          	lbu	a5,23(s4)
    9fe03e64:	00f037b3          	snez	a5,a5
    9fe03e68:	04f10da3          	sb	a5,91(sp)
								_pstVqeConfig->stAecDelayCfg.para_aec_init_filter_len;
    9fe03e6c:	01ca4783          	lbu	a5,28(s4)
    9fe03e70:	06f11023          	sh	a5,96(sp)
			pVqeConfigSsp->stAecDelayCfg.para_dg_target = _pstVqeConfig->stAecDelayCfg.para_dg_target;
    9fe03e74:	01da4783          	lbu	a5,29(s4)
    9fe03e78:	06f11123          	sh	a5,98(sp)
			pVqeConfigSsp->stAecDelayCfg.para_delay_sample = _pstVqeConfig->stAecDelayCfg.para_delay_sample;
    9fe03e7c:	01ea4783          	lbu	a5,30(s4)
    9fe03e80:	06f11223          	sh	a5,100(sp)
			pVqeConfigSsp->s32RevMask = _pstVqeConfig->s32RevMask;
    9fe03e84:	024a4783          	lbu	a5,36(s4)
    9fe03e88:	d4be                	sw	a5,104(sp)
			pVqeConfigSsp->para_notch_freq = _pstVqeConfig->para_notch_freq;
    9fe03e8a:	025a4703          	lbu	a4,37(s4)
			if (paudio_ssp_block != NULL)
    9fe03e8e:	0001c797          	auipc	a5,0x1c
    9fe03e92:	d1278793          	addi	a5,a5,-750 # 9fe1fba0 <paudio_ssp_block>
    9fe03e96:	639c                	ld	a5,0(a5)
			pVqeConfigSsp->para_notch_freq = _pstVqeConfig->para_notch_freq;
    9fe03e98:	d6ba                	sw	a4,108(sp)
			if (paudio_ssp_block != NULL)
    9fe03e9a:	cf89                	beqz	a5,9fe03eb4 <prvAudioRunTask+0x72e>
				aud_error("warning paudio_ssp_blcok not Null..\n");
    9fe03e9c:	23f00613          	li	a2,575
    9fe03ea0:	0000d597          	auipc	a1,0xd
    9fe03ea4:	0e058593          	addi	a1,a1,224 # 9fe10f80 <__func__.1>
    9fe03ea8:	0000d517          	auipc	a0,0xd
    9fe03eac:	90850513          	addi	a0,a0,-1784 # 9fe107b0 <__rodata_start+0x6b0>
    9fe03eb0:	0e4080ef          	jal	ra,9fe0bf94 <printf>
			paudio_ssp_block = CviAud_Algo_Init(pVqeConfigSsp->u32OpenMask, pVqeConfigSsp);
    9fe03eb4:	5572                	lw	a0,60(sp)
    9fe03eb6:	182c                	addi	a1,sp,56
    9fe03eb8:	144000ef          	jal	ra,9fe03ffc <CviAud_Algo_Init>
    9fe03ebc:	0001c797          	auipc	a5,0x1c
    9fe03ec0:	ce478793          	addi	a5,a5,-796 # 9fe1fba0 <paudio_ssp_block>
    9fe03ec4:	e388                	sd	a0,0(a5)
			if (paudio_ssp_block == NULL) {
    9fe03ec6:	940515e3          	bnez	a0,9fe03810 <prvAudioRunTask+0x8a>
				aud_error("[CVIAUDIO_RTOS_CMD_SSP_INIT_BLOCK]paudio_ssp_block failure\n");
    9fe03eca:	0000d597          	auipc	a1,0xd
    9fe03ece:	0b658593          	addi	a1,a1,182 # 9fe10f80 <__func__.1>
    9fe03ed2:	24300613          	li	a2,579
    9fe03ed6:	0000d517          	auipc	a0,0xd
    9fe03eda:	92250513          	addi	a0,a0,-1758 # 9fe107f8 <__rodata_start+0x6f8>
    9fe03ede:	0b6080ef          	jal	ra,9fe0bf94 <printf>
				rtos_cmdq.param_ptr = CVIAUDIO_RTOS_BLOCK_MODE_FAILURE_FLAG;
    9fe03ee2:	0fa00793          	li	a5,250
				clean_dcache_range((uintptr_t)pstAudBlockMailBox, sizeof(ST_CVIAUDIO_MAILBOX_BLOCK));
    9fe03ee6:	854a                	mv	a0,s2
    9fe03ee8:	45c1                	li	a1,16
				rtos_cmdq.param_ptr = CVIAUDIO_RTOS_BLOCK_MODE_FAILURE_FLAG;
    9fe03eea:	da3e                	sw	a5,52(sp)
				clean_dcache_range((uintptr_t)pstAudBlockMailBox, sizeof(ST_CVIAUDIO_MAILBOX_BLOCK));
    9fe03eec:	ba65                	j	9fe038a4 <prvAudioRunTask+0x11e>
				aud_error("Error cannot de-init null pt\n");
    9fe03eee:	0ec00613          	li	a2,236
    9fe03ef2:	0000d597          	auipc	a1,0xd
    9fe03ef6:	08e58593          	addi	a1,a1,142 # 9fe10f80 <__func__.1>
    9fe03efa:	0000c517          	auipc	a0,0xc
    9fe03efe:	3be50513          	addi	a0,a0,958 # 9fe102b8 <__rodata_start+0x1b8>
    9fe03f02:	092080ef          	jal	ra,9fe0bf94 <printf>
    9fe03f06:	befd                	j	9fe03b04 <prvAudioRunTask+0x37e>
				aud_error("Error cannot de-init null pt\n");
    9fe03f08:	25400613          	li	a2,596
    9fe03f0c:	0000d597          	auipc	a1,0xd
    9fe03f10:	07458593          	addi	a1,a1,116 # 9fe10f80 <__func__.1>
    9fe03f14:	0000c517          	auipc	a0,0xc
    9fe03f18:	3a450513          	addi	a0,a0,932 # 9fe102b8 <__rodata_start+0x1b8>
    9fe03f1c:	078080ef          	jal	ra,9fe0bf94 <printf>
    9fe03f20:	b8c5                	j	9fe03810 <prvAudioRunTask+0x8a>
				aud_error("Error cannot proc with null paudio_ssp_block\n");
    9fe03f22:	26100613          	li	a2,609
    9fe03f26:	0000d597          	auipc	a1,0xd
    9fe03f2a:	05a58593          	addi	a1,a1,90 # 9fe10f80 <__func__.1>
    9fe03f2e:	0000d517          	auipc	a0,0xd
    9fe03f32:	92250513          	addi	a0,a0,-1758 # 9fe10850 <__rodata_start+0x750>
    9fe03f36:	05e080ef          	jal	ra,9fe0bf94 <printf>
				xQueueSend(xQueueAudioCmdqu, &rtos_cmdq, 0U);
    9fe03f3a:	000c3503          	ld	a0,0(s8)
				rtos_cmdq.param_ptr = CVIAUDIO_RTOS_BLOCK_MODE_FAILURE_FLAG;
    9fe03f3e:	0fa00793          	li	a5,250
				xQueueSend(xQueueAudioCmdqu, &rtos_cmdq, 0U);
    9fe03f42:	4681                	li	a3,0
    9fe03f44:	4601                	li	a2,0
    9fe03f46:	180c                	addi	a1,sp,48
				rtos_cmdq.param_ptr = CVIAUDIO_RTOS_BLOCK_MODE_FAILURE_FLAG;
    9fe03f48:	da3e                	sw	a5,52(sp)
				xQueueSend(xQueueAudioCmdqu, &rtos_cmdq, 0U);
    9fe03f4a:	2ef0a0ef          	jal	ra,9fe0ea38 <xQueueGenericSend>
				break;
    9fe03f4e:	8d1ff06f          	j	9fe0381e <prvAudioRunTask+0x98>
				ret = CviAud_Algo_Process(paudio_ssp_block,
    9fe03f52:	0001c797          	auipc	a5,0x1c
    9fe03f56:	c4e78793          	addi	a5,a5,-946 # 9fe1fba0 <paudio_ssp_block>
    9fe03f5a:	01893683          	ld	a3,24(s2)
    9fe03f5e:	01093603          	ld	a2,16(s2)
    9fe03f62:	00893583          	ld	a1,8(s2)
    9fe03f66:	6388                	ld	a0,0(a5)
    9fe03f68:	0a000713          	li	a4,160
    9fe03f6c:	134000ef          	jal	ra,9fe040a0 <CviAud_Algo_Process>
				if (ret < 0) {
    9fe03f70:	04054863          	bltz	a0,9fe03fc0 <prvAudioRunTask+0x83a>
			clean_dcache_range((uintptr_t)pstBlockFrm, sizeof(ST_CVIAUDIO_BLOCK_FRAME));
    9fe03f74:	854a                	mv	a0,s2
    9fe03f76:	02000593          	li	a1,32
    9fe03f7a:	7bb070ef          	jal	ra,9fe0bf34 <clean_dcache_range>
			clean_dcache_range((uintptr_t)pstBlockFrm->mic_in_addr, 1280);
    9fe03f7e:	00893503          	ld	a0,8(s2)
    9fe03f82:	50000593          	li	a1,1280
    9fe03f86:	7af070ef          	jal	ra,9fe0bf34 <clean_dcache_range>
			clean_dcache_range((uintptr_t)pstBlockFrm->output_addr, 1280);
    9fe03f8a:	01893503          	ld	a0,24(s2)
    9fe03f8e:	50000593          	li	a1,1280
    9fe03f92:	7a3070ef          	jal	ra,9fe0bf34 <clean_dcache_range>
			clean_dcache_range((uintptr_t)pstBlockFrm->ref_in_addr, 1280);
    9fe03f96:	01093503          	ld	a0,16(s2)
    9fe03f9a:	50000593          	li	a1,1280
    9fe03f9e:	b219                	j	9fe038a4 <prvAudioRunTask+0x11e>
							usleep(3000);
    9fe03fa0:	7522                	ld	a0,40(sp)
    9fe03fa2:	054080ef          	jal	ra,9fe0bff6 <usleep>
				target_pkt_cnt = pindicator->chunks_number;
    9fe03fa6:	000bb503          	ld	a0,0(s7)
    9fe03faa:	6822                	ld	a6,8(sp)
    9fe03fac:	b489                	j	9fe039ee <prvAudioRunTask+0x268>
				unsigned char bCheck_input_full = 1;
    9fe03fae:	8942                	mv	s2,a6
    9fe03fb0:	bc9d                	j	9fe03a26 <prvAudioRunTask+0x2a0>
							vTaskDelay(pdMS_TO_TICKS(10));
    9fe03fb2:	4509                	li	a0,2
    9fe03fb4:	3c90b0ef          	jal	ra,9fe0fb7c <vTaskDelay>
				target_pkt_cnt = pindicator->chunks_number;
    9fe03fb8:	000bb503          	ld	a0,0(s7)
    9fe03fbc:	6822                	ld	a6,8(sp)
    9fe03fbe:	bc05                	j	9fe039ee <prvAudioRunTask+0x268>
					aud_error("Error in CviAud_Algo_Process\n");
    9fe03fc0:	27d00613          	li	a2,637
    9fe03fc4:	0000d597          	auipc	a1,0xd
    9fe03fc8:	fbc58593          	addi	a1,a1,-68 # 9fe10f80 <__func__.1>
    9fe03fcc:	0000d517          	auipc	a0,0xd
    9fe03fd0:	93450513          	addi	a0,a0,-1740 # 9fe10900 <__rodata_start+0x800>
    9fe03fd4:	7c1070ef          	jal	ra,9fe0bf94 <printf>
					rtos_cmdq.param_ptr = CVIAUDIO_RTOS_BLOCK_MODE_FAILURE_FLAG;
    9fe03fd8:	0fa00793          	li	a5,250
    9fe03fdc:	da3e                	sw	a5,52(sp)
    9fe03fde:	bf59                	j	9fe03f74 <prvAudioRunTask+0x7ee>
				aud_error("get null pt in init ssp\n");
    9fe03fe0:	0e100613          	li	a2,225
    9fe03fe4:	0000d597          	auipc	a1,0xd
    9fe03fe8:	f9c58593          	addi	a1,a1,-100 # 9fe10f80 <__func__.1>
    9fe03fec:	0000c517          	auipc	a0,0xc
    9fe03ff0:	29450513          	addi	a0,a0,660 # 9fe10280 <__rodata_start+0x180>
    9fe03ff4:	7a1070ef          	jal	ra,9fe0bf94 <printf>
    9fe03ff8:	819ff06f          	j	9fe03810 <prvAudioRunTask+0x8a>

000000009fe03ffc <CviAud_Algo_Init>:
 * Outputs:  none
 *
 * Return: algo handle
 **************************************************************************************/
void *CviAud_Algo_Init(int s32FunctMask, void *param_info)
{
    9fe03ffc:	7159                	addi	sp,sp,-112
    9fe03ffe:	f0a2                	sd	s0,96(sp)
	const AI_TALKVQE_CONFIG_S *pstVqeConfig = (const AI_TALKVQE_CONFIG_S *)param_info;
	ssp_para_struct ssp_para_info;
	ssp_para_struct *p_ssp_para_info = &ssp_para_info;

	s32FunctMask = s32FunctMask;
	memset(p_ssp_para_info, 0, sizeof(ssp_para_struct));
    9fe04000:	05200613          	li	a2,82
{
    9fe04004:	842e                	mv	s0,a1
	memset(p_ssp_para_info, 0, sizeof(ssp_para_struct));
    9fe04006:	0028                	addi	a0,sp,8
    9fe04008:	4581                	li	a1,0
{
    9fe0400a:	f486                	sd	ra,104(sp)
	memset(p_ssp_para_info, 0, sizeof(ssp_para_struct));
    9fe0400c:	771070ef          	jal	ra,9fe0bf7c <memset>
	ssp_para_info.para_agc_target_low = 72;
	ssp_para_info.para_agc_vad_ena = 1;
	ssp_para_info.para_notch_freq = 0;
	ssp_para_info.para_spk_fun_config = 0;
	ssp_para_info.para_spk_agc_max_gain = 0;
	ssp_para_info.para_spk_agc_target_high = 8;
    9fe04010:	004807b7          	lui	a5,0x480
    9fe04014:	07a1                	addi	a5,a5,8


	//update value from use layer
	//ssp_para_info.para_sample_rate = pstVqeConfig->s32WorkSampleRate;//only support 8k and 16k
	ssp_para_info.para_client_config = pstVqeConfig->para_client_config;
	ssp_para_info.para_fun_config = pstVqeConfig->u32OpenMask;
    9fe04016:	00442383          	lw	t2,4(s0)
	//update aec config
	ssp_para_info.para_aec_filter_len = pstVqeConfig->stAecCfg.para_aec_filter_len;
    9fe0401a:	01045283          	lhu	t0,16(s0)
	ssp_para_info.para_aes_std_thrd = pstVqeConfig->stAecCfg.para_aes_std_thrd;
    9fe0401e:	01245f83          	lhu	t6,18(s0)
	ssp_para_info.para_aes_supp_coeff = pstVqeConfig->stAecCfg.para_aes_supp_coeff;
    9fe04022:	01445f03          	lhu	t5,20(s0)
	//update nr config
	ssp_para_info.para_nr_init_sile_time = pstVqeConfig->stAnrCfg.para_nr_init_sile_time;
    9fe04026:	01a45e83          	lhu	t4,26(s0)
	ssp_para_info.para_nr_snr_coeff = pstVqeConfig->stAnrCfg.para_nr_snr_coeff;;
    9fe0402a:	01845e03          	lhu	t3,24(s0)
	//update agc config
	ssp_para_info.para_agc_max_gain = pstVqeConfig->stAgcCfg.para_agc_max_gain;
    9fe0402e:	02040303          	lb	t1,32(s0)
	ssp_para_info.para_agc_target_high = pstVqeConfig->stAgcCfg.para_agc_target_high;;
    9fe04032:	02140883          	lb	a7,33(s0)
	ssp_para_info.para_agc_target_low = pstVqeConfig->stAgcCfg.para_agc_target_low;
    9fe04036:	02240803          	lb	a6,34(s0)
	ssp_para_info.para_agc_vad_ena =  pstVqeConfig->stAgcCfg.para_agc_vad_ena;
    9fe0403a:	02344503          	lbu	a0,35(s0)
	//udpate sw aec config
	ssp_para_info.para_aec_init_filter_len = pstVqeConfig->stAecDelayCfg.para_aec_init_filter_len;
	ssp_para_info.para_dg_target = pstVqeConfig->stAecDelayCfg.para_dg_target;
    9fe0403e:	02a45603          	lhu	a2,42(s0)
	ssp_para_info.para_delay_sample = pstVqeConfig->stAecDelayCfg.para_delay_sample;
    9fe04042:	02c45683          	lhu	a3,44(s0)
	//update notch filter setting for specific customer
	ssp_para_info.para_notch_freq = pstVqeConfig->para_notch_freq;//only support 8k and 16k
    9fe04046:	5858                	lw	a4,52(s0)
	ssp_para_info.para_aec_init_filter_len = pstVqeConfig->stAecDelayCfg.para_aec_init_filter_len;
    9fe04048:	02845583          	lhu	a1,40(s0)
	ssp_para_info.para_spk_agc_target_high = 8;
    9fe0404c:	d83e                	sw	a5,48(sp)
	ssp_para_info.para_client_config = pstVqeConfig->para_client_config;
    9fe0404e:	00045783          	lhu	a5,0(s0)
	ssp_para_info.para_fun_config = pstVqeConfig->u32OpenMask;
    9fe04052:	00711523          	sh	t2,10(sp)
	ssp_para_info.para_aec_filter_len = pstVqeConfig->stAecCfg.para_aec_filter_len;
    9fe04056:	00511923          	sh	t0,18(sp)
	ssp_para_info.para_client_config = pstVqeConfig->para_client_config;
    9fe0405a:	00f11423          	sh	a5,8(sp)
	ssp_para_info.para_aes_std_thrd = pstVqeConfig->stAecCfg.para_aes_std_thrd;
    9fe0405e:	01f11a23          	sh	t6,20(sp)
	ssp_para_info.para_aes_supp_coeff = pstVqeConfig->stAecCfg.para_aes_supp_coeff;
    9fe04062:	01e11b23          	sh	t5,22(sp)
	ssp_para_info.para_nr_init_sile_time = pstVqeConfig->stAnrCfg.para_nr_init_sile_time;
    9fe04066:	01d11c23          	sh	t4,24(sp)
	ssp_para_info.para_nr_snr_coeff = pstVqeConfig->stAnrCfg.para_nr_snr_coeff;;
    9fe0406a:	01c11d23          	sh	t3,26(sp)
	ssp_para_info.para_agc_max_gain = pstVqeConfig->stAgcCfg.para_agc_max_gain;
    9fe0406e:	00611e23          	sh	t1,28(sp)
	ssp_para_info.para_agc_target_high = pstVqeConfig->stAgcCfg.para_agc_target_high;;
    9fe04072:	01111f23          	sh	a7,30(sp)
	ssp_para_info.para_agc_target_low = pstVqeConfig->stAgcCfg.para_agc_target_low;
    9fe04076:	03011023          	sh	a6,32(sp)
	ssp_para_info.para_agc_vad_ena =  pstVqeConfig->stAgcCfg.para_agc_vad_ena;
    9fe0407a:	02a10123          	sb	a0,34(sp)
	ssp_para_info.para_dg_target = pstVqeConfig->stAecDelayCfg.para_dg_target;
    9fe0407e:	00c11723          	sh	a2,14(sp)
	ssp_para_info.para_delay_sample = pstVqeConfig->stAecDelayCfg.para_delay_sample;
    9fe04082:	00d11623          	sh	a3,12(sp)
	ssp_para_info.para_notch_freq = pstVqeConfig->para_notch_freq;//only support 8k and 16k
    9fe04086:	02e11223          	sh	a4,36(sp)
	ssp_para_info.para_spk_fun_config = 0;
    9fe0408a:	d602                	sw	zero,44(sp)
	ssp_para_info.para_aec_init_filter_len = pstVqeConfig->stAecDelayCfg.para_aec_init_filter_len;
    9fe0408c:	00b11823          	sh	a1,16(sp)
	ssp_para_info.para_spk_agc_target_high = pstVqeConfig->stSpkCfg.para_spk_agc_target_high;
	ssp_para_info.para_spk_agc_target_low = pstVqeConfig->stSpkCfg.para_spk_agc_target_low;
	#endif


	_handle = (void *)audio_ssp_init((void *)p_ssp_para_info, pstVqeConfig->s32WorkSampleRate);
    9fe04090:	440c                	lw	a1,8(s0)
    9fe04092:	0028                	addi	a0,sp,8
    9fe04094:	0b0000ef          	jal	ra,9fe04144 <audio_ssp_init>


	return (void *)_handle;


}
    9fe04098:	70a6                	ld	ra,104(sp)
    9fe0409a:	7406                	ld	s0,96(sp)
    9fe0409c:	6165                	addi	sp,sp,112
    9fe0409e:	8082                	ret

000000009fe040a0 <CviAud_Algo_Process>:
 * Return:    output samples
 * Notes:       sure insamps < MAXFRAMESIZE
 **************************************************************************************/
int CviAud_Algo_Process(void *pHandle,  uint64_t mic_in,
			uint64_t ref_in, uint64_t out, int iLength)
{
    9fe040a0:	1141                	addi	sp,sp,-16
    9fe040a2:	e406                	sd	ra,8(sp)
    9fe040a4:	e022                	sd	s0,0(sp)
//TODO: step 3[ok]  implement the function acquired
	SSP_UNUSED_REF(iLength);
	int ret = 0;
	int s32RetTotalSamples = 0;

	if (pHandle == NULL) {
    9fe040a6:	c529                	beqz	a0,9fe040f0 <CviAud_Algo_Process+0x50>
		printf("Null input [%s][%d]\n", __func__, __LINE__);
		return -1;
	}

	if (iLength != AEC_FRAME_LENGTH) {
    9fe040a8:	0a000793          	li	a5,160
    9fe040ac:	843a                	mv	s0,a4
    9fe040ae:	00f71a63          	bne	a4,a5,9fe040c2 <CviAud_Algo_Process+0x22>
		printf("input length only support 160 samples[%s][%d]\n", __func__, __LINE__);
		return -1;
	}

	ret = audio_ssp_process(pHandle, mic_in, ref_in, out, AEC_FRAME_LENGTH);
    9fe040b2:	40c000ef          	jal	ra,9fe044be <audio_ssp_process>
	if (ret != 0) {
    9fe040b6:	e505                	bnez	a0,9fe040de <CviAud_Algo_Process+0x3e>
	}
	s32RetTotalSamples = AEC_FRAME_LENGTH;

	return s32RetTotalSamples;

}
    9fe040b8:	60a2                	ld	ra,8(sp)
    9fe040ba:	8522                	mv	a0,s0
    9fe040bc:	6402                	ld	s0,0(sp)
    9fe040be:	0141                	addi	sp,sp,16
    9fe040c0:	8082                	ret
		printf("input length only support 160 samples[%s][%d]\n", __func__, __LINE__);
    9fe040c2:	0c000613          	li	a2,192
    9fe040c6:	0000d597          	auipc	a1,0xd
    9fe040ca:	f8258593          	addi	a1,a1,-126 # 9fe11048 <__func__.3>
    9fe040ce:	0000d517          	auipc	a0,0xd
    9fe040d2:	eda50513          	addi	a0,a0,-294 # 9fe10fa8 <__func__.1+0x28>
    9fe040d6:	6bf070ef          	jal	ra,9fe0bf94 <printf>
		return -1;
    9fe040da:	547d                	li	s0,-1
    9fe040dc:	bff1                	j	9fe040b8 <CviAud_Algo_Process+0x18>
		printf("audio_ssp_process error ret(%d).\n", ret);
    9fe040de:	85aa                	mv	a1,a0
    9fe040e0:	0000d517          	auipc	a0,0xd
    9fe040e4:	ef850513          	addi	a0,a0,-264 # 9fe10fd8 <__func__.1+0x58>
    9fe040e8:	6ad070ef          	jal	ra,9fe0bf94 <printf>
		return -1;
    9fe040ec:	547d                	li	s0,-1
    9fe040ee:	b7e9                	j	9fe040b8 <CviAud_Algo_Process+0x18>
		printf("Null input [%s][%d]\n", __func__, __LINE__);
    9fe040f0:	0bb00613          	li	a2,187
    9fe040f4:	0000d597          	auipc	a1,0xd
    9fe040f8:	f5458593          	addi	a1,a1,-172 # 9fe11048 <__func__.3>
    9fe040fc:	0000d517          	auipc	a0,0xd
    9fe04100:	e9450513          	addi	a0,a0,-364 # 9fe10f90 <__func__.1+0x10>
    9fe04104:	691070ef          	jal	ra,9fe0bf94 <printf>
		return -1;
    9fe04108:	547d                	li	s0,-1
    9fe0410a:	b77d                	j	9fe040b8 <CviAud_Algo_Process+0x18>

000000009fe0410c <CviAud_Algo_DeInit>:
 * Outputs:	none
 *
 * Return:      CVI_SUCCESS / CVI_FAILURE
 **************************************************************************************/
void CviAud_Algo_DeInit(void *pHandle)
{
    9fe0410c:	1141                	addi	sp,sp,-16
    9fe0410e:	e406                	sd	ra,8(sp)

	//VQE_UNUSED_REF(pHandle);
	//struct st3AInfo *pst3Ainfo = (struct st3AInfo *)pHandle;

	if (audio_ssp_deinit(pHandle) != 0) {
    9fe04110:	093000ef          	jal	ra,9fe049a2 <audio_ssp_deinit>
    9fe04114:	e501                	bnez	a0,9fe0411c <CviAud_Algo_DeInit+0x10>
		CVIAUD_NOTCH_ERR_PRINTF("3a deinit err\n");
		return;
	}

}
    9fe04116:	60a2                	ld	ra,8(sp)
    9fe04118:	0141                	addi	sp,sp,16
    9fe0411a:	8082                	ret
		CVIAUD_NOTCH_ERR_PRINTF("3a deinit err\n");
    9fe0411c:	0000f797          	auipc	a5,0xf
    9fe04120:	0607a783          	lw	a5,96(a5) # 9fe1317c <notch_dbglevel>
    9fe04124:	fef059e3          	blez	a5,9fe04116 <CviAud_Algo_DeInit+0xa>
}
    9fe04128:	60a2                	ld	ra,8(sp)
		CVIAUD_NOTCH_ERR_PRINTF("3a deinit err\n");
    9fe0412a:	0e000613          	li	a2,224
    9fe0412e:	0000d597          	auipc	a1,0xd
    9fe04132:	f0258593          	addi	a1,a1,-254 # 9fe11030 <__func__.2>
    9fe04136:	0000d517          	auipc	a0,0xd
    9fe0413a:	eca50513          	addi	a0,a0,-310 # 9fe11000 <__func__.1+0x80>
}
    9fe0413e:	0141                	addi	sp,sp,16
		CVIAUD_NOTCH_ERR_PRINTF("3a deinit err\n");
    9fe04140:	6550706f          	j	9fe0bf94 <printf>

000000009fe04144 <audio_ssp_init>:
	return 0;
}
#endif

void *audio_ssp_init(void *para_obj, unsigned int sample_rate)
{
    9fe04144:	7179                	addi	sp,sp,-48
    9fe04146:	e84a                	sd	s2,16(sp)
      you will experience strange bugs */
#ifndef PLATFORM_RTOS
   return calloc(size,1);
#else
   //return (void *)calloc(size,1);
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe04148:	6905                	lui	s2,0x1
    9fe0414a:	e44e                	sd	s3,8(sp)
    9fe0414c:	89aa                	mv	s3,a0
    9fe0414e:	03090513          	addi	a0,s2,48 # 1030 <_EL1_STACK_SIZE+0x830>
    9fe04152:	f022                	sd	s0,32(sp)
    9fe04154:	ec26                	sd	s1,24(sp)
    9fe04156:	f406                	sd	ra,40(sp)
    9fe04158:	84ae                	mv	s1,a1
    9fe0415a:	41c0a0ef          	jal	ra,9fe0e576 <pvPortMalloc>
    9fe0415e:	842a                	mv	s0,a0

   memset(ptr, 0, size);
    9fe04160:	03090613          	addi	a2,s2,48
    9fe04164:	4581                	li	a1,0
    9fe04166:	617070ef          	jal	ra,9fe0bf7c <memset>
	pst3Ainfo = (struct st3AInfo *)malloc(sizeof(struct st3AInfo));
#else
	//pst3Ainfo = (struct st3AInfo *)pvPortMalloc(sizeof(struct st3AInfo));
	pst3Ainfo = (struct st3AInfo *)mem_alloc(sizeof(struct st3AInfo));
#endif
	if(NULL == pst3Ainfo)
    9fe0416a:	30040463          	beqz	s0,9fe04472 <audio_ssp_init+0x32e>
	{
	    LOG_ERROR("malloc failed.aec init failed.\n");
	    return NULL;
	}

	memset(pst3Ainfo,0,sizeof(struct st3AInfo));
    9fe0416e:	03090613          	addi	a2,s2,48
    9fe04172:	4581                	li	a1,0
    9fe04174:	8522                	mv	a0,s0
    9fe04176:	607070ef          	jal	ra,9fe0bf7c <memset>
	memcpy(&pst3Ainfo->para_obj,para_info,sizeof(ssp_para_struct));
    9fe0417a:	06440913          	addi	s2,s0,100
    9fe0417e:	05200613          	li	a2,82
    9fe04182:	85ce                	mv	a1,s3
    9fe04184:	854a                	mv	a0,s2
    9fe04186:	f7bfb0ef          	jal	ra,9fe00100 <memcpy>
	pst3Ainfo->fs = sample_rate;// pst3Ainfo->para_obj.para_sample_rate;
    9fe0418a:	d014f7d3          	fcvt.s.wu	fa5,s1

	//printf("[SSP_VER20220128]user setting config param------dump---start\n");
	printf("[SSP_VER20220128]sample_rate:%d.\n", (int)pst3Ainfo->fs);
    9fe0418e:	0000d517          	auipc	a0,0xd
    9fe04192:	f0250513          	addi	a0,a0,-254 # 9fe11090 <__func__.3+0x48>
    9fe04196:	c00795d3          	fcvt.w.s	a1,fa5,rtz
	pst3Ainfo->fs = sample_rate;// pst3Ainfo->para_obj.para_sample_rate;
    9fe0419a:	06f42027          	fsw	fa5,96(s0)
	printf("[SSP_VER20220128]sample_rate:%d.\n", (int)pst3Ainfo->fs);
    9fe0419e:	2581                	sext.w	a1,a1
    9fe041a0:	5f5070ef          	jal	ra,9fe0bf94 <printf>
	printf("[SSP_VER20220128]para_client_config:%d.\n",  pst3Ainfo->para_obj.para_client_config);
    9fe041a4:	06445583          	lhu	a1,100(s0)
    9fe041a8:	0000d517          	auipc	a0,0xd
    9fe041ac:	f1050513          	addi	a0,a0,-240 # 9fe110b8 <__func__.3+0x70>
    9fe041b0:	5e5070ef          	jal	ra,9fe0bf94 <printf>
	printf("[SSP_VER20220128]para_fun_config:%d.\n",  pst3Ainfo->para_obj.para_fun_config);
    9fe041b4:	06645583          	lhu	a1,102(s0)
    9fe041b8:	0000d517          	auipc	a0,0xd
    9fe041bc:	f3050513          	addi	a0,a0,-208 # 9fe110e8 <__func__.3+0xa0>
    9fe041c0:	5d5070ef          	jal	ra,9fe0bf94 <printf>
	printf("[SSP_VER20220128]para_delay_sample:%d.\n",  pst3Ainfo->para_obj.para_delay_sample);
    9fe041c4:	06845583          	lhu	a1,104(s0)
    9fe041c8:	0000d517          	auipc	a0,0xd
    9fe041cc:	f4850513          	addi	a0,a0,-184 # 9fe11110 <__func__.3+0xc8>
    9fe041d0:	5c5070ef          	jal	ra,9fe0bf94 <printf>
	printf("[SSP_VER20220128]para_dg_target:%d.\n",  pst3Ainfo->para_obj.para_dg_target);
    9fe041d4:	06a45583          	lhu	a1,106(s0)
    9fe041d8:	0000d517          	auipc	a0,0xd
    9fe041dc:	f6050513          	addi	a0,a0,-160 # 9fe11138 <__func__.3+0xf0>
    9fe041e0:	5b5070ef          	jal	ra,9fe0bf94 <printf>
	printf("[SSP_VER20220128]para_aec_init_filter_len:%d.\n",  pst3Ainfo->para_obj.para_aec_init_filter_len);
    9fe041e4:	06c45583          	lhu	a1,108(s0)
    9fe041e8:	0000d517          	auipc	a0,0xd
    9fe041ec:	f7850513          	addi	a0,a0,-136 # 9fe11160 <__func__.3+0x118>
    9fe041f0:	5a5070ef          	jal	ra,9fe0bf94 <printf>
	printf("[SSP_VER20220128]para_aec_filter_len:%d.\n",  pst3Ainfo->para_obj.para_aec_filter_len);
    9fe041f4:	06e45583          	lhu	a1,110(s0)
    9fe041f8:	0000d517          	auipc	a0,0xd
    9fe041fc:	f9850513          	addi	a0,a0,-104 # 9fe11190 <__func__.3+0x148>
    9fe04200:	595070ef          	jal	ra,9fe0bf94 <printf>
	printf("[SSP_VER20220128]para_aes_std_thrd:%d.\n",  pst3Ainfo->para_obj.para_aes_std_thrd);
    9fe04204:	07045583          	lhu	a1,112(s0)
    9fe04208:	0000d517          	auipc	a0,0xd
    9fe0420c:	fb850513          	addi	a0,a0,-72 # 9fe111c0 <__func__.3+0x178>
    9fe04210:	585070ef          	jal	ra,9fe0bf94 <printf>
	printf("[SSP_VER20220128]para_aes_supp_coeff:%d.\n",  pst3Ainfo->para_obj.para_aes_supp_coeff);
    9fe04214:	07245583          	lhu	a1,114(s0)
    9fe04218:	0000d517          	auipc	a0,0xd
    9fe0421c:	fd050513          	addi	a0,a0,-48 # 9fe111e8 <__func__.3+0x1a0>
    9fe04220:	575070ef          	jal	ra,9fe0bf94 <printf>
	printf("[SSP_VER20220128]para_nr_init_sile_time:%d.\n",  pst3Ainfo->para_obj.para_nr_init_sile_time);
    9fe04224:	07445583          	lhu	a1,116(s0)
    9fe04228:	0000d517          	auipc	a0,0xd
    9fe0422c:	ff050513          	addi	a0,a0,-16 # 9fe11218 <__func__.3+0x1d0>
    9fe04230:	565070ef          	jal	ra,9fe0bf94 <printf>
	printf("[SSP_VER20220128]para_nr_snr_coeff:%d.\n",  pst3Ainfo->para_obj.para_nr_snr_coeff);
    9fe04234:	07645583          	lhu	a1,118(s0)
    9fe04238:	0000d517          	auipc	a0,0xd
    9fe0423c:	01050513          	addi	a0,a0,16 # 9fe11248 <__func__.3+0x200>
    9fe04240:	555070ef          	jal	ra,9fe0bf94 <printf>
	printf("[SSP_VER20220128]para_agc_max_gain:%d.\n",  pst3Ainfo->para_obj.para_agc_max_gain);
    9fe04244:	07845583          	lhu	a1,120(s0)
    9fe04248:	0000d517          	auipc	a0,0xd
    9fe0424c:	02850513          	addi	a0,a0,40 # 9fe11270 <__func__.3+0x228>
    9fe04250:	545070ef          	jal	ra,9fe0bf94 <printf>
	printf("[SSP_VER20220128]para_agc_target_high:%d.\n",  pst3Ainfo->para_obj.para_agc_target_high);
    9fe04254:	07a45583          	lhu	a1,122(s0)
    9fe04258:	0000d517          	auipc	a0,0xd
    9fe0425c:	04050513          	addi	a0,a0,64 # 9fe11298 <__func__.3+0x250>
    9fe04260:	535070ef          	jal	ra,9fe0bf94 <printf>
	printf("[SSP_VER20220128]para_agc_target_low:%d.\n",  pst3Ainfo->para_obj.para_agc_target_low);
    9fe04264:	07c45583          	lhu	a1,124(s0)
    9fe04268:	0000d517          	auipc	a0,0xd
    9fe0426c:	06050513          	addi	a0,a0,96 # 9fe112c8 <__func__.3+0x280>
    9fe04270:	525070ef          	jal	ra,9fe0bf94 <printf>
	printf("[SSP_VER20220128]para_agc_vad_ena:%d.\n",  pst3Ainfo->para_obj.para_agc_vad_ena);
    9fe04274:	07e44583          	lbu	a1,126(s0)
    9fe04278:	0000d517          	auipc	a0,0xd
    9fe0427c:	08050513          	addi	a0,a0,128 # 9fe112f8 <__func__.3+0x2b0>
    9fe04280:	515070ef          	jal	ra,9fe0bf94 <printf>
	printf("[SSP_VER20220128]para_notch_freq:%d.\n",  pst3Ainfo->para_obj.para_notch_freq);
    9fe04284:	08045583          	lhu	a1,128(s0)
    9fe04288:	0000d517          	auipc	a0,0xd
    9fe0428c:	09850513          	addi	a0,a0,152 # 9fe11320 <__func__.3+0x2d8>
    9fe04290:	505070ef          	jal	ra,9fe0bf94 <printf>
	//printf("[SSP_VER20220128]user setting config param------dump---end\n");

	//TODO: check ssp init with ssp_main.c
	//reference from ssp_main.c
	cond1 = pst3Ainfo->para_obj.para_fun_config & DELAY_ENABLE;
    9fe04294:	06641783          	lh	a5,102(s0)
	if (cond1) {
    9fe04298:	0807f713          	andi	a4,a5,128
    9fe0429c:	1c071163          	bnez	a4,9fe0445e <audio_ssp_init+0x31a>
		delay_para(&pst3Ainfo->para_obj);
		pst3Ainfo->delay_state = delay_init(&pst3Ainfo->para_obj);
	}

	cond1 = pst3Ainfo->para_obj.para_fun_config & DG_ENABLE;
	if (cond1) {
    9fe042a0:	0407f713          	andi	a4,a5,64
    9fe042a4:	1a071563          	bnez	a4,9fe0444e <audio_ssp_init+0x30a>
		DG_para(&pst3Ainfo->dg_obj, &pst3Ainfo->para_obj);
	}

	cond1 = pst3Ainfo->para_obj.para_fun_config & DCREMOVER_ENABLE;
	if (cond1) {
    9fe042a8:	0207f713          	andi	a4,a5,32
    9fe042ac:	18071863          	bnez	a4,9fe0443c <audio_ssp_init+0x2f8>
		DC_remover_init(&pst3Ainfo->dc_obj, pst3Ainfo->fs);
	}

	cond1 = pst3Ainfo->para_obj.para_fun_config & NOTCH_ENABLE;
	if (cond1) {
    9fe042b0:	0107f713          	andi	a4,a5,16
    9fe042b4:	16071463          	bnez	a4,9fe0441c <audio_ssp_init+0x2d8>
	}

	cond1 = pst3Ainfo->para_obj.para_fun_config & LP_AEC_ENABLE;
	cond2 = pst3Ainfo->para_obj.para_fun_config & NLP_AES_ENABLE;

	if (cond1 | cond2) {
    9fe042b8:	0037f713          	andi	a4,a5,3
	cond2 = pst3Ainfo->para_obj.para_fun_config & NLP_AES_ENABLE;
    9fe042bc:	0027f493          	andi	s1,a5,2
	if (cond1 | cond2) {
    9fe042c0:	e76d                	bnez	a4,9fe043aa <audio_ssp_init+0x266>
		LP_AEC_para(&pst3Ainfo->para_obj, &pst3Ainfo->filter_length, &pst3Ainfo->init_filter_length);
		pst3Ainfo->aec_state = LP_AEC_init(AEC_FRAME_LENGTH, pst3Ainfo->filter_length,
						pst3Ainfo->init_filter_length, pst3Ainfo->fs);
	}
	if (cond2) {
    9fe042c2:	10049863          	bnez	s1,9fe043d2 <audio_ssp_init+0x28e>
				&pst3Ainfo->aes_supp_coef2);
		pst3Ainfo->aes_state = NLP_AES_init(AEC_FRAME_LENGTH, pst3Ainfo->fs, pst3Ainfo->std_thrd,
							pst3Ainfo->aes_supp_coef1, pst3Ainfo->aes_supp_coef2);
		pst3Ainfo->aes_state->echo_state = pst3Ainfo->aec_state;
	}
	if (!(pst3Ainfo->para_obj.para_fun_config & AGC_ENABLE)) {
    9fe042c6:	06645783          	lhu	a5,102(s0)
    9fe042ca:	0087f713          	andi	a4,a5,8
    9fe042ce:	cf29                	beqz	a4,9fe04328 <audio_ssp_init+0x1e4>
		/* add fool-proof design for parameter configuration */
		pst3Ainfo->para_obj.para_agc_vad_ena = 0;
	}
	cond1 = pst3Ainfo->para_obj.para_fun_config & NR_ENABLE;
	cond2 = pst3Ainfo->para_obj.para_fun_config & AGC_ENABLE;
	if (cond1 | (cond2 && pst3Ainfo->para_obj.para_agc_vad_ena)) {
    9fe042d0:	0087f713          	andi	a4,a5,8
    9fe042d4:	8b91                	andi	a5,a5,4
    9fe042d6:	cf29                	beqz	a4,9fe04330 <audio_ssp_init+0x1ec>
    9fe042d8:	07e44703          	lbu	a4,126(s0)
    9fe042dc:	12070463          	beqz	a4,9fe04404 <audio_ssp_init+0x2c0>
		NR_para(&pst3Ainfo->para_obj, &pst3Ainfo->aa, &pst3Ainfo->mu);
    9fe042e0:	0bc40613          	addi	a2,s0,188
    9fe042e4:	0b840593          	addi	a1,s0,184
    9fe042e8:	854a                	mv	a0,s2
    9fe042ea:	0d8030ef          	jal	ra,9fe073c2 <NR_para>
		pst3Ainfo->nr_state = NR_init(AEC_FRAME_LENGTH, pst3Ainfo->fs, pst3Ainfo->aa, pst3Ainfo->mu);
    9fe042ee:	0bc42607          	flw	fa2,188(s0)
    9fe042f2:	0b842587          	flw	fa1,184(s0)
    9fe042f6:	06042507          	flw	fa0,96(s0)
    9fe042fa:	0a000513          	li	a0,160
    9fe042fe:	1e0030ef          	jal	ra,9fe074de <NR_init>
    9fe04302:	e068                	sd	a0,192(s0)
	}
	if (cond2) {
		AGC_para(&pst3Ainfo->agc_obj, &pst3Ainfo->para_obj, 1);
    9fe04304:	6485                	lui	s1,0x1
    9fe04306:	14c1                	addi	s1,s1,-16
    9fe04308:	94a2                	add	s1,s1,s0
    9fe0430a:	85ca                	mv	a1,s2
    9fe0430c:	8526                	mv	a0,s1
    9fe0430e:	4605                	li	a2,1
    9fe04310:	4ae050ef          	jal	ra,9fe097be <AGC_para>
		AGC_init(&pst3Ainfo->agc_obj, &pst3Ainfo->para_obj, pst3Ainfo->fs, AEC_FRAME_LENGTH, 1);
    9fe04314:	06042507          	flw	fa0,96(s0)
    9fe04318:	4685                	li	a3,1
    9fe0431a:	0a000613          	li	a2,160
    9fe0431e:	85ca                	mv	a1,s2
    9fe04320:	8526                	mv	a0,s1
    9fe04322:	40e050ef          	jal	ra,9fe09730 <AGC_init>
    9fe04326:	a039                	j	9fe04334 <audio_ssp_init+0x1f0>
		pst3Ainfo->para_obj.para_agc_vad_ena = 0;
    9fe04328:	06040f23          	sb	zero,126(s0)
	if (cond1 | (cond2 && pst3Ainfo->para_obj.para_agc_vad_ena)) {
    9fe0432c:	8b91                	andi	a5,a5,4
    9fe0432e:	eb79                	bnez	a4,9fe04404 <audio_ssp_init+0x2c0>
    9fe04330:	16079463          	bnez	a5,9fe04498 <audio_ssp_init+0x354>
	pst3Ainfo->speech_vad = true;
	pst3Ainfo->st_vad = false;    /* default */
	pst3Ainfo->frame = 1.0F;
	pst3Ainfo->nenr_silence_cnt = 0;

	pst3Ainfo->para_obj.para_nr_init_sile_time = MIN(MAX(pst3Ainfo->para_obj.para_nr_init_sile_time, 0), 250);
    9fe04334:	07445783          	lhu	a5,116(s0)
	pst3Ainfo->frame = 1.0F;
    9fe04338:	0000e717          	auipc	a4,0xe
    9fe0433c:	ed872787          	flw	fa5,-296(a4) # 9fe12210 <__func__.1+0x58>
	pst3Ainfo->speech_vad = true;
    9fe04340:	4705                	li	a4,1
	pst3Ainfo->para_obj.para_nr_init_sile_time = MIN(MAX(pst3Ainfo->para_obj.para_nr_init_sile_time, 0), 250);
    9fe04342:	03079693          	slli	a3,a5,0x30
	pst3Ainfo->speech_vad = true;
    9fe04346:	22e40023          	sb	a4,544(s0)
	pst3Ainfo->st_vad = false;    /* default */
    9fe0434a:	0c040823          	sb	zero,208(s0)
	pst3Ainfo->frame = 1.0F;
    9fe0434e:	22f42227          	fsw	fa5,548(s0)
	pst3Ainfo->nenr_silence_cnt = 0;
    9fe04352:	0c042623          	sw	zero,204(s0)
	pst3Ainfo->para_obj.para_nr_init_sile_time = MIN(MAX(pst3Ainfo->para_obj.para_nr_init_sile_time, 0), 250);
    9fe04356:	92c1                	srli	a3,a3,0x30
    9fe04358:	0fa00713          	li	a4,250
    9fe0435c:	00d77463          	bgeu	a4,a3,9fe04364 <audio_ssp_init+0x220>
    9fe04360:	0fa00793          	li	a5,250
	if (pst3Ainfo->fs == 16000.0F) {
    9fe04364:	06042707          	flw	fa4,96(s0)
    9fe04368:	0000e717          	auipc	a4,0xe
    9fe0436c:	eac72787          	flw	fa5,-340(a4) # 9fe12214 <__func__.1+0x5c>
	pst3Ainfo->para_obj.para_nr_init_sile_time = MIN(MAX(pst3Ainfo->para_obj.para_nr_init_sile_time, 0), 250);
    9fe04370:	06f41a23          	sh	a5,116(s0)
	if (pst3Ainfo->fs == 16000.0F) {
    9fe04374:	a0f72753          	feq.s	a4,fa4,fa5
		pst3Ainfo->initial_noise_pow_time = 14;
		pst3Ainfo->nenr_silence_time = pst3Ainfo->para_obj.para_nr_init_sile_time*2;
    9fe04378:	17c2                	slli	a5,a5,0x30
    9fe0437a:	93c1                	srli	a5,a5,0x30
	if (pst3Ainfo->fs == 16000.0F) {
    9fe0437c:	c759                	beqz	a4,9fe0440a <audio_ssp_init+0x2c6>
		pst3Ainfo->initial_noise_pow_time = 14;
    9fe0437e:	0000e717          	auipc	a4,0xe
    9fe04382:	e9a72787          	flw	fa5,-358(a4) # 9fe12218 <__func__.1+0x60>
		pst3Ainfo->nenr_silence_time = pst3Ainfo->para_obj.para_nr_init_sile_time*2;
    9fe04386:	0017979b          	slliw	a5,a5,0x1
		pst3Ainfo->initial_noise_pow_time = 14;
    9fe0438a:	22f42427          	fsw	fa5,552(s0)
		pst3Ainfo->nenr_silence_time = pst3Ainfo->para_obj.para_nr_init_sile_time*2;
    9fe0438e:	0cf42423          	sw	a5,200(s0)
	} else {
		pst3Ainfo->initial_noise_pow_time = 7;
		pst3Ainfo->nenr_silence_time = pst3Ainfo->para_obj.para_nr_init_sile_time;
	}

	pst3Ainfo->bInitOk = true;
    9fe04392:	6785                	lui	a5,0x1
    9fe04394:	97a2                	add	a5,a5,s0
    9fe04396:	4705                	li	a4,1
    9fe04398:	d798                	sw	a4,40(a5)

	return (void *)pst3Ainfo;
}
    9fe0439a:	70a2                	ld	ra,40(sp)
    9fe0439c:	8522                	mv	a0,s0
    9fe0439e:	7402                	ld	s0,32(sp)
    9fe043a0:	64e2                	ld	s1,24(sp)
    9fe043a2:	6942                	ld	s2,16(sp)
    9fe043a4:	69a2                	ld	s3,8(sp)
    9fe043a6:	6145                	addi	sp,sp,48
    9fe043a8:	8082                	ret
		LP_AEC_para(&pst3Ainfo->para_obj, &pst3Ainfo->filter_length, &pst3Ainfo->init_filter_length);
    9fe043aa:	05a40613          	addi	a2,s0,90
    9fe043ae:	05840593          	addi	a1,s0,88
    9fe043b2:	854a                	mv	a0,s2
    9fe043b4:	2c9000ef          	jal	ra,9fe04e7c <LP_AEC_para>
		pst3Ainfo->aec_state = LP_AEC_init(AEC_FRAME_LENGTH, pst3Ainfo->filter_length,
    9fe043b8:	06042507          	flw	fa0,96(s0)
    9fe043bc:	05a41603          	lh	a2,90(s0)
    9fe043c0:	05841583          	lh	a1,88(s0)
    9fe043c4:	0a000513          	li	a0,160
    9fe043c8:	2f7000ef          	jal	ra,9fe04ebe <LP_AEC_init>
    9fe043cc:	e428                	sd	a0,72(s0)
	if (cond2) {
    9fe043ce:	ee048ce3          	beqz	s1,9fe042c6 <audio_ssp_init+0x182>
		NLP_AES_para(&pst3Ainfo->para_obj, &pst3Ainfo->std_thrd, &pst3Ainfo->aes_supp_coef1,
    9fe043d2:	21840693          	addi	a3,s0,536
    9fe043d6:	21440613          	addi	a2,s0,532
    9fe043da:	21c40593          	addi	a1,s0,540
    9fe043de:	854a                	mv	a0,s2
    9fe043e0:	43a030ef          	jal	ra,9fe0781a <NLP_AES_para>
		pst3Ainfo->aes_state = NLP_AES_init(AEC_FRAME_LENGTH, pst3Ainfo->fs, pst3Ainfo->std_thrd,
    9fe043e4:	21842687          	flw	fa3,536(s0)
    9fe043e8:	21442607          	flw	fa2,532(s0)
    9fe043ec:	21c42587          	flw	fa1,540(s0)
    9fe043f0:	06042507          	flw	fa0,96(s0)
    9fe043f4:	0a000513          	li	a0,160
    9fe043f8:	498030ef          	jal	ra,9fe07890 <NLP_AES_init>
		pst3Ainfo->aes_state->echo_state = pst3Ainfo->aec_state;
    9fe043fc:	643c                	ld	a5,72(s0)
		pst3Ainfo->aes_state = NLP_AES_init(AEC_FRAME_LENGTH, pst3Ainfo->fs, pst3Ainfo->std_thrd,
    9fe043fe:	e828                	sd	a0,80(s0)
		pst3Ainfo->aes_state->echo_state = pst3Ainfo->aec_state;
    9fe04400:	ed1c                	sd	a5,24(a0)
    9fe04402:	b5d1                	j	9fe042c6 <audio_ssp_init+0x182>
	if (cond1 | (cond2 && pst3Ainfo->para_obj.para_agc_vad_ena)) {
    9fe04404:	f00780e3          	beqz	a5,9fe04304 <audio_ssp_init+0x1c0>
    9fe04408:	bde1                	j	9fe042e0 <audio_ssp_init+0x19c>
		pst3Ainfo->initial_noise_pow_time = 7;
    9fe0440a:	0000e717          	auipc	a4,0xe
    9fe0440e:	e1272787          	flw	fa5,-494(a4) # 9fe1221c <__func__.1+0x64>
    9fe04412:	22f42427          	fsw	fa5,552(s0)
		pst3Ainfo->nenr_silence_time = pst3Ainfo->para_obj.para_nr_init_sile_time;
    9fe04416:	0cf42423          	sw	a5,200(s0)
    9fe0441a:	bfa5                	j	9fe04392 <audio_ssp_init+0x24e>
		notch_para(&pst3Ainfo->notch_obj, &pst3Ainfo->para_obj, pst3Ainfo->fs);
    9fe0441c:	06042507          	flw	fa0,96(s0)
    9fe04420:	02040493          	addi	s1,s0,32
    9fe04424:	85ca                	mv	a1,s2
    9fe04426:	8526                	mv	a0,s1
    9fe04428:	263040ef          	jal	ra,9fe08e8a <notch_para>
		notch_init(&pst3Ainfo->notch_obj, pst3Ainfo->notch_state);
    9fe0442c:	03840593          	addi	a1,s0,56
    9fe04430:	8526                	mv	a0,s1
    9fe04432:	2a1040ef          	jal	ra,9fe08ed2 <notch_init>
	cond1 = pst3Ainfo->para_obj.para_fun_config & LP_AEC_ENABLE;
    9fe04436:	06641783          	lh	a5,102(s0)
    9fe0443a:	bdbd                	j	9fe042b8 <audio_ssp_init+0x174>
		DC_remover_init(&pst3Ainfo->dc_obj, pst3Ainfo->fs);
    9fe0443c:	06042507          	flw	fa0,96(s0)
    9fe04440:	01040513          	addi	a0,s0,16
    9fe04444:	63c000ef          	jal	ra,9fe04a80 <DC_remover_init>
	cond1 = pst3Ainfo->para_obj.para_fun_config & NOTCH_ENABLE;
    9fe04448:	06641783          	lh	a5,102(s0)
    9fe0444c:	b595                	j	9fe042b0 <audio_ssp_init+0x16c>
		DG_para(&pst3Ainfo->dg_obj, &pst3Ainfo->para_obj);
    9fe0444e:	85ca                	mv	a1,s2
    9fe04450:	00840513          	addi	a0,s0,8
    9fe04454:	08d000ef          	jal	ra,9fe04ce0 <DG_para>
	cond1 = pst3Ainfo->para_obj.para_fun_config & DCREMOVER_ENABLE;
    9fe04458:	06641783          	lh	a5,102(s0)
    9fe0445c:	b5b1                	j	9fe042a8 <audio_ssp_init+0x164>
		delay_para(&pst3Ainfo->para_obj);
    9fe0445e:	854a                	mv	a0,s2
    9fe04460:	76c000ef          	jal	ra,9fe04bcc <delay_para>
		pst3Ainfo->delay_state = delay_init(&pst3Ainfo->para_obj);
    9fe04464:	854a                	mv	a0,s2
    9fe04466:	78c000ef          	jal	ra,9fe04bf2 <delay_init>
	cond1 = pst3Ainfo->para_obj.para_fun_config & DG_ENABLE;
    9fe0446a:	06641783          	lh	a5,102(s0)
		pst3Ainfo->delay_state = delay_init(&pst3Ainfo->para_obj);
    9fe0446e:	e008                	sd	a0,0(s0)
    9fe04470:	bd05                	j	9fe042a0 <audio_ssp_init+0x15c>
	    LOG_ERROR("malloc failed.aec init failed.\n");
    9fe04472:	0000f797          	auipc	a5,0xf
    9fe04476:	d0e7a783          	lw	a5,-754(a5) # 9fe13180 <cviaud_dbg>
    9fe0447a:	f2f050e3          	blez	a5,9fe0439a <audio_ssp_init+0x256>
    9fe0447e:	0e500613          	li	a2,229
    9fe04482:	0000d597          	auipc	a1,0xd
    9fe04486:	ffe58593          	addi	a1,a1,-2 # 9fe11480 <__func__.4>
    9fe0448a:	0000d517          	auipc	a0,0xd
    9fe0448e:	bd650513          	addi	a0,a0,-1066 # 9fe11060 <__func__.3+0x18>
    9fe04492:	303070ef          	jal	ra,9fe0bf94 <printf>
    9fe04496:	b711                	j	9fe0439a <audio_ssp_init+0x256>
		NR_para(&pst3Ainfo->para_obj, &pst3Ainfo->aa, &pst3Ainfo->mu);
    9fe04498:	0bc40613          	addi	a2,s0,188
    9fe0449c:	0b840593          	addi	a1,s0,184
    9fe044a0:	854a                	mv	a0,s2
    9fe044a2:	721020ef          	jal	ra,9fe073c2 <NR_para>
		pst3Ainfo->nr_state = NR_init(AEC_FRAME_LENGTH, pst3Ainfo->fs, pst3Ainfo->aa, pst3Ainfo->mu);
    9fe044a6:	0bc42607          	flw	fa2,188(s0)
    9fe044aa:	0b842587          	flw	fa1,184(s0)
    9fe044ae:	06042507          	flw	fa0,96(s0)
    9fe044b2:	0a000513          	li	a0,160
    9fe044b6:	028030ef          	jal	ra,9fe074de <NR_init>
    9fe044ba:	e068                	sd	a0,192(s0)
	if (cond2) {
    9fe044bc:	bda5                	j	9fe04334 <audio_ssp_init+0x1f0>

000000009fe044be <audio_ssp_process>:



int audio_ssp_process(void *handle, short *mic_in, short *ref_in, short *dataout, int iLength)
{
    9fe044be:	715d                	addi	sp,sp,-80
    9fe044c0:	e486                	sd	ra,72(sp)
    9fe044c2:	e0a2                	sd	s0,64(sp)
    9fe044c4:	fc26                	sd	s1,56(sp)
    9fe044c6:	f84a                	sd	s2,48(sp)
    9fe044c8:	f44e                	sd	s3,40(sp)
    9fe044ca:	f052                	sd	s4,32(sp)
    9fe044cc:	ec56                	sd	s5,24(sp)
	int nFFT = 2*len;
	float alpha, alpha2;
	float tmp1 = 0.0;
	struct st3AInfo *pst3Ainfo = (struct st3AInfo *)handle;

	if (!pst3Ainfo) {
    9fe044ce:	4c050263          	beqz	a0,9fe04992 <audio_ssp_process+0x4d4>
		printf("[error]audio_ssp_process error.\n");
		return -1;
	}

	if(!(pst3Ainfo && pst3Ainfo->bInitOk))
    9fe044d2:	6785                	lui	a5,0x1
    9fe044d4:	97aa                	add	a5,a5,a0
    9fe044d6:	579c                	lw	a5,40(a5)
    9fe044d8:	84aa                	mv	s1,a0
    9fe044da:	4a078463          	beqz	a5,9fe04982 <audio_ssp_process+0x4c4>
	{
		printf("[error]audio_ssp_process error params.\n");
		return -1;
	}

	if(iLength != 160)
    9fe044de:	0a000793          	li	a5,160
    9fe044e2:	48f71863          	bne	a4,a5,9fe04972 <audio_ssp_process+0x4b4>
    9fe044e6:	892e                	mv	s2,a1
    9fe044e8:	89b2                	mv	s3,a2
    9fe044ea:	8436                	mv	s0,a3
	{
		printf("[error]audio_ssp_process parameter len must be 160 frames.\n");
		return -1;
	}
	if(!(mic_in || dataout))
    9fe044ec:	c5f5                	beqz	a1,9fe045d8 <audio_ssp_process+0x11a>
	{
		printf("[error]audio_ssp_process NULL parameers.\n");
		return -2;
	}
	if (ref_in == NULL) {
    9fe044ee:	18098e63          	beqz	s3,9fe0468a <audio_ssp_process+0x1cc>
		//printf("[v]ref_in null\n");
		pst3Ainfo->para_obj.para_fun_config &= (~(LP_AEC_ENABLE | NLP_AES_ENABLE));
	}
	//port from ssp_main.c
	//printf("[v]pst3Ainfo->para_obj.para_fun_config[%x]\n", pst3Ainfo->para_obj.para_fun_config);
	if (pst3Ainfo->para_obj.para_client_config == 2) {
    9fe044f2:	0644d703          	lhu	a4,100(s1) # 1064 <_EL1_STACK_SIZE+0x864>
    9fe044f6:	4789                	li	a5,2
    9fe044f8:	0ef70c63          	beq	a4,a5,9fe045f0 <audio_ssp_process+0x132>
			mic_in[i] = ROUND_POS(((float)(mic_in[i])/(float)(32768.0F) * 0.5F)*(short)(32767));
		}
	}


	if(!(pst3Ainfo->para_obj.para_fun_config)) {
    9fe044fc:	0664d783          	lhu	a5,102(s1)
    9fe04500:	cbdd                	beqz	a5,9fe045b6 <audio_ssp_process+0xf8>
		for(i=0;i< hopsize;i++)
			dataout[i]=mic_in[i];
	} else {
		/* Delay ref signal, frame-by-frame processing */
		cond1 = pst3Ainfo->para_obj.para_fun_config & DELAY_ENABLE;
		if (cond1) {
    9fe04502:	0807f713          	andi	a4,a5,128
		cond1 = pst3Ainfo->para_obj.para_fun_config & DELAY_ENABLE;
    9fe04506:	0107979b          	slliw	a5,a5,0x10
    9fe0450a:	4107d79b          	sraiw	a5,a5,0x10
		if (cond1) {
    9fe0450e:	38071763          	bnez	a4,9fe0489c <audio_ssp_process+0x3de>
			delay_ref(ref_in, pst3Ainfo->delay_state, hopsize);
		}

		/* Apply DG, frame-by-frame processing */
		cond1 = pst3Ainfo->para_obj.para_fun_config & DG_ENABLE;
		if (cond1) {
    9fe04512:	0407f713          	andi	a4,a5,64
    9fe04516:	36071863          	bnez	a4,9fe04886 <audio_ssp_process+0x3c8>
			apply_DG(mic_in, mic_in, &pst3Ainfo->dg_obj, hopsize);
		}

		/* DC filter, frame-by-frame processing */
		cond1 = pst3Ainfo->para_obj.para_fun_config & DCREMOVER_ENABLE;
		if (cond1) {
    9fe0451a:	0207f713          	andi	a4,a5,32
    9fe0451e:	34071963          	bnez	a4,9fe04870 <audio_ssp_process+0x3b2>
			DC_remover(mic_in, mic_in, &pst3Ainfo->dc_obj, hopsize);
		}

		/* Notch filter, frame-by-frame processing */
		cond1 = pst3Ainfo->para_obj.para_fun_config & NOTCH_ENABLE;
		if (cond1) {
    9fe04522:	0107f713          	andi	a4,a5,16
    9fe04526:	32071a63          	bnez	a4,9fe0485a <audio_ssp_process+0x39c>
		}

		/* Linear AEC, frame-by-frame processing */
		cond1 = pst3Ainfo->para_obj.para_fun_config & LP_AEC_ENABLE;
		cond2 = pst3Ainfo->para_obj.para_fun_config & NLP_AES_ENABLE;
		if (cond1 | cond2) {
    9fe0452a:	0037f713          	andi	a4,a5,3
		cond2 = pst3Ainfo->para_obj.para_fun_config & NLP_AES_ENABLE;
    9fe0452e:	0027fa13          	andi	s4,a5,2
		if (cond1 | cond2) {
    9fe04532:	2c071e63          	bnez	a4,9fe0480e <audio_ssp_process+0x350>
				mic_in[i] = dataout[i];
		}

		cond3 = pst3Ainfo->para_obj.para_fun_config & NR_ENABLE;
		cond4 = pst3Ainfo->para_obj.para_fun_config & AGC_ENABLE;
		if (!(cond2 | cond3 | cond4)) {
    9fe04536:	00c7f713          	andi	a4,a5,12
    9fe0453a:	00ea6733          	or	a4,s4,a4
		cond3 = pst3Ainfo->para_obj.para_fun_config & NR_ENABLE;
    9fe0453e:	0047fa93          	andi	s5,a5,4
		cond4 = pst3Ainfo->para_obj.para_fun_config & AGC_ENABLE;
    9fe04542:	0087f993          	andi	s3,a5,8
		if (!(cond2 | cond3 | cond4)) {
    9fe04546:	16071163          	bnez	a4,9fe046a8 <audio_ssp_process+0x1ea>
			/* Compensate DG frame-by-frame processing */
			cond1 = pst3Ainfo->para_obj.para_fun_config & DG_ENABLE;
			if (cond1) {
    9fe0454a:	0407f793          	andi	a5,a5,64
    9fe0454e:	28079263          	bnez	a5,9fe047d2 <audio_ssp_process+0x314>
    9fe04552:	85ca                	mv	a1,s2
    9fe04554:	86a2                	mv	a3,s0
    9fe04556:	14090713          	addi	a4,s2,320
				compen_DG(mic_in, mic_in, &pst3Ainfo->dg_obj, hopsize);
			}
			for (i = 0; i < hopsize; i++)
				dataout[i] = mic_in[i];    /* save MCPS if NR+AES+AGC off */
    9fe0455a:	00059783          	lh	a5,0(a1)
			for (i = 0; i < hopsize; i++)
    9fe0455e:	0589                	addi	a1,a1,2
    9fe04560:	0689                	addi	a3,a3,2
				dataout[i] = mic_in[i];    /* save MCPS if NR+AES+AGC off */
    9fe04562:	fef69f23          	sh	a5,-2(a3)
			for (i = 0; i < hopsize; i++)
    9fe04566:	feb71ae3          	bne	a4,a1,9fe0455a <audio_ssp_process+0x9c>
				//printf("[v]AGC_out[0x%x][0x%x]\n", dataout[0], dataout[1]);
			}
		}
    	}

	if (pst3Ainfo->nenr_silence_cnt < pst3Ainfo->nenr_silence_time)
    9fe0456a:	0cc4a883          	lw	a7,204(s1)
    9fe0456e:	0c84a803          	lw	a6,200(s1)
    9fe04572:	0708dc63          	bge	a7,a6,9fe045ea <audio_ssp_process+0x12c>
		pst3Ainfo->nenr_silence_cnt += 1;
    9fe04576:	0018879b          	addiw	a5,a7,1
    9fe0457a:	0cf4a623          	sw	a5,204(s1)
			pst3Ainfo->frame += 1;
		else
			pst3Ainfo->frame = pst3Ainfo->initial_noise_pow_time + 1;
	}

	return 0;
    9fe0457e:	4501                	li	a0,0
	if (pst3Ainfo->nenr_silence_cnt > pst3Ainfo->nenr_silence_time) {
    9fe04580:	02f85263          	bge	a6,a5,9fe045a4 <audio_ssp_process+0xe6>
		if (pst3Ainfo->frame < pst3Ainfo->initial_noise_pow_time)    /* avoid overflow, 140ms */
    9fe04584:	2244a707          	flw	fa4,548(s1)
    9fe04588:	2284a787          	flw	fa5,552(s1)
    9fe0458c:	a0f717d3          	flt.s	a5,fa4,fa5
    9fe04590:	10078363          	beqz	a5,9fe04696 <audio_ssp_process+0x1d8>
			pst3Ainfo->frame += 1;
    9fe04594:	0000e797          	auipc	a5,0xe
    9fe04598:	c7c7a787          	flw	fa5,-900(a5) # 9fe12210 <__func__.1+0x58>
    9fe0459c:	00f77753          	fadd.s	fa4,fa4,fa5
    9fe045a0:	22e4a227          	fsw	fa4,548(s1)
}
    9fe045a4:	60a6                	ld	ra,72(sp)
    9fe045a6:	6406                	ld	s0,64(sp)
    9fe045a8:	74e2                	ld	s1,56(sp)
    9fe045aa:	7942                	ld	s2,48(sp)
    9fe045ac:	79a2                	ld	s3,40(sp)
    9fe045ae:	7a02                	ld	s4,32(sp)
    9fe045b0:	6ae2                	ld	s5,24(sp)
    9fe045b2:	6161                	addi	sp,sp,80
    9fe045b4:	8082                	ret
    9fe045b6:	85ca                	mv	a1,s2
    9fe045b8:	86a2                	mv	a3,s0
    9fe045ba:	14090713          	addi	a4,s2,320
			dataout[i]=mic_in[i];
    9fe045be:	00059783          	lh	a5,0(a1)
		for(i=0;i< hopsize;i++)
    9fe045c2:	0589                	addi	a1,a1,2
    9fe045c4:	0689                	addi	a3,a3,2
			dataout[i]=mic_in[i];
    9fe045c6:	fef69f23          	sh	a5,-2(a3)
		for(i=0;i< hopsize;i++)
    9fe045ca:	feb71ae3          	bne	a4,a1,9fe045be <audio_ssp_process+0x100>
	if (pst3Ainfo->nenr_silence_cnt < pst3Ainfo->nenr_silence_time)
    9fe045ce:	0cc4a883          	lw	a7,204(s1)
    9fe045d2:	0c84a803          	lw	a6,200(s1)
    9fe045d6:	bf71                	j	9fe04572 <audio_ssp_process+0xb4>
	if(!(mic_in || dataout))
    9fe045d8:	fa99                	bnez	a3,9fe044ee <audio_ssp_process+0x30>
		printf("[error]audio_ssp_process NULL parameers.\n");
    9fe045da:	0000d517          	auipc	a0,0xd
    9fe045de:	dfe50513          	addi	a0,a0,-514 # 9fe113d8 <__func__.3+0x390>
    9fe045e2:	1b3070ef          	jal	ra,9fe0bf94 <printf>
		return -2;
    9fe045e6:	5579                	li	a0,-2
    9fe045e8:	bf75                	j	9fe045a4 <audio_ssp_process+0xe6>
		pst3Ainfo->nenr_silence_cnt = pst3Ainfo->nenr_silence_time + 1;    /* avoid overflow */
    9fe045ea:	0018079b          	addiw	a5,a6,1
    9fe045ee:	b771                	j	9fe0457a <audio_ssp_process+0xbc>
    9fe045f0:	7661                	lui	a2,0xffff8
    9fe045f2:	6521                	lui	a0,0x8
    9fe045f4:	87ce                	mv	a5,s3
    9fe045f6:	874a                	mv	a4,s2
    9fe045f8:	14098593          	addi	a1,s3,320
    9fe045fc:	0000e697          	auipc	a3,0xe
    9fe04600:	c246a687          	flw	fa3,-988(a3) # 9fe12220 <__func__.1+0x68>
    9fe04604:	0000e697          	auipc	a3,0xe
    9fe04608:	c206a507          	flw	fa0,-992(a3) # 9fe12224 <__func__.1+0x6c>
    9fe0460c:	0000e697          	auipc	a3,0xe
    9fe04610:	c1c6a607          	flw	fa2,-996(a3) # 9fe12228 <__func__.1+0x70>
    9fe04614:	0000e697          	auipc	a3,0xe
    9fe04618:	c186a587          	flw	fa1,-1000(a3) # 9fe1222c <__func__.1+0x74>
    9fe0461c:	0000e697          	auipc	a3,0xe
    9fe04620:	c146a707          	flw	fa4,-1004(a3) # 9fe12230 <__func__.1+0x78>
    9fe04624:	0609                	addi	a2,a2,2
  			tmp = MIN(MAX(tmp, -1.0F), 1.0F);
    9fe04626:	0000e697          	auipc	a3,0xe
    9fe0462a:	bea6a007          	flw	ft0,-1046(a3) # 9fe12210 <__func__.1+0x58>
    9fe0462e:	157d                	addi	a0,a0,-1
			tmp = (float)(ref_in[i])/(float)(32768.0F) * 15.84F;
    9fe04630:	00079683          	lh	a3,0(a5)
    9fe04634:	8832                	mv	a6,a2
    9fe04636:	d006f7d3          	fcvt.s.w	fa5,a3
    9fe0463a:	10d7f7d3          	fmul.s	fa5,fa5,fa3
    9fe0463e:	10a7f7d3          	fmul.s	fa5,fa5,fa0
  			tmp = MIN(MAX(tmp, -1.0F), 1.0F);
    9fe04642:	a0c796d3          	flt.s	a3,fa5,fa2
    9fe04646:	ee89                	bnez	a3,9fe04660 <audio_ssp_process+0x1a2>
    9fe04648:	a0f016d3          	flt.s	a3,ft0,fa5
    9fe0464c:	882a                	mv	a6,a0
    9fe0464e:	ea89                	bnez	a3,9fe04660 <audio_ssp_process+0x1a2>
  			ref_in[i] = ROUND_POS(tmp*(short)(32767));
    9fe04650:	70b7f7c3          	fmadd.s	fa5,fa5,fa1,fa4
    9fe04654:	c0079853          	fcvt.w.s	a6,fa5,rtz
    9fe04658:	0108181b          	slliw	a6,a6,0x10
    9fe0465c:	4108581b          	sraiw	a6,a6,0x10
    9fe04660:	01079023          	sh	a6,0(a5)
			mic_in[i] = ROUND_POS(((float)(mic_in[i])/(float)(32768.0F) * 0.5F)*(short)(32767));
    9fe04664:	00071683          	lh	a3,0(a4)
		for (i = 0; i < hopsize; i++) {
    9fe04668:	0709                	addi	a4,a4,2
    9fe0466a:	0789                	addi	a5,a5,2
			mic_in[i] = ROUND_POS(((float)(mic_in[i])/(float)(32768.0F) * 0.5F)*(short)(32767));
    9fe0466c:	d006f7d3          	fcvt.s.w	fa5,a3
    9fe04670:	10d7f7d3          	fmul.s	fa5,fa5,fa3
    9fe04674:	10e7f7d3          	fmul.s	fa5,fa5,fa4
    9fe04678:	70b7f7c3          	fmadd.s	fa5,fa5,fa1,fa4
    9fe0467c:	c00796d3          	fcvt.w.s	a3,fa5,rtz
    9fe04680:	fed71f23          	sh	a3,-2(a4)
		for (i = 0; i < hopsize; i++) {
    9fe04684:	faf596e3          	bne	a1,a5,9fe04630 <audio_ssp_process+0x172>
    9fe04688:	bd95                	j	9fe044fc <audio_ssp_process+0x3e>
		pst3Ainfo->para_obj.para_fun_config &= (~(LP_AEC_ENABLE | NLP_AES_ENABLE));
    9fe0468a:	0664d783          	lhu	a5,102(s1)
    9fe0468e:	9bf1                	andi	a5,a5,-4
    9fe04690:	06f49323          	sh	a5,102(s1)
    9fe04694:	bdb9                	j	9fe044f2 <audio_ssp_process+0x34>
			pst3Ainfo->frame = pst3Ainfo->initial_noise_pow_time + 1;
    9fe04696:	0000e797          	auipc	a5,0xe
    9fe0469a:	b7a7a707          	flw	fa4,-1158(a5) # 9fe12210 <__func__.1+0x58>
    9fe0469e:	00e7f7d3          	fadd.s	fa5,fa5,fa4
    9fe046a2:	22f4a227          	fsw	fa5,548(s1)
    9fe046a6:	bdfd                	j	9fe045a4 <audio_ssp_process+0xe6>
			if (cond3 | pst3Ainfo->para_obj.para_agc_vad_ena) {
    9fe046a8:	07e4c783          	lbu	a5,126(s1)
    9fe046ac:	00fae7b3          	or	a5,s5,a5
    9fe046b0:	10078463          	beqz	a5,9fe047b8 <audio_ssp_process+0x2fa>
				if (pst3Ainfo->nenr_silence_cnt >= pst3Ainfo->nenr_silence_time) {
    9fe046b4:	0cc4a703          	lw	a4,204(s1)
    9fe046b8:	0c84a783          	lw	a5,200(s1)
					NR(mic_in,
    9fe046bc:	60f0                	ld	a2,192(s1)
				if (pst3Ainfo->nenr_silence_cnt >= pst3Ainfo->nenr_silence_time) {
    9fe046be:	28f75c63          	bge	a4,a5,9fe04956 <audio_ssp_process+0x498>
    9fe046c2:	6685                	lui	a3,0x1
    9fe046c4:	c3068693          	addi	a3,a3,-976 # c30 <_EL1_STACK_SIZE+0x430>
    9fe046c8:	96a6                	add	a3,a3,s1
    9fe046ca:	4781                	li	a5,0
					for (i = 0; i < hopsize; i++) {
    9fe046cc:	14000593          	li	a1,320
    9fe046d0:	a011                	j	9fe046d4 <audio_ssp_process+0x216>
						pst3Ainfo->nr_state->x_old[i] = mic_in[i];
    9fe046d2:	60f0                	ld	a2,192(s1)
						pst3Ainfo->ne_float_out[i] = 0.0F;
    9fe046d4:	0006a023          	sw	zero,0(a3)
						pst3Ainfo->nr_state->x_old[i] = mic_in[i];
    9fe046d8:	6e18                	ld	a4,24(a2)
    9fe046da:	00f90633          	add	a2,s2,a5
    9fe046de:	00061603          	lh	a2,0(a2) # ffffffffffff8000 <_end+0xffffffff60138300>
    9fe046e2:	973e                	add	a4,a4,a5
					for (i = 0; i < hopsize; i++) {
    9fe046e4:	0789                	addi	a5,a5,2
						pst3Ainfo->nr_state->x_old[i] = mic_in[i];
    9fe046e6:	00c71023          	sh	a2,0(a4)
					for (i = 0; i < hopsize; i++) {
    9fe046ea:	0691                	addi	a3,a3,4
    9fe046ec:	feb793e3          	bne	a5,a1,9fe046d2 <audio_ssp_process+0x214>
			if (cond3) {
    9fe046f0:	0c0a8463          	beqz	s5,9fe047b8 <audio_ssp_process+0x2fa>
    9fe046f4:	6705                	lui	a4,0x1
    9fe046f6:	c3070793          	addi	a5,a4,-976 # c30 <_EL1_STACK_SIZE+0x430>
    9fe046fa:	eb070593          	addi	a1,a4,-336
					pst3Ainfo->ne_float_out[i] = MIN(MAX(pst3Ainfo->ne_float_out[i], -1.0F), 1.0F);    /* saturation protection to avoid overflow */
    9fe046fe:	6521                	lui	a0,0x8
					if (pst3Ainfo->ne_float_out[i] < 0.0F)
    9fe04700:	f00006d3          	fmv.w.x	fa3,zero
    9fe04704:	97a6                	add	a5,a5,s1
    9fe04706:	8722                	mv	a4,s0
    9fe04708:	95a6                	add	a1,a1,s1
    9fe0470a:	0000e697          	auipc	a3,0xe
    9fe0470e:	b1e6a607          	flw	fa2,-1250(a3) # 9fe12228 <__func__.1+0x70>
					pst3Ainfo->ne_float_out[i] = MIN(MAX(pst3Ainfo->ne_float_out[i], -1.0F), 1.0F);    /* saturation protection to avoid overflow */
    9fe04712:	0000e697          	auipc	a3,0xe
    9fe04716:	afe6a707          	flw	fa4,-1282(a3) # 9fe12210 <__func__.1+0x58>
    9fe0471a:	157d                	addi	a0,a0,-1
						dataout[i] = ROUND_POS((pst3Ainfo->ne_float_out[i]*(short)(32767)));
    9fe0471c:	0000e697          	auipc	a3,0xe
    9fe04720:	b106a507          	flw	fa0,-1264(a3) # 9fe1222c <__func__.1+0x74>
    9fe04724:	0000e697          	auipc	a3,0xe
    9fe04728:	b0c6a587          	flw	fa1,-1268(a3) # 9fe12230 <__func__.1+0x78>
						dataout[i] = ROUND_NEG((pst3Ainfo->ne_float_out[i]*(int)(32768)));
    9fe0472c:	0000e697          	auipc	a3,0xe
    9fe04730:	b086a087          	flw	ft1,-1272(a3) # 9fe12234 <__func__.1+0x7c>
    9fe04734:	0000e697          	auipc	a3,0xe
    9fe04738:	b046a007          	flw	ft0,-1276(a3) # 9fe12238 <__func__.1+0x80>
    9fe0473c:	a829                	j	9fe04756 <audio_ssp_process+0x298>
					pst3Ainfo->ne_float_out[i] = MIN(MAX(pst3Ainfo->ne_float_out[i], -1.0F), 1.0F);    /* saturation protection to avoid overflow */
    9fe0473e:	a0f716d3          	flt.s	a3,fa4,fa5
    9fe04742:	862a                	mv	a2,a0
    9fe04744:	c2c5                	beqz	a3,9fe047e4 <audio_ssp_process+0x326>
    9fe04746:	00e7a027          	fsw	fa4,0(a5)
						dataout[i] = ROUND_POS((pst3Ainfo->ne_float_out[i]*(short)(32767)));
    9fe0474a:	00c71023          	sh	a2,0(a4)
				for (i = 0; i < hopsize; i++) {
    9fe0474e:	0791                	addi	a5,a5,4
    9fe04750:	0709                	addi	a4,a4,2
    9fe04752:	02f58063          	beq	a1,a5,9fe04772 <audio_ssp_process+0x2b4>
					pst3Ainfo->ne_float_out[i] = MIN(MAX(pst3Ainfo->ne_float_out[i], -1.0F), 1.0F);    /* saturation protection to avoid overflow */
    9fe04756:	0007a787          	flw	fa5,0(a5)
    9fe0475a:	7661                	lui	a2,0xffff8
    9fe0475c:	a0c796d3          	flt.s	a3,fa5,fa2
    9fe04760:	def9                	beqz	a3,9fe0473e <audio_ssp_process+0x280>
    9fe04762:	00c7a027          	fsw	fa2,0(a5)
						dataout[i] = ROUND_POS((pst3Ainfo->ne_float_out[i]*(short)(32767)));
    9fe04766:	00c71023          	sh	a2,0(a4)
				for (i = 0; i < hopsize; i++) {
    9fe0476a:	0791                	addi	a5,a5,4
    9fe0476c:	0709                	addi	a4,a4,2
    9fe0476e:	fef594e3          	bne	a1,a5,9fe04756 <audio_ssp_process+0x298>
			if (cond2) {
    9fe04772:	1a0a1b63          	bnez	s4,9fe04928 <audio_ssp_process+0x46a>
			if (2 == pst3Ainfo->para_obj.para_client_config) {
    9fe04776:	0644d703          	lhu	a4,100(s1)
    9fe0477a:	4789                	li	a5,2
    9fe0477c:	12f70963          	beq	a4,a5,9fe048ae <audio_ssp_process+0x3f0>
			cond1 = pst3Ainfo->para_obj.para_fun_config & DG_ENABLE;
    9fe04780:	0664d783          	lhu	a5,102(s1)
			if (cond1) {
    9fe04784:	0407f793          	andi	a5,a5,64
    9fe04788:	1a079e63          	bnez	a5,9fe04944 <audio_ssp_process+0x486>
				AGC(dataout,
    9fe0478c:	0c84a803          	lw	a6,200(s1)
    9fe04790:	0cc4a883          	lw	a7,204(s1)
			if (cond4) {
    9fe04794:	dc098fe3          	beqz	s3,9fe04572 <audio_ssp_process+0xb4>
				AGC(dataout,
    9fe04798:	0d04c783          	lbu	a5,208(s1)
    9fe0479c:	2204c703          	lbu	a4,544(s1)
    9fe047a0:	6605                	lui	a2,0x1
    9fe047a2:	4685                	li	a3,1
    9fe047a4:	1641                	addi	a2,a2,-16
    9fe047a6:	e036                	sd	a3,0(sp)
    9fe047a8:	9626                	add	a2,a2,s1
    9fe047aa:	06448693          	addi	a3,s1,100
    9fe047ae:	85a2                	mv	a1,s0
    9fe047b0:	8522                	mv	a0,s0
    9fe047b2:	31d040ef          	jal	ra,9fe092ce <AGC>
    9fe047b6:	bb55                	j	9fe0456a <audio_ssp_process+0xac>
    9fe047b8:	85ca                	mv	a1,s2
    9fe047ba:	87a2                	mv	a5,s0
    9fe047bc:	14090693          	addi	a3,s2,320
					dataout[i] = mic_in[i];
    9fe047c0:	00059703          	lh	a4,0(a1)
				for (i = 0; i < hopsize; i++)
    9fe047c4:	0589                	addi	a1,a1,2
    9fe047c6:	0789                	addi	a5,a5,2
					dataout[i] = mic_in[i];
    9fe047c8:	fee79f23          	sh	a4,-2(a5)
				for (i = 0; i < hopsize; i++)
    9fe047cc:	feb69ae3          	bne	a3,a1,9fe047c0 <audio_ssp_process+0x302>
    9fe047d0:	b74d                	j	9fe04772 <audio_ssp_process+0x2b4>
				compen_DG(mic_in, mic_in, &pst3Ainfo->dg_obj, hopsize);
    9fe047d2:	0a000693          	li	a3,160
    9fe047d6:	00848613          	addi	a2,s1,8
    9fe047da:	85ca                	mv	a1,s2
    9fe047dc:	854a                	mv	a0,s2
    9fe047de:	5e2000ef          	jal	ra,9fe04dc0 <compen_DG>
    9fe047e2:	bb85                	j	9fe04552 <audio_ssp_process+0x94>
					if (pst3Ainfo->ne_float_out[i] < 0.0F)
    9fe047e4:	a0d796d3          	flt.s	a3,fa5,fa3
    9fe047e8:	ea91                	bnez	a3,9fe047fc <audio_ssp_process+0x33e>
						dataout[i] = ROUND_POS((pst3Ainfo->ne_float_out[i]*(short)(32767)));
    9fe047ea:	58a7f7c3          	fmadd.s	fa5,fa5,fa0,fa1
    9fe047ee:	c0079653          	fcvt.w.s	a2,fa5,rtz
    9fe047f2:	0106161b          	slliw	a2,a2,0x10
    9fe047f6:	4106561b          	sraiw	a2,a2,0x10
    9fe047fa:	bf81                	j	9fe0474a <audio_ssp_process+0x28c>
						dataout[i] = ROUND_NEG((pst3Ainfo->ne_float_out[i]*(int)(32768)));
    9fe047fc:	0017f7c3          	fmadd.s	fa5,fa5,ft1,ft0
    9fe04800:	c0079653          	fcvt.w.s	a2,fa5,rtz
    9fe04804:	0106161b          	slliw	a2,a2,0x10
    9fe04808:	4106561b          	sraiw	a2,a2,0x10
    9fe0480c:	bf3d                	j	9fe0474a <audio_ssp_process+0x28c>
			LP_AEC(pst3Ainfo->aec_state, mic_in, ref_in, dataout);
    9fe0480e:	64a8                	ld	a0,72(s1)
    9fe04810:	86a2                	mv	a3,s0
    9fe04812:	864e                	mv	a2,s3
    9fe04814:	85ca                	mv	a1,s2
    9fe04816:	565000ef          	jal	ra,9fe0557a <LP_AEC>
			if (cond2) {
    9fe0481a:	020a0163          	beqz	s4,9fe0483c <audio_ssp_process+0x37e>
    9fe0481e:	4781                	li	a5,0
				for (i = 0; i < hopsize; i++)
    9fe04820:	14000613          	li	a2,320
					pst3Ainfo->aes_state->aes_std_in[i] = mic_in[i];
    9fe04824:	68b8                	ld	a4,80(s1)
    9fe04826:	00f906b3          	add	a3,s2,a5
    9fe0482a:	00069683          	lh	a3,0(a3)
    9fe0482e:	6378                	ld	a4,192(a4)
    9fe04830:	973e                	add	a4,a4,a5
    9fe04832:	00d71023          	sh	a3,0(a4)
				for (i = 0; i < hopsize; i++)
    9fe04836:	0789                	addi	a5,a5,2
    9fe04838:	fec796e3          	bne	a5,a2,9fe04824 <audio_ssp_process+0x366>
    9fe0483c:	87a2                	mv	a5,s0
    9fe0483e:	874a                	mv	a4,s2
    9fe04840:	14040613          	addi	a2,s0,320
				mic_in[i] = dataout[i];
    9fe04844:	00079683          	lh	a3,0(a5)
			for (i = 0; i < hopsize; i++)
    9fe04848:	0789                	addi	a5,a5,2
    9fe0484a:	0709                	addi	a4,a4,2
				mic_in[i] = dataout[i];
    9fe0484c:	fed71f23          	sh	a3,-2(a4)
			for (i = 0; i < hopsize; i++)
    9fe04850:	fef61ae3          	bne	a2,a5,9fe04844 <audio_ssp_process+0x386>
		cond3 = pst3Ainfo->para_obj.para_fun_config & NR_ENABLE;
    9fe04854:	06649783          	lh	a5,102(s1)
    9fe04858:	b9f9                	j	9fe04536 <audio_ssp_process+0x78>
			notch_filter(mic_in, mic_in, &pst3Ainfo->notch_obj, hopsize);
    9fe0485a:	0a000693          	li	a3,160
    9fe0485e:	02048613          	addi	a2,s1,32
    9fe04862:	85ca                	mv	a1,s2
    9fe04864:	854a                	mv	a0,s2
    9fe04866:	686040ef          	jal	ra,9fe08eec <notch_filter>
		cond1 = pst3Ainfo->para_obj.para_fun_config & LP_AEC_ENABLE;
    9fe0486a:	06649783          	lh	a5,102(s1)
    9fe0486e:	b975                	j	9fe0452a <audio_ssp_process+0x6c>
			DC_remover(mic_in, mic_in, &pst3Ainfo->dc_obj, hopsize);
    9fe04870:	0a000693          	li	a3,160
    9fe04874:	01048613          	addi	a2,s1,16
    9fe04878:	85ca                	mv	a1,s2
    9fe0487a:	854a                	mv	a0,s2
    9fe0487c:	24a000ef          	jal	ra,9fe04ac6 <DC_remover>
		cond1 = pst3Ainfo->para_obj.para_fun_config & NOTCH_ENABLE;
    9fe04880:	06649783          	lh	a5,102(s1)
    9fe04884:	b979                	j	9fe04522 <audio_ssp_process+0x64>
			apply_DG(mic_in, mic_in, &pst3Ainfo->dg_obj, hopsize);
    9fe04886:	0a000693          	li	a3,160
    9fe0488a:	00848613          	addi	a2,s1,8
    9fe0488e:	85ca                	mv	a1,s2
    9fe04890:	854a                	mv	a0,s2
    9fe04892:	4a6000ef          	jal	ra,9fe04d38 <apply_DG>
		cond1 = pst3Ainfo->para_obj.para_fun_config & DCREMOVER_ENABLE;
    9fe04896:	06649783          	lh	a5,102(s1)
    9fe0489a:	b141                	j	9fe0451a <audio_ssp_process+0x5c>
			delay_ref(ref_in, pst3Ainfo->delay_state, hopsize);
    9fe0489c:	608c                	ld	a1,0(s1)
    9fe0489e:	0a000613          	li	a2,160
    9fe048a2:	854e                	mv	a0,s3
    9fe048a4:	3ea000ef          	jal	ra,9fe04c8e <delay_ref>
		cond1 = pst3Ainfo->para_obj.para_fun_config & DG_ENABLE;
    9fe048a8:	06649783          	lh	a5,102(s1)
    9fe048ac:	b19d                	j	9fe04512 <audio_ssp_process+0x54>
    9fe048ae:	7661                	lui	a2,0xffff8
    9fe048b0:	6521                	lui	a0,0x8
    9fe048b2:	87a2                	mv	a5,s0
    9fe048b4:	14040593          	addi	a1,s0,320
    9fe048b8:	0000e717          	auipc	a4,0xe
    9fe048bc:	96872687          	flw	fa3,-1688(a4) # 9fe12220 <__func__.1+0x68>
    9fe048c0:	0000e717          	auipc	a4,0xe
    9fe048c4:	96872607          	flw	fa2,-1688(a4) # 9fe12228 <__func__.1+0x70>
    9fe048c8:	0000e717          	auipc	a4,0xe
    9fe048cc:	97472707          	flw	fa4,-1676(a4) # 9fe1223c <__func__.1+0x84>
    9fe048d0:	0609                	addi	a2,a2,2
					tmp = MIN(MAX(tmp, -1.0F), 1.0F);
    9fe048d2:	0000e717          	auipc	a4,0xe
    9fe048d6:	93e72587          	flw	fa1,-1730(a4) # 9fe12210 <__func__.1+0x58>
    9fe048da:	157d                	addi	a0,a0,-1
					dataout[i] = ROUND_POS(tmp*(short)(32767));
    9fe048dc:	0000e717          	auipc	a4,0xe
    9fe048e0:	95072007          	flw	ft0,-1712(a4) # 9fe1222c <__func__.1+0x74>
    9fe048e4:	0000e717          	auipc	a4,0xe
    9fe048e8:	94c72507          	flw	fa0,-1716(a4) # 9fe12230 <__func__.1+0x78>
					tmp = (float)(dataout[i])/(float)(32768.0F) * 1.9952F;
    9fe048ec:	00079683          	lh	a3,0(a5)
    9fe048f0:	8732                	mv	a4,a2
    9fe048f2:	d006f7d3          	fcvt.s.w	fa5,a3
    9fe048f6:	10d7f7d3          	fmul.s	fa5,fa5,fa3
    9fe048fa:	10e7f7d3          	fmul.s	fa5,fa5,fa4
					tmp = MIN(MAX(tmp, -1.0F), 1.0F);
    9fe048fe:	a0c796d3          	flt.s	a3,fa5,fa2
    9fe04902:	ee89                	bnez	a3,9fe0491c <audio_ssp_process+0x45e>
    9fe04904:	a0f596d3          	flt.s	a3,fa1,fa5
    9fe04908:	872a                	mv	a4,a0
    9fe0490a:	ea89                	bnez	a3,9fe0491c <audio_ssp_process+0x45e>
					dataout[i] = ROUND_POS(tmp*(short)(32767));
    9fe0490c:	5007f7c3          	fmadd.s	fa5,fa5,ft0,fa0
    9fe04910:	c0079753          	fcvt.w.s	a4,fa5,rtz
    9fe04914:	0107171b          	slliw	a4,a4,0x10
    9fe04918:	4107571b          	sraiw	a4,a4,0x10
    9fe0491c:	00e79023          	sh	a4,0(a5)
				for (i = 0; i < hopsize; i++) {
    9fe04920:	0789                	addi	a5,a5,2
    9fe04922:	fcf595e3          	bne	a1,a5,9fe048ec <audio_ssp_process+0x42e>
    9fe04926:	bda9                	j	9fe04780 <audio_ssp_process+0x2c2>
				NLP_AES(pst3Ainfo->aes_state, dataout, pst3Ainfo->frame, pst3Ainfo->speech_vad);
    9fe04928:	2204c603          	lbu	a2,544(s1)
    9fe0492c:	2244a507          	flw	fa0,548(s1)
    9fe04930:	68a8                	ld	a0,80(s1)
    9fe04932:	85a2                	mv	a1,s0
    9fe04934:	5c4030ef          	jal	ra,9fe07ef8 <NLP_AES>
				pst3Ainfo->st_vad = (boolean_T)pst3Ainfo->aes_state->st_vad;
    9fe04938:	68bc                	ld	a5,80(s1)
    9fe0493a:	0bc7a783          	lw	a5,188(a5)
    9fe0493e:	0cf48823          	sb	a5,208(s1)
    9fe04942:	bd15                	j	9fe04776 <audio_ssp_process+0x2b8>
				compen_DG(dataout, dataout, &pst3Ainfo->dg_obj, hopsize);
    9fe04944:	0a000693          	li	a3,160
    9fe04948:	00848613          	addi	a2,s1,8
    9fe0494c:	85a2                	mv	a1,s0
    9fe0494e:	8522                	mv	a0,s0
    9fe04950:	470000ef          	jal	ra,9fe04dc0 <compen_DG>
    9fe04954:	bd25                	j	9fe0478c <audio_ssp_process+0x2ce>
					NR(mic_in,
    9fe04956:	2284a507          	flw	fa0,552(s1)
						pst3Ainfo->ne_float_out);
    9fe0495a:	6705                	lui	a4,0x1
    9fe0495c:	c3070713          	addi	a4,a4,-976 # c30 <_EL1_STACK_SIZE+0x430>
					NR(mic_in,
    9fe04960:	9726                	add	a4,a4,s1
    9fe04962:	22048693          	addi	a3,s1,544
    9fe04966:	22448593          	addi	a1,s1,548
    9fe0496a:	854a                	mv	a0,s2
    9fe0496c:	58b010ef          	jal	ra,9fe066f6 <NR>
    9fe04970:	b341                	j	9fe046f0 <audio_ssp_process+0x232>
		printf("[error]audio_ssp_process parameter len must be 160 frames.\n");
    9fe04972:	0000d517          	auipc	a0,0xd
    9fe04976:	a2650513          	addi	a0,a0,-1498 # 9fe11398 <__func__.3+0x350>
    9fe0497a:	61a070ef          	jal	ra,9fe0bf94 <printf>
		return -1;
    9fe0497e:	557d                	li	a0,-1
    9fe04980:	b115                	j	9fe045a4 <audio_ssp_process+0xe6>
		printf("[error]audio_ssp_process error params.\n");
    9fe04982:	0000d517          	auipc	a0,0xd
    9fe04986:	9ee50513          	addi	a0,a0,-1554 # 9fe11370 <__func__.3+0x328>
    9fe0498a:	60a070ef          	jal	ra,9fe0bf94 <printf>
		return -1;
    9fe0498e:	557d                	li	a0,-1
    9fe04990:	b911                	j	9fe045a4 <audio_ssp_process+0xe6>
		printf("[error]audio_ssp_process error.\n");
    9fe04992:	0000d517          	auipc	a0,0xd
    9fe04996:	9b650513          	addi	a0,a0,-1610 # 9fe11348 <__func__.3+0x300>
    9fe0499a:	5fa070ef          	jal	ra,9fe0bf94 <printf>
		return -1;
    9fe0499e:	557d                	li	a0,-1
    9fe049a0:	b111                	j	9fe045a4 <audio_ssp_process+0xe6>

000000009fe049a2 <audio_ssp_deinit>:


int audio_ssp_deinit(void *handle)
{
    9fe049a2:	7179                	addi	sp,sp,-48
    9fe049a4:	f406                	sd	ra,40(sp)
    9fe049a6:	f022                	sd	s0,32(sp)
    9fe049a8:	ec26                	sd	s1,24(sp)
    9fe049aa:	e84a                	sd	s2,16(sp)
    9fe049ac:	e44e                	sd	s3,8(sp)
    9fe049ae:	e052                	sd	s4,0(sp)
	struct st3AInfo *pst3Ainfo = (struct st3AInfo *)handle;

	if (!pst3Ainfo) {
    9fe049b0:	c545                	beqz	a0,9fe04a58 <audio_ssp_deinit+0xb6>
		LOG_ERROR("audio_ssp_deinit NULL handle\n");
		return -1;
	}
	short cond1, cond2, cond3, cond4, cond6;

	if (!pst3Ainfo->bInitOk) {
    9fe049b2:	6785                	lui	a5,0x1
    9fe049b4:	97aa                	add	a5,a5,a0
    9fe049b6:	5798                	lw	a4,40(a5)
    9fe049b8:	842a                	mv	s0,a0
    9fe049ba:	cb3d                	beqz	a4,9fe04a30 <audio_ssp_deinit+0x8e>
		LOG_ERROR("audio_ssp_deinit not init\n");
		return -1;
	}
	pst3Ainfo->bInitOk = 0;
    9fe049bc:	0207a423          	sw	zero,40(a5) # 1028 <_EL1_STACK_SIZE+0x828>
	cond1 = pst3Ainfo->para_obj.para_fun_config & LP_AEC_ENABLE;
    9fe049c0:	06651783          	lh	a5,102(a0)
	cond2 = pst3Ainfo->para_obj.para_fun_config & NLP_AES_ENABLE;
	cond3 = pst3Ainfo->para_obj.para_fun_config & NR_ENABLE;
	cond4 = pst3Ainfo->para_obj.para_fun_config & AGC_ENABLE;
	cond6 = pst3Ainfo->para_obj.para_fun_config & DELAY_ENABLE;

	if (cond1 | cond2) {
    9fe049c4:	0037f713          	andi	a4,a5,3
	cond2 = pst3Ainfo->para_obj.para_fun_config & NLP_AES_ENABLE;
    9fe049c8:	0027f993          	andi	s3,a5,2
	cond3 = pst3Ainfo->para_obj.para_fun_config & NR_ENABLE;
    9fe049cc:	0047fa13          	andi	s4,a5,4
	cond4 = pst3Ainfo->para_obj.para_fun_config & AGC_ENABLE;
    9fe049d0:	0087f913          	andi	s2,a5,8
	cond6 = pst3Ainfo->para_obj.para_fun_config & DELAY_ENABLE;
    9fe049d4:	0807f493          	andi	s1,a5,128
	if (cond1 | cond2) {
    9fe049d8:	e731                	bnez	a4,9fe04a24 <audio_ssp_deinit+0x82>
		LP_AEC_free(pst3Ainfo->aec_state);
	}
	if (cond2) {
    9fe049da:	00098763          	beqz	s3,9fe049e8 <audio_ssp_deinit+0x46>
		if (pst3Ainfo->aec_state != NULL)
    9fe049de:	643c                	ld	a5,72(s0)
    9fe049e0:	c781                	beqz	a5,9fe049e8 <audio_ssp_deinit+0x46>
			NLP_AES_free(pst3Ainfo->aes_state);
    9fe049e2:	6828                	ld	a0,80(s0)
    9fe049e4:	166030ef          	jal	ra,9fe07b4a <NLP_AES_free>
	}
	if (cond3 | (cond4 && pst3Ainfo->para_obj.para_agc_vad_ena)) {
    9fe049e8:	02090763          	beqz	s2,9fe04a16 <audio_ssp_deinit+0x74>
    9fe049ec:	07e44783          	lbu	a5,126(s0)
    9fe049f0:	c39d                	beqz	a5,9fe04a16 <audio_ssp_deinit+0x74>
		if (pst3Ainfo->nr_state)
    9fe049f2:	6068                	ld	a0,192(s0)
    9fe049f4:	c119                	beqz	a0,9fe049fa <audio_ssp_deinit+0x58>
			NR_free(pst3Ainfo->nr_state);
    9fe049f6:	5c3020ef          	jal	ra,9fe077b8 <NR_free>
	}
	if (cond6) {
    9fe049fa:	e08d                	bnez	s1,9fe04a1c <audio_ssp_deinit+0x7a>
		delay_free(pst3Ainfo->delay_state);
	}
#ifndef PLATFORM_RTOS
	free(pst3Ainfo);
#else
	vPortFree(pst3Ainfo);
    9fe049fc:	8522                	mv	a0,s0
    9fe049fe:	4df090ef          	jal	ra,9fe0e6dc <vPortFree>
#endif
	//pst3Ainfo = NULL;
	return 0;
    9fe04a02:	4401                	li	s0,0
}
    9fe04a04:	70a2                	ld	ra,40(sp)
    9fe04a06:	8522                	mv	a0,s0
    9fe04a08:	7402                	ld	s0,32(sp)
    9fe04a0a:	64e2                	ld	s1,24(sp)
    9fe04a0c:	6942                	ld	s2,16(sp)
    9fe04a0e:	69a2                	ld	s3,8(sp)
    9fe04a10:	6a02                	ld	s4,0(sp)
    9fe04a12:	6145                	addi	sp,sp,48
    9fe04a14:	8082                	ret
	if (cond3 | (cond4 && pst3Ainfo->para_obj.para_agc_vad_ena)) {
    9fe04a16:	fc0a1ee3          	bnez	s4,9fe049f2 <audio_ssp_deinit+0x50>
	if (cond6) {
    9fe04a1a:	d0ed                	beqz	s1,9fe049fc <audio_ssp_deinit+0x5a>
		delay_free(pst3Ainfo->delay_state);
    9fe04a1c:	6008                	ld	a0,0(s0)
    9fe04a1e:	256000ef          	jal	ra,9fe04c74 <delay_free>
    9fe04a22:	bfe9                	j	9fe049fc <audio_ssp_deinit+0x5a>
		LP_AEC_free(pst3Ainfo->aec_state);
    9fe04a24:	6528                	ld	a0,72(a0)
    9fe04a26:	29d000ef          	jal	ra,9fe054c2 <LP_AEC_free>
	if (cond2) {
    9fe04a2a:	fa098fe3          	beqz	s3,9fe049e8 <audio_ssp_deinit+0x46>
    9fe04a2e:	bf45                	j	9fe049de <audio_ssp_deinit+0x3c>
		LOG_ERROR("audio_ssp_deinit not init\n");
    9fe04a30:	0000e797          	auipc	a5,0xe
    9fe04a34:	7507a783          	lw	a5,1872(a5) # 9fe13180 <cviaud_dbg>
		return -1;
    9fe04a38:	547d                	li	s0,-1
		LOG_ERROR("audio_ssp_deinit not init\n");
    9fe04a3a:	fcf055e3          	blez	a5,9fe04a04 <audio_ssp_deinit+0x62>
    9fe04a3e:	21700613          	li	a2,535
    9fe04a42:	0000d597          	auipc	a1,0xd
    9fe04a46:	a2658593          	addi	a1,a1,-1498 # 9fe11468 <__func__.3>
    9fe04a4a:	0000d517          	auipc	a0,0xd
    9fe04a4e:	9ee50513          	addi	a0,a0,-1554 # 9fe11438 <__func__.3+0x3f0>
    9fe04a52:	542070ef          	jal	ra,9fe0bf94 <printf>
    9fe04a56:	b77d                	j	9fe04a04 <audio_ssp_deinit+0x62>
		LOG_ERROR("audio_ssp_deinit NULL handle\n");
    9fe04a58:	0000e797          	auipc	a5,0xe
    9fe04a5c:	7287a783          	lw	a5,1832(a5) # 9fe13180 <cviaud_dbg>
		return -1;
    9fe04a60:	547d                	li	s0,-1
		LOG_ERROR("audio_ssp_deinit NULL handle\n");
    9fe04a62:	faf051e3          	blez	a5,9fe04a04 <audio_ssp_deinit+0x62>
    9fe04a66:	21100613          	li	a2,529
    9fe04a6a:	0000d597          	auipc	a1,0xd
    9fe04a6e:	9fe58593          	addi	a1,a1,-1538 # 9fe11468 <__func__.3>
    9fe04a72:	0000d517          	auipc	a0,0xd
    9fe04a76:	99650513          	addi	a0,a0,-1642 # 9fe11408 <__func__.3+0x3c0>
    9fe04a7a:	51a070ef          	jal	ra,9fe0bf94 <printf>
    9fe04a7e:	b759                	j	9fe04a04 <audio_ssp_deinit+0x62>

000000009fe04a80 <DC_remover_init>:
void DC_remover_init(dcfilter_struct* dc_obj, float Fs)
{
   int i;
   int sampling_rate;

   sampling_rate = (int)Fs;
    9fe04a80:	c00517d3          	fcvt.w.s	a5,fa0,rtz

   if (sampling_rate == 8000)
    9fe04a84:	6709                	lui	a4,0x2
    9fe04a86:	f4070713          	addi	a4,a4,-192 # 1f40 <_EL1_STACK_SIZE+0x1740>
   sampling_rate = (int)Fs;
    9fe04a8a:	2781                	sext.w	a5,a5
   if (sampling_rate == 8000)
    9fe04a8c:	02e78263          	beq	a5,a4,9fe04ab0 <DC_remover_init+0x30>
      dc_obj->dcfilter_radius = .9f;
   if (sampling_rate == 16000)
    9fe04a90:	6711                	lui	a4,0x4
    9fe04a92:	e8070713          	addi	a4,a4,-384 # 3e80 <_EL1_STACK_SIZE+0x3680>
    9fe04a96:	00e79863          	bne	a5,a4,9fe04aa6 <DC_remover_init+0x26>
      dc_obj->dcfilter_radius = .982f;
    9fe04a9a:	0000d797          	auipc	a5,0xd
    9fe04a9e:	7aa7a787          	flw	fa5,1962(a5) # 9fe12244 <__func__.1+0x8c>
    9fe04aa2:	00f52027          	fsw	fa5,0(a0)
   
   for (i=0;i<2;i++)
      dc_obj->dcfilter_mem[i] = 0;
    9fe04aa6:	00052223          	sw	zero,4(a0)
    9fe04aaa:	00052423          	sw	zero,8(a0)
   
}
    9fe04aae:	8082                	ret
      dc_obj->dcfilter_radius = .9f;
    9fe04ab0:	0000d797          	auipc	a5,0xd
    9fe04ab4:	7907a787          	flw	fa5,1936(a5) # 9fe12240 <__func__.1+0x88>
    9fe04ab8:	00f52027          	fsw	fa5,0(a0)
      dc_obj->dcfilter_mem[i] = 0;
    9fe04abc:	00052223          	sw	zero,4(a0)
    9fe04ac0:	00052423          	sw	zero,8(a0)
}
    9fe04ac4:	8082                	ret

000000009fe04ac6 <DC_remover>:
{
   int i;
   float den2;
   float tmp;

   den2 = dc_obj->dcfilter_radius*dc_obj->dcfilter_radius + .7f*(1-dc_obj->dcfilter_radius)*(1-dc_obj->dcfilter_radius);
    9fe04ac6:	00062507          	flw	fa0,0(a2) # ffffffffffff8000 <_end+0xffffffff60138300>
{
    9fe04aca:	711d                	addi	sp,sp,-96
    9fe04acc:	b422                	fsd	fs0,40(sp)
   den2 = dc_obj->dcfilter_radius*dc_obj->dcfilter_radius + .7f*(1-dc_obj->dcfilter_radius)*(1-dc_obj->dcfilter_radius);
    9fe04ace:	0000d797          	auipc	a5,0xd
    9fe04ad2:	7427a407          	flw	fs0,1858(a5) # 9fe12210 <__func__.1+0x58>
    9fe04ad6:	08a47453          	fsub.s	fs0,fs0,fa0
    9fe04ada:	0000d797          	auipc	a5,0xd
    9fe04ade:	76e7a787          	flw	fa5,1902(a5) # 9fe12248 <__func__.1+0x90>
{
    9fe04ae2:	ec86                	sd	ra,88(sp)
    9fe04ae4:	e8a2                	sd	s0,80(sp)
    9fe04ae6:	e4a6                	sd	s1,72(sp)
   den2 = dc_obj->dcfilter_radius*dc_obj->dcfilter_radius + .7f*(1-dc_obj->dcfilter_radius)*(1-dc_obj->dcfilter_radius);
    9fe04ae8:	10f477d3          	fmul.s	fa5,fs0,fa5
{
    9fe04aec:	e0ca                	sd	s2,64(sp)
    9fe04aee:	fc4e                	sd	s3,56(sp)
    9fe04af0:	f852                	sd	s4,48(sp)
    9fe04af2:	b026                	fsd	fs1,32(sp)
   den2 = dc_obj->dcfilter_radius*dc_obj->dcfilter_radius + .7f*(1-dc_obj->dcfilter_radius)*(1-dc_obj->dcfilter_radius);
    9fe04af4:	1087f453          	fmul.s	fs0,fa5,fs0
{
    9fe04af8:	ac4a                	fsd	fs2,24(sp)
    9fe04afa:	a84e                	fsd	fs3,16(sp)
    9fe04afc:	a452                	fsd	fs4,8(sp)
   den2 = dc_obj->dcfilter_radius*dc_obj->dcfilter_radius + .7f*(1-dc_obj->dcfilter_radius)*(1-dc_obj->dcfilter_radius);
    9fe04afe:	40a57443          	fmadd.s	fs0,fa0,fa0,fs0
 
   for (i=0;i<frame_size;i++) {
    9fe04b02:	0ad05863          	blez	a3,9fe04bb2 <DC_remover+0xec>
    9fe04b06:	fff6899b          	addiw	s3,a3,-1
    9fe04b0a:	02099793          	slli	a5,s3,0x20
    9fe04b0e:	01f7d993          	srli	s3,a5,0x1f
      float vin = in[i];
      float vout = dc_obj->dcfilter_mem[0] + vin;
      dc_obj->dcfilter_mem[0] = dc_obj->dcfilter_mem[1] + 2*(-vin + dc_obj->dcfilter_radius*vout);  /* history state */
      dc_obj->dcfilter_mem[1] = vin - den2 * vout;  /* history state */
      tmp = dc_obj->dcfilter_radius * vout;
      out[i] = (short)WORD2INT(tmp);
    9fe04b12:	6a21                	lui	s4,0x8
    9fe04b14:	00250793          	addi	a5,a0,2
    9fe04b18:	99be                	add	s3,s3,a5
    9fe04b1a:	8432                	mv	s0,a2
    9fe04b1c:	84aa                	mv	s1,a0
    9fe04b1e:	892e                	mv	s2,a1
    9fe04b20:	0000d797          	auipc	a5,0xd
    9fe04b24:	72c7a907          	flw	fs2,1836(a5) # 9fe1224c <__func__.1+0x94>
    9fe04b28:	0000d797          	auipc	a5,0xd
    9fe04b2c:	7287a487          	flw	fs1,1832(a5) # 9fe12250 <__func__.1+0x98>
    9fe04b30:	0000d797          	auipc	a5,0xd
    9fe04b34:	7247aa07          	flw	fs4,1828(a5) # 9fe12254 <__func__.1+0x9c>
    9fe04b38:	1a7d                	addi	s4,s4,-1
    9fe04b3a:	0000d797          	auipc	a5,0xd
    9fe04b3e:	71e7b987          	fld	fs3,1822(a5) # 9fe12258 <__func__.1+0xa0>
    9fe04b42:	a801                	j	9fe04b52 <DC_remover+0x8c>
    9fe04b44:	00f91023          	sh	a5,0(s2)
   for (i=0;i<frame_size;i++) {
    9fe04b48:	0909                	addi	s2,s2,2
    9fe04b4a:	06998463          	beq	s3,s1,9fe04bb2 <DC_remover+0xec>
      dc_obj->dcfilter_mem[0] = dc_obj->dcfilter_mem[1] + 2*(-vin + dc_obj->dcfilter_radius*vout);  /* history state */
    9fe04b4e:	00042507          	flw	fa0,0(s0)
      float vin = in[i];
    9fe04b52:	00049783          	lh	a5,0(s1)
      float vout = dc_obj->dcfilter_mem[0] + vin;
    9fe04b56:	00442707          	flw	fa4,4(s0)
      dc_obj->dcfilter_mem[0] = dc_obj->dcfilter_mem[1] + 2*(-vin + dc_obj->dcfilter_radius*vout);  /* history state */
    9fe04b5a:	00842687          	flw	fa3,8(s0)
      float vin = in[i];
    9fe04b5e:	d007f7d3          	fcvt.s.w	fa5,a5
   for (i=0;i<frame_size;i++) {
    9fe04b62:	0489                	addi	s1,s1,2
      out[i] = (short)WORD2INT(tmp);
    9fe04b64:	77e1                	lui	a5,0xffff8
      float vout = dc_obj->dcfilter_mem[0] + vin;
    9fe04b66:	00e7f753          	fadd.s	fa4,fa5,fa4
      dc_obj->dcfilter_mem[0] = dc_obj->dcfilter_mem[1] + 2*(-vin + dc_obj->dcfilter_radius*vout);  /* history state */
    9fe04b6a:	10a77553          	fmul.s	fa0,fa4,fa0
      dc_obj->dcfilter_mem[1] = vin - den2 * vout;  /* history state */
    9fe04b6e:	78e4774b          	fnmsub.s	fa4,fs0,fa4,fa5
      dc_obj->dcfilter_mem[0] = dc_obj->dcfilter_mem[1] + 2*(-vin + dc_obj->dcfilter_radius*vout);  /* history state */
    9fe04b72:	08f577d3          	fsub.s	fa5,fa0,fa5
      out[i] = (short)WORD2INT(tmp);
    9fe04b76:	a0951753          	flt.s	a4,fa0,fs1
      dc_obj->dcfilter_mem[1] = vin - den2 * vout;  /* history state */
    9fe04b7a:	00e42427          	fsw	fa4,8(s0)
      dc_obj->dcfilter_mem[0] = dc_obj->dcfilter_mem[1] + 2*(-vin + dc_obj->dcfilter_radius*vout);  /* history state */
    9fe04b7e:	6927f7c3          	fmadd.s	fa5,fa5,fs2,fa3
    9fe04b82:	00f42227          	fsw	fa5,4(s0)
      out[i] = (short)WORD2INT(tmp);
    9fe04b86:	ff5d                	bnez	a4,9fe04b44 <DC_remover+0x7e>
    9fe04b88:	a0aa1753          	flt.s	a4,fs4,fa0
    9fe04b8c:	87d2                	mv	a5,s4
    9fe04b8e:	fb5d                	bnez	a4,9fe04b44 <DC_remover+0x7e>
    9fe04b90:	42050553          	fcvt.d.s	fa0,fa0
   for (i=0;i<frame_size;i++) {
    9fe04b94:	0909                	addi	s2,s2,2
      out[i] = (short)WORD2INT(tmp);
    9fe04b96:	03357553          	fadd.d	fa0,fa0,fs3
    9fe04b9a:	dc9fb0ef          	jal	ra,9fe00962 <floor>
    9fe04b9e:	c20517d3          	fcvt.w.d	a5,fa0,rtz
    9fe04ba2:	0107979b          	slliw	a5,a5,0x10
    9fe04ba6:	4107d79b          	sraiw	a5,a5,0x10
    9fe04baa:	fef91f23          	sh	a5,-2(s2)
   for (i=0;i<frame_size;i++) {
    9fe04bae:	fa9990e3          	bne	s3,s1,9fe04b4e <DC_remover+0x88>
   }
   
}
    9fe04bb2:	60e6                	ld	ra,88(sp)
    9fe04bb4:	6446                	ld	s0,80(sp)
    9fe04bb6:	64a6                	ld	s1,72(sp)
    9fe04bb8:	6906                	ld	s2,64(sp)
    9fe04bba:	79e2                	ld	s3,56(sp)
    9fe04bbc:	7a42                	ld	s4,48(sp)
    9fe04bbe:	3422                	fld	fs0,40(sp)
    9fe04bc0:	3482                	fld	fs1,32(sp)
    9fe04bc2:	2962                	fld	fs2,24(sp)
    9fe04bc4:	29c2                	fld	fs3,16(sp)
    9fe04bc6:	2a22                	fld	fs4,8(sp)
    9fe04bc8:	6125                	addi	sp,sp,96
    9fe04bca:	8082                	ret

000000009fe04bcc <delay_para>:
{
  ssp_para_struct *ssp_para_obj;

  /* Delay Parameter */
  ssp_para_obj = para;
  ssp_para_obj->para_delay_sample = MIN(MAX(ssp_para_obj->para_delay_sample, 1), 3000);  /* delay in sample, delay 0 sample if disable DELAY_ENABLE */
    9fe04bcc:	00455783          	lhu	a5,4(a0)
    9fe04bd0:	0107971b          	slliw	a4,a5,0x10
    9fe04bd4:	0107569b          	srliw	a3,a4,0x10
    9fe04bd8:	8736                	mv	a4,a3
    9fe04bda:	e299                	bnez	a3,9fe04be0 <delay_para+0x14>
    9fe04bdc:	4785                	li	a5,1
    9fe04bde:	4705                	li	a4,1
    9fe04be0:	6685                	lui	a3,0x1
    9fe04be2:	bb868693          	addi	a3,a3,-1096 # bb8 <_EL1_STACK_SIZE+0x3b8>
    9fe04be6:	00e6f363          	bgeu	a3,a4,9fe04bec <delay_para+0x20>
    9fe04bea:	87b6                	mv	a5,a3
    9fe04bec:	00f51223          	sh	a5,4(a0)

}
    9fe04bf0:	8082                	ret

000000009fe04bf2 <delay_init>:

EXPORT DelayState *delay_init(ssp_para_struct *para)
{
    9fe04bf2:	7179                	addi	sp,sp,-48
    9fe04bf4:	e84a                	sd	s2,16(sp)
    9fe04bf6:	892a                	mv	s2,a0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe04bf8:	02800513          	li	a0,40
    9fe04bfc:	f406                	sd	ra,40(sp)
    9fe04bfe:	f022                	sd	s0,32(sp)
    9fe04c00:	ec26                	sd	s1,24(sp)
    9fe04c02:	e44e                	sd	s3,8(sp)
    9fe04c04:	173090ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe04c08:	02800613          	li	a2,40
    9fe04c0c:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe04c0e:	84aa                	mv	s1,a0
  int i;
  ssp_para_struct *ssp_para_obj;
  DelayState *st = (DelayState *)mem_alloc(sizeof(DelayState));

  ssp_para_obj = para;
  st->size = 3001;
    9fe04c10:	6985                	lui	s3,0x1
   memset(ptr, 0, size);
    9fe04c12:	36a070ef          	jal	ra,9fe0bf7c <memset>
    9fe04c16:	bb998793          	addi	a5,s3,-1095 # bb9 <_EL1_STACK_SIZE+0x3b9>
    9fe04c1a:	00f49c23          	sh	a5,24(s1)
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe04c1e:	77298513          	addi	a0,s3,1906
    9fe04c22:	155090ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe04c26:	77298613          	addi	a2,s3,1906
    9fe04c2a:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe04c2c:	842a                	mv	s0,a0
   memset(ptr, 0, size);
    9fe04c2e:	34e070ef          	jal	ra,9fe0bf7c <memset>

  st->dly_ref_buf = (short*)mem_alloc(st->size*sizeof(short));

  for (i=0;i<st->size;i++)
    9fe04c32:	0184d783          	lhu	a5,24(s1)
  st->dly_ref_buf = (short*)mem_alloc(st->size*sizeof(short));
    9fe04c36:	f080                	sd	s0,32(s1)
  for (i=0;i<st->size;i++)
    9fe04c38:	cf99                	beqz	a5,9fe04c56 <delay_init+0x64>
    9fe04c3a:	4781                	li	a5,0
    st->dly_ref_buf[i] = 0;
    9fe04c3c:	00179713          	slli	a4,a5,0x1
    9fe04c40:	943a                	add	s0,s0,a4
    9fe04c42:	00041023          	sh	zero,0(s0)
  for (i=0;i<st->size;i++)
    9fe04c46:	0184d683          	lhu	a3,24(s1)
    9fe04c4a:	0785                	addi	a5,a5,1
    9fe04c4c:	0007871b          	sext.w	a4,a5
    st->dly_ref_buf[i] = 0;
    9fe04c50:	7080                	ld	s0,32(s1)
  for (i=0;i<st->size;i++)
    9fe04c52:	fed745e3          	blt	a4,a3,9fe04c3c <delay_init+0x4a>

  st->addr = st->dly_ref_buf;
    9fe04c56:	e080                	sd	s0,0(s1)
  st->rdptr = st->addr;
    9fe04c58:	e480                	sd	s0,8(s1)
  st->wrptr = st->addr + ssp_para_obj->para_delay_sample;
    9fe04c5a:	00495783          	lhu	a5,4(s2)

  return st;

}
    9fe04c5e:	8526                	mv	a0,s1
  st->wrptr = st->addr + ssp_para_obj->para_delay_sample;
    9fe04c60:	0786                	slli	a5,a5,0x1
    9fe04c62:	943e                	add	s0,s0,a5
    9fe04c64:	e880                	sd	s0,16(s1)
}
    9fe04c66:	70a2                	ld	ra,40(sp)
    9fe04c68:	7402                	ld	s0,32(sp)
    9fe04c6a:	64e2                	ld	s1,24(sp)
    9fe04c6c:	6942                	ld	s2,16(sp)
    9fe04c6e:	69a2                	ld	s3,8(sp)
    9fe04c70:	6145                	addi	sp,sp,48
    9fe04c72:	8082                	ret

000000009fe04c74 <delay_free>:

EXPORT void delay_free(DelayState *st)
{
    9fe04c74:	1141                	addi	sp,sp,-16
    9fe04c76:	e022                	sd	s0,0(sp)
    9fe04c78:	e406                	sd	ra,8(sp)
    9fe04c7a:	842a                	mv	s0,a0
static _inline void mem_free (void *ptr)
{
#ifndef PLATFORM_RTOS
   free(ptr);
#else
   vPortFree(ptr);
    9fe04c7c:	7108                	ld	a0,32(a0)
    9fe04c7e:	25f090ef          	jal	ra,9fe0e6dc <vPortFree>
    9fe04c82:	8522                	mv	a0,s0
  mem_free(st->dly_ref_buf);
  mem_free(st);

}
    9fe04c84:	6402                	ld	s0,0(sp)
    9fe04c86:	60a2                	ld	ra,8(sp)
    9fe04c88:	0141                	addi	sp,sp,16
    9fe04c8a:	2530906f          	j	9fe0e6dc <vPortFree>

000000009fe04c8e <delay_ref>:
  DelayState *st;
  short *ptr1, *ptr2, *ptr3;

  st = delay_state;

  ptr1 = st->wrptr;  /* write pointer in circular butter */
    9fe04c8e:	6994                	ld	a3,16(a1)
  ptr2 = pin;
  ptr3 = st->rdptr;  /* read pointer in circular butter */
    9fe04c90:	6598                	ld	a4,8(a1)

  for (i=0; i<frame_size; i++) {
    9fe04c92:	04c05463          	blez	a2,9fe04cda <delay_ref+0x4c>
    9fe04c96:	0606                	slli	a2,a2,0x1
    9fe04c98:	00c508b3          	add	a7,a0,a2
    *ptr1++ = *ptr2;  /* read from input buffer and write to circular buffer */
    9fe04c9c:	00051783          	lh	a5,0(a0)
    9fe04ca0:	00268813          	addi	a6,a3,2
    if(ptr1 >= (st->addr + st->size))
      ptr1 = st->addr;
    *ptr2++ = *ptr3++;  /* read from circular buffer and write to input buffer */
    9fe04ca4:	0509                	addi	a0,a0,2
    *ptr1++ = *ptr2;  /* read from input buffer and write to circular buffer */
    9fe04ca6:	00f69023          	sh	a5,0(a3)
    if(ptr1 >= (st->addr + st->size))
    9fe04caa:	0185d783          	lhu	a5,24(a1)
    9fe04cae:	6194                	ld	a3,0(a1)
    *ptr2++ = *ptr3++;  /* read from circular buffer and write to input buffer */
    9fe04cb0:	00270613          	addi	a2,a4,2
    if(ptr1 >= (st->addr + st->size))
    9fe04cb4:	0786                	slli	a5,a5,0x1
    9fe04cb6:	97b6                	add	a5,a5,a3
    9fe04cb8:	00f87363          	bgeu	a6,a5,9fe04cbe <delay_ref+0x30>
    9fe04cbc:	86c2                	mv	a3,a6
    *ptr2++ = *ptr3++;  /* read from circular buffer and write to input buffer */
    9fe04cbe:	00071783          	lh	a5,0(a4)
    9fe04cc2:	fef51f23          	sh	a5,-2(a0)
    if(ptr3 >= (st->addr + st->size))
    9fe04cc6:	0185d783          	lhu	a5,24(a1)
    9fe04cca:	6198                	ld	a4,0(a1)
    9fe04ccc:	0786                	slli	a5,a5,0x1
    9fe04cce:	97ba                	add	a5,a5,a4
    9fe04cd0:	00f67363          	bgeu	a2,a5,9fe04cd6 <delay_ref+0x48>
    9fe04cd4:	8732                	mv	a4,a2
  for (i=0; i<frame_size; i++) {
    9fe04cd6:	fd1513e3          	bne	a0,a7,9fe04c9c <delay_ref+0xe>
      ptr3 = st->addr;
  }

  st->wrptr = ptr1;  /* restore for next frame */
    9fe04cda:	e994                	sd	a3,16(a1)
  st->rdptr = ptr3;  /* restore for next frame */
    9fe04cdc:	e598                	sd	a4,8(a1)

}
    9fe04cde:	8082                	ret

000000009fe04ce0 <DG_para>:
  static float dg_boost_tab[12] = {1.122018F, 1.258925F, 1.412538F, 1.584893F, 1.778279F, 1.995262F,
                                                                  2.238721F, 2.511886F, 2.818383F, 3.162278F, 3.548134F, 3.981072F};

  /* DG Parameter */
  ssp_para_obj = para;
  dg_obj = dg;
    9fe04ce0:	0065d703          	lhu	a4,6(a1)
  ssp_para_obj->para_dg_target = MIN(MAX(ssp_para_obj->para_dg_target, 1), 12);  /* target 0dB if disable DG_ENABLE */
    9fe04ce4:	0107179b          	slliw	a5,a4,0x10
    9fe04ce8:	0107d69b          	srliw	a3,a5,0x10
    9fe04cec:	87b6                	mv	a5,a3
    9fe04cee:	e299                	bnez	a3,9fe04cf4 <DG_para+0x14>
    9fe04cf0:	4705                	li	a4,1
    9fe04cf2:	4785                	li	a5,1
    9fe04cf4:	46b1                	li	a3,12
    9fe04cf6:	00f6f363          	bgeu	a3,a5,9fe04cfc <DG_para+0x1c>
    9fe04cfa:	4731                	li	a4,12
    9fe04cfc:	03071793          	slli	a5,a4,0x30
    9fe04d00:	93c1                	srli	a5,a5,0x30
  dg_obj->cut_gain = dg_cut_tab[ssp_para_obj->para_dg_target-1];
    9fe04d02:	37fd                	addiw	a5,a5,-1
    9fe04d04:	078a                	slli	a5,a5,0x2
    9fe04d06:	0000c697          	auipc	a3,0xc
    9fe04d0a:	7ba68693          	addi	a3,a3,1978 # 9fe114c0 <dg_cut_tab.1>
    9fe04d0e:	97b6                	add	a5,a5,a3
    9fe04d10:	0007a787          	flw	fa5,0(a5) # ffffffffffff8000 <_end+0xffffffff60138300>
  ssp_para_obj->para_dg_target = MIN(MAX(ssp_para_obj->para_dg_target, 1), 12);  /* target 0dB if disable DG_ENABLE */
    9fe04d14:	00e59323          	sh	a4,6(a1)
  dg_obj->boost_gain = dg_boost_tab[ssp_para_obj->para_dg_target-1];
    9fe04d18:	0000c717          	auipc	a4,0xc
    9fe04d1c:	77870713          	addi	a4,a4,1912 # 9fe11490 <dg_boost_tab.0>
  dg_obj->cut_gain = dg_cut_tab[ssp_para_obj->para_dg_target-1];
    9fe04d20:	00f52027          	fsw	fa5,0(a0)
  dg_obj->boost_gain = dg_boost_tab[ssp_para_obj->para_dg_target-1];
    9fe04d24:	0065d783          	lhu	a5,6(a1)
    9fe04d28:	37fd                	addiw	a5,a5,-1
    9fe04d2a:	078a                	slli	a5,a5,0x2
    9fe04d2c:	97ba                	add	a5,a5,a4
    9fe04d2e:	0007a787          	flw	fa5,0(a5)
    9fe04d32:	00f52227          	fsw	fa5,4(a0)

}
    9fe04d36:	8082                	ret

000000009fe04d38 <apply_DG>:
  int i;
  float tmp;
  dg_struct *dg_obj;

  dg_obj = dg;
  for (i=0;i<frame_size;i++) {
    9fe04d38:	08d05363          	blez	a3,9fe04dbe <apply_DG+0x86>
    9fe04d3c:	fff6879b          	addiw	a5,a3,-1
    9fe04d40:	02079713          	slli	a4,a5,0x20
    9fe04d44:	01f75793          	srli	a5,a4,0x1f
    9fe04d48:	00258713          	addi	a4,a1,2
    9fe04d4c:	97ba                	add	a5,a5,a4
    tmp = (float)(pin[i])/(float)(32768.0F)*dg_obj->cut_gain;
    if (tmp < 0.0F) {
    9fe04d4e:	f0000653          	fmv.w.x	fa2,zero
    9fe04d52:	0000d717          	auipc	a4,0xd
    9fe04d56:	4ce72687          	flw	fa3,1230(a4) # 9fe12220 <__func__.1+0x68>
      pout[i] = ROUND_NEG(tmp*(int)(32768));
    } else {
      pout[i] = ROUND_POS(tmp*(short)(32767));
    9fe04d5a:	0000d717          	auipc	a4,0xd
    9fe04d5e:	4d272507          	flw	fa0,1234(a4) # 9fe1222c <__func__.1+0x74>
    9fe04d62:	0000d717          	auipc	a4,0xd
    9fe04d66:	4ce72587          	flw	fa1,1230(a4) # 9fe12230 <__func__.1+0x78>
      pout[i] = ROUND_NEG(tmp*(int)(32768));
    9fe04d6a:	0000d717          	auipc	a4,0xd
    9fe04d6e:	4ca72087          	flw	ft1,1226(a4) # 9fe12234 <__func__.1+0x7c>
    9fe04d72:	0000d717          	auipc	a4,0xd
    9fe04d76:	4c672007          	flw	ft0,1222(a4) # 9fe12238 <__func__.1+0x80>
    9fe04d7a:	a819                	j	9fe04d90 <apply_DG+0x58>
      pout[i] = ROUND_POS(tmp*(short)(32767));
    9fe04d7c:	58a7f7c3          	fmadd.s	fa5,fa5,fa0,fa1
  for (i=0;i<frame_size;i++) {
    9fe04d80:	0589                	addi	a1,a1,2
    9fe04d82:	0509                	addi	a0,a0,2
      pout[i] = ROUND_POS(tmp*(short)(32767));
    9fe04d84:	c0079753          	fcvt.w.s	a4,fa5,rtz
    9fe04d88:	fee59f23          	sh	a4,-2(a1)
  for (i=0;i<frame_size;i++) {
    9fe04d8c:	02f58963          	beq	a1,a5,9fe04dbe <apply_DG+0x86>
    tmp = (float)(pin[i])/(float)(32768.0F)*dg_obj->cut_gain;
    9fe04d90:	00051703          	lh	a4,0(a0)
    9fe04d94:	00062707          	flw	fa4,0(a2)
    9fe04d98:	d00777d3          	fcvt.s.w	fa5,a4
    9fe04d9c:	10d7f7d3          	fmul.s	fa5,fa5,fa3
    9fe04da0:	10e7f7d3          	fmul.s	fa5,fa5,fa4
    if (tmp < 0.0F) {
    9fe04da4:	a0c79753          	flt.s	a4,fa5,fa2
    9fe04da8:	db71                	beqz	a4,9fe04d7c <apply_DG+0x44>
      pout[i] = ROUND_NEG(tmp*(int)(32768));
    9fe04daa:	0017f7c3          	fmadd.s	fa5,fa5,ft1,ft0
  for (i=0;i<frame_size;i++) {
    9fe04dae:	0589                	addi	a1,a1,2
    9fe04db0:	0509                	addi	a0,a0,2
      pout[i] = ROUND_NEG(tmp*(int)(32768));
    9fe04db2:	c0079753          	fcvt.w.s	a4,fa5,rtz
    9fe04db6:	fee59f23          	sh	a4,-2(a1)
  for (i=0;i<frame_size;i++) {
    9fe04dba:	fcf59be3          	bne	a1,a5,9fe04d90 <apply_DG+0x58>
    }
  }

}
    9fe04dbe:	8082                	ret

000000009fe04dc0 <compen_DG>:
  int i;
  float tmp;
  dg_struct *dg_obj;

  dg_obj = dg;
  for (i=0;i<frame_size;i++) {
    9fe04dc0:	0ad05d63          	blez	a3,9fe04e7a <compen_DG+0xba>
    9fe04dc4:	fff6871b          	addiw	a4,a3,-1
    9fe04dc8:	02071793          	slli	a5,a4,0x20
    9fe04dcc:	01f7d713          	srli	a4,a5,0x1f
    9fe04dd0:	6821                	lui	a6,0x8
    9fe04dd2:	00258793          	addi	a5,a1,2
    9fe04dd6:	973e                	add	a4,a4,a5
    tmp = (float)(pin[i])/(float)(32768.0F)*dg_obj->boost_gain;
    tmp = MIN(MAX(tmp, -1.0F), 1.0F);
    if (tmp < 0.0F) {
    9fe04dd8:	f0000553          	fmv.w.x	fa0,zero
    9fe04ddc:	0000d797          	auipc	a5,0xd
    9fe04de0:	4447a607          	flw	fa2,1092(a5) # 9fe12220 <__func__.1+0x68>
    9fe04de4:	0000d797          	auipc	a5,0xd
    9fe04de8:	4447a687          	flw	fa3,1092(a5) # 9fe12228 <__func__.1+0x70>
    tmp = MIN(MAX(tmp, -1.0F), 1.0F);
    9fe04dec:	0000d797          	auipc	a5,0xd
    9fe04df0:	4247a587          	flw	fa1,1060(a5) # 9fe12210 <__func__.1+0x58>
    9fe04df4:	187d                	addi	a6,a6,-1
      pout[i] = ROUND_NEG(tmp*(int)(32768));
    9fe04df6:	0000d797          	auipc	a5,0xd
    9fe04dfa:	43e7a187          	flw	ft3,1086(a5) # 9fe12234 <__func__.1+0x7c>
    9fe04dfe:	0000d797          	auipc	a5,0xd
    9fe04e02:	43a7a107          	flw	ft2,1082(a5) # 9fe12238 <__func__.1+0x80>
    } else {
      pout[i] = ROUND_POS(tmp*(short)(32767));
    9fe04e06:	0000d797          	auipc	a5,0xd
    9fe04e0a:	4267a087          	flw	ft1,1062(a5) # 9fe1222c <__func__.1+0x74>
    9fe04e0e:	0000d797          	auipc	a5,0xd
    9fe04e12:	4227a007          	flw	ft0,1058(a5) # 9fe12230 <__func__.1+0x78>
    9fe04e16:	a839                	j	9fe04e34 <compen_DG+0x74>
    9fe04e18:	0017f7c3          	fmadd.s	fa5,fa5,ft1,ft0
    9fe04e1c:	c00796d3          	fcvt.w.s	a3,fa5,rtz
    9fe04e20:	0106969b          	slliw	a3,a3,0x10
    9fe04e24:	4106d69b          	sraiw	a3,a3,0x10
    9fe04e28:	00d59023          	sh	a3,0(a1)
  for (i=0;i<frame_size;i++) {
    9fe04e2c:	0589                	addi	a1,a1,2
    9fe04e2e:	0509                	addi	a0,a0,2
    9fe04e30:	04b70563          	beq	a4,a1,9fe04e7a <compen_DG+0xba>
    tmp = (float)(pin[i])/(float)(32768.0F)*dg_obj->boost_gain;
    9fe04e34:	00051783          	lh	a5,0(a0)
    9fe04e38:	00462707          	flw	fa4,4(a2)
    9fe04e3c:	76e1                	lui	a3,0xffff8
    9fe04e3e:	d007f7d3          	fcvt.s.w	fa5,a5
    9fe04e42:	10c7f7d3          	fmul.s	fa5,fa5,fa2
    9fe04e46:	10e7f7d3          	fmul.s	fa5,fa5,fa4
    tmp = MIN(MAX(tmp, -1.0F), 1.0F);
    9fe04e4a:	a0d797d3          	flt.s	a5,fa5,fa3
    9fe04e4e:	ffe9                	bnez	a5,9fe04e28 <compen_DG+0x68>
    9fe04e50:	a0f597d3          	flt.s	a5,fa1,fa5
    9fe04e54:	86c2                	mv	a3,a6
    9fe04e56:	fbe9                	bnez	a5,9fe04e28 <compen_DG+0x68>
    if (tmp < 0.0F) {
    9fe04e58:	a0a797d3          	flt.s	a5,fa5,fa0
    9fe04e5c:	dfd5                	beqz	a5,9fe04e18 <compen_DG+0x58>
      pout[i] = ROUND_NEG(tmp*(int)(32768));
    9fe04e5e:	1037f7c3          	fmadd.s	fa5,fa5,ft3,ft2
  for (i=0;i<frame_size;i++) {
    9fe04e62:	0589                	addi	a1,a1,2
    9fe04e64:	0509                	addi	a0,a0,2
      pout[i] = ROUND_NEG(tmp*(int)(32768));
    9fe04e66:	c00796d3          	fcvt.w.s	a3,fa5,rtz
    9fe04e6a:	0106969b          	slliw	a3,a3,0x10
    9fe04e6e:	4106d69b          	sraiw	a3,a3,0x10
      pout[i] = ROUND_POS(tmp*(short)(32767));
    9fe04e72:	fed59f23          	sh	a3,-2(a1)
  for (i=0;i<frame_size;i++) {
    9fe04e76:	fab71fe3          	bne	a4,a1,9fe04e34 <compen_DG+0x74>
    }
  }

}
    9fe04e7a:	8082                	ret

000000009fe04e7c <LP_AEC_para>:

   /* LP AEC Parameters */
   para_obj = para;

   tmp = MIN(MAX(para_obj->para_aec_init_filter_len, 1), 13);    /* 8kHz: [20ms, 260ms], each step 20ms; 16kHz: [10ms, 130ms], each step 10ms */
   *init_filter_length = tmp;
    9fe04e7c:	00855783          	lhu	a5,8(a0)
    9fe04e80:	0107971b          	slliw	a4,a5,0x10
    9fe04e84:	0107569b          	srliw	a3,a4,0x10
    9fe04e88:	8736                	mv	a4,a3
    9fe04e8a:	e299                	bnez	a3,9fe04e90 <LP_AEC_para+0x14>
    9fe04e8c:	4785                	li	a5,1
    9fe04e8e:	4705                	li	a4,1
    9fe04e90:	46b5                	li	a3,13
    9fe04e92:	00e6f363          	bgeu	a3,a4,9fe04e98 <LP_AEC_para+0x1c>
    9fe04e96:	47b5                	li	a5,13
    9fe04e98:	00f61023          	sh	a5,0(a2)

   tmp = MIN(MAX(para_obj->para_aec_filter_len, 1), 13);    /* 8kHz: [20ms, 260ms], each step 20ms; 16kHz: [10ms, 130ms], each step 10ms */
   *filter_length = tmp;
    9fe04e9c:	00a55783          	lhu	a5,10(a0)
    9fe04ea0:	0107971b          	slliw	a4,a5,0x10
    9fe04ea4:	0107569b          	srliw	a3,a4,0x10
    9fe04ea8:	8736                	mv	a4,a3
    9fe04eaa:	e299                	bnez	a3,9fe04eb0 <LP_AEC_para+0x34>
    9fe04eac:	4785                	li	a5,1
    9fe04eae:	4705                	li	a4,1
    9fe04eb0:	46b5                	li	a3,13
    9fe04eb2:	00e6f363          	bgeu	a3,a4,9fe04eb8 <LP_AEC_para+0x3c>
    9fe04eb6:	47b5                	li	a5,13
    9fe04eb8:	00f59023          	sh	a5,0(a1)

}
    9fe04ebc:	8082                	ret

000000009fe04ebe <LP_AEC_init>:

EXPORT LinearEchoState *LP_AEC_init(int frame_size, short filter_length, short init_filter_length, float Fs)
{
    9fe04ebe:	7119                	addi	sp,sp,-128
    9fe04ec0:	e4d6                	sd	s5,72(sp)
    9fe04ec2:	8aaa                	mv	s5,a0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe04ec4:	15800513          	li	a0,344
    9fe04ec8:	fc86                	sd	ra,120(sp)
    9fe04eca:	f8a2                	sd	s0,112(sp)
    9fe04ecc:	f4a6                	sd	s1,104(sp)
    9fe04ece:	f0ca                	sd	s2,96(sp)
    9fe04ed0:	84ae                	mv	s1,a1
    9fe04ed2:	8932                	mv	s2,a2
    9fe04ed4:	ecce                	sd	s3,88(sp)
    9fe04ed6:	e8d2                	sd	s4,80(sp)
    9fe04ed8:	e0da                	sd	s6,64(sp)
    9fe04eda:	fc5e                	sd	s7,56(sp)
    9fe04edc:	f466                	sd	s9,40(sp)
    9fe04ede:	ac22                	fsd	fs0,24(sp)
    9fe04ee0:	f862                	sd	s8,48(sp)
    9fe04ee2:	20a50453          	fmv.s	fs0,fa0
    9fe04ee6:	a826                	fsd	fs1,16(sp)
    9fe04ee8:	a44a                	fsd	fs2,8(sp)
    9fe04eea:	68c090ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe04eee:	15800613          	li	a2,344
    9fe04ef2:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe04ef4:	842a                	mv	s0,a0
   memset(ptr, 0, size);
    9fe04ef6:	086070ef          	jal	ra,9fe0bf7c <memset>
   st->sum_adapt = 0;
   st->saturated = 0;
   st->screwed_up = 0;

   st->sampling_rate = (int)Fs;
   st->spec_average = (float)st->frame_size/(float)st->sampling_rate;
    9fe04efa:	d00af7d3          	fcvt.s.w	fa5,s5
   st->sampling_rate = (int)Fs;
    9fe04efe:	c00417d3          	fcvt.w.s	a5,fs0,rtz
   st->beta0 = (2.0f*st->frame_size)/st->sampling_rate;
   st->beta_max = (.5f*st->frame_size)/st->sampling_rate;
    9fe04f02:	0000d717          	auipc	a4,0xd
    9fe04f06:	32e72407          	flw	fs0,814(a4) # 9fe12230 <__func__.1+0x78>
   st->beta0 = (2.0f*st->frame_size)/st->sampling_rate;
    9fe04f0a:	00f7f6d3          	fadd.s	fa3,fa5,fa5
   st->beta_max = (.5f*st->frame_size)/st->sampling_rate;
    9fe04f0e:	1087f753          	fmul.s	fa4,fa5,fs0
   st->spec_average = (float)st->frame_size/(float)st->sampling_rate;
    9fe04f12:	d007f653          	fcvt.s.w	fa2,a5
   st->ss = .35f;  // fe_smooth_coef;
    9fe04f16:	0000d717          	auipc	a4,0xd
    9fe04f1a:	34a72587          	flw	fa1,842(a4) # 9fe12260 <__func__.1+0xa8>
   st->window_size = 2*frame_size;
    9fe04f1e:	001a9b1b          	slliw	s6,s5,0x1
   st->spec_average = (float)st->frame_size/(float)st->sampling_rate;
    9fe04f22:	18c7f7d3          	fdiv.s	fa5,fa5,fa2
   st->ss = .35f;  // fe_smooth_coef;
    9fe04f26:	14b42027          	fsw	fa1,320(s0)
   st->sampling_rate = (int)Fs;
    9fe04f2a:	cc5c                	sw	a5,28(s0)
   st->leak_estimate = 0;

   st->fft_table = speech_fft_init(N);

   st->e = (float*)mem_alloc(N*sizeof(float));
    9fe04f2c:	003a9a1b          	slliw	s4,s5,0x3
   st->frame_size = frame_size;
    9fe04f30:	01542023          	sw	s5,0(s0)
   st->M = filter_length;
    9fe04f34:	c404                	sw	s1,8(s0)
   st->window_size = 2*frame_size;
    9fe04f36:	01642223          	sw	s6,4(s0)
   st->initial_filter_len = init_filter_length;
    9fe04f3a:	15241823          	sh	s2,336(s0)
   st->cancel_count = 0;
    9fe04f3e:	00042623          	sw	zero,12(s0)
   st->sum_adapt = 0;
    9fe04f42:	02042623          	sw	zero,44(s0)
   st->saturated = 0;
    9fe04f46:	00042a23          	sw	zero,20(s0)
   st->screwed_up = 0;
    9fe04f4a:	00042c23          	sw	zero,24(s0)
   st->leak_estimate = 0;
    9fe04f4e:	02042823          	sw	zero,48(s0)
   st->fft_table = speech_fft_init(N);
    9fe04f52:	855a                	mv	a0,s6
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe04f54:	000a049b          	sext.w	s1,s4
   st->Rf = (float*)mem_alloc((st->frame_size+1)*sizeof(float));
   st->Xf = (float*)mem_alloc((st->frame_size+1)*sizeof(float));
   st->Yh = (float*)mem_alloc((st->frame_size+1)*sizeof(float));
   st->Eh = (float*)mem_alloc((st->frame_size+1)*sizeof(float));

   st->X = (float*)mem_alloc((13+1)*N*sizeof(float));
    9fe04f58:	415a0a3b          	subw	s4,s4,s5
    9fe04f5c:	004a1a1b          	slliw	s4,s4,0x4
   M = st->initial_filter_len;
    9fe04f60:	0009099b          	sext.w	s3,s2
   st->beta0 = (2.0f*st->frame_size)/st->sampling_rate;
    9fe04f64:	18c6f6d3          	fdiv.s	fa3,fa3,fa2
   st->spec_average = (float)st->frame_size/(float)st->sampling_rate;
    9fe04f68:	02f42027          	fsw	fa5,32(s0)
   st->beta_max = (.5f*st->frame_size)/st->sampling_rate;
    9fe04f6c:	18c77753          	fdiv.s	fa4,fa4,fa2
   st->beta0 = (2.0f*st->frame_size)/st->sampling_rate;
    9fe04f70:	02d42227          	fsw	fa3,36(s0)
   st->beta_max = (.5f*st->frame_size)/st->sampling_rate;
    9fe04f74:	02e42427          	fsw	fa4,40(s0)
   st->fft_table = speech_fft_init(N);
    9fe04f78:	0de040ef          	jal	ra,9fe09056 <speech_fft_init>
    9fe04f7c:	fc68                	sd	a0,248(s0)
    9fe04f7e:	8526                	mv	a0,s1
    9fe04f80:	5f6090ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe04f84:	8626                	mv	a2,s1
    9fe04f86:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe04f88:	8baa                	mv	s7,a0
   memset(ptr, 0, size);
    9fe04f8a:	7f3060ef          	jal	ra,9fe0bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe04f8e:	8526                	mv	a0,s1
   st->e = (float*)mem_alloc(N*sizeof(float));
    9fe04f90:	03743c23          	sd	s7,56(s0)
    9fe04f94:	5e2090ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe04f98:	8626                	mv	a2,s1
    9fe04f9a:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe04f9c:	8caa                	mv	s9,a0
   memset(ptr, 0, size);
    9fe04f9e:	7df060ef          	jal	ra,9fe0bf7c <memset>
   st->input = (float*)mem_alloc(st->frame_size*sizeof(float));
    9fe04fa2:	00042b83          	lw	s7,0(s0)
   st->x = (float*)mem_alloc(N*sizeof(float));
    9fe04fa6:	05943023          	sd	s9,64(s0)
   st->input = (float*)mem_alloc(st->frame_size*sizeof(float));
    9fe04faa:	002b9b9b          	slliw	s7,s7,0x2
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe04fae:	855e                	mv	a0,s7
    9fe04fb0:	5c6090ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe04fb4:	865e                	mv	a2,s7
    9fe04fb6:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe04fb8:	8baa                	mv	s7,a0
   memset(ptr, 0, size);
    9fe04fba:	7c3060ef          	jal	ra,9fe0bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe04fbe:	8526                	mv	a0,s1
    9fe04fc0:	05743823          	sd	s7,80(s0)
    9fe04fc4:	5b2090ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe04fc8:	8626                	mv	a2,s1
    9fe04fca:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe04fcc:	8baa                	mv	s7,a0
   memset(ptr, 0, size);
    9fe04fce:	7af060ef          	jal	ra,9fe0bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe04fd2:	8526                	mv	a0,s1
   st->y = (float*)mem_alloc(N*sizeof(float));
    9fe04fd4:	05743c23          	sd	s7,88(s0)
    9fe04fd8:	59e090ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe04fdc:	8626                	mv	a2,s1
    9fe04fde:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe04fe0:	8caa                	mv	s9,a0
   memset(ptr, 0, size);
    9fe04fe2:	79b060ef          	jal	ra,9fe0bf7c <memset>
   st->Yf = (float*)mem_alloc((st->frame_size+1)*sizeof(float));
    9fe04fe6:	00042b83          	lw	s7,0(s0)
   st->last_y = (float*)mem_alloc(N*sizeof(float));
    9fe04fea:	07943023          	sd	s9,96(s0)
   st->Yf = (float*)mem_alloc((st->frame_size+1)*sizeof(float));
    9fe04fee:	2b85                	addiw	s7,s7,1
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe04ff0:	002b9b9b          	slliw	s7,s7,0x2
    9fe04ff4:	855e                	mv	a0,s7
    9fe04ff6:	580090ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe04ffa:	865e                	mv	a2,s7
    9fe04ffc:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe04ffe:	8caa                	mv	s9,a0
   memset(ptr, 0, size);
    9fe05000:	77d060ef          	jal	ra,9fe0bf7c <memset>
   st->Rf = (float*)mem_alloc((st->frame_size+1)*sizeof(float));
    9fe05004:	00042b83          	lw	s7,0(s0)
   st->Yf = (float*)mem_alloc((st->frame_size+1)*sizeof(float));
    9fe05008:	0d943023          	sd	s9,192(s0)
   st->Rf = (float*)mem_alloc((st->frame_size+1)*sizeof(float));
    9fe0500c:	2b85                	addiw	s7,s7,1
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe0500e:	002b9b9b          	slliw	s7,s7,0x2
    9fe05012:	855e                	mv	a0,s7
    9fe05014:	562090ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe05018:	865e                	mv	a2,s7
    9fe0501a:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe0501c:	8caa                	mv	s9,a0
   memset(ptr, 0, size);
    9fe0501e:	75f060ef          	jal	ra,9fe0bf7c <memset>
   st->Xf = (float*)mem_alloc((st->frame_size+1)*sizeof(float));
    9fe05022:	00042b83          	lw	s7,0(s0)
   st->Rf = (float*)mem_alloc((st->frame_size+1)*sizeof(float));
    9fe05026:	0b943c23          	sd	s9,184(s0)
   st->Xf = (float*)mem_alloc((st->frame_size+1)*sizeof(float));
    9fe0502a:	2b85                	addiw	s7,s7,1
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe0502c:	002b9b9b          	slliw	s7,s7,0x2
    9fe05030:	855e                	mv	a0,s7
    9fe05032:	544090ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe05036:	865e                	mv	a2,s7
    9fe05038:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe0503a:	8caa                	mv	s9,a0
   memset(ptr, 0, size);
    9fe0503c:	741060ef          	jal	ra,9fe0bf7c <memset>
   st->Yh = (float*)mem_alloc((st->frame_size+1)*sizeof(float));
    9fe05040:	00042b83          	lw	s7,0(s0)
   st->Xf = (float*)mem_alloc((st->frame_size+1)*sizeof(float));
    9fe05044:	0d943423          	sd	s9,200(s0)
   st->Yh = (float*)mem_alloc((st->frame_size+1)*sizeof(float));
    9fe05048:	2b85                	addiw	s7,s7,1
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe0504a:	002b9b9b          	slliw	s7,s7,0x2
    9fe0504e:	855e                	mv	a0,s7
    9fe05050:	526090ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe05054:	865e                	mv	a2,s7
    9fe05056:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe05058:	8caa                	mv	s9,a0
   memset(ptr, 0, size);
    9fe0505a:	723060ef          	jal	ra,9fe0bf7c <memset>
   st->Eh = (float*)mem_alloc((st->frame_size+1)*sizeof(float));
    9fe0505e:	00042b83          	lw	s7,0(s0)
   st->Yh = (float*)mem_alloc((st->frame_size+1)*sizeof(float));
    9fe05062:	0d943c23          	sd	s9,216(s0)
   st->Eh = (float*)mem_alloc((st->frame_size+1)*sizeof(float));
    9fe05066:	2b85                	addiw	s7,s7,1
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe05068:	002b9b9b          	slliw	s7,s7,0x2
    9fe0506c:	855e                	mv	a0,s7
    9fe0506e:	508090ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe05072:	865e                	mv	a2,s7
    9fe05074:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe05076:	8baa                	mv	s7,a0
   memset(ptr, 0, size);
    9fe05078:	705060ef          	jal	ra,9fe0bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe0507c:	8552                	mv	a0,s4
    9fe0507e:	0d743823          	sd	s7,208(s0)
    9fe05082:	4f4090ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe05086:	8652                	mv	a2,s4
    9fe05088:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe0508a:	8a2a                	mv	s4,a0
   memset(ptr, 0, size);
    9fe0508c:	6f1060ef          	jal	ra,9fe0bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe05090:	8526                	mv	a0,s1
   st->X = (float*)mem_alloc((13+1)*N*sizeof(float));
    9fe05092:	05443423          	sd	s4,72(s0)
    9fe05096:	4e0090ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe0509a:	8626                	mv	a2,s1
    9fe0509c:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe0509e:	8a2a                	mv	s4,a0
   memset(ptr, 0, size);
    9fe050a0:	6dd060ef          	jal	ra,9fe0bf7c <memset>
   st->Y = (float*)mem_alloc(N*sizeof(float));
    9fe050a4:	07443423          	sd	s4,104(s0)
   st->E = (float*)mem_alloc(N*sizeof(float));
   st->W = (float*)mem_alloc(13*N*sizeof(float));
    9fe050a8:	4a69                	li	s4,26
    9fe050aa:	035a0a3b          	mulw	s4,s4,s5
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe050ae:	8526                	mv	a0,s1
    9fe050b0:	4c6090ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe050b4:	8626                	mv	a2,s1
    9fe050b6:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe050b8:	8baa                	mv	s7,a0
   memset(ptr, 0, size);
    9fe050ba:	6c3060ef          	jal	ra,9fe0bf7c <memset>
   st->E = (float*)mem_alloc(N*sizeof(float));
    9fe050be:	07743823          	sd	s7,112(s0)
#ifdef TWO_FILTER
   st->foreground = (float*)mem_alloc(13*N*sizeof(float));
#endif
   st->PHI = (float*)mem_alloc(N*sizeof(float));
   st->power = (float*)mem_alloc((frame_size+1)*sizeof(float));
    9fe050c2:	2a85                	addiw	s5,s5,1
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe050c4:	002a9a9b          	slliw	s5,s5,0x2
    9fe050c8:	002a1b9b          	slliw	s7,s4,0x2
    9fe050cc:	855e                	mv	a0,s7
    9fe050ce:	4a8090ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe050d2:	865e                	mv	a2,s7
    9fe050d4:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe050d6:	8caa                	mv	s9,a0
   memset(ptr, 0, size);
    9fe050d8:	6a5060ef          	jal	ra,9fe0bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe050dc:	855e                	mv	a0,s7
   st->W = (float*)mem_alloc(13*N*sizeof(float));
    9fe050de:	09943023          	sd	s9,128(s0)
    9fe050e2:	494090ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe050e6:	865e                	mv	a2,s7
    9fe050e8:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe050ea:	8baa                	mv	s7,a0
   memset(ptr, 0, size);
    9fe050ec:	691060ef          	jal	ra,9fe0bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe050f0:	8526                	mv	a0,s1
   st->foreground = (float*)mem_alloc(13*N*sizeof(float));
    9fe050f2:	09743423          	sd	s7,136(s0)
    9fe050f6:	480090ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe050fa:	8626                	mv	a2,s1
    9fe050fc:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe050fe:	8baa                	mv	s7,a0
   memset(ptr, 0, size);
    9fe05100:	67d060ef          	jal	ra,9fe0bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe05104:	8556                	mv	a0,s5
   st->PHI = (float*)mem_alloc(N*sizeof(float));
    9fe05106:	07743c23          	sd	s7,120(s0)
    9fe0510a:	46c090ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe0510e:	8656                	mv	a2,s5
    9fe05110:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe05112:	8baa                	mv	s7,a0
   memset(ptr, 0, size);
    9fe05114:	669060ef          	jal	ra,9fe0bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe05118:	8556                	mv	a0,s5
   st->power = (float*)mem_alloc((frame_size+1)*sizeof(float));
    9fe0511a:	0b743023          	sd	s7,160(s0)
    9fe0511e:	458090ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe05122:	8656                	mv	a2,s5
    9fe05124:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe05126:	8aaa                	mv	s5,a0
   memset(ptr, 0, size);
    9fe05128:	655060ef          	jal	ra,9fe0bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe0512c:	8526                	mv	a0,s1
   st->power_1 = (float*)mem_alloc((frame_size+1)*sizeof(float));
    9fe0512e:	0b543423          	sd	s5,168(s0)
    9fe05132:	444090ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe05136:	8626                	mv	a2,s1
    9fe05138:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe0513a:	8aaa                	mv	s5,a0
   memset(ptr, 0, size);
    9fe0513c:	641060ef          	jal	ra,9fe0bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe05140:	03400513          	li	a0,52
   st->window = (float*)mem_alloc(N*sizeof(float));
    9fe05144:	0f543423          	sd	s5,232(s0)
    9fe05148:	42e090ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe0514c:	03400613          	li	a2,52
    9fe05150:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe05152:	8aaa                	mv	s5,a0
   memset(ptr, 0, size);
    9fe05154:	629060ef          	jal	ra,9fe0bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe05158:	8526                	mv	a0,s1
   st->prop = (float*)mem_alloc(13*sizeof(float));
    9fe0515a:	0f543823          	sd	s5,240(s0)
    9fe0515e:	418090ef          	jal	ra,9fe0e576 <pvPortMalloc>
    9fe05162:	8aaa                	mv	s5,a0
   memset(ptr, 0, size);
    9fe05164:	8626                	mv	a2,s1
    9fe05166:	4581                	li	a1,0
    9fe05168:	615060ef          	jal	ra,9fe0bf7c <memset>
   st->wtmp = (float*)mem_alloc(N*sizeof(float));
    9fe0516c:	0b543823          	sd	s5,176(s0)
   st->W = (float*)mem_alloc(13*N*sizeof(float));
    9fe05170:	000a0a9b          	sext.w	s5,s4
   for (i=0;i<N;i++)
    9fe05174:	05605063          	blez	s6,9fe051b4 <LP_AEC_init+0x2f6>
      st->window[i] = .5f-.5f*(float)cos(2*M_PI*i/N);	/* Hanning window */
    9fe05178:	d20b0953          	fcvt.d.w	fs2,s6
    9fe0517c:	4481                	li	s1,0
    9fe0517e:	0000d797          	auipc	a5,0xd
    9fe05182:	12a7b487          	fld	fs1,298(a5) # 9fe122a8 <__func__.1+0xf0>
    9fe05186:	d2048553          	fcvt.d.w	fa0,s1
    9fe0518a:	12957553          	fmul.d	fa0,fa0,fs1
    9fe0518e:	1b257553          	fdiv.d	fa0,fa0,fs2
    9fe05192:	f40fb0ef          	jal	ra,9fe008d2 <cos>
    9fe05196:	40157553          	fcvt.s.d	fa0,fa0
    9fe0519a:	747c                	ld	a5,232(s0)
    9fe0519c:	00249713          	slli	a4,s1,0x2
    9fe051a0:	4085754b          	fnmsub.s	fa0,fa0,fs0,fs0
    9fe051a4:	97ba                	add	a5,a5,a4
   for (i=0;i<N;i++)
    9fe051a6:	0485                	addi	s1,s1,1
    9fe051a8:	0004871b          	sext.w	a4,s1
      st->window[i] = .5f-.5f*(float)cos(2*M_PI*i/N);	/* Hanning window */
    9fe051ac:	00a7a027          	fsw	fa0,0(a5)
   for (i=0;i<N;i++)
    9fe051b0:	fd674be3          	blt	a4,s6,9fe05186 <LP_AEC_init+0x2c8>
   for (i=0;i<=st->frame_size;i++)
    9fe051b4:	4018                	lw	a4,0(s0)
    9fe051b6:	4781                	li	a5,0
    9fe051b8:	02074263          	bltz	a4,9fe051dc <LP_AEC_init+0x31e>
      st->power_1[i] = FLOAT_ONE;
    9fe051bc:	0000d717          	auipc	a4,0xd
    9fe051c0:	05472787          	flw	fa5,84(a4) # 9fe12210 <__func__.1+0x58>
    9fe051c4:	7458                	ld	a4,168(s0)
    9fe051c6:	00279693          	slli	a3,a5,0x2
   for (i=0;i<=st->frame_size;i++)
    9fe051ca:	0785                	addi	a5,a5,1
      st->power_1[i] = FLOAT_ONE;
    9fe051cc:	9736                	add	a4,a4,a3
    9fe051ce:	00f72027          	fsw	fa5,0(a4)
   for (i=0;i<=st->frame_size;i++)
    9fe051d2:	4014                	lw	a3,0(s0)
    9fe051d4:	0007871b          	sext.w	a4,a5
    9fe051d8:	fee6d6e3          	bge	a3,a4,9fe051c4 <LP_AEC_init+0x306>
   for (i=0;i<N*13;i++)
    9fe051dc:	03505063          	blez	s5,9fe051fc <LP_AEC_init+0x33e>
    9fe051e0:	3a7d                	addiw	s4,s4,-1
    9fe051e2:	020a1793          	slli	a5,s4,0x20
    9fe051e6:	01e7da13          	srli	s4,a5,0x1e
    9fe051ea:	0a11                	addi	s4,s4,4
    9fe051ec:	4781                	li	a5,0
      st->W[i] = 0;
    9fe051ee:	6058                	ld	a4,128(s0)
    9fe051f0:	973e                	add	a4,a4,a5
    9fe051f2:	00072023          	sw	zero,0(a4)
   for (i=0;i<N*13;i++)
    9fe051f6:	0791                	addi	a5,a5,4
    9fe051f8:	fefa1be3          	bne	s4,a5,9fe051ee <LP_AEC_init+0x330>
   {
      float sum = 0;
      /* Ratio of ~10 between adaptation rate of first and last block */
      float decay = (float)math_exp(-(2.4/M));
    9fe051fc:	d2090553          	fcvt.d.w	fa0,s2
    9fe05200:	0000d797          	auipc	a5,0xd
    9fe05204:	0b07b787          	fld	fa5,176(a5) # 9fe122b0 <__func__.1+0xf8>
    9fe05208:	1aa7f553          	fdiv.d	fa0,fa5,fa0
    9fe0520c:	22a51553          	fneg.d	fa0,fa0
    9fe05210:	9d1fb0ef          	jal	ra,9fe00be0 <exp>
      st->prop[0] = .7f;
    9fe05214:	787c                	ld	a5,240(s0)
    9fe05216:	0000d717          	auipc	a4,0xd
    9fe0521a:	03272787          	flw	fa5,50(a4) # 9fe12248 <__func__.1+0x90>
      sum = st->prop[0];
      for (i=1;i<M;i++) {
    9fe0521e:	4705                	li	a4,1
      st->prop[0] = .7f;
    9fe05220:	00f7a027          	fsw	fa5,0(a5)
      sum = st->prop[0];
    9fe05224:	787c                	ld	a5,240(s0)
      float decay = (float)math_exp(-(2.4/M));
    9fe05226:	40157553          	fcvt.s.d	fa0,fa0
         st->prop[i] = st->prop[i-1] * decay;
         sum = sum + st->prop[i];
      }
      for (i=M-1;i>=0;i--) {
    9fe0522a:	fff9869b          	addiw	a3,s3,-1
      sum = st->prop[0];
    9fe0522e:	0007a787          	flw	fa5,0(a5)
      for (i=1;i<M;i++) {
    9fe05232:	15375d63          	bge	a4,s3,9fe0538c <LP_AEC_init+0x4ce>
    9fe05236:	397d                	addiw	s2,s2,-1
    9fe05238:	02091713          	slli	a4,s2,0x20
    9fe0523c:	01e75913          	srli	s2,a4,0x1e
      sum = st->prop[0];
    9fe05240:	20f78753          	fmv.s	fa4,fa5
      for (i=1;i<M;i++) {
    9fe05244:	4711                	li	a4,4
    9fe05246:	a011                	j	9fe0524a <LP_AEC_init+0x38c>
    9fe05248:	0711                	addi	a4,a4,4
         st->prop[i] = st->prop[i-1] * decay;
    9fe0524a:	10a7f7d3          	fmul.s	fa5,fa5,fa0
    9fe0524e:	97ba                	add	a5,a5,a4
    9fe05250:	00f7a027          	fsw	fa5,0(a5)
         sum = sum + st->prop[i];
    9fe05254:	787c                	ld	a5,240(s0)
    9fe05256:	00e785b3          	add	a1,a5,a4
    9fe0525a:	0005a787          	flw	fa5,0(a1)
    9fe0525e:	00f77753          	fadd.s	fa4,fa4,fa5
      for (i=1;i<M;i++) {
    9fe05262:	fee913e3          	bne	s2,a4,9fe05248 <LP_AEC_init+0x38a>
    9fe05266:	0000d617          	auipc	a2,0xd
    9fe0526a:	ffe62687          	flw	fa3,-2(a2) # 9fe12264 <__func__.1+0xac>
    9fe0526e:	00269713          	slli	a4,a3,0x2
      for (i=M-1;i>=0;i--) {
    9fe05272:	567d                	li	a2,-1
    9fe05274:	a011                	j	9fe05278 <LP_AEC_init+0x3ba>
         st->prop[i] = (.8f * st->prop[i])/sum;
    9fe05276:	787c                	ld	a5,240(s0)
    9fe05278:	97ba                	add	a5,a5,a4
    9fe0527a:	0007a787          	flw	fa5,0(a5)
      for (i=M-1;i>=0;i--) {
    9fe0527e:	36fd                	addiw	a3,a3,-1
    9fe05280:	1771                	addi	a4,a4,-4
         st->prop[i] = (.8f * st->prop[i])/sum;
    9fe05282:	10d7f7d3          	fmul.s	fa5,fa5,fa3
    9fe05286:	18e7f7d3          	fdiv.s	fa5,fa5,fa4
    9fe0528a:	00f7a027          	fsw	fa5,0(a5)
      for (i=M-1;i>=0;i--) {
    9fe0528e:	fec694e3          	bne	a3,a2,9fe05276 <LP_AEC_init+0x3b8>
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe05292:	4511                	li	a0,4
    9fe05294:	2e2090ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe05298:	4611                	li	a2,4
    9fe0529a:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe0529c:	84aa                	mv	s1,a0
   memset(ptr, 0, size);
    9fe0529e:	4df060ef          	jal	ra,9fe0bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe052a2:	4511                	li	a0,4
      }
   }

   st->memX = (float*)mem_alloc(sizeof(float));
    9fe052a4:	10943023          	sd	s1,256(s0)
    9fe052a8:	2ce090ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe052ac:	4611                	li	a2,4
    9fe052ae:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe052b0:	84aa                	mv	s1,a0
   memset(ptr, 0, size);
    9fe052b2:	4cb060ef          	jal	ra,9fe0bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe052b6:	4511                	li	a0,4
   st->memD = (float*)mem_alloc(sizeof(float));
    9fe052b8:	10943423          	sd	s1,264(s0)
    9fe052bc:	2ba090ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe052c0:	4611                	li	a2,4
    9fe052c2:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe052c4:	84aa                	mv	s1,a0
   memset(ptr, 0, size);
    9fe052c6:	4b7060ef          	jal	ra,9fe0bf7c <memset>
   st->memE = (float*)mem_alloc(sizeof(float));
   st->preemph = .9f;
    9fe052ca:	0000d797          	auipc	a5,0xd
    9fe052ce:	f767a787          	flw	fa5,-138(a5) # 9fe12240 <__func__.1+0x88>

   if (st->sampling_rate<12000)
    9fe052d2:	4c58                	lw	a4,28(s0)
    9fe052d4:	678d                	lui	a5,0x3
   st->memE = (float*)mem_alloc(sizeof(float));
    9fe052d6:	10943823          	sd	s1,272(s0)
   st->preemph = .9f;
    9fe052da:	10f42c27          	fsw	fa5,280(s0)
   if (st->sampling_rate<12000)
    9fe052de:	edf78793          	addi	a5,a5,-289 # 2edf <_EL1_STACK_SIZE+0x26df>
    9fe052e2:	02e7d263          	bge	a5,a4,9fe05306 <LP_AEC_init+0x448>
      st->notch_radius = .9f;
   else if (st->sampling_rate<24000)
    9fe052e6:	6799                	lui	a5,0x6
    9fe052e8:	dbf78793          	addi	a5,a5,-577 # 5dbf <_EL1_STACK_SIZE+0x55bf>
    9fe052ec:	00e7c963          	blt	a5,a4,9fe052fe <LP_AEC_init+0x440>
      st->notch_radius = .982f;
    9fe052f0:	0000d797          	auipc	a5,0xd
    9fe052f4:	f547a787          	flw	fa5,-172(a5) # 9fe12244 <__func__.1+0x8c>
    9fe052f8:	10f42e27          	fsw	fa5,284(s0)
    9fe052fc:	a039                	j	9fe0530a <LP_AEC_init+0x44c>
   else
      st->notch_radius = .992f;
    9fe052fe:	0000d797          	auipc	a5,0xd
    9fe05302:	f6a7a787          	flw	fa5,-150(a5) # 9fe12268 <__func__.1+0xb0>
    9fe05306:	10f42e27          	fsw	fa5,284(s0)
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe0530a:	4521                	li	a0,8
    9fe0530c:	26a090ef          	jal	ra,9fe0e576 <pvPortMalloc>
    9fe05310:	84aa                	mv	s1,a0
   memset(ptr, 0, size);
    9fe05312:	4621                	li	a2,8
    9fe05314:	4581                	li	a1,0
    9fe05316:	467060ef          	jal	ra,9fe0bf7c <memset>
   st->notch_mem = (float*)mem_alloc(2*sizeof(float));
    9fe0531a:	12943023          	sd	s1,288(s0)
   for (i=0;i<2;i++)
      st->notch_mem[i] = 0;
    9fe0531e:	0004a023          	sw	zero,0(s1)
    9fe05322:	12043683          	ld	a3,288(s0)

   st->adapted = 0;
   st->Pey = st->Pyy = FLOAT_ONE;
    9fe05326:	3f800737          	lui	a4,0x3f800
    9fe0532a:	02071793          	slli	a5,a4,0x20
      st->notch_mem[i] = 0;
    9fe0532e:	0006a223          	sw	zero,4(a3) # ffffffffffff8004 <_end+0xffffffff60138304>
   st->Pey = st->Pyy = FLOAT_ONE;
    9fe05332:	97ba                	add	a5,a5,a4
    9fe05334:	f07c                	sd	a5,224(s0)
#ifdef TWO_FILTER
   st->Davg1 = st->Davg2 = FLOAT_ZERO;
   st->Dvar1 = st->Dvar2 = FLOAT_ZERO;
#endif

   st->aec_min_leak = .005f;
    9fe05336:	0000d797          	auipc	a5,0xd
    9fe0533a:	f827b783          	ld	a5,-126(a5) # 9fe122b8 <__func__.1+0x100>
    9fe0533e:	12f43423          	sd	a5,296(s0)
   st->aec_var1_smooth = .36f;
   st->aec_var2_smooth = .7225f;
    9fe05342:	0000d797          	auipc	a5,0xd
    9fe05346:	f7e7b783          	ld	a5,-130(a5) # 9fe122c0 <__func__.1+0x108>
    9fe0534a:	12f43823          	sd	a5,304(s0)
   st->aec_var1_update = .5f;
   st->aec_var2_update = .25f;
    9fe0534e:	0000d797          	auipc	a5,0xd
    9fe05352:	f7a7b783          	ld	a5,-134(a5) # 9fe122c8 <__func__.1+0x110>
   st->adapted = 0;
    9fe05356:	00042823          	sw	zero,16(s0)
   st->Davg1 = st->Davg2 = FLOAT_ZERO;
    9fe0535a:	08043823          	sd	zero,144(s0)
   st->Dvar1 = st->Dvar2 = FLOAT_ZERO;
    9fe0535e:	08043c23          	sd	zero,152(s0)
   st->aec_var2_update = .25f;
    9fe05362:	12f43c23          	sd	a5,312(s0)
   st->aec_var_backtrack = 4.f;

   st->echo_cnt = 0;
    9fe05366:	14043423          	sd	zero,328(s0)

   return st;

}
    9fe0536a:	70e6                	ld	ra,120(sp)
    9fe0536c:	8522                	mv	a0,s0
    9fe0536e:	7446                	ld	s0,112(sp)
    9fe05370:	74a6                	ld	s1,104(sp)
    9fe05372:	7906                	ld	s2,96(sp)
    9fe05374:	69e6                	ld	s3,88(sp)
    9fe05376:	6a46                	ld	s4,80(sp)
    9fe05378:	6aa6                	ld	s5,72(sp)
    9fe0537a:	6b06                	ld	s6,64(sp)
    9fe0537c:	7be2                	ld	s7,56(sp)
    9fe0537e:	7c42                	ld	s8,48(sp)
    9fe05380:	7ca2                	ld	s9,40(sp)
    9fe05382:	2462                	fld	fs0,24(sp)
    9fe05384:	24c2                	fld	fs1,16(sp)
    9fe05386:	2922                	fld	fs2,8(sp)
    9fe05388:	6109                	addi	sp,sp,128
    9fe0538a:	8082                	ret
      for (i=M-1;i>=0;i--) {
    9fe0538c:	f006c3e3          	bltz	a3,9fe05292 <LP_AEC_init+0x3d4>
      sum = st->prop[0];
    9fe05390:	20f78753          	fmv.s	fa4,fa5
    9fe05394:	bdc9                	j	9fe05266 <LP_AEC_init+0x3a8>

000000009fe05396 <echo_state_reset>:

   int i, M, N;

   st->cancel_count = 0;
   st->screwed_up = 0;
   N = st->window_size;
    9fe05396:	4150                	lw	a2,4(a0)
   st->cancel_count = 0;
    9fe05398:	00052623          	sw	zero,12(a0)
   st->screwed_up = 0;
    9fe0539c:	00052c23          	sw	zero,24(a0)
   M = st->M;

   M = M;
   for (i=0;i<N*13;i++)
    9fe053a0:	0016171b          	slliw	a4,a2,0x1
    9fe053a4:	9f31                	addw	a4,a4,a2
    9fe053a6:	0027171b          	slliw	a4,a4,0x2
    9fe053aa:	9f31                	addw	a4,a4,a2
    9fe053ac:	00271693          	slli	a3,a4,0x2
    9fe053b0:	4781                	li	a5,0
    9fe053b2:	02e05163          	blez	a4,9fe053d4 <echo_state_reset+0x3e>
      st->W[i] = 0;
    9fe053b6:	6158                	ld	a4,128(a0)
    9fe053b8:	973e                	add	a4,a4,a5
    9fe053ba:	00072023          	sw	zero,0(a4) # 3f800000 <CVIMMAP_DRAM_SIZE+0x1f800000>
   for (i=0;i<N*13;i++)
    9fe053be:	0791                	addi	a5,a5,4
    9fe053c0:	fef69be3          	bne	a3,a5,9fe053b6 <echo_state_reset+0x20>
    9fe053c4:	4781                	li	a5,0
#ifdef TWO_FILTER
   for (i=0;i<N*13;i++)
      st->foreground[i] = 0;
    9fe053c6:	6558                	ld	a4,136(a0)
    9fe053c8:	973e                	add	a4,a4,a5
    9fe053ca:	00072023          	sw	zero,0(a4)
   for (i=0;i<N*13;i++)
    9fe053ce:	0791                	addi	a5,a5,4
    9fe053d0:	fed79be3          	bne	a5,a3,9fe053c6 <echo_state_reset+0x30>
#endif
   for (i=0;i<N*(13+1);i++)
    9fe053d4:	0036171b          	slliw	a4,a2,0x3
    9fe053d8:	9f11                	subw	a4,a4,a2
    9fe053da:	0017171b          	slliw	a4,a4,0x1
    9fe053de:	00271693          	slli	a3,a4,0x2
    9fe053e2:	4781                	li	a5,0
    9fe053e4:	00e05963          	blez	a4,9fe053f6 <echo_state_reset+0x60>
      st->X[i] = 0;
    9fe053e8:	6538                	ld	a4,72(a0)
    9fe053ea:	973e                	add	a4,a4,a5
    9fe053ec:	00072023          	sw	zero,0(a4)
   for (i=0;i<N*(13+1);i++)
    9fe053f0:	0791                	addi	a5,a5,4
    9fe053f2:	fef69be3          	bne	a3,a5,9fe053e8 <echo_state_reset+0x52>
   for (i=0;i<=st->frame_size;i++) {
    9fe053f6:	411c                	lw	a5,0(a0)
    9fe053f8:	4701                	li	a4,0
    9fe053fa:	0407cd63          	bltz	a5,9fe05454 <echo_state_reset+0xbe>
      st->power[i] = 0;
      st->power_1[i] = FLOAT_ONE;
    9fe053fe:	0000d797          	auipc	a5,0xd
    9fe05402:	e127a787          	flw	fa5,-494(a5) # 9fe12210 <__func__.1+0x58>
      st->power[i] = 0;
    9fe05406:	7154                	ld	a3,160(a0)
    9fe05408:	00271793          	slli	a5,a4,0x2
   for (i=0;i<=st->frame_size;i++) {
    9fe0540c:	0705                	addi	a4,a4,1
      st->power[i] = 0;
    9fe0540e:	96be                	add	a3,a3,a5
    9fe05410:	0006a023          	sw	zero,0(a3)
      st->power_1[i] = FLOAT_ONE;
    9fe05414:	7554                	ld	a3,168(a0)
   for (i=0;i<=st->frame_size;i++) {
    9fe05416:	0007059b          	sext.w	a1,a4
      st->power_1[i] = FLOAT_ONE;
    9fe0541a:	96be                	add	a3,a3,a5
    9fe0541c:	00f6a027          	fsw	fa5,0(a3)
      st->Eh[i] = 0;
    9fe05420:	6974                	ld	a3,208(a0)
    9fe05422:	96be                	add	a3,a3,a5
    9fe05424:	0006a023          	sw	zero,0(a3)
      st->Yh[i] = 0;
    9fe05428:	6d74                	ld	a3,216(a0)
    9fe0542a:	97b6                	add	a5,a5,a3
    9fe0542c:	0007a023          	sw	zero,0(a5)
   for (i=0;i<=st->frame_size;i++) {
    9fe05430:	4114                	lw	a3,0(a0)
    9fe05432:	fcb6dae3          	bge	a3,a1,9fe05406 <echo_state_reset+0x70>
   }
   for (i=0;i<st->frame_size;i++) {
    9fe05436:	4781                	li	a5,0
    9fe05438:	00d05e63          	blez	a3,9fe05454 <echo_state_reset+0xbe>
      st->last_y[i] = 0;
    9fe0543c:	7138                	ld	a4,96(a0)
    9fe0543e:	00279693          	slli	a3,a5,0x2
   for (i=0;i<st->frame_size;i++) {
    9fe05442:	0785                	addi	a5,a5,1
      st->last_y[i] = 0;
    9fe05444:	9736                	add	a4,a4,a3
    9fe05446:	00072023          	sw	zero,0(a4)
   for (i=0;i<st->frame_size;i++) {
    9fe0544a:	4114                	lw	a3,0(a0)
    9fe0544c:	0007871b          	sext.w	a4,a5
    9fe05450:	fed746e3          	blt	a4,a3,9fe0543c <echo_state_reset+0xa6>
   }
   for (i=0;i<N;i++) {
    9fe05454:	00261693          	slli	a3,a2,0x2
    9fe05458:	4781                	li	a5,0
    9fe0545a:	02c05163          	blez	a2,9fe0547c <echo_state_reset+0xe6>
      st->E[i] = 0;
    9fe0545e:	7938                	ld	a4,112(a0)
    9fe05460:	973e                	add	a4,a4,a5
    9fe05462:	00072023          	sw	zero,0(a4)
   for (i=0;i<N;i++) {
    9fe05466:	0791                	addi	a5,a5,4
    9fe05468:	fef69be3          	bne	a3,a5,9fe0545e <echo_state_reset+0xc8>
    9fe0546c:	4781                	li	a5,0
   }
   for (i=0;i<N;i++) {
      st->x[i] = 0;
    9fe0546e:	6138                	ld	a4,64(a0)
    9fe05470:	973e                	add	a4,a4,a5
    9fe05472:	00072023          	sw	zero,0(a4)
   for (i=0;i<N;i++) {
    9fe05476:	0791                	addi	a5,a5,4
    9fe05478:	fed79be3          	bne	a5,a3,9fe0546e <echo_state_reset+0xd8>
   }
   for (i=0;i<2;i++)
      st->notch_mem[i] = 0;
    9fe0547c:	12053683          	ld	a3,288(a0)
      st->memX[i] = 0;

   st->saturated = 0;
   st->adapted = 0;
   st->sum_adapt = 0;
   st->Pey = st->Pyy = FLOAT_ONE;
    9fe05480:	3f800737          	lui	a4,0x3f800
    9fe05484:	02071793          	slli	a5,a4,0x20
      st->notch_mem[i] = 0;
    9fe05488:	0006a023          	sw	zero,0(a3)
    9fe0548c:	12053683          	ld	a3,288(a0)
   st->Pey = st->Pyy = FLOAT_ONE;
    9fe05490:	97ba                	add	a5,a5,a4
      st->notch_mem[i] = 0;
    9fe05492:	0006a223          	sw	zero,4(a3)
      st->memD[i] = st->memE[i] = 0;
    9fe05496:	11053703          	ld	a4,272(a0)
    9fe0549a:	00072023          	sw	zero,0(a4) # 3f800000 <CVIMMAP_DRAM_SIZE+0x1f800000>
    9fe0549e:	10853703          	ld	a4,264(a0)
    9fe054a2:	00072023          	sw	zero,0(a4)
      st->memX[i] = 0;
    9fe054a6:	10053703          	ld	a4,256(a0)
    9fe054aa:	00072023          	sw	zero,0(a4)
   st->adapted = 0;
    9fe054ae:	00053823          	sd	zero,16(a0)
   st->sum_adapt = 0;
    9fe054b2:	02052623          	sw	zero,44(a0)
   st->Pey = st->Pyy = FLOAT_ONE;
    9fe054b6:	f17c                	sd	a5,224(a0)
#ifdef TWO_FILTER
   st->Davg1 = st->Davg2 = FLOAT_ZERO;
    9fe054b8:	08053823          	sd	zero,144(a0)
   st->Dvar1 = st->Dvar2 = FLOAT_ZERO;
    9fe054bc:	08053c23          	sd	zero,152(a0)
#endif

}
    9fe054c0:	8082                	ret

000000009fe054c2 <LP_AEC_free>:

EXPORT void LP_AEC_free(LinearEchoState *st)
{
    9fe054c2:	1141                	addi	sp,sp,-16
    9fe054c4:	e406                	sd	ra,8(sp)
    9fe054c6:	e022                	sd	s0,0(sp)
    9fe054c8:	842a                	mv	s0,a0

   speech_fft_free(st->fft_table);
    9fe054ca:	7d68                	ld	a0,248(a0)
    9fe054cc:	3b9030ef          	jal	ra,9fe09084 <speech_fft_free>
   vPortFree(ptr);
    9fe054d0:	7c08                	ld	a0,56(s0)
    9fe054d2:	20a090ef          	jal	ra,9fe0e6dc <vPortFree>
    9fe054d6:	6028                	ld	a0,64(s0)
    9fe054d8:	204090ef          	jal	ra,9fe0e6dc <vPortFree>
    9fe054dc:	6828                	ld	a0,80(s0)
    9fe054de:	1fe090ef          	jal	ra,9fe0e6dc <vPortFree>
    9fe054e2:	6c28                	ld	a0,88(s0)
    9fe054e4:	1f8090ef          	jal	ra,9fe0e6dc <vPortFree>
    9fe054e8:	7028                	ld	a0,96(s0)
    9fe054ea:	1f2090ef          	jal	ra,9fe0e6dc <vPortFree>
    9fe054ee:	6068                	ld	a0,192(s0)
    9fe054f0:	1ec090ef          	jal	ra,9fe0e6dc <vPortFree>
    9fe054f4:	7c48                	ld	a0,184(s0)
    9fe054f6:	1e6090ef          	jal	ra,9fe0e6dc <vPortFree>
    9fe054fa:	6468                	ld	a0,200(s0)
    9fe054fc:	1e0090ef          	jal	ra,9fe0e6dc <vPortFree>
    9fe05500:	6c68                	ld	a0,216(s0)
    9fe05502:	1da090ef          	jal	ra,9fe0e6dc <vPortFree>
    9fe05506:	6868                	ld	a0,208(s0)
    9fe05508:	1d4090ef          	jal	ra,9fe0e6dc <vPortFree>
    9fe0550c:	6428                	ld	a0,72(s0)
    9fe0550e:	1ce090ef          	jal	ra,9fe0e6dc <vPortFree>
    9fe05512:	7428                	ld	a0,104(s0)
    9fe05514:	1c8090ef          	jal	ra,9fe0e6dc <vPortFree>
    9fe05518:	7828                	ld	a0,112(s0)
    9fe0551a:	1c2090ef          	jal	ra,9fe0e6dc <vPortFree>
    9fe0551e:	6048                	ld	a0,128(s0)
    9fe05520:	1bc090ef          	jal	ra,9fe0e6dc <vPortFree>
    9fe05524:	6448                	ld	a0,136(s0)
    9fe05526:	1b6090ef          	jal	ra,9fe0e6dc <vPortFree>
    9fe0552a:	7c28                	ld	a0,120(s0)
    9fe0552c:	1b0090ef          	jal	ra,9fe0e6dc <vPortFree>
    9fe05530:	7048                	ld	a0,160(s0)
    9fe05532:	1aa090ef          	jal	ra,9fe0e6dc <vPortFree>
    9fe05536:	7448                	ld	a0,168(s0)
    9fe05538:	1a4090ef          	jal	ra,9fe0e6dc <vPortFree>
    9fe0553c:	7468                	ld	a0,232(s0)
    9fe0553e:	19e090ef          	jal	ra,9fe0e6dc <vPortFree>
    9fe05542:	7868                	ld	a0,240(s0)
    9fe05544:	198090ef          	jal	ra,9fe0e6dc <vPortFree>
    9fe05548:	7848                	ld	a0,176(s0)
    9fe0554a:	192090ef          	jal	ra,9fe0e6dc <vPortFree>
    9fe0554e:	10043503          	ld	a0,256(s0)
    9fe05552:	18a090ef          	jal	ra,9fe0e6dc <vPortFree>
    9fe05556:	10843503          	ld	a0,264(s0)
    9fe0555a:	182090ef          	jal	ra,9fe0e6dc <vPortFree>
    9fe0555e:	11043503          	ld	a0,272(s0)
    9fe05562:	17a090ef          	jal	ra,9fe0e6dc <vPortFree>
    9fe05566:	12043503          	ld	a0,288(s0)
    9fe0556a:	172090ef          	jal	ra,9fe0e6dc <vPortFree>
    9fe0556e:	8522                	mv	a0,s0
   mem_free(st->memD);
   mem_free(st->memE);
   mem_free(st->notch_mem);

   mem_free(st);
}
    9fe05570:	6402                	ld	s0,0(sp)
    9fe05572:	60a2                	ld	ra,8(sp)
    9fe05574:	0141                	addi	sp,sp,16
    9fe05576:	1660906f          	j	9fe0e6dc <vPortFree>

000000009fe0557a <LP_AEC>:

EXPORT void LP_AEC(LinearEchoState *st, const short *in, const short *far_end, short *out)
{
    9fe0557a:	7155                	addi	sp,sp,-208
    9fe0557c:	e1a2                	sd	s0,192(sp)
    9fe0557e:	f54e                	sd	s3,168(sp)
    9fe05580:	ed56                	sd	s5,152(sp)
    9fe05582:	e586                	sd	ra,200(sp)
    9fe05584:	fd26                	sd	s1,184(sp)
    9fe05586:	f94a                	sd	s2,176(sp)
    9fe05588:	f152                	sd	s4,160(sp)
    9fe0558a:	e95a                	sd	s6,144(sp)
    9fe0558c:	e55e                	sd	s7,136(sp)
    9fe0558e:	e162                	sd	s8,128(sp)
    9fe05590:	fce6                	sd	s9,120(sp)
    9fe05592:	f8ea                	sd	s10,112(sp)
    9fe05594:	f4ee                	sd	s11,104(sp)
    9fe05596:	aca2                	fsd	fs0,88(sp)
    9fe05598:	a8a6                	fsd	fs1,80(sp)
    9fe0559a:	a4ca                	fsd	fs2,72(sp)
    9fe0559c:	a0ce                	fsd	fs3,64(sp)
    9fe0559e:	bc52                	fsd	fs4,56(sp)
    9fe055a0:	b856                	fsd	fs5,48(sp)
    9fe055a2:	b45a                	fsd	fs6,40(sp)
    9fe055a4:	b05e                	fsd	fs7,32(sp)
    9fe055a6:	ac62                	fsd	fs8,24(sp)
    9fe055a8:	a866                	fsd	fs9,16(sp)
    9fe055aa:	842a                	mv	s0,a0
   float alpha, alpha_1;
   float RER;  /* Residual to Error Ratio */
   float tmp32;


   if (st->echo_cnt > (st->sampling_rate/st->frame_size*3)) {
    9fe055ac:	4c5c                	lw	a5,28(s0)
    9fe055ae:	4108                	lw	a0,0(a0)
    9fe055b0:	14843803          	ld	a6,328(s0)
{
    9fe055b4:	e436                	sd	a3,8(sp)
   if (st->echo_cnt > (st->sampling_rate/st->frame_size*3)) {
    9fe055b6:	02a7c73b          	divw	a4,a5,a0
{
    9fe055ba:	89ae                	mv	s3,a1
    9fe055bc:	8ab2                	mv	s5,a2
   if (st->echo_cnt > (st->sampling_rate/st->frame_size*3)) {
    9fe055be:	0017179b          	slliw	a5,a4,0x1
    9fe055c2:	9f3d                	addw	a4,a4,a5
    9fe055c4:	2d075be3          	bge	a4,a6,9fe0609a <LP_AEC+0xb20>
      M = st->M;  /* from parameter */
    9fe055c8:	00842903          	lw	s2,8(s0)
      st->echo_cnt = (st->sampling_rate/st->frame_size*3)+1;  /* avoid cnt overflow */
    9fe055cc:	0017079b          	addiw	a5,a4,1
    9fe055d0:	14f43423          	sd	a5,328(s0)
   } else {
      M = st->initial_filter_len;
   }

   N = st->window_size;
   st->cancel_count++;
    9fe055d4:	445c                	lw	a5,12(s0)

   /******************************************************************************/
   /*                                                     TX Signal Preprocessing*/
   /******************************************************************************/
   /* Apply DC filter to make sure DC doesn't end up causing problems */
   DC_filter(in, st->notch_radius, st->input, st->frame_size, st->notch_mem);
    9fe055d6:	12043683          	ld	a3,288(s0)
    9fe055da:	682c                	ld	a1,80(s0)
    9fe055dc:	11c42507          	flw	fa0,284(s0)
   st->cancel_count++;
    9fe055e0:	2785                	addiw	a5,a5,1
    9fe055e2:	c45c                	sw	a5,12(s0)
   DC_filter(in, st->notch_radius, st->input, st->frame_size, st->notch_mem);
    9fe055e4:	862a                	mv	a2,a0
    9fe055e6:	854e                	mv	a0,s3
   N = st->window_size;
    9fe055e8:	4044                	lw	s1,4(s0)
   ss = st->ss / M;
    9fe055ea:	14042907          	flw	fs2,320(s0)
   DC_filter(in, st->notch_radius, st->input, st->frame_size, st->notch_mem);
    9fe055ee:	465000ef          	jal	ra,9fe06252 <DC_filter>

   /* Copy input data to buffer and apply pre-emphasis filter */
   for (i=0;i<st->frame_size;i++) {
    9fe055f2:	401c                	lw	a5,0(s0)
   ss = st->ss / M;
    9fe055f4:	d00974d3          	fcvt.s.w	fs1,s2
   for (i=0;i<st->frame_size;i++) {
    9fe055f8:	4701                	li	a4,0
    9fe055fa:	08f05e63          	blez	a5,9fe05696 <LP_AEC+0x11c>
      float tmp32;
      /* H = 1-0.9z^(-1), FIR filter */
      /* tmp32 = input(n) - preemph * input(n-1), input(n) is d(n) */
      tmp32 = st->input[i] - st->preemph * st->memD[0];
    9fe055fe:	6834                	ld	a3,80(s0)
    9fe05600:	10843783          	ld	a5,264(s0)
    9fe05604:	00271613          	slli	a2,a4,0x2
    9fe05608:	96b2                	add	a3,a3,a2
    9fe0560a:	0006a707          	flw	fa4,0(a3)
    9fe0560e:	0007a687          	flw	fa3,0(a5)
    9fe05612:	11842787          	flw	fa5,280(s0)
      st->memD[0] = st->input[i];
    9fe05616:	00e7a027          	fsw	fa4,0(a5)
      st->input[i] = tmp32;
    9fe0561a:	683c                	ld	a5,80(s0)
      tmp32 = st->input[i] - st->preemph * st->memD[0];
    9fe0561c:	70d7f7cb          	fnmsub.s	fa5,fa5,fa3,fa4
   for (i=0;i<st->frame_size;i++) {
    9fe05620:	0705                	addi	a4,a4,1
      st->input[i] = tmp32;
    9fe05622:	97b2                	add	a5,a5,a2
   for (i=0;i<st->frame_size;i++) {
    9fe05624:	0007069b          	sext.w	a3,a4
      st->input[i] = tmp32;
    9fe05628:	00f7a027          	fsw	fa5,0(a5)
   for (i=0;i<st->frame_size;i++) {
    9fe0562c:	401c                	lw	a5,0(s0)
    9fe0562e:	fcf6c8e3          	blt	a3,a5,9fe055fe <LP_AEC+0x84>
   }

   /******************************************************************************/
   /*                                                     RX Signal Preprocessing*/
   /******************************************************************************/
   for (i=0;i<st->frame_size;i++) {
    9fe05632:	06f05263          	blez	a5,9fe05696 <LP_AEC+0x11c>
    9fe05636:	85d6                	mv	a1,s5
    9fe05638:	4601                	li	a2,0
    9fe0563a:	4681                	li	a3,0
      float tmp32;
      /* x[1:2*frame_size]: |--previous frame--|--current frame--| */
      st->x[i] = st->x[i+st->frame_size];  /* perform pre-emphasis filtering for previous frame */
    9fe0563c:	6038                	ld	a4,64(s0)
    9fe0563e:	9fb5                	addw	a5,a5,a3
    9fe05640:	078a                	slli	a5,a5,0x2
    9fe05642:	97ba                	add	a5,a5,a4
    9fe05644:	0007a787          	flw	fa5,0(a5)
    9fe05648:	00261793          	slli	a5,a2,0x2
    9fe0564c:	973e                	add	a4,a4,a5
    9fe0564e:	00f72027          	fsw	fa5,0(a4)
      /* tmp32 = far_end(n) - preemph * far_end(n -1) */
      tmp32 = far_end[i] - st->preemph * st->memX[0];
    9fe05652:	00059703          	lh	a4,0(a1)
    9fe05656:	10043783          	ld	a5,256(s0)
    9fe0565a:	11842787          	flw	fa5,280(s0)
    9fe0565e:	d0077753          	fcvt.s.w	fa4,a4
    9fe05662:	0007a687          	flw	fa3,0(a5)
      st->x[i+st->frame_size] = tmp32;  /* perform pre-emphasis filtering for current frame */
    9fe05666:	401c                	lw	a5,0(s0)
    9fe05668:	6038                	ld	a4,64(s0)
      tmp32 = far_end[i] - st->preemph * st->memX[0];
    9fe0566a:	70d7f7cb          	fnmsub.s	fa5,fa5,fa3,fa4
      st->x[i+st->frame_size] = tmp32;  /* perform pre-emphasis filtering for current frame */
    9fe0566e:	9fb5                	addw	a5,a5,a3
    9fe05670:	078a                	slli	a5,a5,0x2
    9fe05672:	97ba                	add	a5,a5,a4
   for (i=0;i<st->frame_size;i++) {
    9fe05674:	0605                	addi	a2,a2,1
      st->x[i+st->frame_size] = tmp32;  /* perform pre-emphasis filtering for current frame */
    9fe05676:	00f7a027          	fsw	fa5,0(a5)
      st->memX[0] = far_end[i];
    9fe0567a:	00059703          	lh	a4,0(a1)
    9fe0567e:	10043783          	ld	a5,256(s0)
   for (i=0;i<st->frame_size;i++) {
    9fe05682:	0006069b          	sext.w	a3,a2
      st->memX[0] = far_end[i];
    9fe05686:	d00777d3          	fcvt.s.w	fa5,a4
   for (i=0;i<st->frame_size;i++) {
    9fe0568a:	0589                	addi	a1,a1,2
      st->memX[0] = far_end[i];
    9fe0568c:	00f7a027          	fsw	fa5,0(a5)
   for (i=0;i<st->frame_size;i++) {
    9fe05690:	401c                	lw	a5,0(s0)
    9fe05692:	faf6c5e3          	blt	a3,a5,9fe0563c <LP_AEC+0xc2>
   }

   /* Shift the filter length buffer of far-end in frequency domain */
   for (j=M-1;j>=0;j--) {
    9fe05696:	fff90a1b          	addiw	s4,s2,-1
    9fe0569a:	000a0a9b          	sext.w	s5,s4
    9fe0569e:	040acd63          	bltz	s5,9fe056f8 <LP_AEC+0x17e>
    9fe056a2:	029a053b          	mulw	a0,s4,s1
    9fe056a6:	fff48e1b          	addiw	t3,s1,-1
    9fe056aa:	1e02                	slli	t3,t3,0x20
    9fe056ac:	020e5e13          	srli	t3,t3,0x20
    9fe056b0:	0004831b          	sext.w	t1,s1
    9fe056b4:	8856                	mv	a6,s5
    9fe056b6:	0e05                	addi	t3,t3,1
    9fe056b8:	5efd                	li	t4,-1
    9fe056ba:	029908bb          	mulw	a7,s2,s1
      for (i=0;i<N;i++)
    9fe056be:	02905663          	blez	s1,9fe056ea <LP_AEC+0x170>
    9fe056c2:	00ae05b3          	add	a1,t3,a0
    9fe056c6:	40a88633          	sub	a2,a7,a0
    9fe056ca:	00251713          	slli	a4,a0,0x2
    9fe056ce:	058a                	slli	a1,a1,0x2
    9fe056d0:	060a                	slli	a2,a2,0x2
         st->X[(j+1)*N+i] = st->X[j*N+i];
    9fe056d2:	643c                	ld	a5,72(s0)
    9fe056d4:	00e786b3          	add	a3,a5,a4
    9fe056d8:	0006a787          	flw	fa5,0(a3)
    9fe056dc:	97b2                	add	a5,a5,a2
    9fe056de:	97ba                	add	a5,a5,a4
    9fe056e0:	00f7a027          	fsw	fa5,0(a5)
      for (i=0;i<N;i++)
    9fe056e4:	0711                	addi	a4,a4,4
    9fe056e6:	fee596e3          	bne	a1,a4,9fe056d2 <LP_AEC+0x158>
   for (j=M-1;j>=0;j--) {
    9fe056ea:	387d                	addiw	a6,a6,-1
    9fe056ec:	4065053b          	subw	a0,a0,t1
    9fe056f0:	406888bb          	subw	a7,a7,t1
    9fe056f4:	fdd815e3          	bne	a6,t4,9fe056be <LP_AEC+0x144>
   }
   speech_fft(st->fft_table, st->x, &st->X[0]);
    9fe056f8:	6430                	ld	a2,72(s0)
    9fe056fa:	602c                	ld	a1,64(s0)
    9fe056fc:	7c68                	ld	a0,248(s0)
    9fe056fe:	19f030ef          	jal	ra,9fe0909c <speech_fft>

   Sxx = 0;
   Sxx += inner_prod(st->x+st->frame_size, st->x+st->frame_size, st->frame_size);  /* the variance of x(n) */
    9fe05702:	4010                	lw	a2,0(s0)
    9fe05704:	602c                	ld	a1,64(s0)
    9fe05706:	00261793          	slli	a5,a2,0x2
    9fe0570a:	95be                	add	a1,a1,a5
    9fe0570c:	852e                	mv	a0,a1
    9fe0570e:	3bd000ef          	jal	ra,9fe062ca <inner_prod>
   accum_power_spectrum(st->X, st->Xf, N);  /* Xf(k) = pow(X(k)), the power spectrum of X(k) */
    9fe05712:	646c                	ld	a1,200(s0)
    9fe05714:	6428                	ld	a0,72(s0)
    9fe05716:	8626                	mv	a2,s1
   Sxx += inner_prod(st->x+st->frame_size, st->x+st->frame_size, st->frame_size);  /* the variance of x(n) */
    9fe05718:	20a50a53          	fmv.s	fs4,fa0
   accum_power_spectrum(st->X, st->Xf, N);  /* Xf(k) = pow(X(k)), the power spectrum of X(k) */
    9fe0571c:	473000ef          	jal	ra,9fe0638e <accum_power_spectrum>

   Sff = 0;
#ifdef TWO_FILTER
   /* Compute foreground filter */
   /* Y(k) = X(k) * W(k) */
   accum_spectral_mul(st->X, st->foreground, st->Y, N, M);
    9fe05720:	7430                	ld	a2,104(s0)
    9fe05722:	644c                	ld	a1,136(s0)
    9fe05724:	6428                	ld	a0,72(s0)
    9fe05726:	874a                	mv	a4,s2
    9fe05728:	86a6                	mv	a3,s1
    9fe0572a:	4f7000ef          	jal	ra,9fe06420 <accum_spectral_mul>
   speech_ifft(st->fft_table, st->Y, st->e);
    9fe0572e:	7c10                	ld	a2,56(s0)
    9fe05730:	742c                	ld	a1,104(s0)
    9fe05732:	7c68                	ld	a0,248(s0)
    9fe05734:	1d5030ef          	jal	ra,9fe09108 <speech_ifft>
   for (i=0;i<st->frame_size;i++) {
    9fe05738:	4010                	lw	a2,0(s0)
    9fe0573a:	02c05a63          	blez	a2,9fe0576e <LP_AEC+0x1f4>
    9fe0573e:	4781                	li	a5,0
	/* e(n) = d(n) - y(n), e(n) use the first part, y(n) use the last part */
	st->e[i] = st->input[i] - st->e[i+st->frame_size];
    9fe05740:	7c18                	ld	a4,56(s0)
    9fe05742:	6834                	ld	a3,80(s0)
    9fe05744:	9e3d                	addw	a2,a2,a5
    9fe05746:	00279593          	slli	a1,a5,0x2
    9fe0574a:	060a                	slli	a2,a2,0x2
    9fe0574c:	963a                	add	a2,a2,a4
    9fe0574e:	96ae                	add	a3,a3,a1
    9fe05750:	0006a787          	flw	fa5,0(a3)
    9fe05754:	00062707          	flw	fa4,0(a2)
    9fe05758:	972e                	add	a4,a4,a1
   for (i=0;i<st->frame_size;i++) {
    9fe0575a:	0785                	addi	a5,a5,1
	st->e[i] = st->input[i] - st->e[i+st->frame_size];
    9fe0575c:	08e7f7d3          	fsub.s	fa5,fa5,fa4
   for (i=0;i<st->frame_size;i++) {
    9fe05760:	0007869b          	sext.w	a3,a5
	st->e[i] = st->input[i] - st->e[i+st->frame_size];
    9fe05764:	00f72027          	fsw	fa5,0(a4)
   for (i=0;i<st->frame_size;i++) {
    9fe05768:	4010                	lw	a2,0(s0)
    9fe0576a:	fcc6cbe3          	blt	a3,a2,9fe05740 <LP_AEC+0x1c6>
   }
   /* the variance of e(n) */
   Sff += inner_prod(st->e, st->e, st->frame_size);
    9fe0576e:	7c0c                	ld	a1,56(s0)
    9fe05770:	f00009d3          	fmv.w.x	fs3,zero
    9fe05774:	852e                	mv	a0,a1
    9fe05776:	355000ef          	jal	ra,9fe062ca <inner_prod>
#endif

   /* Adjust proportional adaption rate */
   if (st->adapted)
    9fe0577a:	481c                	lw	a5,16(s0)
   Sff += inner_prod(st->e, st->e, st->frame_size);
    9fe0577c:	013579d3          	fadd.s	fs3,fa0,fs3
   if (st->adapted)
    9fe05780:	180797e3          	bnez	a5,9fe0610e <LP_AEC+0xb94>
      aec_adjust_prop (st->W, N, M, st->prop);
   if (st->saturated == 0) {
    9fe05784:	485c                	lw	a5,20(s0)
    9fe05786:	10079ee3          	bnez	a5,9fe060a2 <LP_AEC+0xb28>
      for (j=M-1;j>=0;j--) {
    9fe0578a:	080ac563          	bltz	s5,9fe05814 <LP_AEC+0x29a>
    9fe0578e:	02990dbb          	mulw	s11,s2,s1
    9fe05792:	020a1793          	slli	a5,s4,0x20
    9fe05796:	fff48c9b          	addiw	s9,s1,-1
    9fe0579a:	9381                	srli	a5,a5,0x20
    9fe0579c:	40f907b3          	sub	a5,s2,a5
    9fe057a0:	020c9713          	slli	a4,s9,0x20
    9fe057a4:	40900bbb          	negw	s7,s1
    9fe057a8:	078a                	slli	a5,a5,0x2
    9fe057aa:	01e75c93          	srli	s9,a4,0x1e
    9fe057ae:	002a9d13          	slli	s10,s5,0x2
    9fe057b2:	029a0a3b          	mulw	s4,s4,s1
    9fe057b6:	0b8a                	slli	s7,s7,0x2
    9fe057b8:	00048c1b          	sext.w	s8,s1
    9fe057bc:	0d8a                	slli	s11,s11,0x2
    9fe057be:	ff878b13          	addi	s6,a5,-8
    9fe057c2:	0c91                	addi	s9,s9,4
         /* st->X:                focus on j+1, means the previous X state, X length is (M+1)*N */
         /* st->E:                error in frequency domain */
         /*                             [0] = matlab[1].re (matlab[1].im = 0), [1] = [2].re, [2] = [2].im, [3] = [3].re, [4] = [3].im, ..., */
         /*                             [317] = [160].re, [318] = [160].im, [319] = [161].re (matlab[161].im = 0) */
         /* st->PHI:            length is window size N */
         weighted_gradient_phi(st->power_1, st->prop[j], &st->X[(j+1)*N], st->E, st->PHI, N);
    9fe057c4:	787c                	ld	a5,240(s0)
    9fe057c6:	642c                	ld	a1,72(s0)
    9fe057c8:	7c34                	ld	a3,120(s0)
    9fe057ca:	97ea                	add	a5,a5,s10
    9fe057cc:	0007a507          	flw	fa0,0(a5)
    9fe057d0:	7830                	ld	a2,112(s0)
    9fe057d2:	7448                	ld	a0,168(s0)
    9fe057d4:	95ee                	add	a1,a1,s11
    9fe057d6:	8726                	mv	a4,s1
    9fe057d8:	539000ef          	jal	ra,9fe06510 <weighted_gradient_phi>
	 /* compute weight gradient */
         for (i=0;i<N;i++)  /* only calculate (N/2+1) frequency bin, two data(re/im) in each bin, so N data in total */
    9fe057dc:	002a1593          	slli	a1,s4,0x2
	    /* W(k, m, j) = W(k, m, j-1) + delta_W(k, m, j) */
            st->W[ j*N + i] += st->PHI[i];
    9fe057e0:	4781                	li	a5,0
         for (i=0;i<N;i++)  /* only calculate (N/2+1) frequency bin, two data(re/im) in each bin, so N data in total */
    9fe057e2:	02905363          	blez	s1,9fe05808 <LP_AEC+0x28e>
            st->W[ j*N + i] += st->PHI[i];
    9fe057e6:	6058                	ld	a4,128(s0)
    9fe057e8:	7c34                	ld	a3,120(s0)
    9fe057ea:	00f58633          	add	a2,a1,a5
    9fe057ee:	9732                	add	a4,a4,a2
    9fe057f0:	96be                	add	a3,a3,a5
    9fe057f2:	00072787          	flw	fa5,0(a4)
    9fe057f6:	0006a707          	flw	fa4,0(a3)
         for (i=0;i<N;i++)  /* only calculate (N/2+1) frequency bin, two data(re/im) in each bin, so N data in total */
    9fe057fa:	0791                	addi	a5,a5,4
            st->W[ j*N + i] += st->PHI[i];
    9fe057fc:	00e7f7d3          	fadd.s	fa5,fa5,fa4
    9fe05800:	00f72027          	fsw	fa5,0(a4)
         for (i=0;i<N;i++)  /* only calculate (N/2+1) frequency bin, two data(re/im) in each bin, so N data in total */
    9fe05804:	fefc91e3          	bne	s9,a5,9fe057e6 <LP_AEC+0x26c>
      for (j=M-1;j>=0;j--) {
    9fe05808:	1d71                	addi	s10,s10,-4
    9fe0580a:	9dde                	add	s11,s11,s7
    9fe0580c:	418a0a3b          	subw	s4,s4,s8
    9fe05810:	fbab1ae3          	bne	s6,s10,9fe057c4 <LP_AEC+0x24a>
   } else {
      st->saturated--;
   }

   /* Overlap-store method to let circular convolution become linear convolution */
   for (j=0;j<M;j++) {
    9fe05814:	00048c9b          	sext.w	s9,s1
    9fe05818:	4c01                	li	s8,0
    9fe0581a:	4b01                	li	s6,0
    9fe0581c:	fffc8b9b          	addiw	s7,s9,-1
    9fe05820:	03205063          	blez	s2,9fe05840 <LP_AEC+0x2c6>
      //if (j==0 || ((2+st->cancel_count)%(M-1)) == j+1) {
      if (j==0 || st->cancel_count%(M-1) == j-1) {  /* better */
    9fe05824:	460b0163          	beqz	s6,9fe05c86 <LP_AEC+0x70c>
    9fe05828:	4458                	lw	a4,12(s0)
    9fe0582a:	fffb079b          	addiw	a5,s6,-1
    9fe0582e:	0357673b          	remw	a4,a4,s5
    9fe05832:	44f70a63          	beq	a4,a5,9fe05c86 <LP_AEC+0x70c>
   for (j=0;j<M;j++) {
    9fe05836:	2b05                	addiw	s6,s6,1
    9fe05838:	018c8c3b          	addw	s8,s9,s8
    9fe0583c:	ff6914e3          	bne	s2,s6,9fe05824 <LP_AEC+0x2aa>
         speech_fft(st->fft_table, st->wtmp, &st->W[j*N]);
      }
   }

   /* Reset to zeros for accumulation */
   for (i=0;i<=st->frame_size;i++)
    9fe05840:	4018                	lw	a4,0(s0)
    9fe05842:	4781                	li	a5,0
    9fe05844:	02074663          	bltz	a4,9fe05870 <LP_AEC+0x2f6>
      st->Rf[i] = st->Yf[i] = st->Xf[i] = 0;
    9fe05848:	6478                	ld	a4,200(s0)
    9fe0584a:	00279693          	slli	a3,a5,0x2
   for (i=0;i<=st->frame_size;i++)
    9fe0584e:	0785                	addi	a5,a5,1
      st->Rf[i] = st->Yf[i] = st->Xf[i] = 0;
    9fe05850:	9736                	add	a4,a4,a3
    9fe05852:	00072023          	sw	zero,0(a4)
    9fe05856:	6078                	ld	a4,192(s0)
   for (i=0;i<=st->frame_size;i++)
    9fe05858:	0007861b          	sext.w	a2,a5
      st->Rf[i] = st->Yf[i] = st->Xf[i] = 0;
    9fe0585c:	9736                	add	a4,a4,a3
    9fe0585e:	00072023          	sw	zero,0(a4)
    9fe05862:	7c58                	ld	a4,184(s0)
    9fe05864:	9736                	add	a4,a4,a3
    9fe05866:	00072023          	sw	zero,0(a4)
   for (i=0;i<=st->frame_size;i++)
    9fe0586a:	4018                	lw	a4,0(s0)
    9fe0586c:	fcc75ee3          	bge	a4,a2,9fe05848 <LP_AEC+0x2ce>
   Dbf = 0;
   See = 0;
#ifdef TWO_FILTER
   /* Difference in response, this is used to estimate the variance of the residual power estimate */
   /* st.Y(:) = st.Y(:) + st.X(:, j) .* st.W(:, j); */
   accum_spectral_mul(st->X, st->W, st->Y, N, M);
    9fe05870:	7430                	ld	a2,104(s0)
    9fe05872:	604c                	ld	a1,128(s0)
    9fe05874:	6428                	ld	a0,72(s0)
    9fe05876:	874a                	mv	a4,s2
    9fe05878:	86a6                	mv	a3,s1
    9fe0587a:	3a7000ef          	jal	ra,9fe06420 <accum_spectral_mul>
   /* st.y : [ ~ | leak background ] */
   speech_ifft(st->fft_table, st->Y, st->y);
    9fe0587e:	6c30                	ld	a2,88(s0)
    9fe05880:	742c                	ld	a1,104(s0)
    9fe05882:	7c68                	ld	a0,248(s0)
    9fe05884:	085030ef          	jal	ra,9fe09108 <speech_ifft>
   for (i=0;i<st->frame_size;i++) {
    9fe05888:	4010                	lw	a2,0(s0)
    9fe0588a:	4781                	li	a5,0
    9fe0588c:	02c05a63          	blez	a2,9fe058c0 <LP_AEC+0x346>
      st->e[i] = st->e[i+st->frame_size] - st->y[i+st->frame_size];
    9fe05890:	7c18                	ld	a4,56(s0)
    9fe05892:	6c34                	ld	a3,88(s0)
    9fe05894:	9e3d                	addw	a2,a2,a5
    9fe05896:	060a                	slli	a2,a2,0x2
    9fe05898:	00c705b3          	add	a1,a4,a2
    9fe0589c:	9636                	add	a2,a2,a3
    9fe0589e:	00062707          	flw	fa4,0(a2)
    9fe058a2:	0005a787          	flw	fa5,0(a1)
    9fe058a6:	00279693          	slli	a3,a5,0x2
    9fe058aa:	9736                	add	a4,a4,a3
    9fe058ac:	08e7f7d3          	fsub.s	fa5,fa5,fa4
   for (i=0;i<st->frame_size;i++) {
    9fe058b0:	0785                	addi	a5,a5,1
    9fe058b2:	0007869b          	sext.w	a3,a5
      st->e[i] = st->e[i+st->frame_size] - st->y[i+st->frame_size];
    9fe058b6:	00f72027          	fsw	fa5,0(a4)
   for (i=0;i<st->frame_size;i++) {
    9fe058ba:	4010                	lw	a2,0(s0)
    9fe058bc:	fcc6cae3          	blt	a3,a2,9fe05890 <LP_AEC+0x316>
   }
   Dbf += 10 + inner_prod(st->e, st->e, st->frame_size);  /* the variance of e(n) */
    9fe058c0:	7c0c                	ld	a1,56(s0)
    9fe058c2:	852e                	mv	a0,a1
    9fe058c4:	207000ef          	jal	ra,9fe062ca <inner_prod>
    9fe058c8:	0000d797          	auipc	a5,0xd
    9fe058cc:	9a87aa87          	flw	fs5,-1624(a5) # 9fe12270 <__func__.1+0xb8>
    9fe058d0:	01557453          	fadd.s	fs0,fa0,fs5
    9fe058d4:	f00007d3          	fmv.w.x	fa5,zero
   for (i=0;i<st->frame_size;i++)
    9fe058d8:	4010                	lw	a2,0(s0)
   Dbf += 10 + inner_prod(st->e, st->e, st->frame_size);  /* the variance of e(n) */
    9fe058da:	00f47453          	fadd.s	fs0,fs0,fa5
   for (i=0;i<st->frame_size;i++)
    9fe058de:	02c05b63          	blez	a2,9fe05914 <LP_AEC+0x39a>
    9fe058e2:	4781                	li	a5,0
      st->e[i] = st->input[i] - st->y[i+st->frame_size];
    9fe058e4:	6c34                	ld	a3,88(s0)
    9fe058e6:	682c                	ld	a1,80(s0)
    9fe058e8:	9e3d                	addw	a2,a2,a5
    9fe058ea:	00279513          	slli	a0,a5,0x2
    9fe058ee:	060a                	slli	a2,a2,0x2
    9fe058f0:	9636                	add	a2,a2,a3
    9fe058f2:	95aa                	add	a1,a1,a0
    9fe058f4:	00062707          	flw	fa4,0(a2)
    9fe058f8:	0005a787          	flw	fa5,0(a1)
    9fe058fc:	7c18                	ld	a4,56(s0)
   for (i=0;i<st->frame_size;i++)
    9fe058fe:	0785                	addi	a5,a5,1
      st->e[i] = st->input[i] - st->y[i+st->frame_size];
    9fe05900:	08e7f7d3          	fsub.s	fa5,fa5,fa4
    9fe05904:	972a                	add	a4,a4,a0
   for (i=0;i<st->frame_size;i++)
    9fe05906:	0007869b          	sext.w	a3,a5
      st->e[i] = st->input[i] - st->y[i+st->frame_size];
    9fe0590a:	00f72027          	fsw	fa5,0(a4)
   for (i=0;i<st->frame_size;i++)
    9fe0590e:	4010                	lw	a2,0(s0)
    9fe05910:	fcc6cae3          	blt	a3,a2,9fe058e4 <LP_AEC+0x36a>
   See += inner_prod(st->e, st->e, st->frame_size);  /* the variance of e(n) */
    9fe05914:	7c0c                	ld	a1,56(s0)
    9fe05916:	852e                	mv	a0,a1
    9fe05918:	1b3000ef          	jal	ra,9fe062ca <inner_prod>
    9fe0591c:	f00001d3          	fmv.w.x	ft3,zero
#ifdef TWO_FILTER
   /* For two time windows, compute the mean of the energy difference, as well as the variance */
   st->Davg1 = .6f * st->Davg1 + .4f * (Sff - See);
   st->Davg2 = .85f * st->Davg2 + .15f * (Sff - See);
   st->Dvar1 = st->aec_var1_smooth * st->Dvar1 + .16f * Sff * Dbf ;
   st->Dvar2 = st->aec_var2_smooth * st->Dvar2 + .0225f * Sff * Dbf ;
    9fe05920:	0000d797          	auipc	a5,0xd
    9fe05924:	9687a787          	flw	fa5,-1688(a5) # 9fe12288 <__func__.1+0xd0>
   st->Dvar1 = st->aec_var1_smooth * st->Dvar1 + .16f * Sff * Dbf ;
    9fe05928:	0000d797          	auipc	a5,0xd
    9fe0592c:	95c7a687          	flw	fa3,-1700(a5) # 9fe12284 <__func__.1+0xcc>
   See += inner_prod(st->e, st->e, st->frame_size);  /* the variance of e(n) */
    9fe05930:	00357b53          	fadd.s	fs6,fa0,ft3
   st->Dvar2 = st->aec_var2_smooth * st->Dvar2 + .0225f * Sff * Dbf ;
    9fe05934:	10f9f753          	fmul.s	fa4,fs3,fa5
   st->Dvar1 = st->aec_var1_smooth * st->Dvar1 + .16f * Sff * Dbf ;
    9fe05938:	10d9f6d3          	fmul.s	fa3,fs3,fa3
   st->Davg1 = .6f * st->Davg1 + .4f * (Sff - See);
    9fe0593c:	0000d797          	auipc	a5,0xd
    9fe05940:	9387a107          	flw	ft2,-1736(a5) # 9fe12274 <__func__.1+0xbc>
   st->Davg2 = .85f * st->Davg2 + .15f * (Sff - See);
    9fe05944:	0000d797          	auipc	a5,0xd
    9fe05948:	9387a087          	flw	ft1,-1736(a5) # 9fe1227c <__func__.1+0xc4>
   st->Davg1 = .6f * st->Davg1 + .4f * (Sff - See);
    9fe0594c:	0969f7d3          	fsub.s	fa5,fs3,fs6
   st->Dvar2 = st->aec_var2_smooth * st->Dvar2 + .0225f * Sff * Dbf ;
    9fe05950:	10877753          	fmul.s	fa4,fa4,fs0
   st->Dvar1 = st->aec_var1_smooth * st->Dvar1 + .16f * Sff * Dbf ;
    9fe05954:	1086f6d3          	fmul.s	fa3,fa3,fs0
   st->Davg1 = .6f * st->Davg1 + .4f * (Sff - See);
    9fe05958:	09042607          	flw	fa2,144(s0)
   st->Davg2 = .85f * st->Davg2 + .15f * (Sff - See);
    9fe0595c:	09442587          	flw	fa1,148(s0)
   st->Davg1 = .6f * st->Davg1 + .4f * (Sff - See);
    9fe05960:	1027f153          	fmul.s	ft2,fa5,ft2
   st->Davg2 = .85f * st->Davg2 + .15f * (Sff - See);
    9fe05964:	1017f0d3          	fmul.s	ft1,fa5,ft1
   st->Dvar1 = st->aec_var1_smooth * st->Dvar1 + .16f * Sff * Dbf ;
    9fe05968:	09842287          	flw	ft5,152(s0)
   st->Dvar2 = st->aec_var2_smooth * st->Dvar2 + .0225f * Sff * Dbf ;
    9fe0596c:	09c42207          	flw	ft4,156(s0)
   st->Dvar1 = st->aec_var1_smooth * st->Dvar1 + .16f * Sff * Dbf ;
    9fe05970:	12c42507          	flw	fa0,300(s0)
   st->Dvar2 = st->aec_var2_smooth * st->Dvar2 + .0225f * Sff * Dbf ;
    9fe05974:	13042007          	flw	ft0,304(s0)
   st->Davg1 = .6f * st->Davg1 + .4f * (Sff - See);
    9fe05978:	0000d797          	auipc	a5,0xd
    9fe0597c:	9007a387          	flw	ft7,-1792(a5) # 9fe12278 <__func__.1+0xc0>
   st->Davg2 = .85f * st->Davg2 + .15f * (Sff - See);
    9fe05980:	0000d797          	auipc	a5,0xd
    9fe05984:	9007a307          	flw	ft6,-1792(a5) # 9fe12280 <__func__.1+0xc8>
   st->Dvar1 = st->aec_var1_smooth * st->Dvar1 + .16f * Sff * Dbf ;
    9fe05988:	685576c3          	fmadd.s	fa3,fa0,ft5,fa3
   st->Davg1 = .6f * st->Davg1 + .4f * (Sff - See);
    9fe0598c:	10767643          	fmadd.s	fa2,fa2,ft7,ft2
   st->Dvar2 = st->aec_var2_smooth * st->Dvar2 + .0225f * Sff * Dbf ;
    9fe05990:	70407543          	fmadd.s	fa0,ft0,ft4,fa4
   st->Davg2 = .85f * st->Davg2 + .15f * (Sff - See);
    9fe05994:	0865f5c3          	fmadd.s	fa1,fa1,ft6,ft1

   update_foreground = 0;
   /* Inspect if there is a statistically significant reduction in the residual echo */
   if (((Sff - See) * ABS(Sff - See)) > (Sff * Dbf))
    9fe05998:	a03797d3          	flt.s	a5,fa5,ft3
   st->Dvar1 = st->aec_var1_smooth * st->Dvar1 + .16f * Sff * Dbf ;
    9fe0599c:	08d42c27          	fsw	fa3,152(s0)
   st->Davg1 = .6f * st->Davg1 + .4f * (Sff - See);
    9fe059a0:	08c42827          	fsw	fa2,144(s0)
   st->Dvar2 = st->aec_var2_smooth * st->Dvar2 + .0225f * Sff * Dbf ;
    9fe059a4:	08a42e27          	fsw	fa0,156(s0)
   st->Davg2 = .85f * st->Davg2 + .15f * (Sff - See);
    9fe059a8:	08b42a27          	fsw	fa1,148(s0)
   if (((Sff - See) * ABS(Sff - See)) > (Sff * Dbf))
    9fe059ac:	20f78053          	fmv.s	ft0,fa5
    9fe059b0:	c399                	beqz	a5,9fe059b6 <LP_AEC+0x43c>
    9fe059b2:	20f79053          	fneg.s	ft0,fa5
    9fe059b6:	1007f753          	fmul.s	fa4,fa5,ft0
    9fe059ba:	1089f0d3          	fmul.s	ft1,fs3,fs0
    9fe059be:	a0e097d3          	flt.s	a5,ft1,fa4
    9fe059c2:	e7a1                	bnez	a5,9fe05a0a <LP_AEC+0x490>
      update_foreground = 1;
   else if ((st->Davg1 * ABS(st->Davg1)) > (st->aec_var1_update * st->Dvar1))
    9fe059c4:	f0000753          	fmv.w.x	fa4,zero
    9fe059c8:	20c60153          	fmv.s	ft2,fa2
    9fe059cc:	a0e617d3          	flt.s	a5,fa2,fa4
    9fe059d0:	66079863          	bnez	a5,9fe06040 <LP_AEC+0xac6>
    9fe059d4:	13442707          	flw	fa4,308(s0)
    9fe059d8:	102670d3          	fmul.s	ft1,fa2,ft2
    9fe059dc:	10e6f753          	fmul.s	fa4,fa3,fa4
    9fe059e0:	a01717d3          	flt.s	a5,fa4,ft1
    9fe059e4:	e39d                	bnez	a5,9fe05a0a <LP_AEC+0x490>
      update_foreground = 1;
   else if ((st->Davg2 * ABS(st->Davg2)) > (st->aec_var2_update * st->Dvar2))
    9fe059e6:	f0000753          	fmv.w.x	fa4,zero
    9fe059ea:	20b581d3          	fmv.s	ft3,fa1
    9fe059ee:	a0e597d3          	flt.s	a5,fa1,fa4
    9fe059f2:	000797e3          	bnez	a5,9fe06200 <LP_AEC+0xc86>
    9fe059f6:	13842707          	flw	fa4,312(s0)
    9fe059fa:	1035f0d3          	fmul.s	ft1,fa1,ft3
    9fe059fe:	10e57753          	fmul.s	fa4,fa0,fa4
    9fe05a02:	a01717d3          	flt.s	a5,fa4,ft1
    9fe05a06:	74078263          	beqz	a5,9fe0614a <LP_AEC+0xbd0>

   if (update_foreground) {  /* update foreground filter */
      st->Davg1 = st->Davg2 = FLOAT_ZERO;
      st->Dvar1 = st->Dvar2 = FLOAT_ZERO;
      /* Copy background filter to foreground filter */
      for (i=0;i<N*M;i++)  /* copy data for (N/2+1) frequency bin */
    9fe05a0a:	0299093b          	mulw	s2,s2,s1
      st->Davg1 = st->Davg2 = FLOAT_ZERO;
    9fe05a0e:	08043823          	sd	zero,144(s0)
      st->Dvar1 = st->Dvar2 = FLOAT_ZERO;
    9fe05a12:	08043c23          	sd	zero,152(s0)
      for (i=0;i<N*M;i++)  /* copy data for (N/2+1) frequency bin */
    9fe05a16:	4781                	li	a5,0
    9fe05a18:	00291613          	slli	a2,s2,0x2
    9fe05a1c:	01205d63          	blez	s2,9fe05a36 <LP_AEC+0x4bc>
         st->foreground[i] = st->W[i];
    9fe05a20:	6054                	ld	a3,128(s0)
    9fe05a22:	6458                	ld	a4,136(s0)
    9fe05a24:	96be                	add	a3,a3,a5
    9fe05a26:	0006a787          	flw	fa5,0(a3)
    9fe05a2a:	973e                	add	a4,a4,a5
      for (i=0;i<N*M;i++)  /* copy data for (N/2+1) frequency bin */
    9fe05a2c:	0791                	addi	a5,a5,4
         st->foreground[i] = st->W[i];
    9fe05a2e:	00f72027          	fsw	fa5,0(a4)
      for (i=0;i<N*M;i++)  /* copy data for (N/2+1) frequency bin */
    9fe05a32:	fef617e3          	bne	a2,a5,9fe05a20 <LP_AEC+0x4a6>
      /* Apply a smooth transition to avoid blocking artifacts */
      /* y1(n) = window(n+N/2)y1(n) + window(n)y2(n) */
      for (i=0;i<st->frame_size;i++)
    9fe05a36:	4010                	lw	a2,0(s0)
    9fe05a38:	4781                	li	a5,0
    9fe05a3a:	14c05663          	blez	a2,9fe05b86 <LP_AEC+0x60c>
         /* Perform windowing and 50% OLA, output = window first part * leak background(new) + window last part * leak forground(old) */
	 /* st.e last part still be leak(y) foreground */
         st->e[i+st->frame_size] = st->window[i+st->frame_size] * st->e[i+st->frame_size] + st->window[i] * st->y[i+st->frame_size];
    9fe05a3e:	7474                	ld	a3,232(s0)
    9fe05a40:	6c38                	ld	a4,88(s0)
    9fe05a42:	9e3d                	addw	a2,a2,a5
    9fe05a44:	060a                	slli	a2,a2,0x2
    9fe05a46:	00279593          	slli	a1,a5,0x2
    9fe05a4a:	9732                	add	a4,a4,a2
    9fe05a4c:	95b6                	add	a1,a1,a3
    9fe05a4e:	0005a787          	flw	fa5,0(a1)
    9fe05a52:	00072707          	flw	fa4,0(a4)
    9fe05a56:	7c18                	ld	a4,56(s0)
    9fe05a58:	96b2                	add	a3,a3,a2
    9fe05a5a:	10e7f753          	fmul.s	fa4,fa5,fa4
    9fe05a5e:	963a                	add	a2,a2,a4
    9fe05a60:	00062687          	flw	fa3,0(a2)
    9fe05a64:	0006a787          	flw	fa5,0(a3)
      for (i=0;i<st->frame_size;i++)
    9fe05a68:	0785                	addi	a5,a5,1
    9fe05a6a:	0007871b          	sext.w	a4,a5
         st->e[i+st->frame_size] = st->window[i+st->frame_size] * st->e[i+st->frame_size] + st->window[i] * st->y[i+st->frame_size];
    9fe05a6e:	70d7f7c3          	fmadd.s	fa5,fa5,fa3,fa4
    9fe05a72:	00f62027          	fsw	fa5,0(a2)
      for (i=0;i<st->frame_size;i++)
    9fe05a76:	4010                	lw	a2,0(s0)
    9fe05a78:	fcc743e3          	blt	a4,a2,9fe05a3e <LP_AEC+0x4c4>
   }
#endif

   Sey = Syy = Sdd = 0;
   /* Compute error signal (for the output with de-emphasis) */
   for (i=0;i<st->frame_size;i++) {
    9fe05a7c:	10c05563          	blez	a2,9fe05b86 <LP_AEC+0x60c>
      tmp_out = st->input[i] - st->y[i+st->frame_size];
#endif
      /* H = 1/(1-0.9z^(-1)), IIR, de-emphasis filtering */
      tmp_out = tmp_out + st->preemph * st->memE[0];
	/* this is an arbitrary test for saturation in the mic signal */
      if (in[i] <= -32000 || in[i] >= 32000) {
    9fe05a80:	6c21                	lui	s8,0x8
    9fe05a82:	6bc1                	lui	s7,0x10
         if (st->saturated == 0)
            st->saturated = 1;
      }
      out[i] = (short)WORD2INT(tmp_out);  /* the output data is processed after windowing and OLA cuz e(n) */
    9fe05a84:	6ca1                	lui	s9,0x8
    9fe05a86:	6aa2                	ld	s5,8(sp)
    9fe05a88:	8b4e                	mv	s6,s3
   for (i=0;i<st->frame_size;i++) {
    9fe05a8a:	4901                	li	s2,0
    9fe05a8c:	0000c797          	auipc	a5,0xc
    9fe05a90:	7c47ac07          	flw	fs8,1988(a5) # 9fe12250 <__func__.1+0x98>
      if (in[i] <= -32000 || in[i] >= 32000) {
    9fe05a94:	cffc0c1b          	addiw	s8,s8,-769
    9fe05a98:	9feb8b93          	addi	s7,s7,-1538 # f9fe <_EL1_STACK_SIZE+0xf1fe>
            st->saturated = 1;
    9fe05a9c:	4d05                	li	s10,1
      out[i] = (short)WORD2INT(tmp_out);  /* the output data is processed after windowing and OLA cuz e(n) */
    9fe05a9e:	0000c797          	auipc	a5,0xc
    9fe05aa2:	7b67ac87          	flw	fs9,1974(a5) # 9fe12254 <__func__.1+0x9c>
    9fe05aa6:	1cfd                	addi	s9,s9,-1
    9fe05aa8:	0000c797          	auipc	a5,0xc
    9fe05aac:	7b07bb87          	fld	fs7,1968(a5) # 9fe12258 <__func__.1+0xa0>
    9fe05ab0:	a829                	j	9fe05aca <LP_AEC+0x550>
    9fe05ab2:	00fa9023          	sh	a5,0(s5)
      st->memE[0] = tmp_out;  /* state out(n-1) */
    9fe05ab6:	11043703          	ld	a4,272(s0)
   for (i=0;i<st->frame_size;i++) {
    9fe05aba:	0009079b          	sext.w	a5,s2
    9fe05abe:	0a89                	addi	s5,s5,2
      st->memE[0] = tmp_out;  /* state out(n-1) */
    9fe05ac0:	00872027          	fsw	fs0,0(a4)
   for (i=0;i<st->frame_size;i++) {
    9fe05ac4:	4010                	lw	a2,0(s0)
    9fe05ac6:	08c7d763          	bge	a5,a2,9fe05b54 <LP_AEC+0x5da>
      tmp_out = st->input[i] - st->e[i+st->frame_size];
    9fe05aca:	6838                	ld	a4,80(s0)
    9fe05acc:	7c1c                	ld	a5,56(s0)
    9fe05ace:	00c9063b          	addw	a2,s2,a2
    9fe05ad2:	00291693          	slli	a3,s2,0x2
    9fe05ad6:	060a                	slli	a2,a2,0x2
    9fe05ad8:	9736                	add	a4,a4,a3
    9fe05ada:	97b2                	add	a5,a5,a2
    9fe05adc:	00072407          	flw	fs0,0(a4)
    9fe05ae0:	0007a787          	flw	fa5,0(a5)
      tmp_out = tmp_out + st->preemph * st->memE[0];
    9fe05ae4:	11043703          	ld	a4,272(s0)
      if (in[i] <= -32000 || in[i] >= 32000) {
    9fe05ae8:	000b5783          	lhu	a5,0(s6)
      tmp_out = st->input[i] - st->e[i+st->frame_size];
    9fe05aec:	08f477d3          	fsub.s	fa5,fs0,fa5
      tmp_out = tmp_out + st->preemph * st->memE[0];
    9fe05af0:	00072707          	flw	fa4,0(a4)
    9fe05af4:	11842407          	flw	fs0,280(s0)
      if (in[i] <= -32000 || in[i] >= 32000) {
    9fe05af8:	018787bb          	addw	a5,a5,s8
    9fe05afc:	17c2                	slli	a5,a5,0x30
    9fe05afe:	93c1                	srli	a5,a5,0x30
      tmp_out = tmp_out + st->preemph * st->memE[0];
    9fe05b00:	78e47443          	fmadd.s	fs0,fs0,fa4,fa5
   for (i=0;i<st->frame_size;i++) {
    9fe05b04:	0905                	addi	s2,s2,1
      if (in[i] <= -32000 || in[i] >= 32000) {
    9fe05b06:	00fbf663          	bgeu	s7,a5,9fe05b12 <LP_AEC+0x598>
         if (st->saturated == 0)
    9fe05b0a:	485c                	lw	a5,20(s0)
    9fe05b0c:	e399                	bnez	a5,9fe05b12 <LP_AEC+0x598>
            st->saturated = 1;
    9fe05b0e:	01a42a23          	sw	s10,20(s0)
      out[i] = (short)WORD2INT(tmp_out);  /* the output data is processed after windowing and OLA cuz e(n) */
    9fe05b12:	a1841753          	flt.s	a4,fs0,fs8
    9fe05b16:	77e1                	lui	a5,0xffff8
   for (i=0;i<st->frame_size;i++) {
    9fe05b18:	0b09                	addi	s6,s6,2
      out[i] = (short)WORD2INT(tmp_out);  /* the output data is processed after windowing and OLA cuz e(n) */
    9fe05b1a:	ff41                	bnez	a4,9fe05ab2 <LP_AEC+0x538>
    9fe05b1c:	a08c9753          	flt.s	a4,fs9,fs0
    9fe05b20:	87e6                	mv	a5,s9
    9fe05b22:	fb41                	bnez	a4,9fe05ab2 <LP_AEC+0x538>
    9fe05b24:	42040553          	fcvt.d.s	fa0,fs0
   for (i=0;i<st->frame_size;i++) {
    9fe05b28:	0a89                	addi	s5,s5,2
      out[i] = (short)WORD2INT(tmp_out);  /* the output data is processed after windowing and OLA cuz e(n) */
    9fe05b2a:	03757553          	fadd.d	fa0,fa0,fs7
    9fe05b2e:	e35fa0ef          	jal	ra,9fe00962 <floor>
    9fe05b32:	c20517d3          	fcvt.w.d	a5,fa0,rtz
    9fe05b36:	0107979b          	slliw	a5,a5,0x10
    9fe05b3a:	4107d79b          	sraiw	a5,a5,0x10
    9fe05b3e:	fefa9f23          	sh	a5,-2(s5)
      st->memE[0] = tmp_out;  /* state out(n-1) */
    9fe05b42:	11043703          	ld	a4,272(s0)
   for (i=0;i<st->frame_size;i++) {
    9fe05b46:	0009079b          	sext.w	a5,s2
      st->memE[0] = tmp_out;  /* state out(n-1) */
    9fe05b4a:	00872027          	fsw	fs0,0(a4)
   for (i=0;i<st->frame_size;i++) {
    9fe05b4e:	4010                	lw	a2,0(s0)
    9fe05b50:	f6c7cde3          	blt	a5,a2,9fe05aca <LP_AEC+0x550>
   }

   /* Compute error signal */
   for (i=0;i<st->frame_size;i++) {
    9fe05b54:	02c05963          	blez	a2,9fe05b86 <LP_AEC+0x60c>
    9fe05b58:	4781                	li	a5,0
      st->e[i+st->frame_size] = st->e[i];
    9fe05b5a:	7c18                	ld	a4,56(s0)
    9fe05b5c:	00279693          	slli	a3,a5,0x2
    9fe05b60:	9e3d                	addw	a2,a2,a5
    9fe05b62:	00d705b3          	add	a1,a4,a3
    9fe05b66:	0005a787          	flw	fa5,0(a1)
    9fe05b6a:	060a                	slli	a2,a2,0x2
    9fe05b6c:	9732                	add	a4,a4,a2
    9fe05b6e:	00f72027          	fsw	fa5,0(a4)
      st->e[i] = 0;
    9fe05b72:	7c18                	ld	a4,56(s0)
   for (i=0;i<st->frame_size;i++) {
    9fe05b74:	0785                	addi	a5,a5,1
    9fe05b76:	0007859b          	sext.w	a1,a5
      st->e[i] = 0;
    9fe05b7a:	9736                	add	a4,a4,a3
    9fe05b7c:	00072023          	sw	zero,0(a4)
   for (i=0;i<st->frame_size;i++) {
    9fe05b80:	4010                	lw	a2,0(s0)
    9fe05b82:	fcc5cce3          	blt	a1,a2,9fe05b5a <LP_AEC+0x5e0>
   }

   /* Compute a bunch of correlations */
   Sey += inner_prod(st->e+st->frame_size, st->y+st->frame_size, st->frame_size);  /* the covariance of e(n) and y(n) */
    9fe05b86:	6c2c                	ld	a1,88(s0)
    9fe05b88:	7c08                	ld	a0,56(s0)
    9fe05b8a:	00261793          	slli	a5,a2,0x2
    9fe05b8e:	95be                	add	a1,a1,a5
    9fe05b90:	953e                	add	a0,a0,a5
    9fe05b92:	738000ef          	jal	ra,9fe062ca <inner_prod>
   Syy += inner_prod(st->y+st->frame_size, st->y+st->frame_size, st->frame_size);  /* the variance of y(n) */
    9fe05b96:	4010                	lw	a2,0(s0)
    9fe05b98:	6c2c                	ld	a1,88(s0)
   Sey += inner_prod(st->e+st->frame_size, st->y+st->frame_size, st->frame_size);  /* the covariance of e(n) and y(n) */
    9fe05b9a:	f0000bd3          	fmv.w.x	fs7,zero
   Syy += inner_prod(st->y+st->frame_size, st->y+st->frame_size, st->frame_size);  /* the variance of y(n) */
    9fe05b9e:	00261793          	slli	a5,a2,0x2
    9fe05ba2:	95be                	add	a1,a1,a5
    9fe05ba4:	852e                	mv	a0,a1
   Sey += inner_prod(st->e+st->frame_size, st->y+st->frame_size, st->frame_size);  /* the covariance of e(n) and y(n) */
    9fe05ba6:	01757453          	fadd.s	fs0,fa0,fs7
   Syy += inner_prod(st->y+st->frame_size, st->y+st->frame_size, st->frame_size);  /* the variance of y(n) */
    9fe05baa:	720000ef          	jal	ra,9fe062ca <inner_prod>
   Sdd += inner_prod(st->input, st->input, st->frame_size);  /* the variance of d(n) */
    9fe05bae:	682c                	ld	a1,80(s0)
    9fe05bb0:	4010                	lw	a2,0(s0)
   Syy += inner_prod(st->y+st->frame_size, st->y+st->frame_size, st->frame_size);  /* the variance of y(n) */
    9fe05bb2:	01757bd3          	fadd.s	fs7,fa0,fs7
   Sdd += inner_prod(st->input, st->input, st->frame_size);  /* the variance of d(n) */
    9fe05bb6:	852e                	mv	a0,a1
    9fe05bb8:	712000ef          	jal	ra,9fe062ca <inner_prod>

   speech_fft(st->fft_table, st->e, st->E);
    9fe05bbc:	7830                	ld	a2,112(s0)
    9fe05bbe:	7c0c                	ld	a1,56(s0)
    9fe05bc0:	7c68                	ld	a0,248(s0)
   Sdd += inner_prod(st->input, st->input, st->frame_size);  /* the variance of d(n) */
    9fe05bc2:	20a50c53          	fmv.s	fs8,fa0
   speech_fft(st->fft_table, st->e, st->E);
    9fe05bc6:	4d6030ef          	jal	ra,9fe0909c <speech_fft>
   for (i=0;i<st->frame_size;i++)
    9fe05bca:	4018                	lw	a4,0(s0)
    9fe05bcc:	4781                	li	a5,0
    9fe05bce:	00e05e63          	blez	a4,9fe05bea <LP_AEC+0x670>
      st->y[i] = 0;
    9fe05bd2:	6c38                	ld	a4,88(s0)
    9fe05bd4:	00279693          	slli	a3,a5,0x2
   for (i=0;i<st->frame_size;i++)
    9fe05bd8:	0785                	addi	a5,a5,1
      st->y[i] = 0;
    9fe05bda:	9736                	add	a4,a4,a3
    9fe05bdc:	00072023          	sw	zero,0(a4)
   for (i=0;i<st->frame_size;i++)
    9fe05be0:	4014                	lw	a3,0(s0)
    9fe05be2:	0007871b          	sext.w	a4,a5
    9fe05be6:	fed746e3          	blt	a4,a3,9fe05bd2 <LP_AEC+0x658>
   speech_fft(st->fft_table, st->y, st->Y);
    9fe05bea:	6c2c                	ld	a1,88(s0)
    9fe05bec:	7c68                	ld	a0,248(s0)
    9fe05bee:	7430                	ld	a2,104(s0)
    9fe05bf0:	4ac030ef          	jal	ra,9fe0909c <speech_fft>

   accum_power_spectrum(st->E, st->Rf, N);  /* Rf(k) = the power spectrum of E(k), error power in each frequency bin (N/2+1) */
    9fe05bf4:	7c4c                	ld	a1,184(s0)
    9fe05bf6:	7828                	ld	a0,112(s0)
    9fe05bf8:	8626                	mv	a2,s1
    9fe05bfa:	794000ef          	jal	ra,9fe0638e <accum_power_spectrum>
   accum_power_spectrum(st->Y, st->Yf, N);  /* Yf(k) = the power spectrum of Y(k) , estimated echo power in each frequency bin (N/2+1) */
    9fe05bfe:	606c                	ld	a1,192(s0)
    9fe05c00:	7428                	ld	a0,104(s0)
    9fe05c02:	8626                	mv	a2,s1
    9fe05c04:	78a000ef          	jal	ra,9fe0638e <accum_power_spectrum>


   /* Sanity check */
   if (!(Syy>=0 && Sxx>=0 && See >= 0)) {  /* things have gone really bad */
    9fe05c08:	f00007d3          	fmv.w.x	fa5,zero
    9fe05c0c:	a17787d3          	fle.s	a5,fa5,fs7
    9fe05c10:	cfcd                	beqz	a5,9fe05cca <LP_AEC+0x750>
   Sxx += inner_prod(st->x+st->frame_size, st->x+st->frame_size, st->frame_size);  /* the variance of x(n) */
    9fe05c12:	00fa7a53          	fadd.s	fs4,fs4,fa5
   if (!(Syy>=0 && Sxx>=0 && See >= 0)) {  /* things have gone really bad */
    9fe05c16:	a14787d3          	fle.s	a5,fa5,fs4
    9fe05c1a:	cbc5                	beqz	a5,9fe05cca <LP_AEC+0x750>
    9fe05c1c:	a16787d3          	fle.s	a5,fa5,fs6
    9fe05c20:	c7cd                	beqz	a5,9fe05cca <LP_AEC+0x750>
      st->screwed_up += 50;
      for (i=0;i<st->frame_size;i++)
         out[i] = 0;
   } else if (Sff > (Sdd + (float)(N * 10000))) {  /* if foreground error signal is a lot greater than mic in */
    9fe05c22:	6789                	lui	a5,0x2
    9fe05c24:	7107879b          	addiw	a5,a5,1808
    9fe05c28:	02f487bb          	mulw	a5,s1,a5
   Sdd += inner_prod(st->input, st->input, st->frame_size);  /* the variance of d(n) */
    9fe05c2c:	00fc77d3          	fadd.s	fa5,fs8,fa5
   } else if (Sff > (Sdd + (float)(N * 10000))) {  /* if foreground error signal is a lot greater than mic in */
    9fe05c30:	d007f753          	fcvt.s.w	fa4,a5
    9fe05c34:	00f777d3          	fadd.s	fa5,fa4,fa5
    9fe05c38:	a13797d3          	flt.s	a5,fa5,fs3
    9fe05c3c:	5c078f63          	beqz	a5,9fe0621a <LP_AEC+0xca0>
      st->screwed_up++;
    9fe05c40:	4c18                	lw	a4,24(s0)
    9fe05c42:	0017079b          	addiw	a5,a4,1
    9fe05c46:	cc1c                	sw	a5,24(s0)
   } else {  /* everything is fine */
      st->screwed_up = 0;
   }

   if (st->screwed_up>=50) {
    9fe05c48:	03100713          	li	a4,49
    9fe05c4c:	0af75463          	bge	a4,a5,9fe05cf4 <LP_AEC+0x77a>
      //speech_warning("AEC started behaving unreasonable and need to reset");
      echo_state_reset(st);
    9fe05c50:	8522                	mv	a0,s0
      for (i=0;i<N;i++)
         st->last_y[i] = st->x[i];
   }
   #endif

}
    9fe05c52:	640e                	ld	s0,192(sp)
    9fe05c54:	60ae                	ld	ra,200(sp)
    9fe05c56:	74ea                	ld	s1,184(sp)
    9fe05c58:	794a                	ld	s2,176(sp)
    9fe05c5a:	79aa                	ld	s3,168(sp)
    9fe05c5c:	7a0a                	ld	s4,160(sp)
    9fe05c5e:	6aea                	ld	s5,152(sp)
    9fe05c60:	6b4a                	ld	s6,144(sp)
    9fe05c62:	6baa                	ld	s7,136(sp)
    9fe05c64:	6c0a                	ld	s8,128(sp)
    9fe05c66:	7ce6                	ld	s9,120(sp)
    9fe05c68:	7d46                	ld	s10,112(sp)
    9fe05c6a:	7da6                	ld	s11,104(sp)
    9fe05c6c:	2466                	fld	fs0,88(sp)
    9fe05c6e:	24c6                	fld	fs1,80(sp)
    9fe05c70:	2926                	fld	fs2,72(sp)
    9fe05c72:	2986                	fld	fs3,64(sp)
    9fe05c74:	3a62                	fld	fs4,56(sp)
    9fe05c76:	3ac2                	fld	fs5,48(sp)
    9fe05c78:	3b22                	fld	fs6,40(sp)
    9fe05c7a:	3b82                	fld	fs7,32(sp)
    9fe05c7c:	2c62                	fld	fs8,24(sp)
    9fe05c7e:	2cc2                	fld	fs9,16(sp)
    9fe05c80:	6169                	addi	sp,sp,208
      echo_state_reset(st);
    9fe05c82:	f14ff06f          	j	9fe05396 <echo_state_reset>
         speech_ifft(st->fft_table, &st->W[j*N], st->wtmp);
    9fe05c86:	604c                	ld	a1,128(s0)
    9fe05c88:	7850                	ld	a2,176(s0)
    9fe05c8a:	7c68                	ld	a0,248(s0)
    9fe05c8c:	002c1d13          	slli	s10,s8,0x2
    9fe05c90:	95ea                	add	a1,a1,s10
    9fe05c92:	476030ef          	jal	ra,9fe09108 <speech_ifft>
         for (i=st->frame_size;i<N;i++) {
    9fe05c96:	401c                	lw	a5,0(s0)
    9fe05c98:	0297d263          	bge	a5,s1,9fe05cbc <LP_AEC+0x742>
    9fe05c9c:	40fb86bb          	subw	a3,s7,a5
    9fe05ca0:	1682                	slli	a3,a3,0x20
    9fe05ca2:	00178713          	addi	a4,a5,1 # 2001 <_EL1_STACK_SIZE+0x1801>
    9fe05ca6:	9281                	srli	a3,a3,0x20
    9fe05ca8:	96ba                	add	a3,a3,a4
    9fe05caa:	078a                	slli	a5,a5,0x2
    9fe05cac:	068a                	slli	a3,a3,0x2
            st->wtmp[i] = 0;  /* set 0 to the last part */
    9fe05cae:	7858                	ld	a4,176(s0)
    9fe05cb0:	973e                	add	a4,a4,a5
    9fe05cb2:	00072023          	sw	zero,0(a4)
         for (i=st->frame_size;i<N;i++) {
    9fe05cb6:	0791                	addi	a5,a5,4
    9fe05cb8:	fef69be3          	bne	a3,a5,9fe05cae <LP_AEC+0x734>
         speech_fft(st->fft_table, st->wtmp, &st->W[j*N]);
    9fe05cbc:	6050                	ld	a2,128(s0)
    9fe05cbe:	784c                	ld	a1,176(s0)
    9fe05cc0:	7c68                	ld	a0,248(s0)
    9fe05cc2:	966a                	add	a2,a2,s10
    9fe05cc4:	3d8030ef          	jal	ra,9fe0909c <speech_fft>
    9fe05cc8:	b6bd                	j	9fe05836 <LP_AEC+0x2bc>
      st->screwed_up += 50;
    9fe05cca:	4c1c                	lw	a5,24(s0)
      for (i=0;i<st->frame_size;i++)
    9fe05ccc:	4018                	lw	a4,0(s0)
      st->screwed_up += 50;
    9fe05cce:	0327879b          	addiw	a5,a5,50
    9fe05cd2:	cc1c                	sw	a5,24(s0)
      for (i=0;i<st->frame_size;i++)
    9fe05cd4:	00e05c63          	blez	a4,9fe05cec <LP_AEC+0x772>
    9fe05cd8:	6722                	ld	a4,8(sp)
    9fe05cda:	4781                	li	a5,0
         out[i] = 0;
    9fe05cdc:	00071023          	sh	zero,0(a4)
      for (i=0;i<st->frame_size;i++)
    9fe05ce0:	4014                	lw	a3,0(s0)
    9fe05ce2:	2785                	addiw	a5,a5,1
    9fe05ce4:	0709                	addi	a4,a4,2
    9fe05ce6:	fed7cbe3          	blt	a5,a3,9fe05cdc <LP_AEC+0x762>
   if (st->screwed_up>=50) {
    9fe05cea:	4c1c                	lw	a5,24(s0)
    9fe05cec:	03100713          	li	a4,49
    9fe05cf0:	f6f740e3          	blt	a4,a5,9fe05c50 <LP_AEC+0x6d6>
   See = MAX(See, (float)(N * 100));  /* add a small noise floor to make sure not to have problems when dividing */
    9fe05cf4:	06400793          	li	a5,100
    9fe05cf8:	029787bb          	mulw	a5,a5,s1
    9fe05cfc:	d007f7d3          	fcvt.s.w	fa5,a5
    9fe05d00:	a0fb17d3          	flt.s	a5,fs6,fa5
    9fe05d04:	32079663          	bnez	a5,9fe06030 <LP_AEC+0xab6>
   Sxx += inner_prod(st->x+st->frame_size, st->x+st->frame_size, st->frame_size);  /* far-end (TD) current frame power sum */
    9fe05d08:	4010                	lw	a2,0(s0)
    9fe05d0a:	602c                	ld	a1,64(s0)
    9fe05d0c:	f00009d3          	fmv.w.x	fs3,zero
    9fe05d10:	00261793          	slli	a5,a2,0x2
    9fe05d14:	95be                	add	a1,a1,a5
    9fe05d16:	852e                	mv	a0,a1
    9fe05d18:	5b2000ef          	jal	ra,9fe062ca <inner_prod>
   accum_power_spectrum(st->X, st->Xf, N);  /* Xf(k) = far-end(FD) power in each frequency bin (N/2+1) */
    9fe05d1c:	646c                	ld	a1,200(s0)
    9fe05d1e:	6428                	ld	a0,72(s0)
    9fe05d20:	8626                	mv	a2,s1
   Sxx += inner_prod(st->x+st->frame_size, st->x+st->frame_size, st->frame_size);  /* far-end (TD) current frame power sum */
    9fe05d22:	013579d3          	fadd.s	fs3,fa0,fs3
   accum_power_spectrum(st->X, st->Xf, N);  /* Xf(k) = far-end(FD) power in each frequency bin (N/2+1) */
    9fe05d26:	668000ef          	jal	ra,9fe0638e <accum_power_spectrum>
   for (j=0;j<=st->frame_size;j++)
    9fe05d2a:	401c                	lw	a5,0(s0)
    9fe05d2c:	4e07ca63          	bltz	a5,9fe06220 <LP_AEC+0xca6>
   ss = st->ss / M;
    9fe05d30:	18997953          	fdiv.s	fs2,fs2,fs1
   ss_1 = 1 - ss;
    9fe05d34:	0000c797          	auipc	a5,0xc
    9fe05d38:	4dc7aa07          	flw	fs4,1244(a5) # 9fe12210 <__func__.1+0x58>
    9fe05d3c:	4701                	li	a4,0
    9fe05d3e:	092a76d3          	fsub.s	fa3,fs4,fs2
      st->power[j] = ss_1 * st->power[j] + 1 + ss * st->Xf[j];  /* smooth far end power estimate over time */
    9fe05d42:	705c                	ld	a5,160(s0)
    9fe05d44:	00271613          	slli	a2,a4,0x2
    9fe05d48:	6474                	ld	a3,200(s0)
    9fe05d4a:	97b2                	add	a5,a5,a2
    9fe05d4c:	0007a707          	flw	fa4,0(a5)
    9fe05d50:	96b2                	add	a3,a3,a2
    9fe05d52:	0006a787          	flw	fa5,0(a3)
    9fe05d56:	a0d77743          	fmadd.s	fa4,fa4,fa3,fs4
   for (j=0;j<=st->frame_size;j++)
    9fe05d5a:	0705                	addi	a4,a4,1
    9fe05d5c:	0007069b          	sext.w	a3,a4
      st->power[j] = ss_1 * st->power[j] + 1 + ss * st->Xf[j];  /* smooth far end power estimate over time */
    9fe05d60:	7127f7c3          	fmadd.s	fa5,fa5,fs2,fa4
    9fe05d64:	00f7a027          	fsw	fa5,0(a5)
   for (j=0;j<=st->frame_size;j++)
    9fe05d68:	401c                	lw	a5,0(s0)
    9fe05d6a:	fcd7dce3          	bge	a5,a3,9fe05d42 <LP_AEC+0x7c8>
   for (j=st->frame_size;j>=0;j--) {
    9fe05d6e:	4a07cd63          	bltz	a5,9fe06228 <LP_AEC+0xcae>
   float Pey = FLOAT_ONE, Pyy = FLOAT_ONE;
    9fe05d72:	214a05d3          	fmv.s	fa1,fs4
    9fe05d76:	214a0953          	fmv.s	fs2,fs4
    9fe05d7a:	078a                	slli	a5,a5,0x2
    9fe05d7c:	4601                	li	a2,0
      Eh = st->Rf[j] - st->Eh[j];
    9fe05d7e:	7c54                	ld	a3,184(s0)
      st->Eh[j] = (1-st->spec_average)*st->Eh[j] + st->spec_average*st->Rf[j];
    9fe05d80:	02042707          	flw	fa4,32(s0)
      Eh = st->Rf[j] - st->Eh[j];
    9fe05d84:	6878                	ld	a4,208(s0)
    9fe05d86:	96be                	add	a3,a3,a5
    9fe05d88:	0006a787          	flw	fa5,0(a3)
      st->Eh[j] = (1-st->spec_average)*st->Eh[j] + st->spec_average*st->Rf[j];
    9fe05d8c:	08ea7553          	fsub.s	fa0,fs4,fa4
      Eh = st->Rf[j] - st->Eh[j];
    9fe05d90:	973e                	add	a4,a4,a5
      st->Eh[j] = (1-st->spec_average)*st->Eh[j] + st->spec_average*st->Rf[j];
    9fe05d92:	10e7f653          	fmul.s	fa2,fa5,fa4
      Eh = st->Rf[j] - st->Eh[j];
    9fe05d96:	00072687          	flw	fa3,0(a4)
      Yh = st->Yf[j] - st->Yh[j];
    9fe05d9a:	606c                	ld	a1,192(s0)
    9fe05d9c:	6c74                	ld	a3,216(s0)
      Eh = st->Rf[j] - st->Eh[j];
    9fe05d9e:	08d7f753          	fsub.s	fa4,fa5,fa3
      st->Eh[j] = (1-st->spec_average)*st->Eh[j] + st->spec_average*st->Rf[j];
    9fe05da2:	60a6f6c3          	fmadd.s	fa3,fa3,fa0,fa2
      Yh = st->Yf[j] - st->Yh[j];
    9fe05da6:	96be                	add	a3,a3,a5
    9fe05da8:	95be                	add	a1,a1,a5
    9fe05daa:	0006a007          	flw	ft0,0(a3)
    9fe05dae:	0005a787          	flw	fa5,0(a1)
      st->Eh[j] = (1-st->spec_average)*st->Eh[j] + st->spec_average*st->Rf[j];
    9fe05db2:	00d72027          	fsw	fa3,0(a4)
      st->Yh[j] = (1-st->spec_average)*st->Yh[j] + st->spec_average*st->Yf[j];
    9fe05db6:	6074                	ld	a3,192(s0)
    9fe05db8:	02042687          	flw	fa3,32(s0)
    9fe05dbc:	6c78                	ld	a4,216(s0)
    9fe05dbe:	96be                	add	a3,a3,a5
    9fe05dc0:	0006a507          	flw	fa0,0(a3)
    9fe05dc4:	08da7653          	fsub.s	fa2,fs4,fa3
    9fe05dc8:	973e                	add	a4,a4,a5
    9fe05dca:	10a6f6d3          	fmul.s	fa3,fa3,fa0
    9fe05dce:	00072507          	flw	fa0,0(a4)
      Yh = st->Yf[j] - st->Yh[j];
    9fe05dd2:	0807f7d3          	fsub.s	fa5,fa5,ft0
      Pey = Pey + Eh * Yh;
    9fe05dd6:	86be                	mv	a3,a5
   for (j=st->frame_size;j>=0;j--) {
    9fe05dd8:	17f1                	addi	a5,a5,-4
      st->Yh[j] = (1-st->spec_average)*st->Yh[j] + st->spec_average*st->Yf[j];
    9fe05dda:	68a676c3          	fmadd.s	fa3,fa2,fa0,fa3
      Pey = Pey + Eh * Yh;
    9fe05dde:	90f77943          	fmadd.s	fs2,fa4,fa5,fs2
      Pyy = Pyy + Yh * Yh;
    9fe05de2:	58f7f5c3          	fmadd.s	fa1,fa5,fa5,fa1
      st->Yh[j] = (1-st->spec_average)*st->Yh[j] + st->spec_average*st->Yf[j];
    9fe05de6:	00d72027          	fsw	fa3,0(a4)
   for (j=st->frame_size;j>=0;j--) {
    9fe05dea:	f8d61ae3          	bne	a2,a3,9fe05d7e <LP_AEC+0x804>
   Pyy = (float)math_sqrt(Pyy);  /* the standard deviation of Y(k) */
    9fe05dee:	42058553          	fcvt.d.s	fa0,fa1
    9fe05df2:	800fb0ef          	jal	ra,9fe00df2 <sqrt>
   tmp32 = st->beta0 * Syy;
    9fe05df6:	02442707          	flw	fa4,36(s0)
   if (tmp32 > (st->beta_max * See))
    9fe05dfa:	02842687          	flw	fa3,40(s0)
   Pyy = (float)math_sqrt(Pyy);  /* the standard deviation of Y(k) */
    9fe05dfe:	401575d3          	fcvt.s.d	fa1,fa0
   tmp32 = st->beta0 * Syy;
    9fe05e02:	10ebf753          	fmul.s	fa4,fs7,fa4
   if (tmp32 > (st->beta_max * See))
    9fe05e06:	10db76d3          	fmul.s	fa3,fs6,fa3
   Pey = Pey / Pyy;  /* the correlation coefficient of E(k) and Y(k) */
    9fe05e0a:	18b977d3          	fdiv.s	fa5,fs2,fa1
   if (tmp32 > (st->beta_max * See))
    9fe05e0e:	a0e697d3          	flt.s	a5,fa3,fa4
    9fe05e12:	c399                	beqz	a5,9fe05e18 <LP_AEC+0x89e>
      tmp32 = st->beta_max * See;
    9fe05e14:	20d68753          	fmv.s	fa4,fa3
   st->Pyy = alpha_1 * st->Pyy + alpha * Pyy;
    9fe05e18:	0e442607          	flw	fa2,228(s0)
   st->Pey = alpha_1 * st->Pey + alpha * Pey;
    9fe05e1c:	0e042687          	flw	fa3,224(s0)
   alpha = tmp32 / See;
    9fe05e20:	19677753          	fdiv.s	fa4,fa4,fs6
   alpha_1 = FLOAT_ONE - alpha;
    9fe05e24:	08ea7553          	fsub.s	fa0,fs4,fa4
   st->Pyy = alpha_1 * st->Pyy + alpha * Pyy;
    9fe05e28:	10e5f5d3          	fmul.s	fa1,fa1,fa4
   st->Pey = alpha_1 * st->Pey + alpha * Pey;
    9fe05e2c:	10e7f7d3          	fmul.s	fa5,fa5,fa4
   st->Pyy = alpha_1 * st->Pyy + alpha * Pyy;
    9fe05e30:	58a67643          	fmadd.s	fa2,fa2,fa0,fa1
   st->Pey = alpha_1 * st->Pey + alpha * Pey;
    9fe05e34:	78a6f7c3          	fmadd.s	fa5,fa3,fa0,fa5
   if (st->Pyy < FLOAT_ONE)
    9fe05e38:	a14617d3          	flt.s	a5,fa2,fs4
   st->Pey = alpha_1 * st->Pey + alpha * Pey;
    9fe05e3c:	0ef42027          	fsw	fa5,224(s0)
   if (st->Pyy < FLOAT_ONE)
    9fe05e40:	1e079b63          	bnez	a5,9fe06036 <LP_AEC+0xabc>
   st->Pyy = alpha_1 * st->Pyy + alpha * Pyy;
    9fe05e44:	0ec42227          	fsw	fa2,228(s0)
   if (st->Pey < st->aec_min_leak * st->Pyy)
    9fe05e48:	12842687          	flw	fa3,296(s0)
    9fe05e4c:	10d676d3          	fmul.s	fa3,fa2,fa3
    9fe05e50:	a0d797d3          	flt.s	a5,fa5,fa3
    9fe05e54:	c789                	beqz	a5,9fe05e5e <LP_AEC+0x8e4>
      st->Pey = st->aec_min_leak * st->Pyy;
    9fe05e56:	20d687d3          	fmv.s	fa5,fa3
    9fe05e5a:	0ed42027          	fsw	fa3,224(s0)
   if (st->Pey > st->Pyy)
    9fe05e5e:	a0f617d3          	flt.s	a5,fa2,fa5
    9fe05e62:	c789                	beqz	a5,9fe05e6c <LP_AEC+0x8f2>
      st->Pey = st->Pyy;
    9fe05e64:	20c607d3          	fmv.s	fa5,fa2
    9fe05e68:	0ec42027          	fsw	fa2,224(s0)
   st->leak_estimate = st->Pey / st->Pyy;
    9fe05e6c:	18c7f653          	fdiv.s	fa2,fa5,fa2
   if (st->leak_estimate > 16383)
    9fe05e70:	0000c797          	auipc	a5,0xc
    9fe05e74:	41c7a787          	flw	fa5,1052(a5) # 9fe1228c <__func__.1+0xd4>
    9fe05e78:	a0c797d3          	flt.s	a5,fa5,fa2
    9fe05e7c:	26079c63          	bnez	a5,9fe060f4 <LP_AEC+0xb7a>
   RER = (float)((.0001*Sxx + 3*st->leak_estimate*Syy) / See);
    9fe05e80:	0000c797          	auipc	a5,0xc
    9fe05e84:	4107a687          	flw	fa3,1040(a5) # 9fe12290 <__func__.1+0xd8>
    9fe05e88:	10d676d3          	fmul.s	fa3,fa2,fa3
   st->leak_estimate = st->Pey / st->Pyy;
    9fe05e8c:	02c42827          	fsw	fa2,48(s0)
   RER = (float)((.0001*Sxx + 3*st->leak_estimate*Syy) / See);
    9fe05e90:	10dbf6d3          	fmul.s	fa3,fs7,fa3
    9fe05e94:	420987d3          	fcvt.d.s	fa5,fs3
    9fe05e98:	0000c797          	auipc	a5,0xc
    9fe05e9c:	4407b507          	fld	fa0,1088(a5) # 9fe122d8 <__func__.1+0x120>
    9fe05ea0:	420b05d3          	fcvt.d.s	fa1,fs6
   if (RER < Sey*Sey/(1+See*Syy))
    9fe05ea4:	10847453          	fmul.s	fs0,fs0,fs0
   RER = (float)((.0001*Sxx + 3*st->leak_estimate*Syy) / See);
    9fe05ea8:	420686d3          	fcvt.d.s	fa3,fa3
   if (RER < Sey*Sey/(1+See*Syy))
    9fe05eac:	a17b7743          	fmadd.s	fa4,fs6,fs7,fs4
   RER = (float)((.0001*Sxx + 3*st->leak_estimate*Syy) / See);
    9fe05eb0:	6aa7f7c3          	fmadd.d	fa5,fa5,fa0,fa3
   if (RER < Sey*Sey/(1+See*Syy))
    9fe05eb4:	18e47753          	fdiv.s	fa4,fs0,fa4
   RER = (float)((.0001*Sxx + 3*st->leak_estimate*Syy) / See);
    9fe05eb8:	1ab7f7d3          	fdiv.d	fa5,fa5,fa1
    9fe05ebc:	4017f7d3          	fcvt.s.d	fa5,fa5
   if (RER < Sey*Sey/(1+See*Syy))
    9fe05ec0:	a0e797d3          	flt.s	a5,fa5,fa4
    9fe05ec4:	c399                	beqz	a5,9fe05eca <LP_AEC+0x950>
      RER = Sey*Sey/(1+See*Syy);
    9fe05ec6:	20e707d3          	fmv.s	fa5,fa4
   if (RER > .5)
    9fe05eca:	0000c797          	auipc	a5,0xc
    9fe05ece:	3667a507          	flw	fa0,870(a5) # 9fe12230 <__func__.1+0x78>
    9fe05ed2:	a0f517d3          	flt.s	a5,fa0,fa5
    9fe05ed6:	1e079263          	bnez	a5,9fe060ba <LP_AEC+0xb40>
   if (st->RER*32767 > 1000)
    9fe05eda:	0000c797          	auipc	a5,0xc
    9fe05ede:	3527a707          	flw	fa4,850(a5) # 9fe1222c <__func__.1+0x74>
    9fe05ee2:	10e7f753          	fmul.s	fa4,fa5,fa4
    9fe05ee6:	0000c797          	auipc	a5,0xc
    9fe05eea:	3ae7a687          	flw	fa3,942(a5) # 9fe12294 <__func__.1+0xdc>
   st->RER = RER;
    9fe05eee:	14f42227          	fsw	fa5,324(s0)
   if (st->RER*32767 > 1000)
    9fe05ef2:	a0e697d3          	flt.s	a5,fa3,fa4
    9fe05ef6:	1c079663          	bnez	a5,9fe060c2 <LP_AEC+0xb48>
   if (!st->adapted && st->sum_adapt > M && st->leak_estimate*Syy > .03f*Syy) {
    9fe05efa:	481c                	lw	a5,16(s0)
    9fe05efc:	e78d                	bnez	a5,9fe05f26 <LP_AEC+0x9ac>
    9fe05efe:	02c42707          	flw	fa4,44(s0)
    9fe05f02:	a0e497d3          	flt.s	a5,fs1,fa4
    9fe05f06:	14078063          	beqz	a5,9fe06046 <LP_AEC+0xacc>
    9fe05f0a:	0000c797          	auipc	a5,0xc
    9fe05f0e:	38e7a687          	flw	fa3,910(a5) # 9fe12298 <__func__.1+0xe0>
    9fe05f12:	10cbf053          	fmul.s	ft0,fs7,fa2
    9fe05f16:	10dbfbd3          	fmul.s	fs7,fs7,fa3
    9fe05f1a:	a00b97d3          	flt.s	a5,fs7,ft0
    9fe05f1e:	12078463          	beqz	a5,9fe06046 <LP_AEC+0xacc>
      st->adapted = 1;
    9fe05f22:	4785                	li	a5,1
    9fe05f24:	c81c                	sw	a5,16(s0)
      for (i=0;i<=st->frame_size;i++) {
    9fe05f26:	401c                	lw	a5,0(s0)
    9fe05f28:	1a07c363          	bltz	a5,9fe060ce <LP_AEC+0xb54>
         r = .7f * r + .3f * RER * e;
    9fe05f2c:	0000c797          	auipc	a5,0xc
    9fe05f30:	3707a587          	flw	fa1,880(a5) # 9fe1229c <__func__.1+0xe4>
    9fe05f34:	10b7f5d3          	fmul.s	fa1,fa5,fa1
    9fe05f38:	4701                	li	a4,0
    9fe05f3a:	0000c797          	auipc	a5,0xc
    9fe05f3e:	30e7a007          	flw	ft0,782(a5) # 9fe12248 <__func__.1+0x90>
    9fe05f42:	a019                	j	9fe05f48 <LP_AEC+0x9ce>
         r = st->leak_estimate * st->Yf[i];
    9fe05f44:	03042607          	flw	fa2,48(s0)
         e = st->Rf[i] + 1;  /* the power spectrum of E(k) */
    9fe05f48:	7c50                	ld	a2,184(s0)
    9fe05f4a:	00271793          	slli	a5,a4,0x2
         r = st->leak_estimate * st->Yf[i];
    9fe05f4e:	6074                	ld	a3,192(s0)
         e = st->Rf[i] + 1;  /* the power spectrum of E(k) */
    9fe05f50:	963e                	add	a2,a2,a5
    9fe05f52:	00062687          	flw	fa3,0(a2)
         r = st->leak_estimate * st->Yf[i];
    9fe05f56:	96be                	add	a3,a3,a5
    9fe05f58:	0006a787          	flw	fa5,0(a3)
         e = st->Rf[i] + 1;  /* the power spectrum of E(k) */
    9fe05f5c:	0146f6d3          	fadd.s	fa3,fa3,fs4
      for (i=0;i<=st->frame_size;i++) {
    9fe05f60:	0705                	addi	a4,a4,1
         r = st->leak_estimate * st->Yf[i];
    9fe05f62:	10f677d3          	fmul.s	fa5,fa2,fa5
      for (i=0;i<=st->frame_size;i++) {
    9fe05f66:	0007059b          	sext.w	a1,a4
         if (r>.5f*e)
    9fe05f6a:	10a6f753          	fmul.s	fa4,fa3,fa0
         r = .7f * r + .3f * RER * e;
    9fe05f6e:	10d5f653          	fmul.s	fa2,fa1,fa3
         if (r>.5f*e)
    9fe05f72:	a0f716d3          	flt.s	a3,fa4,fa5
    9fe05f76:	c299                	beqz	a3,9fe05f7c <LP_AEC+0xa02>
            r = .5f*e;
    9fe05f78:	20e707d3          	fmv.s	fa5,fa4
         st->power_1[i] = r / (e * (st->power[i] + 10));
    9fe05f7c:	7050                	ld	a2,160(s0)
         r = .7f * r + .3f * RER * e;
    9fe05f7e:	6007f7c3          	fmadd.s	fa5,fa5,ft0,fa2
         st->power_1[i] = r / (e * (st->power[i] + 10));
    9fe05f82:	7454                	ld	a3,168(s0)
    9fe05f84:	963e                	add	a2,a2,a5
    9fe05f86:	00062707          	flw	fa4,0(a2)
    9fe05f8a:	97b6                	add	a5,a5,a3
    9fe05f8c:	01577753          	fadd.s	fa4,fa4,fs5
    9fe05f90:	10d77753          	fmul.s	fa4,fa4,fa3
    9fe05f94:	18e7f7d3          	fdiv.s	fa5,fa5,fa4
    9fe05f98:	00f7a027          	fsw	fa5,0(a5)
      for (i=0;i<=st->frame_size;i++) {
    9fe05f9c:	401c                	lw	a5,0(s0)
    9fe05f9e:	fab7d3e3          	bge	a5,a1,9fe05f44 <LP_AEC+0x9ca>
   for (i=0;i<st->frame_size;i++)
    9fe05fa2:	4701                	li	a4,0
    9fe05fa4:	12f05563          	blez	a5,9fe060ce <LP_AEC+0xb54>
      st->last_y[i] = st->last_y[st->frame_size+i];
    9fe05fa8:	7034                	ld	a3,96(s0)
    9fe05faa:	9fb9                	addw	a5,a5,a4
    9fe05fac:	078a                	slli	a5,a5,0x2
    9fe05fae:	97b6                	add	a5,a5,a3
    9fe05fb0:	0007a787          	flw	fa5,0(a5)
    9fe05fb4:	00271793          	slli	a5,a4,0x2
    9fe05fb8:	96be                	add	a3,a3,a5
    9fe05fba:	00f6a027          	fsw	fa5,0(a3)
   for (i=0;i<st->frame_size;i++)
    9fe05fbe:	401c                	lw	a5,0(s0)
    9fe05fc0:	0705                	addi	a4,a4,1
    9fe05fc2:	0007069b          	sext.w	a3,a4
    9fe05fc6:	fef6c1e3          	blt	a3,a5,9fe05fa8 <LP_AEC+0xa2e>
   if (st->adapted) {
    9fe05fca:	4818                	lw	a4,16(s0)
    9fe05fcc:	10070363          	beqz	a4,9fe060d2 <LP_AEC+0xb58>
      for (i=0;i<st->frame_size;i++)
    9fe05fd0:	02f05763          	blez	a5,9fe05ffe <LP_AEC+0xa84>
    9fe05fd4:	6a22                	ld	s4,8(sp)
    9fe05fd6:	4701                	li	a4,0
         st->last_y[st->frame_size+i] = (float)(in[i]-out[i]);
    9fe05fd8:	00099503          	lh	a0,0(s3)
    9fe05fdc:	000a1683          	lh	a3,0(s4) # 8000 <_EL1_STACK_SIZE+0x7800>
    9fe05fe0:	7030                	ld	a2,96(s0)
    9fe05fe2:	9fb9                	addw	a5,a5,a4
    9fe05fe4:	9d15                	subw	a0,a0,a3
    9fe05fe6:	d00577d3          	fcvt.s.w	fa5,a0
    9fe05fea:	078a                	slli	a5,a5,0x2
    9fe05fec:	97b2                	add	a5,a5,a2
    9fe05fee:	00f7a027          	fsw	fa5,0(a5)
      for (i=0;i<st->frame_size;i++)
    9fe05ff2:	401c                	lw	a5,0(s0)
    9fe05ff4:	2705                	addiw	a4,a4,1
    9fe05ff6:	0989                	addi	s3,s3,2
    9fe05ff8:	0a09                	addi	s4,s4,2
    9fe05ffa:	fcf74fe3          	blt	a4,a5,9fe05fd8 <LP_AEC+0xa5e>
}
    9fe05ffe:	60ae                	ld	ra,200(sp)
    9fe06000:	640e                	ld	s0,192(sp)
    9fe06002:	74ea                	ld	s1,184(sp)
    9fe06004:	794a                	ld	s2,176(sp)
    9fe06006:	79aa                	ld	s3,168(sp)
    9fe06008:	7a0a                	ld	s4,160(sp)
    9fe0600a:	6aea                	ld	s5,152(sp)
    9fe0600c:	6b4a                	ld	s6,144(sp)
    9fe0600e:	6baa                	ld	s7,136(sp)
    9fe06010:	6c0a                	ld	s8,128(sp)
    9fe06012:	7ce6                	ld	s9,120(sp)
    9fe06014:	7d46                	ld	s10,112(sp)
    9fe06016:	7da6                	ld	s11,104(sp)
    9fe06018:	2466                	fld	fs0,88(sp)
    9fe0601a:	24c6                	fld	fs1,80(sp)
    9fe0601c:	2926                	fld	fs2,72(sp)
    9fe0601e:	2986                	fld	fs3,64(sp)
    9fe06020:	3a62                	fld	fs4,56(sp)
    9fe06022:	3ac2                	fld	fs5,48(sp)
    9fe06024:	3b22                	fld	fs6,40(sp)
    9fe06026:	3b82                	fld	fs7,32(sp)
    9fe06028:	2c62                	fld	fs8,24(sp)
    9fe0602a:	2cc2                	fld	fs9,16(sp)
    9fe0602c:	6169                	addi	sp,sp,208
    9fe0602e:	8082                	ret
   See = MAX(See, (float)(N * 100));  /* add a small noise floor to make sure not to have problems when dividing */
    9fe06030:	20f78b53          	fmv.s	fs6,fa5
    9fe06034:	b9d1                	j	9fe05d08 <LP_AEC+0x78e>
      st->Pyy = FLOAT_ONE;
    9fe06036:	214a0653          	fmv.s	fa2,fs4
    9fe0603a:	0f442227          	fsw	fs4,228(s0)
    9fe0603e:	b529                	j	9fe05e48 <LP_AEC+0x8ce>
   else if ((st->Davg1 * ABS(st->Davg1)) > (st->aec_var1_update * st->Dvar1))
    9fe06040:	20c61153          	fneg.s	ft2,fa2
    9fe06044:	ba41                	j	9fe059d4 <LP_AEC+0x45a>
      if (Sxx > (float)(N * 1000)) {  /* far-end exists a certain level of energy */
    9fe06046:	3e800793          	li	a5,1000
    9fe0604a:	029787bb          	mulw	a5,a5,s1
    9fe0604e:	d007f7d3          	fcvt.s.w	fa5,a5
    9fe06052:	a13797d3          	flt.s	a5,fa5,fs3
    9fe06056:	e7e1                	bnez	a5,9fe0611e <LP_AEC+0xba4>
      float adapt_rate = 0;
    9fe06058:	f0000b53          	fmv.w.x	fs6,zero
      for (i=0;i<=st->frame_size;i++)
    9fe0605c:	401c                	lw	a5,0(s0)
    9fe0605e:	0207c963          	bltz	a5,9fe06090 <LP_AEC+0xb16>
    9fe06062:	4701                	li	a4,0
         st->power_1[i] = adapt_rate / (st->power[i] + 10);
    9fe06064:	7054                	ld	a3,160(s0)
    9fe06066:	00271613          	slli	a2,a4,0x2
    9fe0606a:	745c                	ld	a5,168(s0)
    9fe0606c:	96b2                	add	a3,a3,a2
    9fe0606e:	0006a787          	flw	fa5,0(a3)
    9fe06072:	97b2                	add	a5,a5,a2
      for (i=0;i<=st->frame_size;i++)
    9fe06074:	0705                	addi	a4,a4,1
         st->power_1[i] = adapt_rate / (st->power[i] + 10);
    9fe06076:	0157f7d3          	fadd.s	fa5,fa5,fs5
      for (i=0;i<=st->frame_size;i++)
    9fe0607a:	0007069b          	sext.w	a3,a4
         st->power_1[i] = adapt_rate / (st->power[i] + 10);
    9fe0607e:	18fb77d3          	fdiv.s	fa5,fs6,fa5
    9fe06082:	00f7a027          	fsw	fa5,0(a5)
      for (i=0;i<=st->frame_size;i++)
    9fe06086:	401c                	lw	a5,0(s0)
    9fe06088:	fcd7dee3          	bge	a5,a3,9fe06064 <LP_AEC+0xaea>
      st->sum_adapt = st->sum_adapt + adapt_rate;  /* the bigger the value, the bigger the echo */
    9fe0608c:	02c42707          	flw	fa4,44(s0)
    9fe06090:	00eb7b53          	fadd.s	fs6,fs6,fa4
    9fe06094:	03642627          	fsw	fs6,44(s0)
    9fe06098:	b729                	j	9fe05fa2 <LP_AEC+0xa28>
      M = st->initial_filter_len;
    9fe0609a:	15041903          	lh	s2,336(s0)
    9fe0609e:	d36ff06f          	j	9fe055d4 <LP_AEC+0x5a>
      st->saturated--;
    9fe060a2:	37fd                	addiw	a5,a5,-1
    9fe060a4:	00048c9b          	sext.w	s9,s1
    9fe060a8:	c85c                	sw	a5,20(s0)
   for (j=0;j<M;j++) {
    9fe060aa:	4c01                	li	s8,0
    9fe060ac:	4b01                	li	s6,0
    9fe060ae:	fffc8b9b          	addiw	s7,s9,-1
    9fe060b2:	f7204963          	bgtz	s2,9fe05824 <LP_AEC+0x2aa>
    9fe060b6:	f8aff06f          	j	9fe05840 <LP_AEC+0x2c6>
      RER = .5;
    9fe060ba:	20a507d3          	fmv.s	fa5,fa0
   st->RER = RER;
    9fe060be:	14a42227          	fsw	fa0,324(s0)
      st->echo_cnt++;
    9fe060c2:	14843783          	ld	a5,328(s0)
    9fe060c6:	0785                	addi	a5,a5,1
    9fe060c8:	14f43423          	sd	a5,328(s0)
    9fe060cc:	b53d                	j	9fe05efa <LP_AEC+0x980>
   if (st->adapted) {
    9fe060ce:	481c                	lw	a5,16(s0)
    9fe060d0:	f79d                	bnez	a5,9fe05ffe <LP_AEC+0xa84>
      for (i=0;i<N;i++)
    9fe060d2:	00249613          	slli	a2,s1,0x2
    9fe060d6:	4781                	li	a5,0
    9fe060d8:	f29053e3          	blez	s1,9fe05ffe <LP_AEC+0xa84>
         st->last_y[i] = st->x[i];
    9fe060dc:	6034                	ld	a3,64(s0)
    9fe060de:	7038                	ld	a4,96(s0)
    9fe060e0:	96be                	add	a3,a3,a5
    9fe060e2:	0006a787          	flw	fa5,0(a3)
    9fe060e6:	973e                	add	a4,a4,a5
      for (i=0;i<N;i++)
    9fe060e8:	0791                	addi	a5,a5,4
         st->last_y[i] = st->x[i];
    9fe060ea:	00f72027          	fsw	fa5,0(a4)
      for (i=0;i<N;i++)
    9fe060ee:	fef617e3          	bne	a2,a5,9fe060dc <LP_AEC+0xb62>
    9fe060f2:	b731                	j	9fe05ffe <LP_AEC+0xa84>
      st->leak_estimate = 32767;
    9fe060f4:	0000c797          	auipc	a5,0xc
    9fe060f8:	1387a787          	flw	fa5,312(a5) # 9fe1222c <__func__.1+0x74>
    9fe060fc:	20f78653          	fmv.s	fa2,fa5
    9fe06100:	02f42827          	fsw	fa5,48(s0)
    9fe06104:	0000c797          	auipc	a5,0xc
    9fe06108:	1687a687          	flw	fa3,360(a5) # 9fe1226c <__func__.1+0xb4>
    9fe0610c:	b351                	j	9fe05e90 <LP_AEC+0x916>
      aec_adjust_prop (st->W, N, M, st->prop);
    9fe0610e:	7874                	ld	a3,240(s0)
    9fe06110:	6048                	ld	a0,128(s0)
    9fe06112:	864a                	mv	a2,s2
    9fe06114:	85a6                	mv	a1,s1
    9fe06116:	4cc000ef          	jal	ra,9fe065e2 <aec_adjust_prop>
    9fe0611a:	e6aff06f          	j	9fe05784 <LP_AEC+0x20a>
         tmp32 = .25f * Sxx;
    9fe0611e:	0000c797          	auipc	a5,0xc
    9fe06122:	1827a787          	flw	fa5,386(a5) # 9fe122a0 <__func__.1+0xe8>
         if (tmp32 > .25*See)
    9fe06126:	0000c797          	auipc	a5,0xc
    9fe0612a:	1ba7b687          	fld	fa3,442(a5) # 9fe122e0 <__func__.1+0x128>
         tmp32 = .25f * Sxx;
    9fe0612e:	10f9f9d3          	fmul.s	fs3,fs3,fa5
         if (tmp32 > .25*See)
    9fe06132:	12d5f5d3          	fmul.d	fa1,fa1,fa3
    9fe06136:	420986d3          	fcvt.d.s	fa3,fs3
    9fe0613a:	a2d597d3          	flt.d	a5,fa1,fa3
    9fe0613e:	c399                	beqz	a5,9fe06144 <LP_AEC+0xbca>
            tmp32 = (float)(.25*See);
    9fe06140:	10fb79d3          	fmul.s	fs3,fs6,fa5
         adapt_rate = tmp32 / See;  /* residual echo/error signal */
    9fe06144:	1969fb53          	fdiv.s	fs6,fs3,fs6
    9fe06148:	bf11                	j	9fe0605c <LP_AEC+0xae2>
      if ((-(Sff - See) * ABS(Sff - See)) > (st->aec_var_backtrack * Sff * Dbf))
    9fe0614a:	13c42087          	flw	ft1,316(s0)
      if ((-(st->Davg1) * ABS(st->Davg1)) > (st->aec_var_backtrack * st->Dvar1))
    9fe0614e:	20c61753          	fneg.s	fa4,fa2
    9fe06152:	1016f6d3          	fmul.s	fa3,fa3,ft1
    9fe06156:	10277753          	fmul.s	fa4,fa4,ft2
    9fe0615a:	a0e697d3          	flt.s	a5,fa3,fa4
    9fe0615e:	eb91                	bnez	a5,9fe06172 <LP_AEC+0xbf8>
      if ((-(st->Davg2) * ABS(st->Davg2)) > (st->aec_var_backtrack * st->Dvar2))
    9fe06160:	20b59753          	fneg.s	fa4,fa1
    9fe06164:	10157553          	fmul.s	fa0,fa0,ft1
    9fe06168:	10377753          	fmul.s	fa4,fa4,ft3
    9fe0616c:	a0e517d3          	flt.s	a5,fa0,fa4
    9fe06170:	c3f9                	beqz	a5,9fe06236 <LP_AEC+0xcbc>
         for (i=0;i<N*M;i++)  /* copy data for (N/2+1) frequency bin */
    9fe06172:	0299093b          	mulw	s2,s2,s1
    9fe06176:	4781                	li	a5,0
    9fe06178:	00291613          	slli	a2,s2,0x2
    9fe0617c:	01205d63          	blez	s2,9fe06196 <LP_AEC+0xc1c>
            st->W[i] = st->foreground[i];
    9fe06180:	6454                	ld	a3,136(s0)
    9fe06182:	6058                	ld	a4,128(s0)
    9fe06184:	96be                	add	a3,a3,a5
    9fe06186:	0006a787          	flw	fa5,0(a3)
    9fe0618a:	973e                	add	a4,a4,a5
         for (i=0;i<N*M;i++)  /* copy data for (N/2+1) frequency bin */
    9fe0618c:	0791                	addi	a5,a5,4
            st->W[i] = st->foreground[i];
    9fe0618e:	00f72027          	fsw	fa5,0(a4)
         for (i=0;i<N*M;i++)  /* copy data for (N/2+1) frequency bin */
    9fe06192:	fef617e3          	bne	a2,a5,9fe06180 <LP_AEC+0xc06>
         for (i=0;i<st->frame_size;i++)
    9fe06196:	4010                	lw	a2,0(s0)
    9fe06198:	4701                	li	a4,0
    9fe0619a:	04c05c63          	blez	a2,9fe061f2 <LP_AEC+0xc78>
            st->y[i+st->frame_size] = st->e[i+st->frame_size];
    9fe0619e:	7c0c                	ld	a1,56(s0)
    9fe061a0:	00c707bb          	addw	a5,a4,a2
    9fe061a4:	078a                	slli	a5,a5,0x2
    9fe061a6:	6c34                	ld	a3,88(s0)
    9fe061a8:	95be                	add	a1,a1,a5
    9fe061aa:	0005a787          	flw	fa5,0(a1)
    9fe061ae:	97b6                	add	a5,a5,a3
         for (i=0;i<st->frame_size;i++)
    9fe061b0:	2705                	addiw	a4,a4,1
            st->y[i+st->frame_size] = st->e[i+st->frame_size];
    9fe061b2:	00f7a027          	fsw	fa5,0(a5)
         for (i=0;i<st->frame_size;i++)
    9fe061b6:	4010                	lw	a2,0(s0)
    9fe061b8:	fec743e3          	blt	a4,a2,9fe0619e <LP_AEC+0xc24>
         for (i=0;i<st->frame_size;i++)
    9fe061bc:	02c05b63          	blez	a2,9fe061f2 <LP_AEC+0xc78>
    9fe061c0:	4781                	li	a5,0
            st->e[i] = st->input[i] - st->y[i+st->frame_size];
    9fe061c2:	6834                	ld	a3,80(s0)
    9fe061c4:	6c38                	ld	a4,88(s0)
    9fe061c6:	9e3d                	addw	a2,a2,a5
    9fe061c8:	00279593          	slli	a1,a5,0x2
    9fe061cc:	060a                	slli	a2,a2,0x2
    9fe061ce:	9732                	add	a4,a4,a2
    9fe061d0:	96ae                	add	a3,a3,a1
    9fe061d2:	0006a787          	flw	fa5,0(a3)
    9fe061d6:	00072707          	flw	fa4,0(a4)
    9fe061da:	7c18                	ld	a4,56(s0)
         for (i=0;i<st->frame_size;i++)
    9fe061dc:	0785                	addi	a5,a5,1
            st->e[i] = st->input[i] - st->y[i+st->frame_size];
    9fe061de:	08e7f7d3          	fsub.s	fa5,fa5,fa4
    9fe061e2:	972e                	add	a4,a4,a1
         for (i=0;i<st->frame_size;i++)
    9fe061e4:	0007869b          	sext.w	a3,a5
            st->e[i] = st->input[i] - st->y[i+st->frame_size];
    9fe061e8:	00f72027          	fsw	fa5,0(a4)
         for (i=0;i<st->frame_size;i++)
    9fe061ec:	4010                	lw	a2,0(s0)
    9fe061ee:	fcc6cae3          	blt	a3,a2,9fe061c2 <LP_AEC+0xc48>
         See = Sff;  /* reset error power, copy foreground to background */
    9fe061f2:	21398b53          	fmv.s	fs6,fs3
         st->Davg1 = st->Davg2 = FLOAT_ZERO;
    9fe061f6:	08043823          	sd	zero,144(s0)
         st->Dvar1 = st->Dvar2 = FLOAT_ZERO;
    9fe061fa:	08043c23          	sd	zero,152(s0)
    9fe061fe:	b8bd                	j	9fe05a7c <LP_AEC+0x502>
   else if ((st->Davg2 * ABS(st->Davg2)) > (st->aec_var2_update * st->Dvar2))
    9fe06200:	20b591d3          	fneg.s	ft3,fa1
    9fe06204:	13842707          	flw	fa4,312(s0)
    9fe06208:	1035f0d3          	fmul.s	ft1,fa1,ft3
    9fe0620c:	10e57753          	fmul.s	fa4,fa0,fa4
    9fe06210:	a01717d3          	flt.s	a5,fa4,ft1
    9fe06214:	fe079b63          	bnez	a5,9fe05a0a <LP_AEC+0x490>
    9fe06218:	bf0d                	j	9fe0614a <LP_AEC+0xbd0>
      st->screwed_up = 0;
    9fe0621a:	00042c23          	sw	zero,24(s0)
   if (st->screwed_up>=50) {
    9fe0621e:	bcd9                	j	9fe05cf4 <LP_AEC+0x77a>
    9fe06220:	0000c797          	auipc	a5,0xc
    9fe06224:	ff07aa07          	flw	fs4,-16(a5) # 9fe12210 <__func__.1+0x58>
   float Pey = FLOAT_ONE, Pyy = FLOAT_ONE;
    9fe06228:	214a0953          	fmv.s	fs2,fs4
    9fe0622c:	0000c797          	auipc	a5,0xc
    9fe06230:	0a47b507          	fld	fa0,164(a5) # 9fe122d0 <__func__.1+0x118>
    9fe06234:	be7d                	j	9fe05df2 <LP_AEC+0x878>
      if ((-(Sff - See) * ABS(Sff - See)) > (st->aec_var_backtrack * Sff * Dbf))
    9fe06236:	1130f0d3          	fmul.s	ft1,ft1,fs3
    9fe0623a:	20f797d3          	fneg.s	fa5,fa5
    9fe0623e:	1007f7d3          	fmul.s	fa5,fa5,ft0
    9fe06242:	1080f453          	fmul.s	fs0,ft1,fs0
      if (reset_background) {
    9fe06246:	a0f417d3          	flt.s	a5,fs0,fa5
    9fe0624a:	f785                	bnez	a5,9fe06172 <LP_AEC+0xbf8>
   for (i=0;i<st->frame_size;i++) {
    9fe0624c:	4010                	lw	a2,0(s0)
    9fe0624e:	82fff06f          	j	9fe05a7c <LP_AEC+0x502>

000000009fe06252 <DC_filter>:
#endif
{
   int i;
   float den2;

   den2 = radius*radius + .7f*(1-radius)*(1-radius);
    9fe06252:	0000c797          	auipc	a5,0xc
    9fe06256:	fbe7a587          	flw	fa1,-66(a5) # 9fe12210 <__func__.1+0x58>
    9fe0625a:	08a5f5d3          	fsub.s	fa1,fa1,fa0
    9fe0625e:	0000c797          	auipc	a5,0xc
    9fe06262:	fea7a787          	flw	fa5,-22(a5) # 9fe12248 <__func__.1+0x90>
    9fe06266:	10f5f7d3          	fmul.s	fa5,fa1,fa5
    9fe0626a:	10b7f5d3          	fmul.s	fa1,fa5,fa1
    9fe0626e:	58a575c3          	fmadd.s	fa1,fa0,fa0,fa1

   for (i=0;i<len;i++) {
    9fe06272:	04c05b63          	blez	a2,9fe062c8 <DC_filter+0x76>
    9fe06276:	fff6079b          	addiw	a5,a2,-1
    9fe0627a:	02079713          	slli	a4,a5,0x20
    9fe0627e:	01f75793          	srli	a5,a4,0x1f
    9fe06282:	00250713          	addi	a4,a0,2
    9fe06286:	97ba                	add	a5,a5,a4
    9fe06288:	0000c717          	auipc	a4,0xc
    9fe0628c:	fc472007          	flw	ft0,-60(a4) # 9fe1224c <__func__.1+0x94>
      float vin = in[i];
    9fe06290:	00051703          	lh	a4,0(a0)
      float vout = mem[0] + vin;
    9fe06294:	0006a707          	flw	fa4,0(a3)
      mem[0] = mem[1] + 2*(-vin + radius*vout);  /* history buffer */
    9fe06298:	0046a607          	flw	fa2,4(a3)
      float vin = in[i];
    9fe0629c:	d00777d3          	fcvt.s.w	fa5,a4
   for (i=0;i<len;i++) {
    9fe062a0:	0591                	addi	a1,a1,4
    9fe062a2:	0509                	addi	a0,a0,2
      float vout = mem[0] + vin;
    9fe062a4:	00e7f753          	fadd.s	fa4,fa5,fa4
      mem[0] = mem[1] + 2*(-vin + radius*vout);  /* history buffer */
    9fe062a8:	10e576d3          	fmul.s	fa3,fa0,fa4
      mem[1] = vin - den2 * vout;  /* history buffer */
    9fe062ac:	78e5f74b          	fnmsub.s	fa4,fa1,fa4,fa5
      mem[0] = mem[1] + 2*(-vin + radius*vout);  /* history buffer */
    9fe062b0:	08f6f7d3          	fsub.s	fa5,fa3,fa5
      mem[1] = vin - den2 * vout;  /* history buffer */
    9fe062b4:	00e6a227          	fsw	fa4,4(a3)
      mem[0] = mem[1] + 2*(-vin + radius*vout);  /* history buffer */
    9fe062b8:	6007f7c3          	fmadd.s	fa5,fa5,ft0,fa2
    9fe062bc:	00f6a027          	fsw	fa5,0(a3)
      out[i] = radius * vout;
    9fe062c0:	fed5ae27          	fsw	fa3,-4(a1)
   for (i=0;i<len;i++) {
    9fe062c4:	fca796e3          	bne	a5,a0,9fe06290 <DC_filter+0x3e>
   }
}
    9fe062c8:	8082                	ret

000000009fe062ca <inner_prod>:

inline float inner_prod(const float *x, const float *y, int len)
{
   float sum = 0;

   len >>= 1;
    9fe062ca:	40165793          	srai	a5,a2,0x1
   float sum = 0;
    9fe062ce:	f0000553          	fmv.w.x	fa0,zero
   len >>= 1;
    9fe062d2:	4016561b          	sraiw	a2,a2,0x1
   while(len--) {
    9fe062d6:	cf85                	beqz	a5,9fe0630e <inner_prod+0x44>
    9fe062d8:	02061793          	slli	a5,a2,0x20
      float part = 0;
      part = part + (*x++) * (*y++);
    9fe062dc:	20a50653          	fmv.s	fa2,fa0
    9fe062e0:	01d7d613          	srli	a2,a5,0x1d
    9fe062e4:	00c507b3          	add	a5,a0,a2
    9fe062e8:	00052707          	flw	fa4,0(a0)
    9fe062ec:	0005a687          	flw	fa3,0(a1)
    9fe062f0:	0521                	addi	a0,a0,8
      part = part + (*x++) * (*y++);
    9fe062f2:	ffc52787          	flw	fa5,-4(a0)
      part = part + (*x++) * (*y++);
    9fe062f6:	60d77743          	fmadd.s	fa4,fa4,fa3,fa2
      part = part + (*x++) * (*y++);
    9fe062fa:	0045a687          	flw	fa3,4(a1)
    9fe062fe:	05a1                	addi	a1,a1,8
    9fe06300:	70d7f7c3          	fmadd.s	fa5,fa5,fa3,fa4
      sum = sum + part;
    9fe06304:	00f57553          	fadd.s	fa0,fa0,fa5
   while(len--) {
    9fe06308:	fef510e3          	bne	a0,a5,9fe062e8 <inner_prod+0x1e>
    9fe0630c:	8082                	ret
   }
   return sum;
}
    9fe0630e:	8082                	ret

000000009fe06310 <bin_power_spectrum>:

inline void bin_power_spectrum(const float *X, float *ps, int N)
{
   int i, j;

   ps[0] = X[0] * X[0];
    9fe06310:	00052787          	flw	fa5,0(a0)
   for (i=1,j=1;i<N-1;i+=2,j++) {  /* half-complex vector */
    9fe06314:	4789                	li	a5,2
   ps[0] = X[0] * X[0];
    9fe06316:	10f7f7d3          	fmul.s	fa5,fa5,fa5
    9fe0631a:	00f5a027          	fsw	fa5,0(a1)
   for (i=1,j=1;i<N-1;i+=2,j++) {  /* half-complex vector */
    9fe0631e:	04c7dd63          	bge	a5,a2,9fe06378 <bin_power_spectrum+0x68>
    9fe06322:	3675                	addiw	a2,a2,-3
    9fe06324:	0016569b          	srliw	a3,a2,0x1
    9fe06328:	00369813          	slli	a6,a3,0x3
    9fe0632c:	00c50693          	addi	a3,a0,12
    9fe06330:	00450793          	addi	a5,a0,4
    9fe06334:	00458713          	addi	a4,a1,4
    9fe06338:	0016561b          	srliw	a2,a2,0x1
    9fe0633c:	96c2                	add	a3,a3,a6
      ps[j] =  X[i] * X[i] + X[i+1] * X[i+1];
    9fe0633e:	0047a707          	flw	fa4,4(a5)
    9fe06342:	0007a787          	flw	fa5,0(a5)
   for (i=1,j=1;i<N-1;i+=2,j++) {  /* half-complex vector */
    9fe06346:	0711                	addi	a4,a4,4
      ps[j] =  X[i] * X[i] + X[i+1] * X[i+1];
    9fe06348:	10e77753          	fmul.s	fa4,fa4,fa4
   for (i=1,j=1;i<N-1;i+=2,j++) {  /* half-complex vector */
    9fe0634c:	07a1                	addi	a5,a5,8
      ps[j] =  X[i] * X[i] + X[i+1] * X[i+1];
    9fe0634e:	70f7f7c3          	fmadd.s	fa5,fa5,fa5,fa4
    9fe06352:	fef72e27          	fsw	fa5,-4(a4)
   for (i=1,j=1;i<N-1;i+=2,j++) {  /* half-complex vector */
    9fe06356:	fed794e3          	bne	a5,a3,9fe0633e <bin_power_spectrum+0x2e>
    9fe0635a:	0016179b          	slliw	a5,a2,0x1
   }
   ps[j] = X[i] * X[i];
    9fe0635e:	278d                	addiw	a5,a5,3
    9fe06360:	078a                	slli	a5,a5,0x2
    9fe06362:	953e                	add	a0,a0,a5
    9fe06364:	00052787          	flw	fa5,0(a0)
    9fe06368:	2609                	addiw	a2,a2,2
    9fe0636a:	060a                	slli	a2,a2,0x2
    9fe0636c:	10f7f7d3          	fmul.s	fa5,fa5,fa5
    9fe06370:	962e                	add	a2,a2,a1
    9fe06372:	00f62027          	fsw	fa5,0(a2)
}
    9fe06376:	8082                	ret
   for (i=1,j=1;i<N-1;i+=2,j++) {  /* half-complex vector */
    9fe06378:	4791                	li	a5,4
   ps[j] = X[i] * X[i];
    9fe0637a:	953e                	add	a0,a0,a5
    9fe0637c:	00052787          	flw	fa5,0(a0)
   for (i=1,j=1;i<N-1;i+=2,j++) {  /* half-complex vector */
    9fe06380:	4611                	li	a2,4
   ps[j] = X[i] * X[i];
    9fe06382:	962e                	add	a2,a2,a1
    9fe06384:	10f7f7d3          	fmul.s	fa5,fa5,fa5
    9fe06388:	00f62027          	fsw	fa5,0(a2)
}
    9fe0638c:	8082                	ret

000000009fe0638e <accum_power_spectrum>:

inline void accum_power_spectrum(const float *X, float *ps, int N)
{
   int i, j;

   ps[0] += (X[0] * X[0]);  /* ps[0] = ps[0] + X[0] * X[0], real part only, the im part in first point is zero */
    9fe0638e:	00052787          	flw	fa5,0(a0)
    9fe06392:	0005a707          	flw	fa4,0(a1)
   for (i=1,j=1;i<N-1;i+=2,j++) {
    9fe06396:	4789                	li	a5,2
   ps[0] += (X[0] * X[0]);  /* ps[0] = ps[0] + X[0] * X[0], real part only, the im part in first point is zero */
    9fe06398:	70f7f7c3          	fmadd.s	fa5,fa5,fa5,fa4
    9fe0639c:	00f5a027          	fsw	fa5,0(a1)
   for (i=1,j=1;i<N-1;i+=2,j++) {
    9fe063a0:	06c7d363          	bge	a5,a2,9fe06406 <accum_power_spectrum+0x78>
    9fe063a4:	3675                	addiw	a2,a2,-3
    9fe063a6:	0016569b          	srliw	a3,a2,0x1
    9fe063aa:	00369813          	slli	a6,a3,0x3
    9fe063ae:	00c50693          	addi	a3,a0,12
    9fe063b2:	00458713          	addi	a4,a1,4
    9fe063b6:	00450793          	addi	a5,a0,4
    9fe063ba:	0016561b          	srliw	a2,a2,0x1
    9fe063be:	96c2                	add	a3,a3,a6
      ps[j] +=  (X[i] * X[i] + X[i+1] * X[i+1]);
    9fe063c0:	0047a707          	flw	fa4,4(a5)
    9fe063c4:	0007a787          	flw	fa5,0(a5)
    9fe063c8:	00072687          	flw	fa3,0(a4)
    9fe063cc:	10e77753          	fmul.s	fa4,fa4,fa4
   for (i=1,j=1;i<N-1;i+=2,j++) {
    9fe063d0:	0711                	addi	a4,a4,4
    9fe063d2:	07a1                	addi	a5,a5,8
      ps[j] +=  (X[i] * X[i] + X[i+1] * X[i+1]);
    9fe063d4:	70f7f7c3          	fmadd.s	fa5,fa5,fa5,fa4
    9fe063d8:	00f6f7d3          	fadd.s	fa5,fa3,fa5
    9fe063dc:	fef72e27          	fsw	fa5,-4(a4)
   for (i=1,j=1;i<N-1;i+=2,j++) {
    9fe063e0:	fef690e3          	bne	a3,a5,9fe063c0 <accum_power_spectrum+0x32>
    9fe063e4:	0016179b          	slliw	a5,a2,0x1
   }
   ps[j] += (X[i] * X[i]);  /* real part only, the im part in (N/2+1)th point is zero */
    9fe063e8:	278d                	addiw	a5,a5,3
    9fe063ea:	2609                	addiw	a2,a2,2
    9fe063ec:	060a                	slli	a2,a2,0x2
    9fe063ee:	078a                	slli	a5,a5,0x2
    9fe063f0:	962e                	add	a2,a2,a1
    9fe063f2:	953e                	add	a0,a0,a5
    9fe063f4:	00052787          	flw	fa5,0(a0)
    9fe063f8:	00062707          	flw	fa4,0(a2)
    9fe063fc:	70f7f7c3          	fmadd.s	fa5,fa5,fa5,fa4
    9fe06400:	00f62027          	fsw	fa5,0(a2)
}
    9fe06404:	8082                	ret
   for (i=1,j=1;i<N-1;i+=2,j++) {
    9fe06406:	4791                	li	a5,4
    9fe06408:	4611                	li	a2,4
   ps[j] += (X[i] * X[i]);  /* real part only, the im part in (N/2+1)th point is zero */
    9fe0640a:	962e                	add	a2,a2,a1
    9fe0640c:	953e                	add	a0,a0,a5
    9fe0640e:	00052787          	flw	fa5,0(a0)
    9fe06412:	00062707          	flw	fa4,0(a2)
    9fe06416:	70f7f7c3          	fmadd.s	fa5,fa5,fa5,fa4
    9fe0641a:	00f62027          	fsw	fa5,0(a2)
}
    9fe0641e:	8082                	ret

000000009fe06420 <accum_spectral_mul>:

inline void accum_spectral_mul(const float *X, const float *Y, float *acc, int N, int M)
{
   int i,j;

   for (i=0;i<N;i++)
    9fe06420:	02d05163          	blez	a3,9fe06442 <accum_spectral_mul+0x22>
    9fe06424:	fff6881b          	addiw	a6,a3,-1
    9fe06428:	02081793          	slli	a5,a6,0x20
    9fe0642c:	01e7d893          	srli	a7,a5,0x1e
    9fe06430:	00460813          	addi	a6,a2,4
    9fe06434:	87b2                	mv	a5,a2
    9fe06436:	9846                	add	a6,a6,a7
      acc[i] = 0;
    9fe06438:	0007a023          	sw	zero,0(a5)
   for (i=0;i<N;i++)
    9fe0643c:	0791                	addi	a5,a5,4
    9fe0643e:	ff079de3          	bne	a5,a6,9fe06438 <accum_spectral_mul+0x18>
   for (j=0;j<M;j++) {
    9fe06442:	0ce05663          	blez	a4,9fe0650e <accum_spectral_mul+0xee>
    9fe06446:	ffd6879b          	addiw	a5,a3,-3
      acc[0] += (X[0]*Y[0]);  /* real part only for the first point of X and Y */
      for (i=1;i<N-1;i+=2) {  /* X[i] and Y[i] are the real part of X and Y respectively, X[i+1] and Y[i+1] are the imaginary part of X and Y respectively */
    9fe0644a:	ffe7ff13          	andi	t5,a5,-2
    9fe0644e:	0017d81b          	srliw	a6,a5,0x1
    9fe06452:	00c60313          	addi	t1,a2,12
    9fe06456:	00381793          	slli	a5,a6,0x3
         acc[i] += (X[i]*Y[i] - X[i+1]*Y[i+1]);  /* real part */
         acc[i+1] += (X[i+1]*Y[i] + X[i]*Y[i+1]);  /* imaginary part */
      }
      acc[i] += (X[i]*Y[i]);  /* real part only for the (N/2+1)th point of X and Y */
    9fe0645a:	2f0d                	addiw	t5,t5,3
      X += N;
    9fe0645c:	00269e93          	slli	t4,a3,0x2
    9fe06460:	933e                	add	t1,t1,a5
      acc[i] += (X[i]*Y[i]);  /* real part only for the (N/2+1)th point of X and Y */
    9fe06462:	0f0a                	slli	t5,t5,0x2
   for (j=0;j<M;j++) {
    9fe06464:	4e01                	li	t3,0
      for (i=1;i<N-1;i+=2) {  /* X[i] and Y[i] are the real part of X and Y respectively, X[i+1] and Y[i+1] are the imaginary part of X and Y respectively */
    9fe06466:	4f89                	li	t6,2
      acc[0] += (X[0]*Y[0]);  /* real part only for the first point of X and Y */
    9fe06468:	00052787          	flw	fa5,0(a0)
    9fe0646c:	0005a687          	flw	fa3,0(a1)
    9fe06470:	00062707          	flw	fa4,0(a2)
    9fe06474:	70d7f7c3          	fmadd.s	fa5,fa5,fa3,fa4
    9fe06478:	00f62027          	fsw	fa5,0(a2)
      for (i=1;i<N-1;i+=2) {  /* X[i] and Y[i] are the real part of X and Y respectively, X[i+1] and Y[i+1] are the imaginary part of X and Y respectively */
    9fe0647c:	08dfd763          	bge	t6,a3,9fe0650a <accum_spectral_mul+0xea>
    9fe06480:	00460793          	addi	a5,a2,4
    9fe06484:	00450893          	addi	a7,a0,4
    9fe06488:	00458813          	addi	a6,a1,4
         acc[i] += (X[i]*Y[i] - X[i+1]*Y[i+1]);  /* real part */
    9fe0648c:	0048a787          	flw	fa5,4(a7)
    9fe06490:	00482607          	flw	fa2,4(a6) # 8004 <_EL1_STACK_SIZE+0x7804>
    9fe06494:	0008a687          	flw	fa3,0(a7)
    9fe06498:	00082587          	flw	fa1,0(a6)
    9fe0649c:	10c7f653          	fmul.s	fa2,fa5,fa2
    9fe064a0:	0007a707          	flw	fa4,0(a5)
         acc[i+1] += (X[i+1]*Y[i] + X[i]*Y[i+1]);  /* imaginary part */
    9fe064a4:	0047a787          	flw	fa5,4(a5)
      for (i=1;i<N-1;i+=2) {  /* X[i] and Y[i] are the real part of X and Y respectively, X[i+1] and Y[i+1] are the imaginary part of X and Y respectively */
    9fe064a8:	07a1                	addi	a5,a5,8
    9fe064aa:	08a1                	addi	a7,a7,8
         acc[i] += (X[i]*Y[i] - X[i+1]*Y[i+1]);  /* real part */
    9fe064ac:	60b6f6c7          	fmsub.s	fa3,fa3,fa1,fa2
      for (i=1;i<N-1;i+=2) {  /* X[i] and Y[i] are the real part of X and Y respectively, X[i+1] and Y[i+1] are the imaginary part of X and Y respectively */
    9fe064b0:	0821                	addi	a6,a6,8
         acc[i] += (X[i]*Y[i] - X[i+1]*Y[i+1]);  /* real part */
    9fe064b2:	00d77753          	fadd.s	fa4,fa4,fa3
    9fe064b6:	fee7ac27          	fsw	fa4,-8(a5)
         acc[i+1] += (X[i+1]*Y[i] + X[i]*Y[i+1]);  /* imaginary part */
    9fe064ba:	ff88a687          	flw	fa3,-8(a7)
    9fe064be:	ffc82587          	flw	fa1,-4(a6)
    9fe064c2:	ffc8a707          	flw	fa4,-4(a7)
    9fe064c6:	ff882607          	flw	fa2,-8(a6)
    9fe064ca:	10b6f6d3          	fmul.s	fa3,fa3,fa1
    9fe064ce:	68c77743          	fmadd.s	fa4,fa4,fa2,fa3
    9fe064d2:	00e7f7d3          	fadd.s	fa5,fa5,fa4
    9fe064d6:	fef7ae27          	fsw	fa5,-4(a5)
      for (i=1;i<N-1;i+=2) {  /* X[i] and Y[i] are the real part of X and Y respectively, X[i+1] and Y[i+1] are the imaginary part of X and Y respectively */
    9fe064da:	faf319e3          	bne	t1,a5,9fe0648c <accum_spectral_mul+0x6c>
    9fe064de:	87fa                	mv	a5,t5
      acc[i] += (X[i]*Y[i]);  /* real part only for the (N/2+1)th point of X and Y */
    9fe064e0:	00f60833          	add	a6,a2,a5
    9fe064e4:	00f508b3          	add	a7,a0,a5
    9fe064e8:	97ae                	add	a5,a5,a1
    9fe064ea:	0008a787          	flw	fa5,0(a7)
    9fe064ee:	0007a687          	flw	fa3,0(a5)
    9fe064f2:	00082707          	flw	fa4,0(a6)
   for (j=0;j<M;j++) {
    9fe064f6:	2e05                	addiw	t3,t3,1
      X += N;
    9fe064f8:	9576                	add	a0,a0,t4
      acc[i] += (X[i]*Y[i]);  /* real part only for the (N/2+1)th point of X and Y */
    9fe064fa:	70d7f7c3          	fmadd.s	fa5,fa5,fa3,fa4
      Y += N;
    9fe064fe:	95f6                	add	a1,a1,t4
      acc[i] += (X[i]*Y[i]);  /* real part only for the (N/2+1)th point of X and Y */
    9fe06500:	00f82027          	fsw	fa5,0(a6)
   for (j=0;j<M;j++) {
    9fe06504:	f7c712e3          	bne	a4,t3,9fe06468 <accum_spectral_mul+0x48>
   }
}
    9fe06508:	8082                	ret
      for (i=1;i<N-1;i+=2) {  /* X[i] and Y[i] are the real part of X and Y respectively, X[i+1] and Y[i+1] are the imaginary part of X and Y respectively */
    9fe0650a:	4791                	li	a5,4
    9fe0650c:	bfd1                	j	9fe064e0 <accum_spectral_mul+0xc0>
    9fe0650e:	8082                	ret

000000009fe06510 <weighted_gradient_phi>:
inline void weighted_gradient_phi(const float *w, const float p, const float *X, const float *Y, float *prod, int N)
{
   int i, j;
   float W;

   W = p * w[0];  /* real value */
    9fe06510:	00052787          	flw	fa5,0(a0)
   prod[0] = W * X[0] * Y[0];  /* real part only for the first point of X and Y */
    9fe06514:	0005a687          	flw	fa3,0(a1)
    9fe06518:	00062707          	flw	fa4,0(a2)
   W = p * w[0];  /* real value */
    9fe0651c:	10f577d3          	fmul.s	fa5,fa0,fa5
   for (i=1,j=1;i<N-1;i+=2,j++) {
    9fe06520:	4789                	li	a5,2
   prod[0] = W * X[0] * Y[0];  /* real part only for the first point of X and Y */
    9fe06522:	10d7f7d3          	fmul.s	fa5,fa5,fa3
    9fe06526:	10e7f7d3          	fmul.s	fa5,fa5,fa4
    9fe0652a:	00f6a027          	fsw	fa5,0(a3)
   for (i=1,j=1;i<N-1;i+=2,j++) {
    9fe0652e:	0ae7d763          	bge	a5,a4,9fe065dc <weighted_gradient_phi+0xcc>
    9fe06532:	ffd7031b          	addiw	t1,a4,-3
    9fe06536:	00135e9b          	srliw	t4,t1,0x1
    9fe0653a:	00c58e13          	addi	t3,a1,12
    9fe0653e:	0e8e                	slli	t4,t4,0x3
    9fe06540:	00450893          	addi	a7,a0,4
    9fe06544:	00458793          	addi	a5,a1,4
    9fe06548:	00460713          	addi	a4,a2,4
    9fe0654c:	00468813          	addi	a6,a3,4
    9fe06550:	0013531b          	srliw	t1,t1,0x1
    9fe06554:	9e76                	add	t3,t3,t4
      W = p * w[j];  /* real value */
      /* perform conj(X)*Y, conjugation of X[i] + X[i+1]j = X[i] - X[i+1]j */
      prod[i] = W * (X[i] * Y[i] + X[i+1] * Y[i+1]);  /* real part */
    9fe06556:	0047a687          	flw	fa3,4(a5)
    9fe0655a:	00472607          	flw	fa2,4(a4)
    9fe0655e:	0007a707          	flw	fa4,0(a5)
    9fe06562:	00072587          	flw	fa1,0(a4)
    9fe06566:	10c6f653          	fmul.s	fa2,fa3,fa2
      W = p * w[j];  /* real value */
    9fe0656a:	0008a787          	flw	fa5,0(a7)
   for (i=1,j=1;i<N-1;i+=2,j++) {
    9fe0656e:	0821                	addi	a6,a6,8
    9fe06570:	07a1                	addi	a5,a5,8
      W = p * w[j];  /* real value */
    9fe06572:	10f576d3          	fmul.s	fa3,fa0,fa5
      prod[i] = W * (X[i] * Y[i] + X[i+1] * Y[i+1]);  /* real part */
    9fe06576:	60b77743          	fmadd.s	fa4,fa4,fa1,fa2
   for (i=1,j=1;i<N-1;i+=2,j++) {
    9fe0657a:	0721                	addi	a4,a4,8
    9fe0657c:	0891                	addi	a7,a7,4
      prod[i] = W * (X[i] * Y[i] + X[i+1] * Y[i+1]);  /* real part */
    9fe0657e:	10d77753          	fmul.s	fa4,fa4,fa3
    9fe06582:	fee82c27          	fsw	fa4,-8(a6)
      prod[i+1] = W * (-X[i+1] * Y[i] +  X[i] * Y[i+1]);  /* imaginary part */
    9fe06586:	ff87a707          	flw	fa4,-8(a5)
    9fe0658a:	ffc72587          	flw	fa1,-4(a4)
    9fe0658e:	ffc7a787          	flw	fa5,-4(a5)
    9fe06592:	ff872607          	flw	fa2,-8(a4)
    9fe06596:	10b77753          	fmul.s	fa4,fa4,fa1
    9fe0659a:	70c7f7cb          	fnmsub.s	fa5,fa5,fa2,fa4
    9fe0659e:	10d7f7d3          	fmul.s	fa5,fa5,fa3
    9fe065a2:	fef82e27          	fsw	fa5,-4(a6)
   for (i=1,j=1;i<N-1;i+=2,j++) {
    9fe065a6:	fafe18e3          	bne	t3,a5,9fe06556 <weighted_gradient_phi+0x46>
    9fe065aa:	0013179b          	slliw	a5,t1,0x1
   }
   W = p * w[j];  /* real value */
   prod[i] = W * X[i] * Y[i];  /* real part only for the (N/2+1)th point of X and Y */
    9fe065ae:	278d                	addiw	a5,a5,3
   W = p * w[j];  /* real value */
    9fe065b0:	2309                	addiw	t1,t1,2
    9fe065b2:	030a                	slli	t1,t1,0x2
   prod[i] = W * X[i] * Y[i];  /* real part only for the (N/2+1)th point of X and Y */
    9fe065b4:	078a                	slli	a5,a5,0x2
   W = p * w[j];  /* real value */
    9fe065b6:	951a                	add	a0,a0,t1
    9fe065b8:	00052787          	flw	fa5,0(a0)
   prod[i] = W * X[i] * Y[i];  /* real part only for the (N/2+1)th point of X and Y */
    9fe065bc:	95be                	add	a1,a1,a5
    9fe065be:	0005a707          	flw	fa4,0(a1)
   W = p * w[j];  /* real value */
    9fe065c2:	10f57553          	fmul.s	fa0,fa0,fa5
   prod[i] = W * X[i] * Y[i];  /* real part only for the (N/2+1)th point of X and Y */
    9fe065c6:	963e                	add	a2,a2,a5
    9fe065c8:	00062787          	flw	fa5,0(a2)
    9fe065cc:	96be                	add	a3,a3,a5
    9fe065ce:	10e57553          	fmul.s	fa0,fa0,fa4
    9fe065d2:	10f57553          	fmul.s	fa0,fa0,fa5
    9fe065d6:	00a6a027          	fsw	fa0,0(a3)
}
    9fe065da:	8082                	ret
   for (i=1,j=1;i<N-1;i+=2,j++) {
    9fe065dc:	4791                	li	a5,4
    9fe065de:	4311                	li	t1,4
    9fe065e0:	bfd9                	j	9fe065b6 <weighted_gradient_phi+0xa6>

000000009fe065e2 <aec_adjust_prop>:
   int i, j;
   float max_sum = 1;
   float prop_sum = 1;
   //float max_sum_matlab[20];

   for (i=0;i<M;i++) {
    9fe065e2:	10c05963          	blez	a2,9fe066f4 <aec_adjust_prop+0x112>
    9fe065e6:	fff6079b          	addiw	a5,a2,-1
{
    9fe065ea:	7119                	addi	sp,sp,-128
    9fe065ec:	02079713          	slli	a4,a5,0x20
    9fe065f0:	01e75793          	srli	a5,a4,0x1e
    9fe065f4:	ac22                	fsd	fs0,24(sp)
   float max_sum = 1;
    9fe065f6:	0000c717          	auipc	a4,0xc
    9fe065fa:	c1a72407          	flw	fs0,-998(a4) # 9fe12210 <__func__.1+0x58>
{
    9fe065fe:	f0ca                	sd	s2,96(sp)
    9fe06600:	a826                	fsd	fs1,16(sp)
    9fe06602:	fff5891b          	addiw	s2,a1,-1
   float max_sum = 1;
    9fe06606:	208404d3          	fmv.s	fs1,fs0
{
    9fe0660a:	fc5e                	sd	s7,56(sp)
    9fe0660c:	1902                	slli	s2,s2,0x20
    9fe0660e:	00468b93          	addi	s7,a3,4
    9fe06612:	f8a2                	sd	s0,112(sp)
    9fe06614:	f4a6                	sd	s1,104(sp)
    9fe06616:	ecce                	sd	s3,88(sp)
    9fe06618:	e8d2                	sd	s4,80(sp)
    9fe0661a:	e4d6                	sd	s5,72(sp)
    9fe0661c:	e0da                	sd	s6,64(sp)
    9fe0661e:	f862                	sd	s8,48(sp)
    9fe06620:	f466                	sd	s9,40(sp)
    9fe06622:	a44a                	fsd	fs2,8(sp)
    9fe06624:	9bbe                	add	s7,s7,a5
    9fe06626:	fc86                	sd	ra,120(sp)
    9fe06628:	89aa                	mv	s3,a0
    9fe0662a:	84ae                	mv	s1,a1
    9fe0662c:	8436                	mv	s0,a3
    9fe0662e:	8b36                	mv	s6,a3
    9fe06630:	00058a1b          	sext.w	s4,a1
   for (i=0;i<M;i++) {
    9fe06634:	8c36                	mv	s8,a3
    9fe06636:	4c81                	li	s9,0
      float tmp = 1;
      for (j=0;j<N;j++)
    9fe06638:	0000c797          	auipc	a5,0xc
    9fe0663c:	c987b907          	fld	fs2,-872(a5) # 9fe122d0 <__func__.1+0x118>
    9fe06640:	02095913          	srli	s2,s2,0x20
    9fe06644:	00450a93          	addi	s5,a0,4
    9fe06648:	23290553          	fmv.d	fa0,fs2
    9fe0664c:	02905463          	blez	s1,9fe06674 <aec_adjust_prop+0x92>
    9fe06650:	01990733          	add	a4,s2,s9
      float tmp = 1;
    9fe06654:	20840553          	fmv.s	fa0,fs0
    9fe06658:	002c9793          	slli	a5,s9,0x2
    9fe0665c:	070a                	slli	a4,a4,0x2
    9fe0665e:	97ce                	add	a5,a5,s3
    9fe06660:	9756                	add	a4,a4,s5
         /* tmp(m) = tmp(m) + W(k, m) * W(k, m) */
         tmp += (W[i*N+j] * W[i*N+j]);  /* sum the power of the (N/2+1) frequency bin in each taplen */
    9fe06662:	0007a787          	flw	fa5,0(a5)
      for (j=0;j<N;j++)
    9fe06666:	0791                	addi	a5,a5,4
         tmp += (W[i*N+j] * W[i*N+j]);  /* sum the power of the (N/2+1) frequency bin in each taplen */
    9fe06668:	50f7f543          	fmadd.s	fa0,fa5,fa5,fa0
      for (j=0;j<N;j++)
    9fe0666c:	fee79be3          	bne	a5,a4,9fe06662 <aec_adjust_prop+0x80>
      prop[i] = (float)math_sqrt(tmp);
    9fe06670:	42050553          	fcvt.d.s	fa0,fa0
    9fe06674:	f7efa0ef          	jal	ra,9fe00df2 <sqrt>
    9fe06678:	40157553          	fcvt.s.d	fa0,fa0

      #if (1)  /* better */
      if (prop[i] > max_sum)
    9fe0667c:	a0a497d3          	flt.s	a5,fs1,fa0
      prop[i] = (float)math_sqrt(tmp);
    9fe06680:	00ac2027          	fsw	fa0,0(s8) # 8000 <_EL1_STACK_SIZE+0x7800>
      if (prop[i] > max_sum)
    9fe06684:	c399                	beqz	a5,9fe0668a <aec_adjust_prop+0xa8>
         max_sum = prop[i];
    9fe06686:	20a504d3          	fmv.s	fs1,fa0
   for (i=0;i<M;i++) {
    9fe0668a:	0c11                	addi	s8,s8,4
    9fe0668c:	014c8cbb          	addw	s9,s9,s4
    9fe06690:	fb7c1ce3          	bne	s8,s7,9fe06648 <aec_adjust_prop+0x66>
   }

   for (i=0;i<M;i++) {

      #if (1)  /* better */
      prop[i] += (.1f * max_sum);
    9fe06694:	0000c797          	auipc	a5,0xc
    9fe06698:	c547a787          	flw	fa5,-940(a5) # 9fe122e8 <__func__.1+0x130>
    9fe0669c:	10f4f4d3          	fmul.s	fs1,fs1,fa5
    9fe066a0:	00042787          	flw	fa5,0(s0)
   for (i=0;i<M;i++) {
    9fe066a4:	0411                	addi	s0,s0,4
      prop[i] += (.1f * max_sum);
    9fe066a6:	00f4f7d3          	fadd.s	fa5,fs1,fa5
    9fe066aa:	fef42e27          	fsw	fa5,-4(s0)
      #else
      prop[i] += (.1f * max_sum_matlab[i]);
      #endif

      prop_sum += prop[i];  /* sum(prop(m)) */
    9fe066ae:	00f47453          	fadd.s	fs0,fs0,fa5
   for (i=0;i<M;i++) {
    9fe066b2:	ff7417e3          	bne	s0,s7,9fe066a0 <aec_adjust_prop+0xbe>
    9fe066b6:	0000c797          	auipc	a5,0xc
    9fe066ba:	c367a687          	flw	fa3,-970(a5) # 9fe122ec <__func__.1+0x134>
   }
   for (i=0;i<M;i++) {
      prop[i] = (.99f * prop[i]) / prop_sum;
    9fe066be:	000b2787          	flw	fa5,0(s6)
   for (i=0;i<M;i++) {
    9fe066c2:	0b11                	addi	s6,s6,4
      prop[i] = (.99f * prop[i]) / prop_sum;
    9fe066c4:	10d7f7d3          	fmul.s	fa5,fa5,fa3
    9fe066c8:	1887f7d3          	fdiv.s	fa5,fa5,fs0
    9fe066cc:	fefb2e27          	fsw	fa5,-4(s6)
   for (i=0;i<M;i++) {
    9fe066d0:	ff7b17e3          	bne	s6,s7,9fe066be <aec_adjust_prop+0xdc>
   }

}
    9fe066d4:	70e6                	ld	ra,120(sp)
    9fe066d6:	7446                	ld	s0,112(sp)
    9fe066d8:	74a6                	ld	s1,104(sp)
    9fe066da:	7906                	ld	s2,96(sp)
    9fe066dc:	69e6                	ld	s3,88(sp)
    9fe066de:	6a46                	ld	s4,80(sp)
    9fe066e0:	6aa6                	ld	s5,72(sp)
    9fe066e2:	6b06                	ld	s6,64(sp)
    9fe066e4:	7be2                	ld	s7,56(sp)
    9fe066e6:	7c42                	ld	s8,48(sp)
    9fe066e8:	7ca2                	ld	s9,40(sp)
    9fe066ea:	2462                	fld	fs0,24(sp)
    9fe066ec:	24c2                	fld	fs1,16(sp)
    9fe066ee:	2922                	fld	fs2,8(sp)
    9fe066f0:	6109                	addi	sp,sp,128
    9fe066f2:	8082                	ret
    9fe066f4:	8082                	ret

000000009fe066f6 <NR>:
	} while (0)
#endif

/* Function Definitions */
EXPORT void NR(short *x, float initial_noise_pow_time, float *frame, NRState *st, boolean_T *speech_vad, float *y)
{
    9fe066f6:	716d                	addi	sp,sp,-272
    9fe066f8:	fda6                	sd	s1,248(sp)
    9fe066fa:	f9ca                	sd	s2,240(sp)
    9fe066fc:	f1d2                	sd	s4,224(sp)
    9fe066fe:	e5de                	sd	s7,200(sp)
    9fe06700:	a54a                	fsd	fs2,136(sp)
    9fe06702:	e606                	sd	ra,264(sp)
    9fe06704:	e222                	sd	s0,256(sp)
    9fe06706:	f5ce                	sd	s3,232(sp)
    9fe06708:	edd6                	sd	s5,216(sp)
    9fe0670a:	e9da                	sd	s6,208(sp)
    9fe0670c:	e1e2                	sd	s8,192(sp)
    9fe0670e:	fd66                	sd	s9,184(sp)
    9fe06710:	f96a                	sd	s10,176(sp)
    9fe06712:	f56e                	sd	s11,168(sp)
    9fe06714:	ad22                	fsd	fs0,152(sp)
    9fe06716:	a926                	fsd	fs1,144(sp)
    9fe06718:	a14e                	fsd	fs3,128(sp)
    9fe0671a:	bcd2                	fsd	fs4,120(sp)
    9fe0671c:	b8d6                	fsd	fs5,112(sp)
    9fe0671e:	b4da                	fsd	fs6,104(sp)
    9fe06720:	b0de                	fsd	fs7,96(sp)


  /* Preparation */
  c = 0.886226925F;
  qkr = 2.33333333F;
  len = 2*st->frame_size;    /* window size */
    9fe06722:	09862783          	lw	a5,152(a2)
{
    9fe06726:	8bb2                	mv	s7,a2
    9fe06728:	e43a                	sd	a4,8(sp)
  len = 2*st->frame_size;    /* window size */
    9fe0672a:	0017961b          	slliw	a2,a5,0x1
    9fe0672e:	0006071b          	sext.w	a4,a2
  len1 = st->frame_size;    /* overlap size */
  nFFT = 2*2*st->frame_size;
    9fe06732:	0027949b          	slliw	s1,a5,0x2
  len = 2*st->frame_size;    /* window size */
    9fe06736:	f83a                	sd	a4,48(sp)
  nFFT = 2*2*st->frame_size;
    9fe06738:	0004871b          	sext.w	a4,s1
  len = 2*st->frame_size;    /* window size */
    9fe0673c:	f43e                	sd	a5,40(sp)
    9fe0673e:	c6b2                	sw	a2,76(sp)
  nFFT = 2*2*st->frame_size;
    9fe06740:	e83a                	sd	a4,16(sp)
{
    9fe06742:	20a50953          	fmv.s	fs2,fa0
    9fe06746:	892e                	mv	s2,a1
    9fe06748:	8a36                	mv	s4,a3
  for (i = 0; i < st->frame_size; i++) {
    9fe0674a:	08f05963          	blez	a5,9fe067dc <NR+0xe6>
    9fe0674e:	85aa                	mv	a1,a0
    9fe06750:	873e                	mv	a4,a5
    9fe06752:	4601                	li	a2,0
    9fe06754:	4681                	li	a3,0
    x[i+st->frame_size] = x[i];    /* go first to avoid overwriting by x_old[], applicable for AEC on or AEC off */
    9fe06756:	00059803          	lh	a6,0(a1)
    9fe0675a:	9f35                	addw	a4,a4,a3
    9fe0675c:	0706                	slli	a4,a4,0x1
    9fe0675e:	972a                	add	a4,a4,a0
    9fe06760:	01071023          	sh	a6,0(a4)
    x[i] = st->x_old[i];
    9fe06764:	018bb803          	ld	a6,24(s7)
    9fe06768:	00161893          	slli	a7,a2,0x1
  for (i = 0; i < st->frame_size; i++) {
    9fe0676c:	0589                	addi	a1,a1,2
    x[i] = st->x_old[i];
    9fe0676e:	9846                	add	a6,a6,a7
    9fe06770:	00081703          	lh	a4,0(a6)
  for (i = 0; i < st->frame_size; i++) {
    9fe06774:	0605                	addi	a2,a2,1
    x[i] = st->x_old[i];
    9fe06776:	fee59f23          	sh	a4,-2(a1)
    st->x_old[i] = x[i+st->frame_size];    /* update input overlap data */
    9fe0677a:	098ba703          	lw	a4,152(s7)
    9fe0677e:	018bb803          	ld	a6,24(s7)
    9fe06782:	9f35                	addw	a4,a4,a3
    9fe06784:	0706                	slli	a4,a4,0x1
    9fe06786:	972a                	add	a4,a4,a0
    9fe06788:	00071303          	lh	t1,0(a4)
    9fe0678c:	01180733          	add	a4,a6,a7
  for (i = 0; i < st->frame_size; i++) {
    9fe06790:	0006069b          	sext.w	a3,a2
    st->x_old[i] = x[i+st->frame_size];    /* update input overlap data */
    9fe06794:	00671023          	sh	t1,0(a4)
  for (i = 0; i < st->frame_size; i++) {
    9fe06798:	098ba703          	lw	a4,152(s7)
    9fe0679c:	fae6cde3          	blt	a3,a4,9fe06756 <NR+0x60>
  }
  /* Transform to floating-point with float precision for input signals, input sample have to be 16-bit length */
  for (i = 0; i < 2*st->frame_size; i++) {
    9fe067a0:	02e05e63          	blez	a4,9fe067dc <NR+0xe6>
    9fe067a4:	4701                	li	a4,0
    9fe067a6:	0000c797          	auipc	a5,0xc
    9fe067aa:	a7a7a707          	flw	fa4,-1414(a5) # 9fe12220 <__func__.1+0x68>
    st->float_x[i] = (float)(x[i])/(float)(32768.0F);
    9fe067ae:	00051583          	lh	a1,0(a0)
    9fe067b2:	060bb683          	ld	a3,96(s7)
    9fe067b6:	00271613          	slli	a2,a4,0x2
    9fe067ba:	d005f7d3          	fcvt.s.w	fa5,a1
    9fe067be:	96b2                	add	a3,a3,a2
  for (i = 0; i < 2*st->frame_size; i++) {
    9fe067c0:	0705                	addi	a4,a4,1
    st->float_x[i] = (float)(x[i])/(float)(32768.0F);
    9fe067c2:	10e7f7d3          	fmul.s	fa5,fa5,fa4
  for (i = 0; i < 2*st->frame_size; i++) {
    9fe067c6:	0007061b          	sext.w	a2,a4
    9fe067ca:	0509                	addi	a0,a0,2
    st->float_x[i] = (float)(x[i])/(float)(32768.0F);
    9fe067cc:	00f6a027          	fsw	fa5,0(a3)
  for (i = 0; i < 2*st->frame_size; i++) {
    9fe067d0:	098ba683          	lw	a3,152(s7)
    9fe067d4:	0016969b          	slliw	a3,a3,0x1
    9fe067d8:	fcd64be3          	blt	a2,a3,9fe067ae <NR+0xb8>
  }

  /* Apply analysis window */
  for (i = 0; i < (nFFT/2); i++) {
    9fe067dc:	67c2                	ld	a5,16(sp)
    9fe067de:	4014d99b          	sraiw	s3,s1,0x1
    9fe067e2:	4685                	li	a3,1
    9fe067e4:	8ace                	mv	s5,s3
    9fe067e6:	00015597          	auipc	a1,0x15
    9fe067ea:	e5258593          	addi	a1,a1,-430 # 9fe1b638 <tmp_ifft_out>
    9fe067ee:	00299813          	slli	a6,s3,0x2
    9fe067f2:	4701                	li	a4,0
    9fe067f4:	38f6d6e3          	bge	a3,a5,9fe07380 <NR+0xc8a>
    tmp_ifft_out[i] = st->ana_win[i] * st->float_x[i];
    9fe067f8:	008bb603          	ld	a2,8(s7)
    9fe067fc:	060bb683          	ld	a3,96(s7)
    9fe06800:	00271513          	slli	a0,a4,0x2
    9fe06804:	962a                	add	a2,a2,a0
    9fe06806:	96aa                	add	a3,a3,a0
    9fe06808:	00062787          	flw	fa5,0(a2)
    9fe0680c:	0006a707          	flw	fa4,0(a3)
    tmp_ifft_out[(nFFT/2) + i] = 0.0F;
    9fe06810:	01058633          	add	a2,a1,a6
  for (i = 0; i < (nFFT/2); i++) {
    9fe06814:	0591                	addi	a1,a1,4
    tmp_ifft_out[i] = st->ana_win[i] * st->float_x[i];
    9fe06816:	10e7f7d3          	fmul.s	fa5,fa5,fa4
  for (i = 0; i < (nFFT/2); i++) {
    9fe0681a:	0705                	addi	a4,a4,1
    9fe0681c:	0007069b          	sext.w	a3,a4
    tmp_ifft_out[i] = st->ana_win[i] * st->float_x[i];
    9fe06820:	fef5ae27          	fsw	fa5,-4(a1)
    tmp_ifft_out[(nFFT/2) + i] = 0.0F;
    9fe06824:	00062023          	sw	zero,0(a2)
  for (i = 0; i < (nFFT/2); i++) {
    9fe06828:	fd36c8e3          	blt	a3,s3,9fe067f8 <NR+0x102>
  }

  /* Take fourier transform of one frame */
  speech_fft(st->nr_fft_table, tmp_ifft_out, tmp_fft_out);    /* faster than matlab fft() */
    9fe0682c:	000bb503          	ld	a0,0(s7)
    9fe06830:	00014617          	auipc	a2,0x14
    9fe06834:	40060613          	addi	a2,a2,1024 # 9fe1ac30 <tmp_fft_out>
    9fe06838:	00015597          	auipc	a1,0x15
    9fe0683c:	e0058593          	addi	a1,a1,-512 # 9fe1b638 <tmp_ifft_out>
  nr_fd_half[0].re = tmp_fft_out[0] * nFFT;    /* multiply nFFT to get values as in matlab */
    9fe06840:	8432                	mv	s0,a2
    9fe06842:	ec32                	sd	a2,24(sp)
  speech_fft(st->nr_fft_table, tmp_ifft_out, tmp_fft_out);    /* faster than matlab fft() */
    9fe06844:	059020ef          	jal	ra,9fe0909c <speech_fft>
  nr_fd_half[0].re = tmp_fft_out[0] * nFFT;    /* multiply nFFT to get values as in matlab */
    9fe06848:	00042787          	flw	fa5,0(s0)
    9fe0684c:	d004fa53          	fcvt.s.w	fs4,s1
  nr_fd_half[0].im = (float)3.3495873e-008;    /* assign a small value to avoid dividing by zero */
    9fe06850:	0000c417          	auipc	s0,0xc
    9fe06854:	aa440413          	addi	s0,s0,-1372 # 9fe122f4 <__func__.1+0x13c>
    9fe06858:	00042707          	flw	fa4,0(s0)
  nr_fd_half[0].re = tmp_fft_out[0] * nFFT;    /* multiply nFFT to get values as in matlab */
    9fe0685c:	1147f7d3          	fmul.s	fa5,fa5,fs4
    9fe06860:	00013797          	auipc	a5,0x13
    9fe06864:	4c078793          	addi	a5,a5,1216 # 9fe19d20 <nr_fd_half>
    9fe06868:	f03e                	sd	a5,32(sp)
  nr_fd_half[0].im = (float)3.3495873e-008;    /* assign a small value to avoid dividing by zero */
    9fe0686a:	00e7a227          	fsw	fa4,4(a5)
  for (k = 1, j = 1; j < (nFFT/2); k+=2, j++) {
    9fe0686e:	470d                	li	a4,3
  nr_fd_half[0].re = tmp_fft_out[0] * nFFT;    /* multiply nFFT to get values as in matlab */
    9fe06870:	00f7a027          	fsw	fa5,0(a5)
  for (k = 1, j = 1; j < (nFFT/2); k+=2, j++) {
    9fe06874:	67c2                	ld	a5,16(sp)
    9fe06876:	02f75c63          	bge	a4,a5,9fe068ae <NR+0x1b8>
    9fe0687a:	00014697          	auipc	a3,0x14
    9fe0687e:	3ba68693          	addi	a3,a3,954 # 9fe1ac34 <tmp_fft_out+0x4>
    9fe06882:	00013717          	auipc	a4,0x13
    9fe06886:	4a670713          	addi	a4,a4,1190 # 9fe19d28 <nr_fd_half+0x8>
    9fe0688a:	4605                	li	a2,1
    nr_fd_half[j].re = tmp_fft_out[k] * nFFT;
    9fe0688c:	0006a707          	flw	fa4,0(a3)
    nr_fd_half[j].im = tmp_fft_out[k+1] * nFFT;
    9fe06890:	0046a787          	flw	fa5,4(a3)
  for (k = 1, j = 1; j < (nFFT/2); k+=2, j++) {
    9fe06894:	0721                	addi	a4,a4,8
    nr_fd_half[j].re = tmp_fft_out[k] * nFFT;
    9fe06896:	11477753          	fmul.s	fa4,fa4,fs4
    nr_fd_half[j].im = tmp_fft_out[k+1] * nFFT;
    9fe0689a:	1147f7d3          	fmul.s	fa5,fa5,fs4
  for (k = 1, j = 1; j < (nFFT/2); k+=2, j++) {
    9fe0689e:	2605                	addiw	a2,a2,1
    9fe068a0:	06a1                	addi	a3,a3,8
    nr_fd_half[j].re = tmp_fft_out[k] * nFFT;
    9fe068a2:	fee72c27          	fsw	fa4,-8(a4)
    nr_fd_half[j].im = tmp_fft_out[k+1] * nFFT;
    9fe068a6:	fef72e27          	fsw	fa5,-4(a4)
  for (k = 1, j = 1; j < (nFFT/2); k+=2, j++) {
    9fe068aa:	ff3641e3          	blt	a2,s3,9fe0688c <NR+0x196>
  }
  nr_fd_half[nFFT/2].re = tmp_fft_out[nFFT-1] * nFFT;
    9fe068ae:	6762                	ld	a4,24(sp)
    9fe068b0:	34fd                	addiw	s1,s1,-1
    9fe068b2:	00249793          	slli	a5,s1,0x2
    9fe068b6:	00f70cb3          	add	s9,a4,a5
    9fe068ba:	000ca787          	flw	fa5,0(s9) # 8000 <_EL1_STACK_SIZE+0x7800>
    9fe068be:	7702                	ld	a4,32(sp)
  nr_fd_half[nFFT/2].im = (float)3.3495873e-008;    /* assign a small value to avoid dividing by zero */
    9fe068c0:	00042707          	flw	fa4,0(s0)
  nr_fd_half[nFFT/2].re = tmp_fft_out[nFFT-1] * nFFT;
    9fe068c4:	1147f7d3          	fmul.s	fa5,fa5,fs4
    9fe068c8:	e0be                	sd	a5,64(sp)
    9fe068ca:	00399793          	slli	a5,s3,0x3
    9fe068ce:	973e                	add	a4,a4,a5

  a_abs(nr_fd_half, nr_sig, (nFFT/2+1));    /* amplitude */
    9fe068d0:	2a85                	addiw	s5,s5,1
  nr_fd_half[nFFT/2].im = (float)3.3495873e-008;    /* assign a small value to avoid dividing by zero */
    9fe068d2:	00e72227          	fsw	fa4,4(a4)
  nr_fd_half[nFFT/2].re = tmp_fft_out[nFFT-1] * nFFT;
    9fe068d6:	00f72027          	fsw	fa5,0(a4)
  a_abs(nr_fd_half, nr_sig, (nFFT/2+1));    /* amplitude */
    9fe068da:	00014597          	auipc	a1,0x14
    9fe068de:	e4e58593          	addi	a1,a1,-434 # 9fe1a728 <nr_sig>
    9fe068e2:	00013517          	auipc	a0,0x13
    9fe068e6:	43e50513          	addi	a0,a0,1086 # 9fe19d20 <nr_fd_half>
    9fe068ea:	8656                	mv	a2,s5
  nr_fd_half[nFFT/2].re = tmp_fft_out[nFFT-1] * nFFT;
    9fe068ec:	fc3e                	sd	a5,56(sp)
  a_abs(nr_fd_half, nr_sig, (nFFT/2+1));    /* amplitude */
    9fe068ee:	197020ef          	jal	ra,9fe09284 <a_abs>
  c_power(nr_sig, tmp_ifft_out, (nFFT/2+1));    /* power */
    9fe068f2:	8656                	mv	a2,s5
    9fe068f4:	00014517          	auipc	a0,0x14
    9fe068f8:	e3450513          	addi	a0,a0,-460 # 9fe1a728 <nr_sig>
    9fe068fc:	00015597          	auipc	a1,0x15
    9fe06900:	d3c58593          	addi	a1,a1,-708 # 9fe1b638 <tmp_ifft_out>
    9fe06904:	031020ef          	jal	ra,9fe09134 <c_power>

  /* Solve the issue of silence segment appeared in the beginning */
 //tmp1 = c_sum(nr_sig, (nFFT/2+1));
 tmp1 = c_sum(nr_sig, (nFFT/2));
    9fe06908:	85ce                	mv	a1,s3
    9fe0690a:	00014517          	auipc	a0,0x14
    9fe0690e:	e1e50513          	addi	a0,a0,-482 # 9fe1a728 <nr_sig>
    9fe06912:	145020ef          	jal	ra,9fe09256 <c_sum>
  if (tmp1/(nFFT/2.0F) < 0.0003F) {    /* small signal segment */
    9fe06916:	0000c797          	auipc	a5,0xc
    9fe0691a:	91a7a407          	flw	fs0,-1766(a5) # 9fe12230 <__func__.1+0x78>
    9fe0691e:	108a74d3          	fmul.s	fs1,fs4,fs0
    9fe06922:	0000c797          	auipc	a5,0xc
    9fe06926:	9d67a707          	flw	fa4,-1578(a5) # 9fe122f8 <__func__.1+0x140>
    9fe0692a:	18957553          	fdiv.s	fa0,fa0,fs1
    9fe0692e:	a0e51753          	flt.s	a4,fa0,fa4
    9fe06932:	c35d                	beqz	a4,9fe069d8 <NR+0x2e2>
    *frame = 1.0F;    /* reset initial noise power estimate */
    9fe06934:	0000c797          	auipc	a5,0xc
    9fe06938:	8dc7a787          	flw	fa5,-1828(a5) # 9fe12210 <__func__.1+0x58>
    st->vad_dr_cnt = 0.0F;
    st->vad_dr = 0.0F;
    st->vad_mmse = 0.0F;
    st->vad_mmse_cnt = 0.0F;
    xtmp_im = nFFT / 2.0F;
    for (i = 0; i < (int)(xtmp_im + 1.0F); i++) {
    9fe0693c:	00f4f753          	fadd.s	fa4,fs1,fa5
    *frame = 1.0F;    /* reset initial noise power estimate */
    9fe06940:	00f92027          	fsw	fa5,0(s2)
    st->vad_slope_cnt = 0.0F;
    9fe06944:	060bb423          	sd	zero,104(s7)
    st->vad_dr_cnt = 0.0F;
    9fe06948:	060bb823          	sd	zero,112(s7)
    st->vad_mmse = 0.0F;
    9fe0694c:	060bbc23          	sd	zero,120(s7)
    for (i = 0; i < (int)(xtmp_im + 1.0F); i++) {
    9fe06950:	c00716d3          	fcvt.w.s	a3,fa4,rtz
    9fe06954:	4701                	li	a4,0
    9fe06956:	2681                	sext.w	a3,a3
    9fe06958:	00269613          	slli	a2,a3,0x2
    9fe0695c:	02d05463          	blez	a3,9fe06984 <NR+0x28e>
      st->noise_mean[i] = 0.0F;
    9fe06960:	030bb683          	ld	a3,48(s7)
    9fe06964:	96ba                	add	a3,a3,a4
    9fe06966:	0006a023          	sw	zero,0(a3)
      st->noise_mu2[i] = 0.0F;
    9fe0696a:	038bb683          	ld	a3,56(s7)
    9fe0696e:	96ba                	add	a3,a3,a4
    9fe06970:	0006a023          	sw	zero,0(a3)
      st->Xk_prev[i] = 0.0F;
    9fe06974:	028bb683          	ld	a3,40(s7)
    9fe06978:	96ba                	add	a3,a3,a4
    9fe0697a:	0006a023          	sw	zero,0(a3)
    for (i = 0; i < (int)(xtmp_im + 1.0F); i++) {
    9fe0697e:	0711                	addi	a4,a4,4
    9fe06980:	fee610e3          	bne	a2,a4,9fe06960 <NR+0x26a>
    9fe06984:	4701                	li	a4,0
    }
    for (i = 0; i < 5; i++) {
    9fe06986:	4651                	li	a2,20
      st->noisy_st_trough[i] = 0.0F;
    9fe06988:	048bb683          	ld	a3,72(s7)
    9fe0698c:	96ba                	add	a3,a3,a4
    9fe0698e:	0006a023          	sw	zero,0(a3)
      st->noisy_st_peak[i] = 0.0F;
    9fe06992:	050bb683          	ld	a3,80(s7)
    9fe06996:	96ba                	add	a3,a3,a4
    9fe06998:	0006a023          	sw	zero,0(a3)
      for (j = 0; j < 3; j++) {
        st->amp_inst_band[i+5*j] = 0.0F;
    9fe0699c:	040bb683          	ld	a3,64(s7)
    9fe069a0:	96ba                	add	a3,a3,a4
    9fe069a2:	0006a023          	sw	zero,0(a3)
    9fe069a6:	040bb683          	ld	a3,64(s7)
    9fe069aa:	96ba                	add	a3,a3,a4
    9fe069ac:	0006aa23          	sw	zero,20(a3)
    9fe069b0:	040bb683          	ld	a3,64(s7)
    9fe069b4:	96ba                	add	a3,a3,a4
    9fe069b6:	0206a423          	sw	zero,40(a3)
    for (i = 0; i < 5; i++) {
    9fe069ba:	0711                	addi	a4,a4,4
    9fe069bc:	fcc716e3          	bne	a4,a2,9fe06988 <NR+0x292>
      }
    }
    for (i = 0; i < 3; i++) {
      st->amp_inst_sum_hist[i] = 0.0F;
    9fe069c0:	058bb703          	ld	a4,88(s7)
    9fe069c4:	00072023          	sw	zero,0(a4)
    9fe069c8:	058bb703          	ld	a4,88(s7)
    9fe069cc:	00072223          	sw	zero,4(a4)
    9fe069d0:	058bb703          	ld	a4,88(s7)
    9fe069d4:	00072423          	sw	zero,8(a4)
    }
  }

  if (*frame <= initial_noise_pow_time) {    /* amplitude of accumulating the first handful of frames */
    9fe069d8:	00092787          	flw	fa5,0(s2)
    9fe069dc:	a1278753          	fle.s	a4,fa5,fs2
    9fe069e0:	c32d                	beqz	a4,9fe06a42 <NR+0x34c>
    9fe069e2:	00014597          	auipc	a1,0x14
    9fe069e6:	d4658593          	addi	a1,a1,-698 # 9fe1a728 <nr_sig>
    9fe069ea:	00014617          	auipc	a2,0x14
    9fe069ee:	24660613          	addi	a2,a2,582 # 9fe1ac30 <tmp_fft_out>
    9fe069f2:	4701                	li	a4,0
    for (i = 0; i < 321; i++) {
    9fe069f4:	50400513          	li	a0,1284
      st->noise_mean[i] += nr_sig[i];
    9fe069f8:	030bb683          	ld	a3,48(s7)
    9fe069fc:	0005a707          	flw	fa4,0(a1)
    for (i = 0; i < 321; i++) {
    9fe06a00:	0611                	addi	a2,a2,4
      st->noise_mean[i] += nr_sig[i];
    9fe06a02:	96ba                	add	a3,a3,a4
    9fe06a04:	0006a787          	flw	fa5,0(a3)
    for (i = 0; i < 321; i++) {
    9fe06a08:	0591                	addi	a1,a1,4
      st->noise_mean[i] += nr_sig[i];
    9fe06a0a:	00e7f7d3          	fadd.s	fa5,fa5,fa4
    9fe06a0e:	00f6a027          	fsw	fa5,0(a3)
      tmp_fft_out[i] = st->noise_mean[i] / (*frame);
    9fe06a12:	030bb683          	ld	a3,48(s7)
    9fe06a16:	00092707          	flw	fa4,0(s2)
    9fe06a1a:	96ba                	add	a3,a3,a4
    9fe06a1c:	0006a787          	flw	fa5,0(a3)
    for (i = 0; i < 321; i++) {
    9fe06a20:	0711                	addi	a4,a4,4
      tmp_fft_out[i] = st->noise_mean[i] / (*frame);
    9fe06a22:	18e7f7d3          	fdiv.s	fa5,fa5,fa4
    9fe06a26:	fef62e27          	fsw	fa5,-4(a2)
    for (i = 0; i < 321; i++) {
    9fe06a2a:	fca717e3          	bne	a4,a0,9fe069f8 <NR+0x302>
    }
    c_power(tmp_fft_out, st->noise_mu2, 321);	    /* average power for one frame */
    9fe06a2e:	038bb583          	ld	a1,56(s7)
    9fe06a32:	14100613          	li	a2,321
    9fe06a36:	00014517          	auipc	a0,0x14
    9fe06a3a:	1fa50513          	addi	a0,a0,506 # 9fe1ac30 <tmp_fft_out>
    9fe06a3e:	6f6020ef          	jal	ra,9fe09134 <c_power>
    /*for (i = 0; i < 321; i++)
	fprintf(fp_test, "%f \n", st->noise_mu2[i]);*/
  }

  for (i = 0; i < (nFFT/2+1); i++) {
    9fe06a42:	67c2                	ld	a5,16(sp)
    9fe06a44:	56fd                	li	a3,-1
    9fe06a46:	00015597          	auipc	a1,0x15
    9fe06a4a:	bf258593          	addi	a1,a1,-1038 # 9fe1b638 <tmp_ifft_out>
    9fe06a4e:	00013517          	auipc	a0,0x13
    9fe06a52:	8c250513          	addi	a0,a0,-1854 # 9fe19310 <gammak>
    9fe06a56:	4701                	li	a4,0
    9fe06a58:	06d7c663          	blt	a5,a3,9fe06ac4 <NR+0x3ce>
    if (st->noise_mu2[i] == 0.0F) {    /* zero denominator */
    9fe06a5c:	f00006d3          	fmv.w.x	fa3,zero
      } else {
        gammak[i] = 40.0F;
      }
    } else {
      absar = tmp_ifft_out[i] / st->noise_mu2[i];
      if (!(absar < 40.0F)) {
    9fe06a60:	0000c797          	auipc	a5,0xc
    9fe06a64:	8907a607          	flw	fa2,-1904(a5) # 9fe122f0 <__func__.1+0x138>
        gammak[i] = 40.0F;
    9fe06a68:	0000c817          	auipc	a6,0xc
    9fe06a6c:	88880813          	addi	a6,a6,-1912 # 9fe122f0 <__func__.1+0x138>
    9fe06a70:	a821                	j	9fe06a88 <NR+0x392>
      if (tmp_ifft_out[i] == 0.0F) {
    9fe06a72:	3c060763          	beqz	a2,9fe06e40 <NR+0x74a>
        gammak[i] = 0.0F;
    9fe06a76:	00052023          	sw	zero,0(a0)
  for (i = 0; i < (nFFT/2+1); i++) {
    9fe06a7a:	0705                	addi	a4,a4,1
    9fe06a7c:	0007069b          	sext.w	a3,a4
    9fe06a80:	0591                	addi	a1,a1,4
    9fe06a82:	0511                	addi	a0,a0,4
    9fe06a84:	04d9c063          	blt	s3,a3,9fe06ac4 <NR+0x3ce>
    if (st->noise_mu2[i] == 0.0F) {    /* zero denominator */
    9fe06a88:	038bb603          	ld	a2,56(s7)
    9fe06a8c:	00271693          	slli	a3,a4,0x2
      if (tmp_ifft_out[i] == 0.0F) {
    9fe06a90:	0005a787          	flw	fa5,0(a1)
    if (st->noise_mu2[i] == 0.0F) {    /* zero denominator */
    9fe06a94:	96b2                	add	a3,a3,a2
    9fe06a96:	0006a707          	flw	fa4,0(a3)
      if (tmp_ifft_out[i] == 0.0F) {
    9fe06a9a:	a0d7a653          	feq.s	a2,fa5,fa3
    if (st->noise_mu2[i] == 0.0F) {    /* zero denominator */
    9fe06a9e:	a0d726d3          	feq.s	a3,fa4,fa3
    9fe06aa2:	fae1                	bnez	a3,9fe06a72 <NR+0x37c>
      absar = tmp_ifft_out[i] / st->noise_mu2[i];
    9fe06aa4:	18e7f7d3          	fdiv.s	fa5,fa5,fa4
      if (!(absar < 40.0F)) {
    9fe06aa8:	a0c796d3          	flt.s	a3,fa5,fa2
    9fe06aac:	e299                	bnez	a3,9fe06ab2 <NR+0x3bc>
        absar = 40.0F;
    9fe06aae:	20c607d3          	fmv.s	fa5,fa2
  for (i = 0; i < (nFFT/2+1); i++) {
    9fe06ab2:	0705                	addi	a4,a4,1
      }
      gammak[i] = absar;    /* posteriori SNR */
    9fe06ab4:	00f52027          	fsw	fa5,0(a0)
  for (i = 0; i < (nFFT/2+1); i++) {
    9fe06ab8:	0007069b          	sext.w	a3,a4
    9fe06abc:	0591                	addi	a1,a1,4
    9fe06abe:	0511                	addi	a0,a0,4
    9fe06ac0:	fcd9d4e3          	bge	s3,a3,9fe06a88 <NR+0x392>
    }
  }

  if (*frame == 1.0F) {    /* priori SNR for the first frame */
    9fe06ac4:	00092787          	flw	fa5,0(s2)
    9fe06ac8:	0000b797          	auipc	a5,0xb
    9fe06acc:	7487aa87          	flw	fs5,1864(a5) # 9fe12210 <__func__.1+0x58>
    9fe06ad0:	a157a753          	feq.s	a4,fa5,fs5
    9fe06ad4:	78070d63          	beqz	a4,9fe0726e <NR+0xb78>
    for (k = 0; k < 321; k++) {
      xtmp_im = gammak[k] - 1.0F;
      xtmp_im = MAX(xtmp_im, 0.0F);
    9fe06ad8:	f0000653          	fmv.w.x	fa2,zero
    9fe06adc:	00013717          	auipc	a4,0x13
    9fe06ae0:	83470713          	addi	a4,a4,-1996 # 9fe19310 <gammak>
    9fe06ae4:	00013697          	auipc	a3,0x13
    9fe06ae8:	d3468693          	addi	a3,a3,-716 # 9fe19818 <ksi>
    9fe06aec:	00013497          	auipc	s1,0x13
    9fe06af0:	d2848493          	addi	s1,s1,-728 # 9fe19814 <gammak+0x504>
      xtmp_im = gammak[k] - 1.0F;
    9fe06af4:	00072787          	flw	fa5,0(a4)
    for (k = 0; k < 321; k++) {
    9fe06af8:	0711                	addi	a4,a4,4
      xtmp_im = gammak[k] - 1.0F;
    9fe06afa:	0957f7d3          	fsub.s	fa5,fa5,fs5
      xtmp_im = MAX(xtmp_im, 0.0F);
    9fe06afe:	a0c79653          	flt.s	a2,fa5,fa2
    9fe06b02:	c219                	beqz	a2,9fe06b08 <NR+0x412>
    9fe06b04:	f00007d3          	fmv.w.x	fa5,zero
      ksi[k] = st->aa + (1.0F - st->aa) * xtmp_im;
    9fe06b08:	088ba687          	flw	fa3,136(s7)
    for (k = 0; k < 321; k++) {
    9fe06b0c:	0691                	addi	a3,a3,4
      ksi[k] = st->aa + (1.0F - st->aa) * xtmp_im;
    9fe06b0e:	08daf753          	fsub.s	fa4,fs5,fa3
    9fe06b12:	68f777c3          	fmadd.s	fa5,fa4,fa5,fa3
    9fe06b16:	fef6ae27          	fsw	fa5,-4(a3)
    for (k = 0; k < 321; k++) {
    9fe06b1a:	fce49de3          	bne	s1,a4,9fe06af4 <NR+0x3fe>
    9fe06b1e:	00013c97          	auipc	s9,0x13
    9fe06b22:	1fec8c93          	addi	s9,s9,510 # 9fe19d1c <ksi+0x504>
      xtmp_im = gammak[k] - 1.0F;
      xtmp_im = MAX(xtmp_im, 0.0F);
      if (0.0F == st->noise_mu2[k])
        st->noise_mu2[k] = (float)3.3495873e-008;    /* assign a small value to avoid dividing by zero */
      ksi[k] = st->aa * st->Xk_prev[k] / st->noise_mu2[k] + (1.0F - st->aa) * xtmp_im;
      ksi[k] = MAX(ksi[k], st->ksi_min);    /* limit ksi greater than -25dB in power */
    9fe06b26:	4751                	li	a4,20
    }
  }

  /* slope detection */
  for (i = 0; i < 5; i++) {
    9fe06b28:	02800593          	li	a1,40
    st->amp_inst_band[10 + i] = st->amp_inst_band[5 + i];
    9fe06b2c:	040bb603          	ld	a2,64(s7)
    9fe06b30:	963a                	add	a2,a2,a4
    9fe06b32:	00062787          	flw	fa5,0(a2)
    9fe06b36:	00f62a27          	fsw	fa5,20(a2)
    st->amp_inst_band[5 + i] = st->amp_inst_band[i];
    9fe06b3a:	040bb603          	ld	a2,64(s7)
    9fe06b3e:	963a                	add	a2,a2,a4
    9fe06b40:	fec62787          	flw	fa5,-20(a2)
  for (i = 0; i < 5; i++) {
    9fe06b44:	0711                	addi	a4,a4,4
    st->amp_inst_band[5 + i] = st->amp_inst_band[i];
    9fe06b46:	00f62027          	fsw	fa5,0(a2)
  for (i = 0; i < 5; i++) {
    9fe06b4a:	feb711e3          	bne	a4,a1,9fe06b2c <NR+0x436>
  }

  st->amp_inst_band[0] = c_sum(*(float (*)[20])&nr_sig[4], 20);               /* 20 */
    9fe06b4e:	040bb403          	ld	s0,64(s7)
    9fe06b52:	45d1                	li	a1,20
    9fe06b54:	00014517          	auipc	a0,0x14
    9fe06b58:	be450513          	addi	a0,a0,-1052 # 9fe1a738 <nr_sig+0x10>
    9fe06b5c:	6fa020ef          	jal	ra,9fe09256 <c_sum>
    9fe06b60:	00a42027          	fsw	fa0,0(s0)
  st->amp_inst_band[1] = c_sum(*(float (*)[20])&nr_sig[24], 20);             /* 20 */
    9fe06b64:	040bb403          	ld	s0,64(s7)
    9fe06b68:	45d1                	li	a1,20
    9fe06b6a:	00014517          	auipc	a0,0x14
    9fe06b6e:	c1e50513          	addi	a0,a0,-994 # 9fe1a788 <nr_sig+0x60>
    9fe06b72:	6e4020ef          	jal	ra,9fe09256 <c_sum>
    9fe06b76:	00a42227          	fsw	fa0,4(s0)
  st->amp_inst_band[2] = c_sum(*(float (*)[40])&nr_sig[44], 40);             /* 40 */
    9fe06b7a:	040bb403          	ld	s0,64(s7)
    9fe06b7e:	02800593          	li	a1,40
    9fe06b82:	00014517          	auipc	a0,0x14
    9fe06b86:	c5650513          	addi	a0,a0,-938 # 9fe1a7d8 <nr_sig+0xb0>
    9fe06b8a:	6cc020ef          	jal	ra,9fe09256 <c_sum>
    9fe06b8e:	00a42427          	fsw	fa0,8(s0)
  st->amp_inst_band[3] = c_sum(*(float (*)[80])&nr_sig[84], 80);             /* 80 */
    9fe06b92:	040bb403          	ld	s0,64(s7)
    9fe06b96:	05000593          	li	a1,80
    9fe06b9a:	00014517          	auipc	a0,0x14
    9fe06b9e:	cde50513          	addi	a0,a0,-802 # 9fe1a878 <nr_sig+0x150>
    9fe06ba2:	6b4020ef          	jal	ra,9fe09256 <c_sum>
    9fe06ba6:	00a42627          	fsw	fa0,12(s0)
  st->amp_inst_band[4] = c_sum(*(float (*)[156])&nr_sig[164], 156);      /* 156 */
    9fe06baa:	040bb403          	ld	s0,64(s7)
    9fe06bae:	09c00593          	li	a1,156
    9fe06bb2:	00014517          	auipc	a0,0x14
    9fe06bb6:	e0650513          	addi	a0,a0,-506 # 9fe1a9b8 <nr_sig+0x290>
    9fe06bba:	69c020ef          	jal	ra,9fe09256 <c_sum>
  /*for (i = 0; i < 5; i++)
 	fprintf(fp_test, "%f \n", st->amp_inst_band[i]);*/

  slope_detection(st);
    9fe06bbe:	855e                	mv	a0,s7
  st->amp_inst_band[4] = c_sum(*(float (*)[156])&nr_sig[164], 156);      /* 156 */
    9fe06bc0:	00a42827          	fsw	fa0,16(s0)
  slope_detection(st);
    9fe06bc4:	5d6020ef          	jal	ra,9fe0919a <slope_detection>

  /* dynamic range detection */
  dr_detection(st);
    9fe06bc8:	855e                	mv	a0,s7
    9fe06bca:	7dd020ef          	jal	ra,9fe09ba6 <dr_detection>

  if ((st->vad_slope != 0.0F) || (st->vad_dr != 0.0F)) {
    9fe06bce:	06cba707          	flw	fa4,108(s7)
    9fe06bd2:	f00007d3          	fmv.w.x	fa5,zero
    vad = true;
    9fe06bd6:	4a85                	li	s5,1
  if ((st->vad_slope != 0.0F) || (st->vad_dr != 0.0F)) {
    9fe06bd8:	a0f72753          	feq.s	a4,fa4,fa5
    9fe06bdc:	c719                	beqz	a4,9fe06bea <NR+0x4f4>
    9fe06bde:	074ba707          	flw	fa4,116(s7)
    9fe06be2:	a0f72ad3          	feq.s	s5,fa4,fa5
    vad = true;
    9fe06be6:	001aca93          	xori	s5,s5,1
    9fe06bea:	00014797          	auipc	a5,0x14
    9fe06bee:	04678793          	addi	a5,a5,70 # 9fe1ac30 <tmp_fft_out>
    9fe06bf2:	00013d97          	auipc	s11,0x13
    9fe06bf6:	c26d8d93          	addi	s11,s11,-986 # 9fe19818 <ksi>
    9fe06bfa:	ec3e                	sd	a5,24(sp)
    9fe06bfc:	863e                	mv	a2,a5
    9fe06bfe:	876e                	mv	a4,s11
    vad = false;
  }

  /* log_sigma_k calculation for mmse vad */
  for (i = 0; i < 321; i++) {
    tmp_fft_out[i] = 1.0F + ksi[i];
    9fe06c00:	00072787          	flw	fa5,0(a4)
  for (i = 0; i < 321; i++) {
    9fe06c04:	0611                	addi	a2,a2,4
    9fe06c06:	0711                	addi	a4,a4,4
    tmp_fft_out[i] = 1.0F + ksi[i];
    9fe06c08:	0157f7d3          	fadd.s	fa5,fa5,fs5
    9fe06c0c:	fef62e27          	fsw	fa5,-4(a2)
  for (i = 0; i < 321; i++) {
    9fe06c10:	feec98e3          	bne	s9,a4,9fe06c00 <NR+0x50a>
  }
  b_log(tmp_fft_out);	/* C = log(1+ksi) */
    9fe06c14:	00014517          	auipc	a0,0x14
    9fe06c18:	01c50513          	addi	a0,a0,28 # 9fe1ac30 <tmp_fft_out>
    9fe06c1c:	200050ef          	jal	ra,9fe0be1c <b_log>

  for (k = 0; k < 321; k++) {
    9fe06c20:	00012417          	auipc	s0,0x12
    9fe06c24:	6f040413          	addi	s0,s0,1776 # 9fe19310 <gammak>
    if (0.0F == (1.0F + ksi[k]))
    9fe06c28:	f00005d3          	fmv.w.x	fa1,zero
  b_log(tmp_fft_out);	/* C = log(1+ksi) */
    9fe06c2c:	00014597          	auipc	a1,0x14
    9fe06c30:	00458593          	addi	a1,a1,4 # 9fe1ac30 <tmp_fft_out>
    9fe06c34:	8522                	mv	a0,s0
    9fe06c36:	00013617          	auipc	a2,0x13
    9fe06c3a:	be260613          	addi	a2,a2,-1054 # 9fe19818 <ksi>
      tmp_fft_out[k] = gammak[k] * ksi[k] / ((float)3.3495873e-008) - tmp_fft_out[k];    /* assign a small value to avoid dividing by zero */
    9fe06c3e:	0000b797          	auipc	a5,0xb
    9fe06c42:	6b67a507          	flw	fa0,1718(a5) # 9fe122f4 <__func__.1+0x13c>
    9fe06c46:	a821                	j	9fe06c5e <NR+0x568>
    9fe06c48:	18a7f7d3          	fdiv.s	fa5,fa5,fa0
  for (k = 0; k < 321; k++) {
    9fe06c4c:	0591                	addi	a1,a1,4
    9fe06c4e:	0611                	addi	a2,a2,4
    9fe06c50:	0511                	addi	a0,a0,4
      tmp_fft_out[k] = gammak[k] * ksi[k] / ((float)3.3495873e-008) - tmp_fft_out[k];    /* assign a small value to avoid dividing by zero */
    9fe06c52:	08e7f7d3          	fsub.s	fa5,fa5,fa4
    9fe06c56:	fef5ae27          	fsw	fa5,-4(a1)
  for (k = 0; k < 321; k++) {
    9fe06c5a:	02cc8b63          	beq	s9,a2,9fe06c90 <NR+0x59a>
    if (0.0F == (1.0F + ksi[k]))
    9fe06c5e:	00062787          	flw	fa5,0(a2)
      tmp_fft_out[k] = gammak[k] * ksi[k] / ((float)3.3495873e-008) - tmp_fft_out[k];    /* assign a small value to avoid dividing by zero */
    9fe06c62:	00052607          	flw	fa2,0(a0)
    9fe06c66:	0005a707          	flw	fa4,0(a1)
    if (0.0F == (1.0F + ksi[k]))
    9fe06c6a:	0157f6d3          	fadd.s	fa3,fa5,fs5
      tmp_fft_out[k] = gammak[k] * ksi[k] / ((float)3.3495873e-008) - tmp_fft_out[k];    /* assign a small value to avoid dividing by zero */
    9fe06c6e:	10c7f7d3          	fmul.s	fa5,fa5,fa2
    if (0.0F == (1.0F + ksi[k]))
    9fe06c72:	a0b6a8d3          	feq.s	a7,fa3,fa1
    9fe06c76:	fc0899e3          	bnez	a7,9fe06c48 <NR+0x552>
    else
      tmp_fft_out[k] = gammak[k] * ksi[k] / (1.0F + ksi[k]) - tmp_fft_out[k];    /* log_sigma_k */
    9fe06c7a:	18d7f7d3          	fdiv.s	fa5,fa5,fa3
  for (k = 0; k < 321; k++) {
    9fe06c7e:	0591                	addi	a1,a1,4
    9fe06c80:	0611                	addi	a2,a2,4
    9fe06c82:	0511                	addi	a0,a0,4
      tmp_fft_out[k] = gammak[k] * ksi[k] / (1.0F + ksi[k]) - tmp_fft_out[k];    /* log_sigma_k */
    9fe06c84:	08e7f7d3          	fsub.s	fa5,fa5,fa4
    9fe06c88:	fef5ae27          	fsw	fa5,-4(a1)
  for (k = 0; k < 321; k++) {
    9fe06c8c:	fccc99e3          	bne	s9,a2,9fe06c5e <NR+0x568>
  }

  xtmp_im = c_sum(tmp_fft_out, nFFT/2);    /* here only consider log_sigma_k(1:nFFT/2) */
    9fe06c90:	85ce                	mv	a1,s3
    9fe06c92:	00014517          	auipc	a0,0x14
    9fe06c96:	f9e50513          	addi	a0,a0,-98 # 9fe1ac30 <tmp_fft_out>
    9fe06c9a:	5bc020ef          	jal	ra,9fe09256 <c_sum>
  xtmp_im = xtmp_im/(nFFT/2.0F);
    9fe06c9e:	189574d3          	fdiv.s	fs1,fa0,fs1

  if (xtmp_im <= st->eta) {
    9fe06ca2:	080ba787          	flw	fa5,128(s7)
    9fe06ca6:	a0f48653          	fle.s	a2,fs1,fa5
    9fe06caa:	5a060963          	beqz	a2,9fe0725c <NR+0xb66>
    st->vad_mmse_cnt = MAX(0.0F, st->vad_mmse_cnt - 1.0F);
    9fe06cae:	07cba787          	flw	fa5,124(s7)
    9fe06cb2:	f0000753          	fmv.w.x	fa4,zero
    9fe06cb6:	0957f7d3          	fsub.s	fa5,fa5,fs5
    9fe06cba:	a0f71653          	flt.s	a2,fa4,fa5
    9fe06cbe:	64060763          	beqz	a2,9fe0730c <NR+0xc16>
    if (st->vad_mmse_cnt == 0.0F) {
      st->vad_mmse = 0.0F;
    }
  } else {
    st->vad_mmse = 1.0F;
    st->vad_mmse_cnt = st->vad_mmse_cnt_para;
    9fe06cc2:	06fbae27          	fsw	fa5,124(s7)
  }

  /* noise power estimate correction when it is too high */
  /* small speech in quiet after big statioanry noise, correct wrong */
  st->amp_inst_sum_hist[2] = st->amp_inst_sum_hist[1];
    9fe06cc6:	058bb603          	ld	a2,88(s7)
  st->amp_inst_sum_hist[1] = st->amp_inst_sum_hist[0];
  st->amp_inst_sum_hist[0] = c_sum(st->amp_inst_band, 5);
    9fe06cca:	4595                	li	a1,5
  st->amp_inst_sum_hist[2] = st->amp_inst_sum_hist[1];
    9fe06ccc:	00462787          	flw	fa5,4(a2)
    9fe06cd0:	00f62427          	fsw	fa5,8(a2)
  st->amp_inst_sum_hist[1] = st->amp_inst_sum_hist[0];
    9fe06cd4:	058bb603          	ld	a2,88(s7)
    9fe06cd8:	00062787          	flw	fa5,0(a2)
    9fe06cdc:	00f62227          	fsw	fa5,4(a2)
  st->amp_inst_sum_hist[0] = c_sum(st->amp_inst_band, 5);
    9fe06ce0:	040bb503          	ld	a0,64(s7)
    9fe06ce4:	058bbb03          	ld	s6,88(s7)
    9fe06ce8:	56e020ef          	jal	ra,9fe09256 <c_sum>
    9fe06cec:	00ab2027          	fsw	fa0,0(s6)
  //fprintf(fp_test, "%f \n", st->amp_inst_sum_hist[0]);

  c_power(st->amp_inst_sum_hist, b_c, 3);    /* power based */
    9fe06cf0:	058bb503          	ld	a0,88(s7)
    9fe06cf4:	460d                	li	a2,3
    9fe06cf6:	088c                	addi	a1,sp,80
    9fe06cf8:	43c020ef          	jal	ra,9fe09134 <c_power>
  /*for (k = 0; k < 3; k++)
  	fprintf(fp_test, "%f \n", b_c[k]);*/

  for (k = 0; k < 3; k++) {
    b_c[k] *= 0.3333F;    /* average power */
    9fe06cfc:	05012607          	flw	fa2,80(sp)
    9fe06d00:	05412687          	flw	fa3,84(sp)
    9fe06d04:	0000b797          	auipc	a5,0xb
    9fe06d08:	5f87a787          	flw	fa5,1528(a5) # 9fe122fc <__func__.1+0x144>
    9fe06d0c:	10f67653          	fmul.s	fa2,fa2,fa5
    9fe06d10:	10f6f6d3          	fmul.s	fa3,fa3,fa5
    9fe06d14:	05812707          	flw	fa4,88(sp)
  xtmp_im = b_c[0];
  for (k = 0; k < 2; k++) {
    xtmp_im += b_c[k + 1];
  }

  absar = st->noise_mu2[4];
    9fe06d18:	038bb503          	ld	a0,56(s7)
    b_c[k] *= 0.3333F;    /* average power */
    9fe06d1c:	10f77753          	fmul.s	fa4,fa4,fa5
    xtmp_im += b_c[k + 1];
    9fe06d20:	00d675d3          	fadd.s	fa1,fa2,fa3
  absar = st->noise_mu2[4];
    9fe06d24:	01052787          	flw	fa5,16(a0)
    b_c[k] *= 0.3333F;    /* average power */
    9fe06d28:	04c12827          	fsw	fa2,80(sp)
    9fe06d2c:	04d12a27          	fsw	fa3,84(sp)
    9fe06d30:	04e12c27          	fsw	fa4,88(sp)
    xtmp_im += b_c[k + 1];
    9fe06d34:	00e5f5d3          	fadd.s	fa1,fa1,fa4
  for (k = 0; k < 315; k++) {
    9fe06d38:	01450613          	addi	a2,a0,20
    9fe06d3c:	50050593          	addi	a1,a0,1280
    absar += st->noise_mu2[k + 5];
    9fe06d40:	00062707          	flw	fa4,0(a2)
  for (k = 0; k < 315; k++) {
    9fe06d44:	0611                	addi	a2,a2,4
    absar += st->noise_mu2[k + 5];
    9fe06d46:	00e7f7d3          	fadd.s	fa5,fa5,fa4
  for (k = 0; k < 315; k++) {
    9fe06d4a:	fec59be3          	bne	a1,a2,9fe06d40 <NR+0x64a>
  }

  if (absar / 8.0F > xtmp_im) {	/* +/-18dB for statioanry noise variance for the whole signals, assumption */
    9fe06d4e:	0000b797          	auipc	a5,0xb
    9fe06d52:	5b27a707          	flw	fa4,1458(a5) # 9fe12300 <__func__.1+0x148>
    9fe06d56:	10e7f7d3          	fmul.s	fa5,fa5,fa4
    9fe06d5a:	a0f59653          	flt.s	a2,fa1,fa5
    9fe06d5e:	c231                	beqz	a2,9fe06da2 <NR+0x6ac>
    9fe06d60:	00015597          	auipc	a1,0x15
    9fe06d64:	8d858593          	addi	a1,a1,-1832 # 9fe1b638 <tmp_ifft_out>
    9fe06d68:	4601                	li	a2,0
    9fe06d6a:	0000b797          	auipc	a5,0xb
    9fe06d6e:	59a7a607          	flw	fa2,1434(a5) # 9fe12304 <__func__.1+0x14c>
    9fe06d72:	0000b797          	auipc	a5,0xb
    9fe06d76:	4f27a687          	flw	fa3,1266(a5) # 9fe12264 <__func__.1+0xac>
    for (k = 0; k < 321; k++) {
    9fe06d7a:	50400893          	li	a7,1284
    9fe06d7e:	a019                	j	9fe06d84 <NR+0x68e>
      st->noise_mu2[k] = 0.8F * st->noise_mu2[k] + 0.2F * tmp_ifft_out[k];    /* here faster to update noise power */
    9fe06d80:	038bb503          	ld	a0,56(s7)
    9fe06d84:	0005a707          	flw	fa4,0(a1)
    9fe06d88:	9532                	add	a0,a0,a2
    9fe06d8a:	00052787          	flw	fa5,0(a0)
    9fe06d8e:	10c77753          	fmul.s	fa4,fa4,fa2
    for (k = 0; k < 321; k++) {
    9fe06d92:	0611                	addi	a2,a2,4
    9fe06d94:	0591                	addi	a1,a1,4
      st->noise_mu2[k] = 0.8F * st->noise_mu2[k] + 0.2F * tmp_ifft_out[k];    /* here faster to update noise power */
    9fe06d96:	70d7f7c3          	fmadd.s	fa5,fa5,fa3,fa4
    9fe06d9a:	00f52027          	fsw	fa5,0(a0)
    for (k = 0; k < 321; k++) {
    9fe06d9e:	ff1611e3          	bne	a2,a7,9fe06d80 <NR+0x68a>
    }
  }

  /* %% keep better speech quality, not too easy to update noise power %% */
  *speech_vad = true;
    9fe06da2:	4605                	li	a2,1
    9fe06da4:	00ca0023          	sb	a2,0(s4)
  if ((st->vad_mmse == 0.0F) || (!vad)) {
    9fe06da8:	078ba707          	flw	fa4,120(s7)
    9fe06dac:	f00007d3          	fmv.w.x	fa5,zero
    9fe06db0:	a0f72653          	feq.s	a2,fa4,fa5
    9fe06db4:	ea59                	bnez	a2,9fe06e4a <NR+0x754>
    9fe06db6:	080a8a63          	beqz	s5,9fe06e4a <NR+0x754>
    9fe06dba:	00015a17          	auipc	s4,0x15
    9fe06dbe:	87ea0a13          	addi	s4,s4,-1922 # 9fe1b638 <tmp_ifft_out>
  /*  === end of vad ===  */


  /* v(k) calculation */
  for (k = 0; k < 321; k++) {
    if (0.0F == (1.0F + ksi[k]))
    9fe06dc2:	f0000953          	fmv.w.x	fs2,zero
  if (absar / 8.0F > xtmp_im) {	/* +/-18dB for statioanry noise variance for the whole signals, assumption */
    9fe06dc6:	00014d17          	auipc	s10,0x14
    9fe06dca:	e6ad0d13          	addi	s10,s10,-406 # 9fe1ac30 <tmp_fft_out>
    9fe06dce:	8c52                	mv	s8,s4
    9fe06dd0:	00012b17          	auipc	s6,0x12
    9fe06dd4:	540b0b13          	addi	s6,s6,1344 # 9fe19310 <gammak>
    9fe06dd8:	00013a97          	auipc	s5,0x13
    9fe06ddc:	a40a8a93          	addi	s5,s5,-1472 # 9fe19818 <ksi>
    9fe06de0:	0000b797          	auipc	a5,0xb
    9fe06de4:	4587a487          	flw	fs1,1112(a5) # 9fe12238 <__func__.1+0x80>
      xtmp_im = ksi[k] * gammak[k] / ((float)3.3495873e-008);    /* assign a small value to avoid dividing by zero */
    9fe06de8:	0000b797          	auipc	a5,0xb
    9fe06dec:	50c7a987          	flw	fs3,1292(a5) # 9fe122f4 <__func__.1+0x13c>
    9fe06df0:	a80d                	j	9fe06e22 <NR+0x72c>
    9fe06df2:	1937f7d3          	fdiv.s	fa5,fa5,fs3
    else
      xtmp_im = ksi[k] * gammak[k] / (1.0F + ksi[k]);    /* v(k) */
    tmp_ifft_out[k] = xtmp_im;
    tmp_fft_out[321+k] = xtmp_im / 2.0F;
    tmp_fft_out[k] = (float)exp(-0.5F * xtmp_im);    /* C = exp(-0.5*vk) */
    9fe06df6:	1097f553          	fmul.s	fa0,fa5,fs1
    tmp_fft_out[321+k] = xtmp_im / 2.0F;
    9fe06dfa:	1087f753          	fmul.s	fa4,fa5,fs0
    tmp_ifft_out[k] = xtmp_im;
    9fe06dfe:	00fc2027          	fsw	fa5,0(s8)
  for (k = 0; k < 321; k++) {
    9fe06e02:	0a91                	addi	s5,s5,4
    9fe06e04:	0d11                	addi	s10,s10,4
    tmp_fft_out[k] = (float)exp(-0.5F * xtmp_im);    /* C = exp(-0.5*vk) */
    9fe06e06:	42050553          	fcvt.d.s	fa0,fa0
    tmp_fft_out[321+k] = xtmp_im / 2.0F;
    9fe06e0a:	50ed2027          	fsw	fa4,1280(s10)
  for (k = 0; k < 321; k++) {
    9fe06e0e:	0c11                	addi	s8,s8,4
    tmp_fft_out[k] = (float)exp(-0.5F * xtmp_im);    /* C = exp(-0.5*vk) */
    9fe06e10:	dd1f90ef          	jal	ra,9fe00be0 <exp>
    9fe06e14:	40157553          	fcvt.s.d	fa0,fa0
  for (k = 0; k < 321; k++) {
    9fe06e18:	0b11                	addi	s6,s6,4
    tmp_fft_out[k] = (float)exp(-0.5F * xtmp_im);    /* C = exp(-0.5*vk) */
    9fe06e1a:	fead2e27          	fsw	fa0,-4(s10)
  for (k = 0; k < 321; k++) {
    9fe06e1e:	075c8563          	beq	s9,s5,9fe06e88 <NR+0x792>
    if (0.0F == (1.0F + ksi[k]))
    9fe06e22:	000aa787          	flw	fa5,0(s5)
      xtmp_im = ksi[k] * gammak[k] / ((float)3.3495873e-008);    /* assign a small value to avoid dividing by zero */
    9fe06e26:	000b2687          	flw	fa3,0(s6)
    if (0.0F == (1.0F + ksi[k]))
    9fe06e2a:	0157f753          	fadd.s	fa4,fa5,fs5
      xtmp_im = ksi[k] * gammak[k] / ((float)3.3495873e-008);    /* assign a small value to avoid dividing by zero */
    9fe06e2e:	10d7f7d3          	fmul.s	fa5,fa5,fa3
    if (0.0F == (1.0F + ksi[k]))
    9fe06e32:	a12728d3          	feq.s	a7,fa4,fs2
    9fe06e36:	fa089ee3          	bnez	a7,9fe06df2 <NR+0x6fc>
      xtmp_im = ksi[k] * gammak[k] / (1.0F + ksi[k]);    /* v(k) */
    9fe06e3a:	18e7f7d3          	fdiv.s	fa5,fa5,fa4
    9fe06e3e:	bf65                	j	9fe06df6 <NR+0x700>
        gammak[i] = 40.0F;
    9fe06e40:	00082787          	flw	fa5,0(a6)
    9fe06e44:	00f52027          	fsw	fa5,0(a0)
    9fe06e48:	b90d                	j	9fe06a7a <NR+0x384>
    9fe06e4a:	00014517          	auipc	a0,0x14
    9fe06e4e:	7ee50513          	addi	a0,a0,2030 # 9fe1b638 <tmp_ifft_out>
  if (absar / 8.0F > xtmp_im) {	/* +/-18dB for statioanry noise variance for the whole signals, assumption */
    9fe06e52:	4581                	li	a1,0
    for (k = 0; k < 321; k++) {
    9fe06e54:	50400893          	li	a7,1284
      st->noise_mu2[k] = st->mu * st->noise_mu2[k] + (1.0F - st->mu) * tmp_ifft_out[k];    /* update noise power */
    9fe06e58:	08cba787          	flw	fa5,140(s7)
    9fe06e5c:	00052607          	flw	fa2,0(a0)
    9fe06e60:	038bb603          	ld	a2,56(s7)
    9fe06e64:	08faf753          	fsub.s	fa4,fs5,fa5
    for (k = 0; k < 321; k++) {
    9fe06e68:	0511                	addi	a0,a0,4
      st->noise_mu2[k] = st->mu * st->noise_mu2[k] + (1.0F - st->mu) * tmp_ifft_out[k];    /* update noise power */
    9fe06e6a:	962e                	add	a2,a2,a1
    9fe06e6c:	00062687          	flw	fa3,0(a2)
    for (k = 0; k < 321; k++) {
    9fe06e70:	0591                	addi	a1,a1,4
      st->noise_mu2[k] = st->mu * st->noise_mu2[k] + (1.0F - st->mu) * tmp_ifft_out[k];    /* update noise power */
    9fe06e72:	10c77753          	fmul.s	fa4,fa4,fa2
    9fe06e76:	70d7f7c3          	fmadd.s	fa5,fa5,fa3,fa4
    9fe06e7a:	00f62027          	fsw	fa5,0(a2)
    for (k = 0; k < 321; k++) {
    9fe06e7e:	fd159de3          	bne	a1,a7,9fe06e58 <NR+0x762>
    *speech_vad = false;
    9fe06e82:	000a0023          	sb	zero,0(s4)
    9fe06e86:	bf15                	j	9fe06dba <NR+0x6c4>
  }

  d_power(tmp_ifft_out, &tmp_ifft_out[321]);    /* vk.^0.5 */
    9fe06e88:	00015597          	auipc	a1,0x15
    9fe06e8c:	cb458593          	addi	a1,a1,-844 # 9fe1bb3c <tmp_ifft_out+0x504>
    9fe06e90:	00014517          	auipc	a0,0x14
    9fe06e94:	7a850513          	addi	a0,a0,1960 # 9fe1b638 <tmp_ifft_out>
    9fe06e98:	2c8020ef          	jal	ra,9fe09160 <d_power>
  for (i = 0; i < 321; i++) {
    9fe06e9c:	00015c97          	auipc	s9,0x15
    9fe06ea0:	ca0c8c93          	addi	s9,s9,-864 # 9fe1bb3c <tmp_ifft_out+0x504>
      //if ((tmp_ifft_out[321+i] == 0.0F) && (gammak[i] == 0.0F)) {    /* bug fixed to avoid zero denominator */
      if ((gammak[i] == 0.0F)) {
    9fe06ea4:	f00006d3          	fmv.w.x	fa3,zero
  d_power(tmp_ifft_out, &tmp_ifft_out[321]);    /* vk.^0.5 */
    9fe06ea8:	00014597          	auipc	a1,0x14
    9fe06eac:	d8858593          	addi	a1,a1,-632 # 9fe1ac30 <tmp_fft_out>
    9fe06eb0:	86e6                	mv	a3,s9
        tmp_ifft_out[321+i] = 0.0F;
      } else {
        tmp_ifft_out[321+i] = (c * tmp_ifft_out[321+i] * tmp_fft_out[i]) / gammak[i];
    9fe06eb2:	0000b797          	auipc	a5,0xb
    9fe06eb6:	4567a587          	flw	fa1,1110(a5) # 9fe12308 <__func__.1+0x150>
    9fe06eba:	a801                	j	9fe06eca <NR+0x7d4>
        tmp_ifft_out[321+i] = 0.0F;
    9fe06ebc:	0006a023          	sw	zero,0(a3)
  for (i = 0; i < 321; i++) {
    9fe06ec0:	0411                	addi	s0,s0,4
    9fe06ec2:	0691                	addi	a3,a3,4
    9fe06ec4:	0591                	addi	a1,a1,4
    9fe06ec6:	02848863          	beq	s1,s0,9fe06ef6 <NR+0x800>
      if ((gammak[i] == 0.0F)) {
    9fe06eca:	00042707          	flw	fa4,0(s0)
    9fe06ece:	a0d72553          	feq.s	a0,fa4,fa3
    9fe06ed2:	f56d                	bnez	a0,9fe06ebc <NR+0x7c6>
        tmp_ifft_out[321+i] = (c * tmp_ifft_out[321+i] * tmp_fft_out[i]) / gammak[i];
    9fe06ed4:	0006a787          	flw	fa5,0(a3)
    9fe06ed8:	0005a607          	flw	fa2,0(a1)
  for (i = 0; i < 321; i++) {
    9fe06edc:	0411                	addi	s0,s0,4
        tmp_ifft_out[321+i] = (c * tmp_ifft_out[321+i] * tmp_fft_out[i]) / gammak[i];
    9fe06ede:	10b7f7d3          	fmul.s	fa5,fa5,fa1
  for (i = 0; i < 321; i++) {
    9fe06ee2:	0691                	addi	a3,a3,4
    9fe06ee4:	0591                	addi	a1,a1,4
        tmp_ifft_out[321+i] = (c * tmp_ifft_out[321+i] * tmp_fft_out[i]) / gammak[i];
    9fe06ee6:	10c7f7d3          	fmul.s	fa5,fa5,fa2
    9fe06eea:	18e7f7d3          	fdiv.s	fa5,fa5,fa4
    9fe06eee:	fef6ae27          	fsw	fa5,-4(a3)
  for (i = 0; i < 321; i++) {
    9fe06ef2:	fc849ce3          	bne	s1,s0,9fe06eca <NR+0x7d4>
      }
  }

  bessel_function(0.0F, &tmp_fft_out[321], tmp_fft_out);    /* zero order modified Bessel function */
    9fe06ef6:	f0000553          	fmv.w.x	fa0,zero
    9fe06efa:	00014597          	auipc	a1,0x14
    9fe06efe:	d3658593          	addi	a1,a1,-714 # 9fe1ac30 <tmp_fft_out>
    9fe06f02:	00014517          	auipc	a0,0x14
    9fe06f06:	23250513          	addi	a0,a0,562 # 9fe1b134 <tmp_fft_out+0x504>
    9fe06f0a:	341020ef          	jal	ra,9fe09a4a <bessel_function>
  bessel_function(1.0F, &tmp_fft_out[321], &tmp_fft_out[321]);    /* first order modified Bessel function */
    9fe06f0e:	215a8553          	fmv.s	fa0,fs5
    9fe06f12:	00014597          	auipc	a1,0x14
    9fe06f16:	22258593          	addi	a1,a1,546 # 9fe1b134 <tmp_fft_out+0x504>
    9fe06f1a:	852e                	mv	a0,a1
    9fe06f1c:	32f020ef          	jal	ra,9fe09a4a <bessel_function>

  /* G(ksi, gammak) estimation */
  for (k = 0; k < 321; k++) {
    9fe06f20:	0000b797          	auipc	a5,0xb
    9fe06f24:	3ec7a987          	flw	fs3,1004(a5) # 9fe1230c <__func__.1+0x154>
    tmp = tmp_ifft_out[321+k];
    xtmp_re = tmp_fft_out[k] * (1.0F + tmp_ifft_out[k]);
    tmp1 = tmp_fft_out[321+k] * tmp_ifft_out[k];
    if (0.0F == (1.0F + ksi[k]))
      lambda = qkr * (float)exp(tmp_ifft_out[k]) / ((float)3.3495873e-008);    /* assign a small value to avoid dividing by zero */
    9fe06f28:	0000b797          	auipc	a5,0xb
    9fe06f2c:	3cc7a907          	flw	fs2,972(a5) # 9fe122f4 <__func__.1+0x13c>
    9fe06f30:	00013a97          	auipc	s5,0x13
    9fe06f34:	7f8a8a93          	addi	s5,s5,2040 # 9fe1a728 <nr_sig>
    else
      tmp = lambda / (1.0F + lambda) * xtmp_re;    /* estimated amplitude of clean speech */

    //Xk_prev[k].re = c_sig[k].re * c_sig[k].re - c_sig[k].im * c_sig[k].im;    /* use for updating ksi in next frame */
    //Xk_prev[k].im = c_sig[k].re * c_sig[k].im + c_sig[k].im * c_sig[k].re;    /* use for updating ksi in next frame */
    st->Xk_prev[k] = tmp * tmp;    /* use for updating ksi in next frame */
    9fe06f38:	afc00513          	li	a0,-1284
    9fe06f3c:	00014797          	auipc	a5,0x14
    9fe06f40:	cf478793          	addi	a5,a5,-780 # 9fe1ac30 <tmp_fft_out>
    if (0.0F == (1.0F + ksi[k]))
    9fe06f44:	f00004d3          	fmv.w.x	fs1,zero
    9fe06f48:	00014b17          	auipc	s6,0x14
    9fe06f4c:	1ecb0b13          	addi	s6,s6,492 # 9fe1b134 <tmp_fft_out+0x504>
    9fe06f50:	00014497          	auipc	s1,0x14
    9fe06f54:	6e848493          	addi	s1,s1,1768 # 9fe1b638 <tmp_ifft_out>
  bessel_function(1.0F, &tmp_fft_out[321], &tmp_fft_out[321]);    /* first order modified Bessel function */
    9fe06f58:	00015c17          	auipc	s8,0x15
    9fe06f5c:	be4c0c13          	addi	s8,s8,-1052 # 9fe1bb3c <tmp_ifft_out+0x504>
    9fe06f60:	8d56                	mv	s10,s5
    st->Xk_prev[k] = tmp * tmp;    /* use for updating ksi in next frame */
    9fe06f62:	40f50433          	sub	s0,a0,a5
    9fe06f66:	a891                	j	9fe06fba <NR+0x8c4>
      lambda = qkr * (float)exp(tmp_ifft_out[k]) / ((float)3.3495873e-008);    /* assign a small value to avoid dividing by zero */
    9fe06f68:	c79f90ef          	jal	ra,9fe00be0 <exp>
    9fe06f6c:	40157553          	fcvt.s.d	fa0,fa0
    xtmp_re = nr_sig[k] * (tmp * (xtmp_re + tmp1));
    9fe06f70:	01647453          	fadd.s	fs0,fs0,fs6
    9fe06f74:	000d2707          	flw	fa4,0(s10)
      lambda = qkr * (float)exp(tmp_ifft_out[k]) / ((float)3.3495873e-008);    /* assign a small value to avoid dividing by zero */
    9fe06f78:	11357553          	fmul.s	fa0,fa0,fs3
    xtmp_re = nr_sig[k] * (tmp * (xtmp_re + tmp1));
    9fe06f7c:	117477d3          	fmul.s	fa5,fs0,fs7
      lambda = qkr * (float)exp(tmp_ifft_out[k]) / ((float)3.3495873e-008);    /* assign a small value to avoid dividing by zero */
    9fe06f80:	19257553          	fdiv.s	fa0,fa0,fs2
    xtmp_re = nr_sig[k] * (tmp * (xtmp_re + tmp1));
    9fe06f84:	10e7f7d3          	fmul.s	fa5,fa5,fa4
    if (0.0F == (1.0F + lambda))
    9fe06f88:	01557753          	fadd.s	fa4,fa0,fs5
    9fe06f8c:	a0972553          	feq.s	a0,fa4,fs1
    9fe06f90:	c549                	beqz	a0,9fe0701a <NR+0x924>
      tmp = lambda / ((float)3.3495873e-008) * xtmp_re;    /* assign a small value to avoid dividing by zero */
    9fe06f92:	19257553          	fdiv.s	fa0,fa0,fs2
    9fe06f96:	10f577d3          	fmul.s	fa5,fa0,fa5
    st->Xk_prev[k] = tmp * tmp;    /* use for updating ksi in next frame */
    9fe06f9a:	028bb503          	ld	a0,40(s7)
    9fe06f9e:	10f7f753          	fmul.s	fa4,fa5,fa5
    tmp_ifft_out[321+k] = tmp;
    9fe06fa2:	00fc2027          	fsw	fa5,0(s8)
    st->Xk_prev[k] = tmp * tmp;    /* use for updating ksi in next frame */
    9fe06fa6:	955a                	add	a0,a0,s6
    9fe06fa8:	9522                	add	a0,a0,s0
  for (k = 0; k < 321; k++) {
    9fe06faa:	0b11                	addi	s6,s6,4
    st->Xk_prev[k] = tmp * tmp;    /* use for updating ksi in next frame */
    9fe06fac:	00e52027          	fsw	fa4,0(a0)
  for (k = 0; k < 321; k++) {
    9fe06fb0:	0d91                	addi	s11,s11,4
    9fe06fb2:	0d11                	addi	s10,s10,4
    9fe06fb4:	0c11                	addi	s8,s8,4
    9fe06fb6:	07648763          	beq	s1,s6,9fe07024 <NR+0x92e>
    if (0.0F == (1.0F + ksi[k]))
    9fe06fba:	000da787          	flw	fa5,0(s11)
    xtmp_re = tmp_fft_out[k] * (1.0F + tmp_ifft_out[k]);
    9fe06fbe:	afcc2707          	flw	fa4,-1284(s8)
    9fe06fc2:	afcb2687          	flw	fa3,-1284(s6)
    if (0.0F == (1.0F + ksi[k]))
    9fe06fc6:	0157f7d3          	fadd.s	fa5,fa5,fs5
    xtmp_re = tmp_fft_out[k] * (1.0F + tmp_ifft_out[k]);
    9fe06fca:	01577453          	fadd.s	fs0,fa4,fs5
    tmp1 = tmp_fft_out[321+k] * tmp_ifft_out[k];
    9fe06fce:	000b2b07          	flw	fs6,0(s6)
    tmp = tmp_ifft_out[321+k];
    9fe06fd2:	000c2b87          	flw	fs7,0(s8)
      lambda = qkr * (float)exp(tmp_ifft_out[k]) / ((float)3.3495873e-008);    /* assign a small value to avoid dividing by zero */
    9fe06fd6:	42070553          	fcvt.d.s	fa0,fa4
    if (0.0F == (1.0F + ksi[k]))
    9fe06fda:	a097a553          	feq.s	a0,fa5,fs1
    xtmp_re = tmp_fft_out[k] * (1.0F + tmp_ifft_out[k]);
    9fe06fde:	10d47453          	fmul.s	fs0,fs0,fa3
    tmp1 = tmp_fft_out[321+k] * tmp_ifft_out[k];
    9fe06fe2:	11677b53          	fmul.s	fs6,fa4,fs6
    if (0.0F == (1.0F + ksi[k]))
    9fe06fe6:	f149                	bnez	a0,9fe06f68 <NR+0x872>
      lambda = qkr * (float)exp(tmp_ifft_out[k]) / (1.0F + ksi[k]);
    9fe06fe8:	bf9f90ef          	jal	ra,9fe00be0 <exp>
    9fe06fec:	000da787          	flw	fa5,0(s11)
    9fe06ff0:	40157553          	fcvt.s.d	fa0,fa0
    xtmp_re = nr_sig[k] * (tmp * (xtmp_re + tmp1));
    9fe06ff4:	01647453          	fadd.s	fs0,fs0,fs6
      lambda = qkr * (float)exp(tmp_ifft_out[k]) / (1.0F + ksi[k]);
    9fe06ff8:	0157f7d3          	fadd.s	fa5,fa5,fs5
    9fe06ffc:	11357553          	fmul.s	fa0,fa0,fs3
    xtmp_re = nr_sig[k] * (tmp * (xtmp_re + tmp1));
    9fe07000:	000d2707          	flw	fa4,0(s10)
      lambda = qkr * (float)exp(tmp_ifft_out[k]) / (1.0F + ksi[k]);
    9fe07004:	18f57553          	fdiv.s	fa0,fa0,fa5
    xtmp_re = nr_sig[k] * (tmp * (xtmp_re + tmp1));
    9fe07008:	117477d3          	fmul.s	fa5,fs0,fs7
    9fe0700c:	10e7f7d3          	fmul.s	fa5,fa5,fa4
    if (0.0F == (1.0F + lambda))
    9fe07010:	01557753          	fadd.s	fa4,fa0,fs5
    9fe07014:	a0972553          	feq.s	a0,fa4,fs1
    9fe07018:	fd2d                	bnez	a0,9fe06f92 <NR+0x89c>
      tmp = lambda / (1.0F + lambda) * xtmp_re;    /* estimated amplitude of clean speech */
    9fe0701a:	18e57553          	fdiv.s	fa0,fa0,fa4
    9fe0701e:	10f577d3          	fmul.s	fa5,fa0,fa5
    9fe07022:	bfa5                	j	9fe06f9a <NR+0x8a4>
  }

  for (k = 0; k < (nFFT/2+1); k++) {
    9fe07024:	67c2                	ld	a5,16(sp)
    9fe07026:	577d                	li	a4,-1
    9fe07028:	08e7cc63          	blt	a5,a4,9fe070c0 <NR+0x9ca>
    9fe0702c:	00013417          	auipc	s0,0x13
    9fe07030:	cf440413          	addi	s0,s0,-780 # 9fe19d20 <nr_fd_half>
    9fe07034:	84a2                	mv	s1,s0
    9fe07036:	f022                	sd	s0,32(sp)
    9fe07038:	00013d17          	auipc	s10,0x13
    9fe0703c:	6f0d0d13          	addi	s10,s10,1776 # 9fe1a728 <nr_sig>
    9fe07040:	4d81                	li	s11,0
    nr_sig[k] = (float)atan2(nr_fd_half[k].im, nr_fd_half[k].re);    /* theta */
    9fe07042:	0004a587          	flw	fa1,0(s1)
    9fe07046:	0044a507          	flw	fa0,4(s1)
  for (k = 0; k < (nFFT/2+1); k++) {
    9fe0704a:	0d11                	addi	s10,s10,4
    nr_sig[k] = (float)atan2(nr_fd_half[k].im, nr_fd_half[k].re);    /* theta */
    9fe0704c:	420585d3          	fcvt.d.s	fa1,fa1
    9fe07050:	42050553          	fcvt.d.s	fa0,fa0
  for (k = 0; k < (nFFT/2+1); k++) {
    9fe07054:	2d85                	addiw	s11,s11,1
    9fe07056:	04a1                	addi	s1,s1,8
    nr_sig[k] = (float)atan2(nr_fd_half[k].im, nr_fd_half[k].re);    /* theta */
    9fe07058:	b87f90ef          	jal	ra,9fe00bde <atan2>
    9fe0705c:	40157553          	fcvt.s.d	fa0,fa0
    9fe07060:	fead2e27          	fsw	fa0,-4(s10)
  for (k = 0; k < (nFFT/2+1); k++) {
    9fe07064:	fdb9dfe3          	bge	s3,s11,9fe07042 <NR+0x94c>
  }

  for (k = 0; k < (nFFT/2+1); k++) {
    if (nr_sig[k] == 0.0F) {
    9fe07068:	f00004d3          	fmv.w.x	fs1,zero
    9fe0706c:	4481                	li	s1,0
    9fe0706e:	a809                	j	9fe07080 <NR+0x98a>
      xtmp_im = 0.0F;
    } else {
      xtmp_re = (float)cos(nr_sig[k]);    /* Euler's formula */
      xtmp_im = (float)sin(nr_sig[k]);    /* Euler's formula */
    }
    nr_fd_half[k].re = xtmp_re;    /* phase part */
    9fe07070:	00842027          	fsw	fs0,0(s0)
    nr_fd_half[k].im = xtmp_im;    /* phase part */
    9fe07074:	00f42227          	fsw	fa5,4(s0)
  for (k = 0; k < (nFFT/2+1); k++) {
    9fe07078:	0a91                	addi	s5,s5,4
    9fe0707a:	0421                	addi	s0,s0,8
    9fe0707c:	0499c263          	blt	s3,s1,9fe070c0 <NR+0x9ca>
    if (nr_sig[k] == 0.0F) {
    9fe07080:	000aa507          	flw	fa0,0(s5)
      xtmp_im = 0.0F;
    9fe07084:	f00007d3          	fmv.w.x	fa5,zero
      xtmp_re = 1.0F;
    9fe07088:	215a8453          	fmv.s	fs0,fs5
    if (nr_sig[k] == 0.0F) {
    9fe0708c:	a0952753          	feq.s	a4,fa0,fs1
  for (k = 0; k < (nFFT/2+1); k++) {
    9fe07090:	2485                	addiw	s1,s1,1
    if (nr_sig[k] == 0.0F) {
    9fe07092:	ff79                	bnez	a4,9fe07070 <NR+0x97a>
      xtmp_re = (float)cos(nr_sig[k]);    /* Euler's formula */
    9fe07094:	42050553          	fcvt.d.s	fa0,fa0
  for (k = 0; k < (nFFT/2+1); k++) {
    9fe07098:	0a91                	addi	s5,s5,4
    9fe0709a:	0421                	addi	s0,s0,8
      xtmp_re = (float)cos(nr_sig[k]);    /* Euler's formula */
    9fe0709c:	837f90ef          	jal	ra,9fe008d2 <cos>
      xtmp_im = (float)sin(nr_sig[k]);    /* Euler's formula */
    9fe070a0:	ffcaa787          	flw	fa5,-4(s5)
      xtmp_re = (float)cos(nr_sig[k]);    /* Euler's formula */
    9fe070a4:	40157453          	fcvt.s.d	fs0,fa0
      xtmp_im = (float)sin(nr_sig[k]);    /* Euler's formula */
    9fe070a8:	42078553          	fcvt.d.s	fa0,fa5
    9fe070ac:	abbf90ef          	jal	ra,9fe00b66 <sin>
    9fe070b0:	401577d3          	fcvt.s.d	fa5,fa0
    nr_fd_half[k].re = xtmp_re;    /* phase part */
    9fe070b4:	fe842c27          	fsw	fs0,-8(s0)
    nr_fd_half[k].im = xtmp_im;    /* phase part */
    9fe070b8:	fef42e27          	fsw	fa5,-4(s0)
  for (k = 0; k < (nFFT/2+1); k++) {
    9fe070bc:	fc99d2e3          	bge	s3,s1,9fe07080 <NR+0x98a>
    9fe070c0:	00013717          	auipc	a4,0x13
    9fe070c4:	c6070713          	addi	a4,a4,-928 # 9fe19d20 <nr_fd_half>
    9fe070c8:	00013697          	auipc	a3,0x13
    9fe070cc:	66068693          	addi	a3,a3,1632 # 9fe1a728 <nr_sig>
  for (k = 0; k < 321; k++) {
    //tmp1 = c_sig[k].re;
    //c_sig[k].re = c_sig[k].re * nr_fd_half[k].re - c_sig[k].im * nr_fd_half[k].im;    /* estimated clean speech signal */
    //c_sig[k].im = tmp1 * nr_fd_half[k].im + c_sig[k].im * nr_fd_half[k].re;    /* estimated clean speech signal */
    tmp = tmp_ifft_out[321+k];
    nr_fd_half[k].re = tmp * nr_fd_half[k].re;    /* estimated clean speech signal */
    9fe070d0:	00072707          	flw	fa4,0(a4)
    nr_fd_half[k].im = tmp * nr_fd_half[k].im;    /* estimated clean speech signal */
    9fe070d4:	00472787          	flw	fa5,4(a4)
    tmp = tmp_ifft_out[321+k];
    9fe070d8:	000ca687          	flw	fa3,0(s9)
  for (k = 0; k < 321; k++) {
    9fe070dc:	0721                	addi	a4,a4,8
    9fe070de:	0c91                	addi	s9,s9,4
    nr_fd_half[k].re = tmp * nr_fd_half[k].re;    /* estimated clean speech signal */
    9fe070e0:	10d77753          	fmul.s	fa4,fa4,fa3
    nr_fd_half[k].im = tmp * nr_fd_half[k].im;    /* estimated clean speech signal */
    9fe070e4:	10d7f7d3          	fmul.s	fa5,fa5,fa3
    nr_fd_half[k].re = tmp * nr_fd_half[k].re;    /* estimated clean speech signal */
    9fe070e8:	fee72c27          	fsw	fa4,-8(a4)
    nr_fd_half[k].im = tmp * nr_fd_half[k].im;    /* estimated clean speech signal */
    9fe070ec:	fef72e27          	fsw	fa5,-4(a4)
  for (k = 0; k < 321; k++) {
    9fe070f0:	fee690e3          	bne	a3,a4,9fe070d0 <NR+0x9da>
  }

  tmp_fft_out[0] = nr_fd_half[0].re;
    9fe070f4:	7782                	ld	a5,32(sp)
  for (k = 1, j = 1; j < (nFFT/2); k+=2, j++) {
    9fe070f6:	458d                	li	a1,3
    9fe070f8:	00013697          	auipc	a3,0x13
    9fe070fc:	c3068693          	addi	a3,a3,-976 # 9fe19d28 <nr_fd_half+0x8>
  tmp_fft_out[0] = nr_fd_half[0].re;
    9fe07100:	0007a787          	flw	fa5,0(a5)
    9fe07104:	67e2                	ld	a5,24(sp)
    9fe07106:	00014717          	auipc	a4,0x14
    9fe0710a:	b2e70713          	addi	a4,a4,-1234 # 9fe1ac34 <tmp_fft_out+0x4>
  for (k = 1, j = 1; j < (nFFT/2); k+=2, j++) {
    9fe0710e:	4605                	li	a2,1
  tmp_fft_out[0] = nr_fd_half[0].re;
    9fe07110:	00f7a027          	fsw	fa5,0(a5)
  for (k = 1, j = 1; j < (nFFT/2); k+=2, j++) {
    9fe07114:	67c2                	ld	a5,16(sp)
    9fe07116:	00f5df63          	bge	a1,a5,9fe07134 <NR+0xa3e>
    tmp_fft_out[k] = nr_fd_half[j].re;
    9fe0711a:	0006a707          	flw	fa4,0(a3)
    tmp_fft_out[k+1] = nr_fd_half[j].im;
    9fe0711e:	0046a787          	flw	fa5,4(a3)
  for (k = 1, j = 1; j < (nFFT/2); k+=2, j++) {
    9fe07122:	2605                	addiw	a2,a2,1
    tmp_fft_out[k] = nr_fd_half[j].re;
    9fe07124:	00e72027          	fsw	fa4,0(a4)
    tmp_fft_out[k+1] = nr_fd_half[j].im;
    9fe07128:	00f72227          	fsw	fa5,4(a4)
  for (k = 1, j = 1; j < (nFFT/2); k+=2, j++) {
    9fe0712c:	06a1                	addi	a3,a3,8
    9fe0712e:	0721                	addi	a4,a4,8
    9fe07130:	ff3645e3          	blt	a2,s3,9fe0711a <NR+0xa24>
  }
  tmp_fft_out[nFFT-1] = nr_fd_half[nFFT/2].re;
    9fe07134:	7782                	ld	a5,32(sp)
    9fe07136:	7762                	ld	a4,56(sp)

  /* restore nFFT points before doing inverse FFT, do conjugate symmetric for the lower half points inside speech_ifft() */
  speech_ifft(st->nr_fft_table, tmp_fft_out, tmp_ifft_out);    /* faster than matlab ifft(), in/out not use the same buffer */
    9fe07138:	00014617          	auipc	a2,0x14
    9fe0713c:	50060613          	addi	a2,a2,1280 # 9fe1b638 <tmp_ifft_out>
    9fe07140:	00014597          	auipc	a1,0x14
    9fe07144:	af058593          	addi	a1,a1,-1296 # 9fe1ac30 <tmp_fft_out>
  tmp_fft_out[nFFT-1] = nr_fd_half[nFFT/2].re;
    9fe07148:	00e78c33          	add	s8,a5,a4
    9fe0714c:	67e2                	ld	a5,24(sp)
    9fe0714e:	6706                	ld	a4,64(sp)
    9fe07150:	000c2787          	flw	fa5,0(s8)
    9fe07154:	97ba                	add	a5,a5,a4
    9fe07156:	00f7a027          	fsw	fa5,0(a5)
  speech_ifft(st->nr_fft_table, tmp_fft_out, tmp_ifft_out);    /* faster than matlab ifft(), in/out not use the same buffer */
    9fe0715a:	000bb503          	ld	a0,0(s7)
    9fe0715e:	7ab010ef          	jal	ra,9fe09108 <speech_ifft>
  for (k = 0; k < len; k++) {    /* ignore output samples from (len+1) to (2*len) */
    9fe07162:	77c2                	ld	a5,48(sp)
    9fe07164:	02f05b63          	blez	a5,9fe0719a <NR+0xaa4>
    9fe07168:	47b6                	lw	a5,76(sp)
    9fe0716a:	00014717          	auipc	a4,0x14
    9fe0716e:	4d270713          	addi	a4,a4,1234 # 9fe1b63c <tmp_ifft_out+0x4>
    9fe07172:	fff7869b          	addiw	a3,a5,-1
    9fe07176:	02069793          	slli	a5,a3,0x20
    9fe0717a:	01e7d693          	srli	a3,a5,0x1e
    9fe0717e:	96ba                	add	a3,a3,a4
    9fe07180:	00014717          	auipc	a4,0x14
    9fe07184:	4b870713          	addi	a4,a4,1208 # 9fe1b638 <tmp_ifft_out>
    tmp_ifft_out[k] /= nFFT;    /* divide by nFFT to get values as in matlab */
    9fe07188:	00072787          	flw	fa5,0(a4)
  for (k = 0; k < len; k++) {    /* ignore output samples from (len+1) to (2*len) */
    9fe0718c:	0711                	addi	a4,a4,4
    tmp_ifft_out[k] /= nFFT;    /* divide by nFFT to get values as in matlab */
    9fe0718e:	1947f7d3          	fdiv.s	fa5,fa5,fs4
    9fe07192:	fef72e27          	fsw	fa5,-4(a4)
  for (k = 0; k < len; k++) {    /* ignore output samples from (len+1) to (2*len) */
    9fe07196:	fee699e3          	bne	a3,a4,9fe07188 <NR+0xa92>
  }

  for (k = 0; k < len1; k++) {
    9fe0719a:	77a2                	ld	a5,40(sp)
    9fe0719c:	4701                	li	a4,0
    9fe0719e:	00279593          	slli	a1,a5,0x2
    9fe071a2:	04f05b63          	blez	a5,9fe071f8 <NR+0xb02>
    y[k] = st->y_old[k] + (tmp_ifft_out[k] * st->syn_win[k]);    /* apply synthesis window and 50% OLA for output */
    9fe071a6:	010bb603          	ld	a2,16(s7)
    9fe071aa:	020bb683          	ld	a3,32(s7)
    9fe071ae:	000a2787          	flw	fa5,0(s4)
    9fe071b2:	963a                	add	a2,a2,a4
    9fe071b4:	96ba                	add	a3,a3,a4
    9fe071b6:	0006a707          	flw	fa4,0(a3)
    9fe071ba:	00062687          	flw	fa3,0(a2)
    9fe071be:	67a2                	ld	a5,8(sp)
    st->y_old[k] = tmp_ifft_out[len1 + k] * st->syn_win[len1 + k];    /* apply synthesis window and update output OLA buffer */
    9fe071c0:	00ba0633          	add	a2,s4,a1
    y[k] = st->y_old[k] + (tmp_ifft_out[k] * st->syn_win[k]);    /* apply synthesis window and 50% OLA for output */
    9fe071c4:	70d7f7c3          	fmadd.s	fa5,fa5,fa3,fa4
    9fe071c8:	00e786b3          	add	a3,a5,a4
    st->y_old[k] = tmp_ifft_out[len1 + k] * st->syn_win[len1 + k];    /* apply synthesis window and update output OLA buffer */
    9fe071cc:	0a11                	addi	s4,s4,4
    y[k] = st->y_old[k] + (tmp_ifft_out[k] * st->syn_win[k]);    /* apply synthesis window and 50% OLA for output */
    9fe071ce:	00f6a027          	fsw	fa5,0(a3)
    st->y_old[k] = tmp_ifft_out[len1 + k] * st->syn_win[len1 + k];    /* apply synthesis window and update output OLA buffer */
    9fe071d2:	010bb683          	ld	a3,16(s7)
    9fe071d6:	00062707          	flw	fa4,0(a2)
    9fe071da:	020bb603          	ld	a2,32(s7)
    9fe071de:	96ae                	add	a3,a3,a1
    9fe071e0:	96ba                	add	a3,a3,a4
    9fe071e2:	0006a787          	flw	fa5,0(a3)
    9fe071e6:	00e606b3          	add	a3,a2,a4
  for (k = 0; k < len1; k++) {
    9fe071ea:	0711                	addi	a4,a4,4
    st->y_old[k] = tmp_ifft_out[len1 + k] * st->syn_win[len1 + k];    /* apply synthesis window and update output OLA buffer */
    9fe071ec:	10e7f7d3          	fmul.s	fa5,fa5,fa4
    9fe071f0:	00f6a027          	fsw	fa5,0(a3)
  for (k = 0; k < len1; k++) {
    9fe071f4:	fae599e3          	bne	a1,a4,9fe071a6 <NR+0xab0>
  }

  if (1 == (unsigned short)*frame)
    9fe071f8:	00092787          	flw	fa5,0(s2)
    9fe071fc:	4685                	li	a3,1
    9fe071fe:	c0179753          	fcvt.wu.s	a4,fa5,rtz
    9fe07202:	1742                	slli	a4,a4,0x30
    9fe07204:	9341                	srli	a4,a4,0x30
    9fe07206:	02d71163          	bne	a4,a3,9fe07228 <NR+0xb32>
    st->nr_frame1_last_sample = y[st->frame_size-1];
    9fe0720a:	098ba703          	lw	a4,152(s7)
    9fe0720e:	67a2                	ld	a5,8(sp)
    9fe07210:	070a                	slli	a4,a4,0x2
    9fe07212:	973e                	add	a4,a4,a5
    9fe07214:	ffc72787          	flw	fa5,-4(a4)
    9fe07218:	08fbaa27          	fsw	fa5,148(s7)
  if (2 == (unsigned short)*frame) {
    9fe0721c:	00092787          	flw	fa5,0(s2)
    9fe07220:	c0179753          	fcvt.wu.s	a4,fa5,rtz
    9fe07224:	1742                	slli	a4,a4,0x30
    9fe07226:	9341                	srli	a4,a4,0x30
    9fe07228:	4689                	li	a3,2
    9fe0722a:	0ed70463          	beq	a4,a3,9fe07312 <NR+0xc1c>
  SSP_SAFE_FREE_BUF(tmp_fft_out);
  SSP_SAFE_FREE_BUF(tmp_ifft_out);
  SSP_SAFE_FREE_BUF(nr_sig);
  SSP_SAFE_FREE_BUF(nr_fd_half);
#endif
}
    9fe0722e:	60b2                	ld	ra,264(sp)
    9fe07230:	6412                	ld	s0,256(sp)
    9fe07232:	74ee                	ld	s1,248(sp)
    9fe07234:	794e                	ld	s2,240(sp)
    9fe07236:	79ae                	ld	s3,232(sp)
    9fe07238:	7a0e                	ld	s4,224(sp)
    9fe0723a:	6aee                	ld	s5,216(sp)
    9fe0723c:	6b4e                	ld	s6,208(sp)
    9fe0723e:	6bae                	ld	s7,200(sp)
    9fe07240:	6c0e                	ld	s8,192(sp)
    9fe07242:	7cea                	ld	s9,184(sp)
    9fe07244:	7d4a                	ld	s10,176(sp)
    9fe07246:	7daa                	ld	s11,168(sp)
    9fe07248:	246a                	fld	fs0,152(sp)
    9fe0724a:	24ca                	fld	fs1,144(sp)
    9fe0724c:	292a                	fld	fs2,136(sp)
    9fe0724e:	298a                	fld	fs3,128(sp)
    9fe07250:	3a66                	fld	fs4,120(sp)
    9fe07252:	3ac6                	fld	fs5,112(sp)
    9fe07254:	3b26                	fld	fs6,104(sp)
    9fe07256:	3b86                	fld	fs7,96(sp)
    9fe07258:	6151                	addi	sp,sp,272
    9fe0725a:	8082                	ret
    st->vad_mmse = 1.0F;
    9fe0725c:	0000b797          	auipc	a5,0xb
    9fe07260:	fb47a707          	flw	fa4,-76(a5) # 9fe12210 <__func__.1+0x58>
    st->vad_mmse_cnt = st->vad_mmse_cnt_para;
    9fe07264:	090ba787          	flw	fa5,144(s7)
    st->vad_mmse = 1.0F;
    9fe07268:	06ebac27          	fsw	fa4,120(s7)
    9fe0726c:	bc99                	j	9fe06cc2 <NR+0x5cc>
      xtmp_im = MAX(xtmp_im, 0.0F);
    9fe0726e:	f00005d3          	fmv.w.x	fa1,zero
    9fe07272:	00012517          	auipc	a0,0x12
    9fe07276:	09e50513          	addi	a0,a0,158 # 9fe19310 <gammak>
    9fe0727a:	00012717          	auipc	a4,0x12
    9fe0727e:	59e70713          	addi	a4,a4,1438 # 9fe19818 <ksi>
    9fe07282:	00013c97          	auipc	s9,0x13
    9fe07286:	a9ac8c93          	addi	s9,s9,-1382 # 9fe19d1c <ksi+0x504>
  if (*frame == 1.0F) {    /* priori SNR for the first frame */
    9fe0728a:	4601                	li	a2,0
      xtmp_im = gammak[k] - 1.0F;
    9fe0728c:	00052687          	flw	fa3,0(a0)
    for (k = 0; k < 321; k++) {
    9fe07290:	0511                	addi	a0,a0,4
      xtmp_im = gammak[k] - 1.0F;
    9fe07292:	0956f6d3          	fsub.s	fa3,fa3,fs5
      xtmp_im = MAX(xtmp_im, 0.0F);
    9fe07296:	a0b695d3          	flt.s	a1,fa3,fa1
    9fe0729a:	c199                	beqz	a1,9fe072a0 <NR+0xbaa>
    9fe0729c:	f00006d3          	fmv.w.x	fa3,zero
      if (0.0F == st->noise_mu2[k])
    9fe072a0:	038bb583          	ld	a1,56(s7)
    9fe072a4:	95b2                	add	a1,a1,a2
    9fe072a6:	0005a607          	flw	fa2,0(a1)
    9fe072aa:	a0b62853          	feq.s	a6,fa2,fa1
    9fe072ae:	00080b63          	beqz	a6,9fe072c4 <NR+0xbce>
        st->noise_mu2[k] = (float)3.3495873e-008;    /* assign a small value to avoid dividing by zero */
    9fe072b2:	00042787          	flw	fa5,0(s0)
    9fe072b6:	00f5a027          	fsw	fa5,0(a1)
      ksi[k] = st->aa * st->Xk_prev[k] / st->noise_mu2[k] + (1.0F - st->aa) * xtmp_im;
    9fe072ba:	038bb583          	ld	a1,56(s7)
    9fe072be:	95b2                	add	a1,a1,a2
    9fe072c0:	0005a607          	flw	fa2,0(a1)
    9fe072c4:	028bb583          	ld	a1,40(s7)
    9fe072c8:	088ba787          	flw	fa5,136(s7)
    9fe072cc:	95b2                	add	a1,a1,a2
    9fe072ce:	0005a507          	flw	fa0,0(a1)
    9fe072d2:	08faf753          	fsub.s	fa4,fs5,fa5
    for (k = 0; k < 321; k++) {
    9fe072d6:	0611                	addi	a2,a2,4
      ksi[k] = st->aa * st->Xk_prev[k] / st->noise_mu2[k] + (1.0F - st->aa) * xtmp_im;
    9fe072d8:	10a7f7d3          	fmul.s	fa5,fa5,fa0
    9fe072dc:	18c7f7d3          	fdiv.s	fa5,fa5,fa2
    9fe072e0:	78d777c3          	fmadd.s	fa5,fa4,fa3,fa5
    9fe072e4:	00f72027          	fsw	fa5,0(a4)
      ksi[k] = MAX(ksi[k], st->ksi_min);    /* limit ksi greater than -25dB in power */
    9fe072e8:	084ba707          	flw	fa4,132(s7)
    9fe072ec:	a0e795d3          	flt.s	a1,fa5,fa4
    9fe072f0:	e199                	bnez	a1,9fe072f6 <NR+0xc00>
    9fe072f2:	20f78753          	fmv.s	fa4,fa5
    for (k = 0; k < 321; k++) {
    9fe072f6:	0711                	addi	a4,a4,4
      ksi[k] = MAX(ksi[k], st->ksi_min);    /* limit ksi greater than -25dB in power */
    9fe072f8:	fee72e27          	fsw	fa4,-4(a4)
    for (k = 0; k < 321; k++) {
    9fe072fc:	f8ec98e3          	bne	s9,a4,9fe0728c <NR+0xb96>
    9fe07300:	00012497          	auipc	s1,0x12
    9fe07304:	51448493          	addi	s1,s1,1300 # 9fe19814 <gammak+0x504>
    9fe07308:	81fff06f          	j	9fe06b26 <NR+0x430>
      st->vad_mmse = 0.0F;
    9fe0730c:	060bbc23          	sd	zero,120(s7)
    9fe07310:	ba5d                	j	9fe06cc6 <NR+0x5d0>
    y[0] = alpha * st->nr_frame1_last_sample + alpha2 * y[0];
    9fe07312:	67a2                	ld	a5,8(sp)
    9fe07314:	0000b717          	auipc	a4,0xb
    9fe07318:	ffc72687          	flw	fa3,-4(a4) # 9fe12310 <__func__.1+0x158>
    9fe0731c:	094ba707          	flw	fa4,148(s7)
    9fe07320:	0007a787          	flw	fa5,0(a5)
    9fe07324:	10d7f7d3          	fmul.s	fa5,fa5,fa3
    9fe07328:	0000b717          	auipc	a4,0xb
    9fe0732c:	fec72687          	flw	fa3,-20(a4) # 9fe12314 <__func__.1+0x15c>
    for (i = 0; i < st->frame_size-1; i++) {
    9fe07330:	4705                	li	a4,1
    y[0] = alpha * st->nr_frame1_last_sample + alpha2 * y[0];
    9fe07332:	78d77743          	fmadd.s	fa4,fa4,fa3,fa5
    9fe07336:	00e7a027          	fsw	fa4,0(a5)
    for (i = 0; i < st->frame_size-1; i++) {
    9fe0733a:	098ba683          	lw	a3,152(s7)
    9fe0733e:	eed758e3          	bge	a4,a3,9fe0722e <NR+0xb38>
    9fe07342:	00478b13          	addi	s6,a5,4
    9fe07346:	4701                	li	a4,0
    9fe07348:	0000b797          	auipc	a5,0xb
    9fe0734c:	fd07a587          	flw	fa1,-48(a5) # 9fe12318 <__func__.1+0x160>
      alpha2 = (float)(1.0F + i)/160.0F;
    9fe07350:	d00777d3          	fcvt.s.w	fa5,a4
      y[i+1] = alpha * y[i] + alpha2 * y[i+1];
    9fe07354:	000b2607          	flw	fa2,0(s6)
    for (i = 0; i < st->frame_size-1; i++) {
    9fe07358:	0b11                	addi	s6,s6,4
      alpha2 = (float)(1.0F + i)/160.0F;
    9fe0735a:	0157f7d3          	fadd.s	fa5,fa5,fs5
    9fe0735e:	2705                	addiw	a4,a4,1
    9fe07360:	18b7f7d3          	fdiv.s	fa5,fa5,fa1
      alpha = 1 - alpha2;
    9fe07364:	08faf6d3          	fsub.s	fa3,fs5,fa5
      y[i+1] = alpha * y[i] + alpha2 * y[i+1];
    9fe07368:	10c7f7d3          	fmul.s	fa5,fa5,fa2
    9fe0736c:	78e6f743          	fmadd.s	fa4,fa3,fa4,fa5
    9fe07370:	feeb2e27          	fsw	fa4,-4(s6)
    for (i = 0; i < st->frame_size-1; i++) {
    9fe07374:	098ba683          	lw	a3,152(s7)
    9fe07378:	36fd                	addiw	a3,a3,-1
    9fe0737a:	fcd74be3          	blt	a4,a3,9fe07350 <NR+0xc5a>
    9fe0737e:	bd45                	j	9fe0722e <NR+0xb38>
  speech_fft(st->nr_fft_table, tmp_ifft_out, tmp_fft_out);    /* faster than matlab fft() */
    9fe07380:	000bb503          	ld	a0,0(s7)
    9fe07384:	00014617          	auipc	a2,0x14
    9fe07388:	8ac60613          	addi	a2,a2,-1876 # 9fe1ac30 <tmp_fft_out>
  nr_fd_half[0].re = tmp_fft_out[0] * nFFT;    /* multiply nFFT to get values as in matlab */
    9fe0738c:	8432                	mv	s0,a2
    9fe0738e:	ec32                	sd	a2,24(sp)
  speech_fft(st->nr_fft_table, tmp_ifft_out, tmp_fft_out);    /* faster than matlab fft() */
    9fe07390:	50d010ef          	jal	ra,9fe0909c <speech_fft>
  nr_fd_half[0].re = tmp_fft_out[0] * nFFT;    /* multiply nFFT to get values as in matlab */
    9fe07394:	00042787          	flw	fa5,0(s0)
    9fe07398:	d004fa53          	fcvt.s.w	fs4,s1
  nr_fd_half[0].im = (float)3.3495873e-008;    /* assign a small value to avoid dividing by zero */
    9fe0739c:	0000b417          	auipc	s0,0xb
    9fe073a0:	f5840413          	addi	s0,s0,-168 # 9fe122f4 <__func__.1+0x13c>
    9fe073a4:	00042707          	flw	fa4,0(s0)
  nr_fd_half[0].re = tmp_fft_out[0] * nFFT;    /* multiply nFFT to get values as in matlab */
    9fe073a8:	1147f7d3          	fmul.s	fa5,fa5,fs4
    9fe073ac:	00013797          	auipc	a5,0x13
    9fe073b0:	97478793          	addi	a5,a5,-1676 # 9fe19d20 <nr_fd_half>
    9fe073b4:	f03e                	sd	a5,32(sp)
  nr_fd_half[0].im = (float)3.3495873e-008;    /* assign a small value to avoid dividing by zero */
    9fe073b6:	00e7a227          	fsw	fa4,4(a5)
  nr_fd_half[0].re = tmp_fft_out[0] * nFFT;    /* multiply nFFT to get values as in matlab */
    9fe073ba:	00f7a027          	fsw	fa5,0(a5)
  for (k = 1, j = 1; j < (nFFT/2); k+=2, j++) {
    9fe073be:	cf0ff06f          	j	9fe068ae <NR+0x1b8>

000000009fe073c2 <NR_para>:
    //*nenr_silence_time = para_obj->para_nr_init_sile_time*2;
  //} else {
    //*nenr_silence_time = para_obj->para_nr_init_sile_time;
  //}

  temp = MIN(MAX(para_obj->para_nr_snr_coeff, 0), 25);
    9fe073c2:	01255703          	lhu	a4,18(a0)
  para_obj->para_nr_noise_coeff = 2;
    9fe073c6:	4789                	li	a5,2
    9fe073c8:	00f51f23          	sh	a5,30(a0)
  temp = MIN(MAX(para_obj->para_nr_snr_coeff, 0), 25);
    9fe073cc:	46e5                	li	a3,25
    9fe073ce:	87ba                	mv	a5,a4
    9fe073d0:	0007081b          	sext.w	a6,a4
    9fe073d4:	00e6f363          	bgeu	a3,a4,9fe073da <NR_para+0x18>
    9fe073d8:	47e5                	li	a5,25
    9fe073da:	17c2                	slli	a5,a5,0x30
    9fe073dc:	93c1                	srli	a5,a5,0x30
  //if (temp >= 0 && temp <= 3) {    /* for low SNR, [0, 3] = > [0.6, 0.9] */
  if (temp <= 3) {    /* for low SNR, [0, 3] = > [0.6, 0.9] */
    9fe073de:	468d                	li	a3,3
      *aa = (float)(0.60 + temp * 0.1);    /* the speed of priori SNR tracking */
    9fe073e0:	0007871b          	sext.w	a4,a5
  if (temp <= 3) {    /* for low SNR, [0, 3] = > [0.6, 0.9] */
    9fe073e4:	0506ea63          	bltu	a3,a6,9fe07438 <NR_para+0x76>
      *aa = (float)(0.60 + temp * 0.1);    /* the speed of priori SNR tracking */
    9fe073e8:	d2070753          	fcvt.d.w	fa4,a4
    9fe073ec:	0000b797          	auipc	a5,0xb
    9fe073f0:	f347b687          	fld	fa3,-204(a5) # 9fe12320 <__func__.1+0x168>
    9fe073f4:	0000b797          	auipc	a5,0xb
    9fe073f8:	f347b787          	fld	fa5,-204(a5) # 9fe12328 <__func__.1+0x170>
    9fe073fc:	7ad77743          	fmadd.d	fa4,fa4,fa3,fa5
    9fe07400:	0000b797          	auipc	a5,0xb
    9fe07404:	f587b607          	fld	fa2,-168(a5) # 9fe12358 <__func__.1+0x1a0>
    9fe07408:	0000b797          	auipc	a5,0xb
    9fe0740c:	f287b687          	fld	fa3,-216(a5) # 9fe12330 <__func__.1+0x178>
    9fe07410:	40177753          	fcvt.s.d	fa4,fa4
    9fe07414:	00e5a027          	fsw	fa4,0(a1)
  }
  else {    /* for higher SNR, [21, 25] => [0.991, 0.995] */
      *aa = (float)(0.99 + (temp - 20) * 0.001);    /* the speed of priori SNR tracking */
  }

  temp = MIN(MAX(para_obj->para_nr_noise_coeff, 0), 14);
    9fe07418:	01e55683          	lhu	a3,30(a0)
    9fe0741c:	4739                	li	a4,14
    9fe0741e:	87b6                	mv	a5,a3
    9fe07420:	00d77363          	bgeu	a4,a3,9fe07426 <NR_para+0x64>
    9fe07424:	47b9                	li	a5,14
  *mu = (float)(0.99 - temp * 0.01);
    9fe07426:	d20787d3          	fcvt.d.w	fa5,a5
    9fe0742a:	62d7f7cb          	fnmsub.d	fa5,fa5,fa3,fa2
    9fe0742e:	4017f7d3          	fcvt.s.d	fa5,fa5
    9fe07432:	00f62027          	fsw	fa5,0(a2)

}
    9fe07436:	8082                	ret
  else if (temp > 3 && temp <= 10) {    /* for middle SNR, [4, 10] => [0.91, 0.97] */
    9fe07438:	ffc7869b          	addiw	a3,a5,-4
    9fe0743c:	16c2                	slli	a3,a3,0x30
    9fe0743e:	92c1                	srli	a3,a3,0x30
    9fe07440:	4819                	li	a6,6
    9fe07442:	02d86863          	bltu	a6,a3,9fe07472 <NR_para+0xb0>
      *aa = (float)(0.90 + (temp - 3) * 0.01);    /* the speed of priori SNR tracking */
    9fe07446:	3775                	addiw	a4,a4,-3
    9fe07448:	d20707d3          	fcvt.d.w	fa5,a4
    9fe0744c:	0000b797          	auipc	a5,0xb
    9fe07450:	ee47b687          	fld	fa3,-284(a5) # 9fe12330 <__func__.1+0x178>
    9fe07454:	0000b797          	auipc	a5,0xb
    9fe07458:	ee47b707          	fld	fa4,-284(a5) # 9fe12338 <__func__.1+0x180>
    9fe0745c:	72d7f7c3          	fmadd.d	fa5,fa5,fa3,fa4
    9fe07460:	0000b797          	auipc	a5,0xb
    9fe07464:	ef87b607          	fld	fa2,-264(a5) # 9fe12358 <__func__.1+0x1a0>
    9fe07468:	4017f7d3          	fcvt.s.d	fa5,fa5
    9fe0746c:	00f5a027          	fsw	fa5,0(a1)
    9fe07470:	b765                	j	9fe07418 <NR_para+0x56>
  else if (temp > 10 && temp <= 20) {    /* for high SNR, [11, 20] => [0.972, 0.99] */
    9fe07472:	37d5                	addiw	a5,a5,-11
    9fe07474:	17c2                	slli	a5,a5,0x30
    9fe07476:	93c1                	srli	a5,a5,0x30
    9fe07478:	46a5                	li	a3,9
    9fe0747a:	02f6ec63          	bltu	a3,a5,9fe074b2 <NR_para+0xf0>
      *aa = (float)(0.97 + (temp - 10) * 0.002);    /* the speed of priori SNR tracking */
    9fe0747e:	3759                	addiw	a4,a4,-10
    9fe07480:	d20707d3          	fcvt.d.w	fa5,a4
    9fe07484:	0000b797          	auipc	a5,0xb
    9fe07488:	ebc7b687          	fld	fa3,-324(a5) # 9fe12340 <__func__.1+0x188>
    9fe0748c:	0000b797          	auipc	a5,0xb
    9fe07490:	ebc7b707          	fld	fa4,-324(a5) # 9fe12348 <__func__.1+0x190>
    9fe07494:	72d7f7c3          	fmadd.d	fa5,fa5,fa3,fa4
    9fe07498:	0000b797          	auipc	a5,0xb
    9fe0749c:	ec07b607          	fld	fa2,-320(a5) # 9fe12358 <__func__.1+0x1a0>
    9fe074a0:	0000b797          	auipc	a5,0xb
    9fe074a4:	e907b687          	fld	fa3,-368(a5) # 9fe12330 <__func__.1+0x178>
    9fe074a8:	4017f7d3          	fcvt.s.d	fa5,fa5
    9fe074ac:	00f5a027          	fsw	fa5,0(a1)
    9fe074b0:	b7a5                	j	9fe07418 <NR_para+0x56>
      *aa = (float)(0.99 + (temp - 20) * 0.001);    /* the speed of priori SNR tracking */
    9fe074b2:	3731                	addiw	a4,a4,-20
    9fe074b4:	d20707d3          	fcvt.d.w	fa5,a4
    9fe074b8:	0000b797          	auipc	a5,0xb
    9fe074bc:	e987b707          	fld	fa4,-360(a5) # 9fe12350 <__func__.1+0x198>
    9fe074c0:	0000b797          	auipc	a5,0xb
    9fe074c4:	e987b607          	fld	fa2,-360(a5) # 9fe12358 <__func__.1+0x1a0>
    9fe074c8:	62e7f7c3          	fmadd.d	fa5,fa5,fa4,fa2
    9fe074cc:	0000b797          	auipc	a5,0xb
    9fe074d0:	e647b687          	fld	fa3,-412(a5) # 9fe12330 <__func__.1+0x178>
    9fe074d4:	4017f7d3          	fcvt.s.d	fa5,fa5
    9fe074d8:	00f5a027          	fsw	fa5,0(a1)
    9fe074dc:	bf35                	j	9fe07418 <NR_para+0x56>

000000009fe074de <NR_init>:

EXPORT NRState *NR_init(int frame_size, float fs, float aa, float mu)
{
    9fe074de:	7139                	addi	sp,sp,-64
    9fe074e0:	f426                	sd	s1,40(sp)
    9fe074e2:	84aa                	mv	s1,a0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe074e4:	0a000513          	li	a0,160
    9fe074e8:	fc06                	sd	ra,56(sp)
    9fe074ea:	f822                	sd	s0,48(sp)
    9fe074ec:	f04a                	sd	s2,32(sp)
    9fe074ee:	ac22                	fsd	fs0,24(sp)
    9fe074f0:	a826                	fsd	fs1,16(sp)
    9fe074f2:	20a50453          	fmv.s	fs0,fa0
    9fe074f6:	20c604d3          	fmv.s	fs1,fa2
    9fe074fa:	a44a                	fsd	fs2,8(sp)
    9fe074fc:	20b58953          	fmv.s	fs2,fa1
    9fe07500:	076070ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe07504:	0a000613          	li	a2,160
    9fe07508:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe0750a:	842a                	mv	s0,a0
   memset(ptr, 0, size);
    9fe0750c:	271040ef          	jal	ra,9fe0bf7c <memset>
  st->Fs = fs;
  st->frame_size = frame_size;
  st->aa = aa;
  st->mu = mu;

  st->nr_fft_table = speech_fft_init(2*2*st->frame_size);
    9fe07510:	0024951b          	slliw	a0,s1,0x2
  st->frame_size = frame_size;
    9fe07514:	08942c23          	sw	s1,152(s0)
  st->Fs = fs;
    9fe07518:	08842e27          	fsw	fs0,156(s0)
  st->aa = aa;
    9fe0751c:	09242427          	fsw	fs2,136(s0)
  st->mu = mu;
    9fe07520:	08942627          	fsw	fs1,140(s0)
  st->nr_fft_table = speech_fft_init(2*2*st->frame_size);
    9fe07524:	333010ef          	jal	ra,9fe09056 <speech_fft_init>
  st->ana_win = (float*)mem_alloc(2*st->frame_size*sizeof(float));
    9fe07528:	09842483          	lw	s1,152(s0)
  st->nr_fft_table = speech_fft_init(2*2*st->frame_size);
    9fe0752c:	e008                	sd	a0,0(s0)
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe0752e:	0034949b          	slliw	s1,s1,0x3
    9fe07532:	8526                	mv	a0,s1
    9fe07534:	042070ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe07538:	8626                	mv	a2,s1
    9fe0753a:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe0753c:	892a                	mv	s2,a0
   memset(ptr, 0, size);
    9fe0753e:	23f040ef          	jal	ra,9fe0bf7c <memset>
  st->syn_win = (float*)mem_alloc(2*st->frame_size*sizeof(float));
    9fe07542:	09842483          	lw	s1,152(s0)
  st->ana_win = (float*)mem_alloc(2*st->frame_size*sizeof(float));
    9fe07546:	01243423          	sd	s2,8(s0)
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe0754a:	0034949b          	slliw	s1,s1,0x3
    9fe0754e:	8526                	mv	a0,s1
    9fe07550:	026070ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe07554:	8626                	mv	a2,s1
    9fe07556:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe07558:	892a                	mv	s2,a0
   memset(ptr, 0, size);
    9fe0755a:	223040ef          	jal	ra,9fe0bf7c <memset>
  st->x_old = (short*)mem_alloc(st->frame_size*sizeof(short));
    9fe0755e:	09842483          	lw	s1,152(s0)
  st->syn_win = (float*)mem_alloc(2*st->frame_size*sizeof(float));
    9fe07562:	01243823          	sd	s2,16(s0)
  st->x_old = (short*)mem_alloc(st->frame_size*sizeof(short));
    9fe07566:	0014949b          	slliw	s1,s1,0x1
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe0756a:	8526                	mv	a0,s1
    9fe0756c:	00a070ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe07570:	8626                	mv	a2,s1
    9fe07572:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe07574:	892a                	mv	s2,a0
   memset(ptr, 0, size);
    9fe07576:	207040ef          	jal	ra,9fe0bf7c <memset>
  st->y_old = (float*)mem_alloc(st->frame_size*sizeof(float));
    9fe0757a:	09842483          	lw	s1,152(s0)
  st->x_old = (short*)mem_alloc(st->frame_size*sizeof(short));
    9fe0757e:	01243c23          	sd	s2,24(s0)
  st->y_old = (float*)mem_alloc(st->frame_size*sizeof(float));
    9fe07582:	0024949b          	slliw	s1,s1,0x2
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe07586:	8526                	mv	a0,s1
    9fe07588:	7ef060ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe0758c:	8626                	mv	a2,s1
    9fe0758e:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe07590:	892a                	mv	s2,a0
   memset(ptr, 0, size);
    9fe07592:	1eb040ef          	jal	ra,9fe0bf7c <memset>
  st->Xk_prev = (float*)mem_alloc((2*st->frame_size+1)*sizeof(float));
    9fe07596:	09842483          	lw	s1,152(s0)
  st->y_old = (float*)mem_alloc(st->frame_size*sizeof(float));
    9fe0759a:	03243023          	sd	s2,32(s0)
  st->Xk_prev = (float*)mem_alloc((2*st->frame_size+1)*sizeof(float));
    9fe0759e:	0034949b          	slliw	s1,s1,0x3
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe075a2:	2491                	addiw	s1,s1,4
    9fe075a4:	8526                	mv	a0,s1
    9fe075a6:	7d1060ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe075aa:	8626                	mv	a2,s1
    9fe075ac:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe075ae:	892a                	mv	s2,a0
   memset(ptr, 0, size);
    9fe075b0:	1cd040ef          	jal	ra,9fe0bf7c <memset>
  st->noise_mean = (float*)mem_alloc((2*st->frame_size+1)*sizeof(float));
    9fe075b4:	09842483          	lw	s1,152(s0)
  st->Xk_prev = (float*)mem_alloc((2*st->frame_size+1)*sizeof(float));
    9fe075b8:	03243423          	sd	s2,40(s0)
  st->noise_mean = (float*)mem_alloc((2*st->frame_size+1)*sizeof(float));
    9fe075bc:	0034949b          	slliw	s1,s1,0x3
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe075c0:	2491                	addiw	s1,s1,4
    9fe075c2:	8526                	mv	a0,s1
    9fe075c4:	7b3060ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe075c8:	8626                	mv	a2,s1
    9fe075ca:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe075cc:	892a                	mv	s2,a0
   memset(ptr, 0, size);
    9fe075ce:	1af040ef          	jal	ra,9fe0bf7c <memset>
  st->noise_mu2 = (float*)mem_alloc((2*st->frame_size+1)*sizeof(float));
    9fe075d2:	09842483          	lw	s1,152(s0)
  st->noise_mean = (float*)mem_alloc((2*st->frame_size+1)*sizeof(float));
    9fe075d6:	03243823          	sd	s2,48(s0)
  st->noise_mu2 = (float*)mem_alloc((2*st->frame_size+1)*sizeof(float));
    9fe075da:	0034949b          	slliw	s1,s1,0x3
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe075de:	2491                	addiw	s1,s1,4
    9fe075e0:	8526                	mv	a0,s1
    9fe075e2:	795060ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe075e6:	8626                	mv	a2,s1
    9fe075e8:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe075ea:	84aa                	mv	s1,a0
   memset(ptr, 0, size);
    9fe075ec:	191040ef          	jal	ra,9fe0bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe075f0:	03c00513          	li	a0,60
    9fe075f4:	fc04                	sd	s1,56(s0)
    9fe075f6:	781060ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe075fa:	03c00613          	li	a2,60
    9fe075fe:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe07600:	84aa                	mv	s1,a0
   memset(ptr, 0, size);
    9fe07602:	17b040ef          	jal	ra,9fe0bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe07606:	4551                	li	a0,20
  st->amp_inst_band = (float*)mem_alloc(5*3*sizeof(float));
    9fe07608:	e024                	sd	s1,64(s0)
    9fe0760a:	76d060ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe0760e:	4651                	li	a2,20
    9fe07610:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe07612:	84aa                	mv	s1,a0
   memset(ptr, 0, size);
    9fe07614:	169040ef          	jal	ra,9fe0bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe07618:	4551                	li	a0,20
  st->noisy_st_trough = (float*)mem_alloc(5*sizeof(float));
    9fe0761a:	e424                	sd	s1,72(s0)
    9fe0761c:	75b060ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe07620:	4651                	li	a2,20
    9fe07622:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe07624:	84aa                	mv	s1,a0
   memset(ptr, 0, size);
    9fe07626:	157040ef          	jal	ra,9fe0bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe0762a:	4531                	li	a0,12
  st->noisy_st_peak = (float*)mem_alloc(5*sizeof(float));
    9fe0762c:	e824                	sd	s1,80(s0)
    9fe0762e:	749060ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe07632:	4631                	li	a2,12
    9fe07634:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe07636:	892a                	mv	s2,a0
   memset(ptr, 0, size);
    9fe07638:	145040ef          	jal	ra,9fe0bf7c <memset>
  st->amp_inst_sum_hist = (float*)mem_alloc(3*sizeof(float));
  st->float_x = (float*)mem_alloc(2*st->frame_size*sizeof(float));
    9fe0763c:	09842483          	lw	s1,152(s0)
  st->amp_inst_sum_hist = (float*)mem_alloc(3*sizeof(float));
    9fe07640:	05243c23          	sd	s2,88(s0)
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe07644:	0034949b          	slliw	s1,s1,0x3
    9fe07648:	8526                	mv	a0,s1
    9fe0764a:	72d060ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe0764e:	8626                	mv	a2,s1
    9fe07650:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe07652:	84aa                	mv	s1,a0
   memset(ptr, 0, size);
    9fe07654:	129040ef          	jal	ra,9fe0bf7c <memset>

  for (i = 0; i < 2*st->frame_size; i++) {
    9fe07658:	09842703          	lw	a4,152(s0)
  st->float_x = (float*)mem_alloc(2*st->frame_size*sizeof(float));
    9fe0765c:	f024                	sd	s1,96(s0)
  for (i = 0; i < 2*st->frame_size; i++) {
    9fe0765e:	08e05363          	blez	a4,9fe076e4 <NR_init+0x206>
    9fe07662:	0000a517          	auipc	a0,0xa
    9fe07666:	e9250513          	addi	a0,a0,-366 # 9fe114f4 <fv0.1+0x4>
    9fe0766a:	0000a597          	auipc	a1,0xa
    9fe0766e:	38a58593          	addi	a1,a1,906 # 9fe119f4 <fv1.0+0x4>
    9fe07672:	4781                	li	a5,0
    9fe07674:	0000b717          	auipc	a4,0xb
    9fe07678:	cf472707          	flw	fa4,-780(a4) # 9fe12368 <__func__.1+0x1b0>
    9fe0767c:	0000b717          	auipc	a4,0xb
    9fe07680:	cf072787          	flw	fa5,-784(a4) # 9fe1236c <__func__.1+0x1b4>
    9fe07684:	a039                	j	9fe07692 <NR_init+0x1b4>
    st->ana_win[i] = fv0[i];
    9fe07686:	00052787          	flw	fa5,0(a0)
    st->syn_win[i] = fv1[i];
    9fe0768a:	0005a707          	flw	fa4,0(a1)
    9fe0768e:	0511                	addi	a0,a0,4
    9fe07690:	0591                	addi	a1,a1,4
    st->ana_win[i] = fv0[i];
    9fe07692:	6414                	ld	a3,8(s0)
    9fe07694:	00279613          	slli	a2,a5,0x2
  for (i = 0; i < 2*st->frame_size; i++) {
    9fe07698:	0785                	addi	a5,a5,1
    st->ana_win[i] = fv0[i];
    9fe0769a:	96b2                	add	a3,a3,a2
    9fe0769c:	00f6a027          	fsw	fa5,0(a3)
    st->syn_win[i] = fv1[i];
    9fe076a0:	6818                	ld	a4,16(s0)
  for (i = 0; i < 2*st->frame_size; i++) {
    9fe076a2:	0007881b          	sext.w	a6,a5
    st->syn_win[i] = fv1[i];
    9fe076a6:	9732                	add	a4,a4,a2
    9fe076a8:	00e72027          	fsw	fa4,0(a4)
  for (i = 0; i < 2*st->frame_size; i++) {
    9fe076ac:	09842703          	lw	a4,152(s0)
    9fe076b0:	0017169b          	slliw	a3,a4,0x1
    9fe076b4:	fcd849e3          	blt	a6,a3,9fe07686 <NR_init+0x1a8>
  }

  for (i = 0; i < st->frame_size; i++) {
    9fe076b8:	02e05663          	blez	a4,9fe076e4 <NR_init+0x206>
    9fe076bc:	4781                	li	a5,0
    st->x_old[i] = 0;
    9fe076be:	6c14                	ld	a3,24(s0)
    9fe076c0:	00179713          	slli	a4,a5,0x1
    st->y_old[i] = 0.0F;
    9fe076c4:	00279613          	slli	a2,a5,0x2
    st->x_old[i] = 0;
    9fe076c8:	96ba                	add	a3,a3,a4
    9fe076ca:	00069023          	sh	zero,0(a3)
    st->y_old[i] = 0.0F;
    9fe076ce:	7018                	ld	a4,32(s0)
  for (i = 0; i < st->frame_size; i++) {
    9fe076d0:	0785                	addi	a5,a5,1
    9fe076d2:	0007869b          	sext.w	a3,a5
    st->y_old[i] = 0.0F;
    9fe076d6:	9732                	add	a4,a4,a2
    9fe076d8:	00072023          	sw	zero,0(a4)
  for (i = 0; i < st->frame_size; i++) {
    9fe076dc:	09842703          	lw	a4,152(s0)
    9fe076e0:	fce6cfe3          	blt	a3,a4,9fe076be <NR_init+0x1e0>
  }

  for (i = 0; i < 2*st->frame_size+1; i++) {
    9fe076e4:	4781                	li	a5,0
    9fe076e6:	02074963          	bltz	a4,9fe07718 <NR_init+0x23a>
    //Xk_prev[i].re = 0.0F;
    //Xk_prev[i].im = 0.0F;
    st->Xk_prev[i] = 0.0F;
    9fe076ea:	7418                	ld	a4,40(s0)
    9fe076ec:	00279693          	slli	a3,a5,0x2
  for (i = 0; i < 2*st->frame_size+1; i++) {
    9fe076f0:	0785                	addi	a5,a5,1
    st->Xk_prev[i] = 0.0F;
    9fe076f2:	9736                	add	a4,a4,a3
    9fe076f4:	00072023          	sw	zero,0(a4)
    st->noise_mean[i] = 0.0F;
    9fe076f8:	7818                	ld	a4,48(s0)
  for (i = 0; i < 2*st->frame_size+1; i++) {
    9fe076fa:	0007861b          	sext.w	a2,a5
    st->noise_mean[i] = 0.0F;
    9fe076fe:	9736                	add	a4,a4,a3
    9fe07700:	00072023          	sw	zero,0(a4)
    st->noise_mu2[i] = 0.0F;
    9fe07704:	7c18                	ld	a4,56(s0)
    9fe07706:	9736                	add	a4,a4,a3
    9fe07708:	00072023          	sw	zero,0(a4)
  for (i = 0; i < 2*st->frame_size+1; i++) {
    9fe0770c:	09842703          	lw	a4,152(s0)
    9fe07710:	0017171b          	slliw	a4,a4,0x1
    9fe07714:	fcc75be3          	bge	a4,a2,9fe076ea <NR_init+0x20c>
    9fe07718:	4781                	li	a5,0
  }

  for (i = 0; i < 15; i++) {
    9fe0771a:	03c00693          	li	a3,60
    st->amp_inst_band[i] = 0.0F;
    9fe0771e:	6038                	ld	a4,64(s0)
    9fe07720:	973e                	add	a4,a4,a5
    9fe07722:	00072023          	sw	zero,0(a4)
  for (i = 0; i < 15; i++) {
    9fe07726:	0791                	addi	a5,a5,4
    9fe07728:	fed79be3          	bne	a5,a3,9fe0771e <NR_init+0x240>
    9fe0772c:	4781                	li	a5,0
  }

  for (i = 0; i < 5; i++) {
    9fe0772e:	46d1                	li	a3,20
    st->noisy_st_trough[i] = 0.0F;
    9fe07730:	6438                	ld	a4,72(s0)
    9fe07732:	973e                	add	a4,a4,a5
    9fe07734:	00072023          	sw	zero,0(a4)
    st->noisy_st_peak[i] = 0.0F;
    9fe07738:	6838                	ld	a4,80(s0)
    9fe0773a:	973e                	add	a4,a4,a5
    9fe0773c:	00072023          	sw	zero,0(a4)
  for (i = 0; i < 5; i++) {
    9fe07740:	0791                	addi	a5,a5,4
    9fe07742:	fed797e3          	bne	a5,a3,9fe07730 <NR_init+0x252>
  }

  for (i = 0; i < 3; i++) {
    st->amp_inst_sum_hist[i] = 0.0F;
    9fe07746:	6c38                	ld	a4,88(s0)
  st->vad_slope = 0.0F;
  st->vad_dr_cnt = 0.0F;
  st->vad_dr = 0.0F;
  st->vad_mmse = 0.0F;
  st->vad_mmse_cnt = 0.0F;
  if (fs == 16000)
    9fe07748:	0000b797          	auipc	a5,0xb
    9fe0774c:	acc7a787          	flw	fa5,-1332(a5) # 9fe12214 <__func__.1+0x5c>
    9fe07750:	a0f427d3          	feq.s	a5,fs0,fa5
    st->amp_inst_sum_hist[i] = 0.0F;
    9fe07754:	00072023          	sw	zero,0(a4)
    9fe07758:	6c38                	ld	a4,88(s0)
    9fe0775a:	00072223          	sw	zero,4(a4)
    9fe0775e:	6c38                	ld	a4,88(s0)
    9fe07760:	00072423          	sw	zero,8(a4)
  st->eta = 0.15F;
    9fe07764:	0000b717          	auipc	a4,0xb
    9fe07768:	bfc73703          	ld	a4,-1028(a4) # 9fe12360 <__func__.1+0x1a8>
  st->vad_slope_cnt = 0.0F;
    9fe0776c:	06043423          	sd	zero,104(s0)
  st->vad_dr_cnt = 0.0F;
    9fe07770:	06043823          	sd	zero,112(s0)
  st->vad_mmse = 0.0F;
    9fe07774:	06043c23          	sd	zero,120(s0)
  st->eta = 0.15F;
    9fe07778:	e058                	sd	a4,128(s0)
  if (fs == 16000)
    9fe0777a:	c38d                	beqz	a5,9fe0779c <NR_init+0x2be>
    st->vad_mmse_cnt_para = 4;    /* last at least 40ms, once the mmse vad goes up, keep the circumstance a period of time to get better speech quality */
    9fe0777c:	0000b797          	auipc	a5,0xb
    9fe07780:	bf47a787          	flw	fa5,-1036(a5) # 9fe12370 <__func__.1+0x1b8>
    9fe07784:	08f42827          	fsw	fa5,144(s0)
  else if (fs == 8000)
    st->vad_mmse_cnt_para = 2;    /* last at least 40ms, once the mmse vad goes up, keep the circumstance a period of time to get better speech quality */

  return st;

}
    9fe07788:	70e2                	ld	ra,56(sp)
    9fe0778a:	8522                	mv	a0,s0
    9fe0778c:	7442                	ld	s0,48(sp)
    9fe0778e:	74a2                	ld	s1,40(sp)
    9fe07790:	7902                	ld	s2,32(sp)
    9fe07792:	2462                	fld	fs0,24(sp)
    9fe07794:	24c2                	fld	fs1,16(sp)
    9fe07796:	2922                	fld	fs2,8(sp)
    9fe07798:	6121                	addi	sp,sp,64
    9fe0779a:	8082                	ret
  else if (fs == 8000)
    9fe0779c:	0000b797          	auipc	a5,0xb
    9fe077a0:	bd87a787          	flw	fa5,-1064(a5) # 9fe12374 <__func__.1+0x1bc>
    9fe077a4:	a0f427d3          	feq.s	a5,fs0,fa5
    9fe077a8:	d3e5                	beqz	a5,9fe07788 <NR_init+0x2aa>
    st->vad_mmse_cnt_para = 2;    /* last at least 40ms, once the mmse vad goes up, keep the circumstance a period of time to get better speech quality */
    9fe077aa:	0000b797          	auipc	a5,0xb
    9fe077ae:	aa27a787          	flw	fa5,-1374(a5) # 9fe1224c <__func__.1+0x94>
    9fe077b2:	08f42827          	fsw	fa5,144(s0)
  return st;
    9fe077b6:	bfc9                	j	9fe07788 <NR_init+0x2aa>

000000009fe077b8 <NR_free>:

EXPORT void NR_free(NRState *st)
{
    9fe077b8:	1141                	addi	sp,sp,-16
    9fe077ba:	e406                	sd	ra,8(sp)
    9fe077bc:	e022                	sd	s0,0(sp)
    9fe077be:	842a                	mv	s0,a0
  speech_fft_free(st->nr_fft_table);
    9fe077c0:	6108                	ld	a0,0(a0)
    9fe077c2:	0c3010ef          	jal	ra,9fe09084 <speech_fft_free>
   vPortFree(ptr);
    9fe077c6:	6408                	ld	a0,8(s0)
    9fe077c8:	715060ef          	jal	ra,9fe0e6dc <vPortFree>
    9fe077cc:	6808                	ld	a0,16(s0)
    9fe077ce:	70f060ef          	jal	ra,9fe0e6dc <vPortFree>
    9fe077d2:	6c08                	ld	a0,24(s0)
    9fe077d4:	709060ef          	jal	ra,9fe0e6dc <vPortFree>
    9fe077d8:	7008                	ld	a0,32(s0)
    9fe077da:	703060ef          	jal	ra,9fe0e6dc <vPortFree>
    9fe077de:	7408                	ld	a0,40(s0)
    9fe077e0:	6fd060ef          	jal	ra,9fe0e6dc <vPortFree>
    9fe077e4:	7808                	ld	a0,48(s0)
    9fe077e6:	6f7060ef          	jal	ra,9fe0e6dc <vPortFree>
    9fe077ea:	7c08                	ld	a0,56(s0)
    9fe077ec:	6f1060ef          	jal	ra,9fe0e6dc <vPortFree>
    9fe077f0:	6028                	ld	a0,64(s0)
    9fe077f2:	6eb060ef          	jal	ra,9fe0e6dc <vPortFree>
    9fe077f6:	6428                	ld	a0,72(s0)
    9fe077f8:	6e5060ef          	jal	ra,9fe0e6dc <vPortFree>
    9fe077fc:	6828                	ld	a0,80(s0)
    9fe077fe:	6df060ef          	jal	ra,9fe0e6dc <vPortFree>
    9fe07802:	6c28                	ld	a0,88(s0)
    9fe07804:	6d9060ef          	jal	ra,9fe0e6dc <vPortFree>
    9fe07808:	7028                	ld	a0,96(s0)
    9fe0780a:	6d3060ef          	jal	ra,9fe0e6dc <vPortFree>
    9fe0780e:	8522                	mv	a0,s0
  mem_free(st->amp_inst_sum_hist);
  mem_free(st->float_x);

  mem_free(st);

}
    9fe07810:	6402                	ld	s0,0(sp)
    9fe07812:	60a2                	ld	ra,8(sp)
    9fe07814:	0141                	addi	sp,sp,16
    9fe07816:	6c70606f          	j	9fe0e6dc <vPortFree>

000000009fe0781a <NLP_AES_para>:
   unsigned short tmp;

   /* NLP AES Parameters */
   para_obj = para;

   tmp = MIN(MAX(para_obj->para_aes_std_thrd, 0), 39);    /* the threshold level for residual echo */
    9fe0781a:	00c55803          	lhu	a6,12(a0)
    9fe0781e:	02700713          	li	a4,39
    9fe07822:	87c2                	mv	a5,a6
    9fe07824:	01077463          	bgeu	a4,a6,9fe0782c <NLP_AES_para+0x12>
    9fe07828:	02700793          	li	a5,39
   *std_thrd = 0.6f + tmp * 0.01f;    /* [0.6, 0.99], each step 0.01 */
    9fe0782c:	d007f7d3          	fcvt.s.w	fa5,a5
    9fe07830:	0000b797          	auipc	a5,0xb
    9fe07834:	b487a687          	flw	fa3,-1208(a5) # 9fe12378 <__func__.1+0x1c0>
    9fe07838:	0000b797          	auipc	a5,0xb
    9fe0783c:	a407a707          	flw	fa4,-1472(a5) # 9fe12278 <__func__.1+0xc0>
    9fe07840:	70d7f7c3          	fmadd.s	fa5,fa5,fa3,fa4

   tmp = MIN(MAX(para_obj->para_aes_supp_coeff, 0), 100);    /* the suppression level for residual echo */
    9fe07844:	06400713          	li	a4,100
   *std_thrd = 0.6f + tmp * 0.01f;    /* [0.6, 0.99], each step 0.01 */
    9fe07848:	00f5a027          	fsw	fa5,0(a1)
   tmp = MIN(MAX(para_obj->para_aes_supp_coeff, 0), 100);    /* the suppression level for residual echo */
    9fe0784c:	00e55583          	lhu	a1,14(a0)
    9fe07850:	87ae                	mv	a5,a1
    9fe07852:	00b77463          	bgeu	a4,a1,9fe0785a <NLP_AES_para+0x40>
    9fe07856:	06400793          	li	a5,100
   *aes_supp_coef1 = 1.0f + tmp * 0.125f;    /* [1.0, 13.5], each step 0.125 */
    9fe0785a:	d007f7d3          	fcvt.s.w	fa5,a5
    9fe0785e:	0000b797          	auipc	a5,0xb
    9fe07862:	9b27a687          	flw	fa3,-1614(a5) # 9fe12210 <__func__.1+0x58>
    9fe07866:	0000b797          	auipc	a5,0xb
    9fe0786a:	a9a7a707          	flw	fa4,-1382(a5) # 9fe12300 <__func__.1+0x148>
    9fe0786e:	68e7f743          	fmadd.s	fa4,fa5,fa4,fa3
   *aes_supp_coef2 = 2.0f + tmp * 0.25f;    /* [2.0, 27.0], each step 0.25 */
    9fe07872:	0000b797          	auipc	a5,0xb
    9fe07876:	a2e7a607          	flw	fa2,-1490(a5) # 9fe122a0 <__func__.1+0xe8>
    9fe0787a:	0000b797          	auipc	a5,0xb
    9fe0787e:	9d27a687          	flw	fa3,-1582(a5) # 9fe1224c <__func__.1+0x94>
    9fe07882:	68c7f7c3          	fmadd.s	fa5,fa5,fa2,fa3
   *aes_supp_coef1 = 1.0f + tmp * 0.125f;    /* [1.0, 13.5], each step 0.125 */
    9fe07886:	00e62027          	fsw	fa4,0(a2)
   *aes_supp_coef2 = 2.0f + tmp * 0.25f;    /* [2.0, 27.0], each step 0.25 */
    9fe0788a:	00f6a027          	fsw	fa5,0(a3)

}
    9fe0788e:	8082                	ret

000000009fe07890 <NLP_AES_init>:

EXPORT NonLinearEchoState *NLP_AES_init(int frame_size, float sampling_rate, float std_thrd, float aes_supp_coef1, float aes_supp_coef2)
{
    9fe07890:	711d                	addi	sp,sp,-96
    9fe07892:	e0ca                	sd	s2,64(sp)
    9fe07894:	892a                	mv	s2,a0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe07896:	0e800513          	li	a0,232
    9fe0789a:	ec86                	sd	ra,88(sp)
    9fe0789c:	e8a2                	sd	s0,80(sp)
    9fe0789e:	e4a6                	sd	s1,72(sp)
    9fe078a0:	fc4e                	sd	s3,56(sp)
    9fe078a2:	f852                	sd	s4,48(sp)
    9fe078a4:	f456                	sd	s5,40(sp)
    9fe078a6:	ac22                	fsd	fs0,24(sp)
    9fe078a8:	a826                	fsd	fs1,16(sp)
    9fe078aa:	20a50453          	fmv.s	fs0,fa0
    9fe078ae:	20d684d3          	fmv.s	fs1,fa3
    9fe078b2:	a44a                	fsd	fs2,8(sp)
    9fe078b4:	a04e                	fsd	fs3,0(sp)
    9fe078b6:	20c60953          	fmv.s	fs2,fa2
    9fe078ba:	20b589d3          	fmv.s	fs3,fa1
    9fe078be:	4b9060ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe078c2:	0e800613          	li	a2,232
    9fe078c6:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe078c8:	842a                	mv	s0,a0
   memset(ptr, 0, size);
    9fe078ca:	6b2040ef          	jal	ra,9fe0bf7c <memset>
   st->aes_supp_coef2 = aes_supp_coef2;
   st->frame_size = frame_size;
   st->ps_size = st->frame_size;
   N = st->ps_size;  /* power spectrum size */
   N3 = 2*N - st->frame_size;
   st->sampling_rate = (int)sampling_rate;
    9fe078ce:	c00417d3          	fcvt.w.s	a5,fs0,rtz

   st->echo_state = NULL;
   st->nbands = 2;
   M = st->nbands;
   st->bank = filterbank_create(M, sampling_rate, N, 1);
    9fe078d2:	20840553          	fmv.s	fa0,fs0
    9fe078d6:	4605                	li	a2,1
   st->sampling_rate = (int)sampling_rate;
    9fe078d8:	c41c                	sw	a5,8(s0)
   st->nbands = 2;
    9fe078da:	4789                	li	a5,2
    9fe078dc:	0af42823          	sw	a5,176(s0)
   st->bank = filterbank_create(M, sampling_rate, N, 1);
    9fe078e0:	85ca                	mv	a1,s2
   st->fdstd_thrd = std_thrd;
    9fe078e2:	0d342a27          	fsw	fs3,212(s0)
   st->aes_supp_coef1 = aes_supp_coef1;
    9fe078e6:	0d242e27          	fsw	fs2,220(s0)
   st->aes_supp_coef2 = aes_supp_coef2;
    9fe078ea:	0e942027          	fsw	fs1,224(s0)
   st->frame_size = frame_size;
    9fe078ee:	01242023          	sw	s2,0(s0)
   st->ps_size = st->frame_size;
    9fe078f2:	01242223          	sw	s2,4(s0)
   st->echo_state = NULL;
    9fe078f6:	00043c23          	sd	zero,24(s0)
   st->bank = filterbank_create(M, sampling_rate, N, 1);
    9fe078fa:	4509                	li	a0,2
    9fe078fc:	669000ef          	jal	ra,9fe08764 <filterbank_create>
   st->frame = (float*)mem_alloc(2*N*sizeof(float));
    9fe07900:	0039149b          	slliw	s1,s2,0x3
   st->bank = filterbank_create(M, sampling_rate, N, 1);
    9fe07904:	e808                	sd	a0,16(s0)
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe07906:	8526                	mv	a0,s1
    9fe07908:	46f060ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe0790c:	8626                	mv	a2,s1
    9fe0790e:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe07910:	8a2a                	mv	s4,a0
   memset(ptr, 0, size);
    9fe07912:	66a040ef          	jal	ra,9fe0bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe07916:	8526                	mv	a0,s1
   st->frame = (float*)mem_alloc(2*N*sizeof(float));
    9fe07918:	03443023          	sd	s4,32(s0)
    9fe0791c:	45b060ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe07920:	8626                	mv	a2,s1
    9fe07922:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe07924:	8a2a                	mv	s4,a0
   memset(ptr, 0, size);
    9fe07926:	656040ef          	jal	ra,9fe0bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe0792a:	8526                	mv	a0,s1
   st->window = (float*)mem_alloc(2*N*sizeof(float));
    9fe0792c:	05443423          	sd	s4,72(s0)
    9fe07930:	447060ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe07934:	8626                	mv	a2,s1
    9fe07936:	4581                	li	a1,0
   st->ft = (float*)mem_alloc(2*N*sizeof(float));
   st->ps = (float*)mem_alloc((N+M)*sizeof(float));
    9fe07938:	00290a1b          	addiw	s4,s2,2
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe0793c:	002a149b          	slliw	s1,s4,0x2
    9fe07940:	8aaa                	mv	s5,a0
   memset(ptr, 0, size);
    9fe07942:	63a040ef          	jal	ra,9fe0bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe07946:	8526                	mv	a0,s1
   st->ft = (float*)mem_alloc(2*N*sizeof(float));
    9fe07948:	03543423          	sd	s5,40(s0)
    9fe0794c:	42b060ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe07950:	8626                	mv	a2,s1
    9fe07952:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe07954:	8aaa                	mv	s5,a0
   memset(ptr, 0, size);
    9fe07956:	626040ef          	jal	ra,9fe0bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe0795a:	8526                	mv	a0,s1
   st->ps = (float*)mem_alloc((N+M)*sizeof(float));
    9fe0795c:	03543823          	sd	s5,48(s0)
    9fe07960:	417060ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe07964:	8626                	mv	a2,s1
    9fe07966:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe07968:	8aaa                	mv	s5,a0
   memset(ptr, 0, size);
    9fe0796a:	612040ef          	jal	ra,9fe0bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe0796e:	8526                	mv	a0,s1
   st->echo_noise = (float*)mem_alloc((N+M)*sizeof(float));
    9fe07970:	07543c23          	sd	s5,120(s0)
    9fe07974:	403060ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe07978:	8626                	mv	a2,s1
    9fe0797a:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe0797c:	8aaa                	mv	s5,a0
   memset(ptr, 0, size);
    9fe0797e:	5fe040ef          	jal	ra,9fe0bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe07982:	8526                	mv	a0,s1
   st->residual_echo = (float*)mem_alloc((N+M)*sizeof(float));
    9fe07984:	09543023          	sd	s5,128(s0)
    9fe07988:	3ef060ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe0798c:	8626                	mv	a2,s1
    9fe0798e:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe07990:	8aaa                	mv	s5,a0
   memset(ptr, 0, size);
    9fe07992:	5ea040ef          	jal	ra,9fe0bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe07996:	8526                	mv	a0,s1
   st->old_ps = (float*)mem_alloc((N+M)*sizeof(float));
    9fe07998:	05543823          	sd	s5,80(s0)
    9fe0799c:	3db060ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe079a0:	8626                	mv	a2,s1
    9fe079a2:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe079a4:	8aaa                	mv	s5,a0
   memset(ptr, 0, size);
    9fe079a6:	5d6040ef          	jal	ra,9fe0bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe079aa:	8526                	mv	a0,s1
   st->prior = (float*)mem_alloc((N+M)*sizeof(float));
    9fe079ac:	07543023          	sd	s5,96(s0)
    9fe079b0:	3c7060ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe079b4:	8626                	mv	a2,s1
    9fe079b6:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe079b8:	8aaa                	mv	s5,a0
   memset(ptr, 0, size);
    9fe079ba:	5c2040ef          	jal	ra,9fe0bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe079be:	8526                	mv	a0,s1
   st->post = (float*)mem_alloc((N+M)*sizeof(float));
    9fe079c0:	07543423          	sd	s5,104(s0)
    9fe079c4:	3b3060ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe079c8:	8626                	mv	a2,s1
    9fe079ca:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe079cc:	8aaa                	mv	s5,a0
   memset(ptr, 0, size);
    9fe079ce:	5ae040ef          	jal	ra,9fe0bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe079d2:	8526                	mv	a0,s1
   st->gain = (float*)mem_alloc((N+M)*sizeof(float));
    9fe079d4:	05543c23          	sd	s5,88(s0)
    9fe079d8:	39f060ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe079dc:	8626                	mv	a2,s1
    9fe079de:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe079e0:	8aaa                	mv	s5,a0
   memset(ptr, 0, size);
    9fe079e2:	59a040ef          	jal	ra,9fe0bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe079e6:	8526                	mv	a0,s1
   st->gain2 = (float*)mem_alloc((N+M)*sizeof(float));
    9fe079e8:	03543c23          	sd	s5,56(s0)
    9fe079ec:	38b060ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe079f0:	8626                	mv	a2,s1
    9fe079f2:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe079f4:	8aaa                	mv	s5,a0
   memset(ptr, 0, size);
    9fe079f6:	586040ef          	jal	ra,9fe0bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe079fa:	8526                	mv	a0,s1
   st->gain_floor = (float*)mem_alloc((N+M)*sizeof(float));
    9fe079fc:	05543023          	sd	s5,64(s0)
    9fe07a00:	377060ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe07a04:	8626                	mv	a2,s1
    9fe07a06:	4581                	li	a1,0
   st->zeta = (float*)mem_alloc((N+M)*sizeof(float));

   st->inbuf = (float*)mem_alloc(N3*sizeof(float));
    9fe07a08:	0029149b          	slliw	s1,s2,0x2
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe07a0c:	8aaa                	mv	s5,a0
   memset(ptr, 0, size);
    9fe07a0e:	56e040ef          	jal	ra,9fe0bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe07a12:	8526                	mv	a0,s1
   st->zeta = (float*)mem_alloc((N+M)*sizeof(float));
    9fe07a14:	07543823          	sd	s5,112(s0)
    9fe07a18:	35f060ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe07a1c:	8626                	mv	a2,s1
    9fe07a1e:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe07a20:	8aaa                	mv	s5,a0
   memset(ptr, 0, size);
    9fe07a22:	55a040ef          	jal	ra,9fe0bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe07a26:	8526                	mv	a0,s1
   st->inbuf = (float*)mem_alloc(N3*sizeof(float));
    9fe07a28:	09543823          	sd	s5,144(s0)
    9fe07a2c:	34b060ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe07a30:	4581                	li	a1,0
    9fe07a32:	8626                	mv	a2,s1
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe07a34:	84aa                	mv	s1,a0
   memset(ptr, 0, size);
    9fe07a36:	546040ef          	jal	ra,9fe0bf7c <memset>
   st->outbuf = (float*)mem_alloc(N3*sizeof(float));

   aes_conj_window(st->window, 2*N3);
    9fe07a3a:	6428                	ld	a0,72(s0)
   N3 = 2*N - st->frame_size;
    9fe07a3c:	0019199b          	slliw	s3,s2,0x1
   st->outbuf = (float*)mem_alloc(N3*sizeof(float));
    9fe07a40:	ec44                	sd	s1,152(s0)
   aes_conj_window(st->window, 2*N3);
    9fe07a42:	85ce                	mv	a1,s3
   st->inbuf = (float*)mem_alloc(N3*sizeof(float));
    9fe07a44:	0009049b          	sext.w	s1,s2
   aes_conj_window(st->window, 2*N3);
    9fe07a48:	028010ef          	jal	ra,9fe08a70 <aes_conj_window>

   for (i=0;i<N+M;i++) {
    9fe07a4c:	05405863          	blez	s4,9fe07a9c <NLP_AES_init+0x20c>
    9fe07a50:	0019069b          	addiw	a3,s2,1
    9fe07a54:	02069793          	slli	a5,a3,0x20
    9fe07a58:	01e7d693          	srli	a3,a5,0x1e
    9fe07a5c:	0691                	addi	a3,a3,4
    9fe07a5e:	4781                	li	a5,0
      st->old_ps[i] = FLOAT_ONE;
    9fe07a60:	0000a717          	auipc	a4,0xa
    9fe07a64:	7b072787          	flw	fa5,1968(a4) # 9fe12210 <__func__.1+0x58>
    9fe07a68:	6838                	ld	a4,80(s0)
    9fe07a6a:	973e                	add	a4,a4,a5
    9fe07a6c:	00f72027          	fsw	fa5,0(a4)
      st->gain[i] = FLOAT_ONE;
    9fe07a70:	6c38                	ld	a4,88(s0)
    9fe07a72:	973e                	add	a4,a4,a5
    9fe07a74:	00f72027          	fsw	fa5,0(a4)
      st->post[i] = FLOAT_ONE;
    9fe07a78:	7438                	ld	a4,104(s0)
    9fe07a7a:	973e                	add	a4,a4,a5
    9fe07a7c:	00f72027          	fsw	fa5,0(a4)
      st->prior[i] = FLOAT_ONE;
    9fe07a80:	7038                	ld	a4,96(s0)
    9fe07a82:	973e                	add	a4,a4,a5
    9fe07a84:	00f72027          	fsw	fa5,0(a4)
      st->echo_noise[i] = FLOAT_ZERO;
    9fe07a88:	7c38                	ld	a4,120(s0)
    9fe07a8a:	973e                	add	a4,a4,a5
    9fe07a8c:	00072023          	sw	zero,0(a4)
      st->zeta[0] = FLOAT_ZERO;
    9fe07a90:	7838                	ld	a4,112(s0)
   for (i=0;i<N+M;i++) {
    9fe07a92:	0791                	addi	a5,a5,4
      st->zeta[0] = FLOAT_ZERO;
    9fe07a94:	00072023          	sw	zero,0(a4)
   for (i=0;i<N+M;i++) {
    9fe07a98:	fcd798e3          	bne	a5,a3,9fe07a68 <NLP_AES_init+0x1d8>
   }

   st->echo_sup = -40;
    9fe07a9c:	57e5                	li	a5,-7
    9fe07a9e:	1786                	slli	a5,a5,0x21
    9fe07aa0:	fd878793          	addi	a5,a5,-40
    9fe07aa4:	e45c                	sd	a5,136(s0)
   st->echo_sup_active = -15;

   for (i=0;i<N3;i++) {
    9fe07aa6:	00291693          	slli	a3,s2,0x2
    9fe07aaa:	4781                	li	a5,0
    9fe07aac:	01205d63          	blez	s2,9fe07ac6 <NLP_AES_init+0x236>
      st->inbuf[i] = 0;
    9fe07ab0:	6858                	ld	a4,144(s0)
    9fe07ab2:	973e                	add	a4,a4,a5
    9fe07ab4:	00072023          	sw	zero,0(a4)
      st->outbuf[i] = 0;
    9fe07ab8:	6c58                	ld	a4,152(s0)
    9fe07aba:	973e                	add	a4,a4,a5
    9fe07abc:	00072023          	sw	zero,0(a4)
   for (i=0;i<N3;i++) {
    9fe07ac0:	0791                	addi	a5,a5,4
    9fe07ac2:	fef697e3          	bne	a3,a5,9fe07ab0 <NLP_AES_init+0x220>
   }

   st->fft_lookup = speech_fft_init(2*N);
    9fe07ac6:	854e                	mv	a0,s3
    9fe07ac8:	58e010ef          	jal	ra,9fe09056 <speech_fft_init>

   st->nb_adapt = 0;
   st->min_count = 0;

   /* STD/DTD */
   st->aes_std_in = (short*)mem_alloc(frame_size*sizeof(short));
    9fe07acc:	0014949b          	slliw	s1,s1,0x1
   st->fft_lookup = speech_fft_init(2*N);
    9fe07ad0:	f448                	sd	a0,168(s0)
   st->nb_adapt = 0;
    9fe07ad2:	0a043023          	sd	zero,160(s0)
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe07ad6:	8526                	mv	a0,s1
    9fe07ad8:	29f060ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe07adc:	8626                	mv	a2,s1
    9fe07ade:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe07ae0:	892a                	mv	s2,a0
   memset(ptr, 0, size);
    9fe07ae2:	49a040ef          	jal	ra,9fe0bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe07ae6:	8526                	mv	a0,s1
   st->aes_std_in = (short*)mem_alloc(frame_size*sizeof(short));
    9fe07ae8:	0d243023          	sd	s2,192(s0)
    9fe07aec:	28b060ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe07af0:	8626                	mv	a2,s1
    9fe07af2:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe07af4:	84aa                	mv	s1,a0
   memset(ptr, 0, size);
    9fe07af6:	486040ef          	jal	ra,9fe0bf7c <memset>
   st->mic_raw_ola = (short*)mem_alloc(frame_size*sizeof(short));
   //st->fdstd_mic_in_sm = (float*)mem_alloc(frame_size*sizeof(float));
   //st->fdstd_linear_echo_sm = (float*)mem_alloc(frame_size*sizeof(float));

   for (i=0;i < st->frame_size;i++) {
    9fe07afa:	4018                	lw	a4,0(s0)
   st->mic_raw_ola = (short*)mem_alloc(frame_size*sizeof(short));
    9fe07afc:	e464                	sd	s1,200(s0)
   for (i=0;i < st->frame_size;i++) {
    9fe07afe:	4781                	li	a5,0
    9fe07b00:	00e04463          	bgtz	a4,9fe07b08 <NLP_AES_init+0x278>
    9fe07b04:	a829                	j	9fe07b1e <NLP_AES_init+0x28e>
      st->mic_raw_ola[i] = 0;
    9fe07b06:	6464                	ld	s1,200(s0)
    9fe07b08:	00179513          	slli	a0,a5,0x1
    9fe07b0c:	94aa                	add	s1,s1,a0
    9fe07b0e:	00049023          	sh	zero,0(s1)
   for (i=0;i < st->frame_size;i++) {
    9fe07b12:	4014                	lw	a3,0(s0)
    9fe07b14:	0785                	addi	a5,a5,1
    9fe07b16:	0007871b          	sext.w	a4,a5
    9fe07b1a:	fed746e3          	blt	a4,a3,9fe07b06 <NLP_AES_init+0x276>
      //st->fdstd_mic_in_sm[i] = FLOAT_ZERO;
      //st->fdstd_linear_echo_sm[i] = FLOAT_ZERO;
   }
   st->RER_smooth = FLOAT_ZERO;
    9fe07b1e:	0a042a23          	sw	zero,180(s0)
   st->RER_vad = 0;
    9fe07b22:	0a043c23          	sd	zero,184(s0)
   st->st_vad = 0;
   st->fdstd_vad = 0;
    9fe07b26:	0c042c23          	sw	zero,216(s0)
   st->frame1_last_sample = 0;
    9fe07b2a:	0e042223          	sw	zero,228(s0)

   return st;

}
    9fe07b2e:	60e6                	ld	ra,88(sp)
    9fe07b30:	8522                	mv	a0,s0
    9fe07b32:	6446                	ld	s0,80(sp)
    9fe07b34:	64a6                	ld	s1,72(sp)
    9fe07b36:	6906                	ld	s2,64(sp)
    9fe07b38:	79e2                	ld	s3,56(sp)
    9fe07b3a:	7a42                	ld	s4,48(sp)
    9fe07b3c:	7aa2                	ld	s5,40(sp)
    9fe07b3e:	2462                	fld	fs0,24(sp)
    9fe07b40:	24c2                	fld	fs1,16(sp)
    9fe07b42:	2922                	fld	fs2,8(sp)
    9fe07b44:	2982                	fld	fs3,0(sp)
    9fe07b46:	6125                	addi	sp,sp,96
    9fe07b48:	8082                	ret

000000009fe07b4a <NLP_AES_free>:

EXPORT void NLP_AES_free(NonLinearEchoState *st)
{
    9fe07b4a:	1141                	addi	sp,sp,-16
    9fe07b4c:	e406                	sd	ra,8(sp)
    9fe07b4e:	e022                	sd	s0,0(sp)
    9fe07b50:	842a                	mv	s0,a0
   vPortFree(ptr);
    9fe07b52:	7108                	ld	a0,32(a0)
    9fe07b54:	389060ef          	jal	ra,9fe0e6dc <vPortFree>
    9fe07b58:	7408                	ld	a0,40(s0)
    9fe07b5a:	383060ef          	jal	ra,9fe0e6dc <vPortFree>
    9fe07b5e:	7808                	ld	a0,48(s0)
    9fe07b60:	37d060ef          	jal	ra,9fe0e6dc <vPortFree>
    9fe07b64:	7c08                	ld	a0,56(s0)
    9fe07b66:	377060ef          	jal	ra,9fe0e6dc <vPortFree>
    9fe07b6a:	6028                	ld	a0,64(s0)
    9fe07b6c:	371060ef          	jal	ra,9fe0e6dc <vPortFree>
    9fe07b70:	6428                	ld	a0,72(s0)
    9fe07b72:	36b060ef          	jal	ra,9fe0e6dc <vPortFree>
    9fe07b76:	6828                	ld	a0,80(s0)
    9fe07b78:	365060ef          	jal	ra,9fe0e6dc <vPortFree>
    9fe07b7c:	6c28                	ld	a0,88(s0)
    9fe07b7e:	35f060ef          	jal	ra,9fe0e6dc <vPortFree>
    9fe07b82:	7028                	ld	a0,96(s0)
    9fe07b84:	359060ef          	jal	ra,9fe0e6dc <vPortFree>
    9fe07b88:	7428                	ld	a0,104(s0)
    9fe07b8a:	353060ef          	jal	ra,9fe0e6dc <vPortFree>
    9fe07b8e:	7c28                	ld	a0,120(s0)
    9fe07b90:	34d060ef          	jal	ra,9fe0e6dc <vPortFree>
    9fe07b94:	6048                	ld	a0,128(s0)
    9fe07b96:	347060ef          	jal	ra,9fe0e6dc <vPortFree>
    9fe07b9a:	7828                	ld	a0,112(s0)
    9fe07b9c:	341060ef          	jal	ra,9fe0e6dc <vPortFree>
    9fe07ba0:	6848                	ld	a0,144(s0)
    9fe07ba2:	33b060ef          	jal	ra,9fe0e6dc <vPortFree>
    9fe07ba6:	6c48                	ld	a0,152(s0)
    9fe07ba8:	335060ef          	jal	ra,9fe0e6dc <vPortFree>
   mem_free(st->zeta);

   mem_free(st->inbuf);
   mem_free(st->outbuf);

   speech_fft_free(st->fft_lookup);
    9fe07bac:	7448                	ld	a0,168(s0)
    9fe07bae:	4d6010ef          	jal	ra,9fe09084 <speech_fft_free>
   filterbank_free(st->bank);
    9fe07bb2:	6808                	ld	a0,16(s0)
    9fe07bb4:	5bd000ef          	jal	ra,9fe08970 <filterbank_free>
    9fe07bb8:	6068                	ld	a0,192(s0)
    9fe07bba:	323060ef          	jal	ra,9fe0e6dc <vPortFree>
    9fe07bbe:	6468                	ld	a0,200(s0)
    9fe07bc0:	31d060ef          	jal	ra,9fe0e6dc <vPortFree>
    9fe07bc4:	8522                	mv	a0,s0
   //SSP_SAFE_FREE_BUF(mic_raw_std);
   SSP_SAFE_FREE_BUF(tmp1);
   SSP_SAFE_FREE_BUF(tmp2);
#endif

}
    9fe07bc6:	6402                	ld	s0,0(sp)
    9fe07bc8:	60a2                	ld	ra,8(sp)
    9fe07bca:	0141                	addi	sp,sp,16
    9fe07bcc:	3110606f          	j	9fe0e6dc <vPortFree>

000000009fe07bd0 <std_residual_echo>:

void std_residual_echo(NonLinearEchoState *st, float *residual_echo, int len, boolean_T speech_vad)
{
    9fe07bd0:	81010113          	addi	sp,sp,-2032
    9fe07bd4:	7e813023          	sd	s0,2016(sp)
    9fe07bd8:	7c913c23          	sd	s1,2008(sp)
    9fe07bdc:	7d313423          	sd	s3,1992(sp)
    9fe07be0:	7e113423          	sd	ra,2024(sp)
    9fe07be4:	7d213823          	sd	s2,2000(sp)
    9fe07be8:	7d413023          	sd	s4,1984(sp)
    9fe07bec:	7b513c23          	sd	s5,1976(sp)
    9fe07bf0:	7b613823          	sd	s6,1968(sp)
    9fe07bf4:	7b713423          	sd	s7,1960(sp)
    9fe07bf8:	7b813023          	sd	s8,1952(sp)
    9fe07bfc:	79913c23          	sd	s9,1944(sp)
    9fe07c00:	78813427          	fsd	fs0,1928(sp)
    9fe07c04:	78913027          	fsd	fs1,1920(sp)
   int i;
   float leak2;
   int N;
   //float rer_coef;

   N = st->echo_state->window_size;
    9fe07c08:	6d18                	ld	a4,24(a0)
{
    9fe07c0a:	d7010113          	addi	sp,sp,-656
    9fe07c0e:	842a                	mv	s0,a0
   N = st->echo_state->window_size;
    9fe07c10:	00472903          	lw	s2,4(a4)
{
    9fe07c14:	84ae                	mv	s1,a1
    9fe07c16:	89b6                	mv	s3,a3
	len = len;
   /* Apply hanning window (should pre-compute it) */
   for (i=0;i<N;i++)
    9fe07c18:	03205c63          	blez	s2,9fe07c50 <std_residual_echo+0x80>
    9fe07c1c:	fff9059b          	addiw	a1,s2,-1
    9fe07c20:	02059793          	slli	a5,a1,0x20
    9fe07c24:	01e7d593          	srli	a1,a5,0x1e
    9fe07c28:	4781                	li	a5,0
    9fe07c2a:	a011                	j	9fe07c2e <std_residual_echo+0x5e>
    9fe07c2c:	0791                	addi	a5,a5,4
      st->echo_state->y[i] = st->echo_state->window[i] * st->echo_state->last_y[i];
    9fe07c2e:	7770                	ld	a2,232(a4)
    9fe07c30:	7334                	ld	a3,96(a4)
    9fe07c32:	6f38                	ld	a4,88(a4)
    9fe07c34:	963e                	add	a2,a2,a5
    9fe07c36:	96be                	add	a3,a3,a5
    9fe07c38:	00062787          	flw	fa5,0(a2)
    9fe07c3c:	0006a707          	flw	fa4,0(a3)
    9fe07c40:	973e                	add	a4,a4,a5
    9fe07c42:	10e7f7d3          	fmul.s	fa5,fa5,fa4
    9fe07c46:	00f72027          	fsw	fa5,0(a4)
    9fe07c4a:	6c18                	ld	a4,24(s0)
   for (i=0;i<N;i++)
    9fe07c4c:	fef590e3          	bne	a1,a5,9fe07c2c <std_residual_echo+0x5c>

   /* Compute power spectrum of the linear echo in each bin */
   speech_fft(st->echo_state->fft_table, st->echo_state->y, st->echo_state->Y);
    9fe07c50:	7730                	ld	a2,104(a4)
    9fe07c52:	6f2c                	ld	a1,88(a4)
    9fe07c54:	7f68                	ld	a0,248(a4)
    9fe07c56:	446010ef          	jal	ra,9fe0909c <speech_fft>
   bin_power_spectrum(st->echo_state->Y, residual_echo, N);  /* powe-based linear echo */
    9fe07c5a:	6c1c                	ld	a5,24(s0)
    9fe07c5c:	864a                	mv	a2,s2
    9fe07c5e:	85a6                	mv	a1,s1
    9fe07c60:	77a8                	ld	a0,104(a5)
    9fe07c62:	eaefe0ef          	jal	ra,9fe06310 <bin_power_spectrum>

   //rer_coef = 0.75f;
   //st->RER_smooth = rer_coef*st->RER_smooth + (FLOAT_ONE-rer_coef)*st->echo_state->RER;  /* not better */
   //if (st->RER_smooth*32767 > 2000)
   if (st->echo_state->RER*32767 > 3000)
    9fe07c66:	6c08                	ld	a0,24(s0)
    9fe07c68:	0000a797          	auipc	a5,0xa
    9fe07c6c:	5c47a687          	flw	fa3,1476(a5) # 9fe1222c <__func__.1+0x74>
    9fe07c70:	0000a797          	auipc	a5,0xa
    9fe07c74:	70c7a707          	flw	fa4,1804(a5) # 9fe1237c <__func__.1+0x1c4>
    9fe07c78:	14452787          	flw	fa5,324(a0)
      float tmp1[320], tmp2[320];
#endif
      float fdstd_tau, fdstd_tau_sum;
      int start_f, end_f;
   
      for (i=0;i < st->frame_size;i++) {
    9fe07c7c:	401c                	lw	a5,0(s0)
   if (st->echo_state->RER*32767 > 3000)
    9fe07c7e:	10d7f7d3          	fmul.s	fa5,fa5,fa3
    9fe07c82:	a0f71753          	flt.s	a4,fa4,fa5
    9fe07c86:	0ae42c23          	sw	a4,184(s0)
      for (i=0;i < st->frame_size;i++) {
    9fe07c8a:	06f05363          	blez	a5,9fe07cf0 <std_residual_echo+0x120>
    9fe07c8e:	6605                	lui	a2,0x1
    9fe07c90:	a0060713          	addi	a4,a2,-1536 # a00 <_EL1_STACK_SIZE+0x200>
    9fe07c94:	0808                	addi	a0,sp,16
        tmp1[i] = st->mic_raw_ola[i];  /* previous frame */
        tmp1[i+st->frame_size] = st->aes_std_in[i];  /* current frame */
    9fe07c96:	a0060613          	addi	a2,a2,-1536
    9fe07c9a:	76fd                	lui	a3,0xfffff
    9fe07c9c:	962a                	add	a2,a2,a0
    9fe07c9e:	60068593          	addi	a1,a3,1536 # fffffffffffff600 <_end+0xffffffff6013f900>
    9fe07ca2:	972a                	add	a4,a4,a0
    9fe07ca4:	96b2                	add	a3,a3,a2
    9fe07ca6:	95ba                	add	a1,a1,a4
    9fe07ca8:	e436                	sd	a3,8(sp)
      for (i=0;i < st->frame_size;i++) {
    9fe07caa:	4701                	li	a4,0
        tmp1[i] = st->mic_raw_ola[i];  /* previous frame */
    9fe07cac:	6470                	ld	a2,200(s0)
    9fe07cae:	00171513          	slli	a0,a4,0x1
        tmp1[i+st->frame_size] = st->aes_std_in[i];  /* current frame */
    9fe07cb2:	6074                	ld	a3,192(s0)
        tmp1[i] = st->mic_raw_ola[i];  /* previous frame */
    9fe07cb4:	962a                	add	a2,a2,a0
    9fe07cb6:	00061803          	lh	a6,0(a2)
        tmp1[i+st->frame_size] = st->aes_std_in[i];  /* current frame */
    9fe07cba:	96aa                	add	a3,a3,a0
    9fe07cbc:	6522                	ld	a0,8(sp)
        tmp1[i] = st->mic_raw_ola[i];  /* previous frame */
    9fe07cbe:	d00877d3          	fcvt.s.w	fa5,a6
        tmp1[i+st->frame_size] = st->aes_std_in[i];  /* current frame */
    9fe07cc2:	9fb9                	addw	a5,a5,a4
    9fe07cc4:	078a                	slli	a5,a5,0x2
        tmp1[i] = st->mic_raw_ola[i];  /* previous frame */
    9fe07cc6:	00f5a027          	fsw	fa5,0(a1)
        tmp1[i+st->frame_size] = st->aes_std_in[i];  /* current frame */
    9fe07cca:	00069803          	lh	a6,0(a3)
    9fe07cce:	97aa                	add	a5,a5,a0
      for (i=0;i < st->frame_size;i++) {
    9fe07cd0:	0705                	addi	a4,a4,1
        tmp1[i+st->frame_size] = st->aes_std_in[i];  /* current frame */
    9fe07cd2:	d00877d3          	fcvt.s.w	fa5,a6
      for (i=0;i < st->frame_size;i++) {
    9fe07cd6:	0007051b          	sext.w	a0,a4
    9fe07cda:	0591                	addi	a1,a1,4
        tmp1[i+st->frame_size] = st->aes_std_in[i];  /* current frame */
    9fe07cdc:	60f7a027          	fsw	fa5,1536(a5)
        st->mic_raw_ola[i] = st->aes_std_in[i];    /* update input overlap data */
    9fe07ce0:	00069783          	lh	a5,0(a3)
    9fe07ce4:	00f61023          	sh	a5,0(a2)
      for (i=0;i < st->frame_size;i++) {
    9fe07ce8:	401c                	lw	a5,0(s0)
    9fe07cea:	fcf541e3          	blt	a0,a5,9fe07cac <std_residual_echo+0xdc>
      }

      for (i=0;i<N;i++)
        tmp1[i] = st->echo_state->window[i] * tmp1[i];
      speech_fft(st->echo_state->fft_table, tmp1, tmp2);
    9fe07cee:	6c08                	ld	a0,24(s0)
      for (i=0;i<N;i++)
    9fe07cf0:	05205563          	blez	s2,9fe07d3a <std_residual_echo+0x16a>
    9fe07cf4:	6785                	lui	a5,0x1
    9fe07cf6:	0818                	addi	a4,sp,16
    9fe07cf8:	76fd                	lui	a3,0xfffff
    9fe07cfa:	a0078793          	addi	a5,a5,-1536 # a00 <_EL1_STACK_SIZE+0x200>
    9fe07cfe:	97ba                	add	a5,a5,a4
    9fe07d00:	fff9059b          	addiw	a1,s2,-1
    9fe07d04:	60068693          	addi	a3,a3,1536 # fffffffffffff600 <_end+0xffffffff6013f900>
    9fe07d08:	96be                	add	a3,a3,a5
    9fe07d0a:	02059793          	slli	a5,a1,0x20
    9fe07d0e:	01e7d593          	srli	a1,a5,0x1e
    9fe07d12:	00468713          	addi	a4,a3,4
    9fe07d16:	95ba                	add	a1,a1,a4
    9fe07d18:	4601                	li	a2,0
    9fe07d1a:	a011                	j	9fe07d1e <std_residual_echo+0x14e>
    9fe07d1c:	0711                	addi	a4,a4,4
        tmp1[i] = st->echo_state->window[i] * tmp1[i];
    9fe07d1e:	757c                	ld	a5,232(a0)
    9fe07d20:	0006a787          	flw	fa5,0(a3)
    9fe07d24:	97b2                	add	a5,a5,a2
    9fe07d26:	0007a707          	flw	fa4,0(a5)
      for (i=0;i<N;i++)
    9fe07d2a:	0611                	addi	a2,a2,4
        tmp1[i] = st->echo_state->window[i] * tmp1[i];
    9fe07d2c:	10e7f7d3          	fmul.s	fa5,fa5,fa4
    9fe07d30:	00f6a027          	fsw	fa5,0(a3)
      for (i=0;i<N;i++)
    9fe07d34:	86ba                	mv	a3,a4
    9fe07d36:	fee593e3          	bne	a1,a4,9fe07d1c <std_residual_echo+0x14c>
      speech_fft(st->echo_state->fft_table, tmp1, tmp2);
    9fe07d3a:	6785                	lui	a5,0x1
    9fe07d3c:	0818                	addi	a4,sp,16
    9fe07d3e:	7a7d                	lui	s4,0xfffff
    9fe07d40:	a0078793          	addi	a5,a5,-1536 # a00 <_EL1_STACK_SIZE+0x200>
    9fe07d44:	97ba                	add	a5,a5,a4
    9fe07d46:	7d68                	ld	a0,248(a0)
    9fe07d48:	600a0a13          	addi	s4,s4,1536 # fffffffffffff600 <_end+0xffffffff6013f900>
    9fe07d4c:	9a3e                	add	s4,s4,a5
    9fe07d4e:	51010613          	addi	a2,sp,1296
    9fe07d52:	85d2                	mv	a1,s4
    9fe07d54:	348010ef          	jal	ra,9fe0909c <speech_fft>
      bin_power_spectrum(tmp2, tmp1, N);
    9fe07d58:	864a                	mv	a2,s2
    9fe07d5a:	85d2                	mv	a1,s4
    9fe07d5c:	51010513          	addi	a0,sp,1296
    9fe07d60:	db0fe0ef          	jal	ra,9fe06310 <bin_power_spectrum>

      fdstd_tau_sum = FLOAT_ZERO;
      start_f = (int)(ceil(100 * N / st->sampling_rate));
    9fe07d64:	06400793          	li	a5,100
    9fe07d68:	032787bb          	mulw	a5,a5,s2
    9fe07d6c:	4418                	lw	a4,8(s0)
      fdstd_tau_sum = FLOAT_ZERO;
    9fe07d6e:	f0000453          	fmv.w.x	fs0,zero
      start_f = (int)(ceil(100 * N / st->sampling_rate));
    9fe07d72:	02e7c7bb          	divw	a5,a5,a4
    9fe07d76:	d2078553          	fcvt.d.w	fa0,a5
    9fe07d7a:	a21f80ef          	jal	ra,9fe0079a <ceil>
      end_f = (int)(floor(3800 * N / st->sampling_rate));
    9fe07d7e:	6785                	lui	a5,0x1
    9fe07d80:	ed87879b          	addiw	a5,a5,-296
    9fe07d84:	02f9093b          	mulw	s2,s2,a5
    9fe07d88:	441c                	lw	a5,8(s0)
      start_f = (int)(ceil(100 * N / st->sampling_rate));
    9fe07d8a:	c2051bd3          	fcvt.w.d	s7,fa0,rtz
    9fe07d8e:	000b8c1b          	sext.w	s8,s7
      end_f = (int)(floor(3800 * N / st->sampling_rate));
    9fe07d92:	02f9493b          	divw	s2,s2,a5
    9fe07d96:	d2090553          	fcvt.d.w	fa0,s2
    9fe07d9a:	bc9f80ef          	jal	ra,9fe00962 <floor>
    9fe07d9e:	c2051b53          	fcvt.w.d	s6,fa0,rtz
    9fe07da2:	000b0a9b          	sext.w	s5,s6
      for (i = start_f; i <= end_f; i++) {
    9fe07da6:	058ac063          	blt	s5,s8,9fe07de6 <std_residual_echo+0x216>
    9fe07daa:	002c1913          	slli	s2,s8,0x2
    9fe07dae:	01248cb3          	add	s9,s1,s2
    9fe07db2:	0000a797          	auipc	a5,0xa
    9fe07db6:	5ce7a487          	flw	fs1,1486(a5) # 9fe12380 <__func__.1+0x1c8>
    9fe07dba:	9952                	add	s2,s2,s4
        fdstd_tau = (float)sqrt(residual_echo[i]/(tmp1[i] + 0.000000000465f));  /* add small DC to avoid zero denominator */
    9fe07dbc:	00092787          	flw	fa5,0(s2)
    9fe07dc0:	000ca507          	flw	fa0,0(s9)
      for (i = start_f; i <= end_f; i++) {
    9fe07dc4:	2c05                	addiw	s8,s8,1
        fdstd_tau = (float)sqrt(residual_echo[i]/(tmp1[i] + 0.000000000465f));  /* add small DC to avoid zero denominator */
    9fe07dc6:	0097f7d3          	fadd.s	fa5,fa5,fs1
      for (i = start_f; i <= end_f; i++) {
    9fe07dca:	0c91                	addi	s9,s9,4
    9fe07dcc:	0911                	addi	s2,s2,4
        fdstd_tau = (float)sqrt(residual_echo[i]/(tmp1[i] + 0.000000000465f));  /* add small DC to avoid zero denominator */
    9fe07dce:	18f57553          	fdiv.s	fa0,fa0,fa5
    9fe07dd2:	42050553          	fcvt.d.s	fa0,fa0
    9fe07dd6:	81cf90ef          	jal	ra,9fe00df2 <sqrt>
    9fe07dda:	40157553          	fcvt.s.d	fa0,fa0
        fdstd_tau_sum += fdstd_tau;
    9fe07dde:	00a47453          	fadd.s	fs0,fs0,fa0
      for (i = start_f; i <= end_f; i++) {
    9fe07de2:	fd8adde3          	bge	s5,s8,9fe07dbc <std_residual_echo+0x1ec>
      }

      if (fdstd_tau_sum > (float)(end_f - start_f + 1))  /* fix abnormal situation */
    9fe07de6:	417b0b3b          	subw	s6,s6,s7
    9fe07dea:	2b05                	addiw	s6,s6,1
    9fe07dec:	d00b77d3          	fcvt.s.w	fa5,s6
    9fe07df0:	a08797d3          	flt.s	a5,fa5,fs0
    9fe07df4:	c399                	beqz	a5,9fe07dfa <std_residual_echo+0x22a>
        fdstd_tau_sum = (float)(end_f - start_f + 1);
    9fe07df6:	20f78453          	fmv.s	fs0,fa5

      st->fdstd_tau_mean = fdstd_tau_sum/(end_f - start_f + 1);  /* frame-based */
    9fe07dfa:	18f47453          	fdiv.s	fs0,fs0,fa5
      if (st->fdstd_tau_mean > st->fdstd_thrd)
    9fe07dfe:	0d442787          	flw	fa5,212(s0)
        st->fdstd_vad = 1;
      else
        st->fdstd_vad = 0;

      if ((st->RER_vad) && (st->fdstd_vad))
    9fe07e02:	0b842783          	lw	a5,184(s0)
      if (st->fdstd_tau_mean > st->fdstd_thrd)
    9fe07e06:	a0879753          	flt.s	a4,fa5,fs0
      st->fdstd_tau_mean = fdstd_tau_sum/(end_f - start_f + 1);  /* frame-based */
    9fe07e0a:	0c842827          	fsw	fs0,208(s0)
      if (st->fdstd_tau_mean > st->fdstd_thrd)
    9fe07e0e:	0ce42c23          	sw	a4,216(s0)
      if ((st->RER_vad) && (st->fdstd_vad))
    9fe07e12:	cbd1                	beqz	a5,9fe07ea6 <std_residual_echo+0x2d6>
    9fe07e14:	c379                	beqz	a4,9fe07eda <std_residual_echo+0x30a>
        st->st_vad = 0;

   }

   if (st->st_vad) {
         if (st->echo_state->leak_estimate > .5)  /* the bigger the value, the more abrupt the signal */
    9fe07e16:	6c1c                	ld	a5,24(s0)
        st->st_vad = 1;
    9fe07e18:	4705                	li	a4,1
    9fe07e1a:	0ae42e23          	sw	a4,188(s0)
         if (st->echo_state->leak_estimate > .5)  /* the bigger the value, the more abrupt the signal */
    9fe07e1e:	0307a707          	flw	fa4,48(a5)
    9fe07e22:	0000a797          	auipc	a5,0xa
    9fe07e26:	40e7a787          	flw	fa5,1038(a5) # 9fe12230 <__func__.1+0x78>
    9fe07e2a:	a0e797d3          	flt.s	a5,fa5,fa4
    9fe07e2e:	c3cd                	beqz	a5,9fe07ed0 <std_residual_echo+0x300>
            leak2 = st->aes_supp_coef1;
    9fe07e30:	0dc42707          	flw	fa4,220(s0)
           else
              leak2 = 2.0f * st->echo_state->leak_estimate;
         }
   }

   for (i=0;i<=st->frame_size;i++) {
    9fe07e34:	4018                	lw	a4,0(s0)
    9fe07e36:	4781                	li	a5,0
    9fe07e38:	02074863          	bltz	a4,9fe07e68 <std_residual_echo+0x298>
      if (st->st_vad)
         residual_echo[i] = leak2 * residual_echo[i];
    9fe07e3c:	0004a787          	flw	fa5,0(s1)
      if (st->st_vad)
    9fe07e40:	0bc42703          	lw	a4,188(s0)
         residual_echo[i] = leak2 * residual_echo[i];
    9fe07e44:	10f777d3          	fmul.s	fa5,fa4,fa5
      if (st->st_vad)
    9fe07e48:	eb09                	bnez	a4,9fe07e5a <std_residual_echo+0x28a>
      else
         residual_echo[i] = (short)(leak2 * residual_echo[i]);
    9fe07e4a:	c0079753          	fcvt.w.s	a4,fa5,rtz
    9fe07e4e:	0107171b          	slliw	a4,a4,0x10
    9fe07e52:	4107571b          	sraiw	a4,a4,0x10
    9fe07e56:	d00777d3          	fcvt.s.w	fa5,a4
    9fe07e5a:	00f4a027          	fsw	fa5,0(s1)
   for (i=0;i<=st->frame_size;i++) {
    9fe07e5e:	4018                	lw	a4,0(s0)
    9fe07e60:	2785                	addiw	a5,a5,1
    9fe07e62:	0491                	addi	s1,s1,4
    9fe07e64:	fcf75ce3          	bge	a4,a5,9fe07e3c <std_residual_echo+0x26c>
   }

}
    9fe07e68:	29010113          	addi	sp,sp,656
    9fe07e6c:	7e813083          	ld	ra,2024(sp)
    9fe07e70:	7e013403          	ld	s0,2016(sp)
    9fe07e74:	7d813483          	ld	s1,2008(sp)
    9fe07e78:	7d013903          	ld	s2,2000(sp)
    9fe07e7c:	7c813983          	ld	s3,1992(sp)
    9fe07e80:	7c013a03          	ld	s4,1984(sp)
    9fe07e84:	7b813a83          	ld	s5,1976(sp)
    9fe07e88:	7b013b03          	ld	s6,1968(sp)
    9fe07e8c:	7a813b83          	ld	s7,1960(sp)
    9fe07e90:	7a013c03          	ld	s8,1952(sp)
    9fe07e94:	79813c83          	ld	s9,1944(sp)
    9fe07e98:	78813407          	fld	fs0,1928(sp)
    9fe07e9c:	78013487          	fld	fs1,1920(sp)
    9fe07ea0:	7f010113          	addi	sp,sp,2032
    9fe07ea4:	8082                	ret
        st->st_vad = 0;
    9fe07ea6:	0a042e23          	sw	zero,188(s0)
           leak2 = 0.0f;  /* keep clean speech signal not to be attenuated */
    9fe07eaa:	f0000753          	fmv.w.x	fa4,zero
         if (!(st->RER_vad) && (speech_vad)) { 
    9fe07eae:	f80993e3          	bnez	s3,9fe07e34 <std_residual_echo+0x264>
           if (st->echo_state->leak_estimate > .5)
    9fe07eb2:	6c1c                	ld	a5,24(s0)
    9fe07eb4:	0000a717          	auipc	a4,0xa
    9fe07eb8:	37c72787          	flw	fa5,892(a4) # 9fe12230 <__func__.1+0x78>
    9fe07ebc:	0307a707          	flw	fa4,48(a5)
    9fe07ec0:	a0e797d3          	flt.s	a5,fa5,fa4
    9fe07ec4:	c79d                	beqz	a5,9fe07ef2 <std_residual_echo+0x322>
              leak2 = 1.0f;
    9fe07ec6:	0000a797          	auipc	a5,0xa
    9fe07eca:	34a7a707          	flw	fa4,842(a5) # 9fe12210 <__func__.1+0x58>
    9fe07ece:	b79d                	j	9fe07e34 <std_residual_echo+0x264>
            leak2 = st->aes_supp_coef2 * st->echo_state->leak_estimate;
    9fe07ed0:	0e042787          	flw	fa5,224(s0)
    9fe07ed4:	10f77753          	fmul.s	fa4,fa4,fa5
    9fe07ed8:	bfb1                	j	9fe07e34 <std_residual_echo+0x264>
           if (st->echo_state->leak_estimate > .5)
    9fe07eda:	6c1c                	ld	a5,24(s0)
        st->st_vad = 0;
    9fe07edc:	0a042e23          	sw	zero,188(s0)
           if (st->echo_state->leak_estimate > .5)
    9fe07ee0:	0000a717          	auipc	a4,0xa
    9fe07ee4:	35072787          	flw	fa5,848(a4) # 9fe12230 <__func__.1+0x78>
    9fe07ee8:	0307a707          	flw	fa4,48(a5)
    9fe07eec:	a0e797d3          	flt.s	a5,fa5,fa4
    9fe07ef0:	fbf9                	bnez	a5,9fe07ec6 <std_residual_echo+0x2f6>
              leak2 = 2.0f * st->echo_state->leak_estimate;
    9fe07ef2:	00e77753          	fadd.s	fa4,fa4,fa4
    9fe07ef6:	bf3d                	j	9fe07e34 <std_residual_echo+0x264>

000000009fe07ef8 <NLP_AES>:

EXPORT void NLP_AES(NonLinearEchoState *aes_state, short *y, float aes_frame, boolean_T speech_vad)
{
    9fe07ef8:	ce010113          	addi	sp,sp,-800
    9fe07efc:	30813823          	sd	s0,784(sp)
    9fe07f00:	31213023          	sd	s2,768(sp)
    9fe07f04:	2d713c23          	sd	s7,728(sp)
    9fe07f08:	2d813823          	sd	s8,720(sp)
    9fe07f0c:	2b213427          	fsd	fs2,680(sp)
    9fe07f10:	30113c23          	sd	ra,792(sp)
    9fe07f14:	30913423          	sd	s1,776(sp)
    9fe07f18:	2f313c23          	sd	s3,760(sp)
    9fe07f1c:	2f413823          	sd	s4,752(sp)
    9fe07f20:	2f513423          	sd	s5,744(sp)
    9fe07f24:	2f613023          	sd	s6,736(sp)
    9fe07f28:	2d913423          	sd	s9,712(sp)
    9fe07f2c:	2da13023          	sd	s10,704(sp)
    9fe07f30:	2a813c27          	fsd	fs0,696(sp)
    9fe07f34:	2a913827          	fsd	fs1,688(sp)
    9fe07f38:	2b313027          	fsd	fs3,672(sp)
    9fe07f3c:	29413c27          	fsd	fs4,664(sp)
    9fe07f40:	29513827          	fsd	fs5,656(sp)
    9fe07f44:	29613427          	fsd	fs6,648(sp)
    9fe07f48:	29713027          	fsd	fs7,640(sp)
   NonLinearEchoState *st;
   float alpha, alpha2;
   float y_tmp[160];

   st = aes_state;
   N = st->ps_size;
    9fe07f4c:	00452b03          	lw	s6,4(a0)
   N3 = 2*N - st->frame_size;
    9fe07f50:	00052a83          	lw	s5,0(a0)
   ps = st->ps;

   st->nb_adapt++;
    9fe07f54:	0a052703          	lw	a4,160(a0)
   N3 = 2*N - st->frame_size;
    9fe07f58:	001b1c1b          	slliw	s8,s6,0x1
   if (st->nb_adapt>20000)
    9fe07f5c:	6795                	lui	a5,0x5
{
    9fe07f5e:	842a                	mv	s0,a0
   N3 = 2*N - st->frame_size;
    9fe07f60:	415c0bbb          	subw	s7,s8,s5
   st->nb_adapt++;
    9fe07f64:	0017051b          	addiw	a0,a4,1
   if (st->nb_adapt>20000)
    9fe07f68:	e2078793          	addi	a5,a5,-480 # 4e20 <_EL1_STACK_SIZE+0x4620>
{
    9fe07f6c:	20a50953          	fmv.s	fs2,fa0
   ps = st->ps;
    9fe07f70:	03043a03          	ld	s4,48(s0)
   N3 = 2*N - st->frame_size;
    9fe07f74:	8ade                	mv	s5,s7
{
    9fe07f76:	892e                	mv	s2,a1
    9fe07f78:	86b2                	mv	a3,a2
   if (st->nb_adapt>20000)
    9fe07f7a:	50a7c263          	blt	a5,a0,9fe0847e <NLP_AES+0x586>
      st->nb_adapt = 20000;
   st->min_count++;
    9fe07f7e:	0a442783          	lw	a5,164(s0)

   beta = MAX(.03f, (float)(FLOAT_ONE / st->nb_adapt));
   beta_1 = FLOAT_ONE - beta;
   beta_1 = beta_1;
   M = st->nbands;
    9fe07f82:	0b042483          	lw	s1,176(s0)

   /* Deal with residual echo if provided */
   if (st->echo_state) {
    9fe07f86:	6c18                	ld	a4,24(s0)
   st->min_count++;
    9fe07f88:	2785                	addiw	a5,a5,1
   st->nb_adapt++;
    9fe07f8a:	0aa42023          	sw	a0,160(s0)
   st->min_count++;
    9fe07f8e:	0af42223          	sw	a5,164(s0)

      for (i=0;i<N;i++)
         st->echo_noise[i] = MAX(.6f * st->echo_noise[i], st->residual_echo[i]);  /* power-based */
      filterbank_linear2sb(st->bank, st->echo_noise, st->echo_noise+N);
   } else {
      for (i=0;i<N+M;i++)
    9fe07f92:	009b0d3b          	addw	s10,s6,s1
      filterbank_linear2sb(st->bank, st->echo_noise, st->echo_noise+N);
    9fe07f96:	002b1993          	slli	s3,s6,0x2
   if (st->echo_state) {
    9fe07f9a:	50070263          	beqz	a4,9fe0849e <NLP_AES+0x5a6>
      std_residual_echo(st, st->residual_echo, N, speech_vad);
    9fe07f9e:	604c                	ld	a1,128(s0)
    9fe07fa0:	865a                	mv	a2,s6
    9fe07fa2:	8522                	mv	a0,s0
    9fe07fa4:	c2dff0ef          	jal	ra,9fe07bd0 <std_residual_echo>
      if (!(st->residual_echo[0] >=0 && st->residual_echo[0]<N*1e9f)) {
    9fe07fa8:	605c                	ld	a5,128(s0)
    9fe07faa:	f00007d3          	fmv.w.x	fa5,zero
    9fe07fae:	0007a707          	flw	fa4,0(a5)
    9fe07fb2:	a0e78753          	fle.s	a4,fa5,fa4
    9fe07fb6:	cf09                	beqz	a4,9fe07fd0 <NLP_AES+0xd8>
    9fe07fb8:	d00b77d3          	fcvt.s.w	fa5,s6
    9fe07fbc:	0000a717          	auipc	a4,0xa
    9fe07fc0:	3d072687          	flw	fa3,976(a4) # 9fe1238c <__func__.1+0x1d4>
    9fe07fc4:	10d7f7d3          	fmul.s	fa5,fa5,fa3
    9fe07fc8:	a0f71753          	flt.s	a4,fa4,fa5
    9fe07fcc:	76071e63          	bnez	a4,9fe08748 <NLP_AES+0x850>
         for (i=0;i<N;i++)
    9fe07fd0:	fffb0c9b          	addiw	s9,s6,-1
    9fe07fd4:	020c9713          	slli	a4,s9,0x20
    9fe07fd8:	01e75693          	srli	a3,a4,0x1e
    9fe07fdc:	4701                	li	a4,0
    9fe07fde:	01604463          	bgtz	s6,9fe07fe6 <NLP_AES+0xee>
    9fe07fe2:	a0b1                	j	9fe0802e <NLP_AES+0x136>
    9fe07fe4:	0711                	addi	a4,a4,4
            st->residual_echo[i] = 0;
    9fe07fe6:	97ba                	add	a5,a5,a4
    9fe07fe8:	0007a023          	sw	zero,0(a5)
    9fe07fec:	605c                	ld	a5,128(s0)
         for (i=0;i<N;i++)
    9fe07fee:	fee69be3          	bne	a3,a4,9fe07fe4 <NLP_AES+0xec>
         st->echo_noise[i] = MAX(.6f * st->echo_noise[i], st->residual_echo[i]);  /* power-based */
    9fe07ff2:	0007a707          	flw	fa4,0(a5)
         for (i=0;i<N;i++)
    9fe07ff6:	4701                	li	a4,0
    9fe07ff8:	4681                	li	a3,0
    9fe07ffa:	0000a797          	auipc	a5,0xa
    9fe07ffe:	27e7a687          	flw	fa3,638(a5) # 9fe12278 <__func__.1+0xc0>
    9fe08002:	a029                	j	9fe0800c <NLP_AES+0x114>
         st->echo_noise[i] = MAX(.6f * st->echo_noise[i], st->residual_echo[i]);  /* power-based */
    9fe08004:	605c                	ld	a5,128(s0)
    9fe08006:	97ba                	add	a5,a5,a4
    9fe08008:	0007a707          	flw	fa4,0(a5)
    9fe0800c:	7c3c                	ld	a5,120(s0)
      for (i=0;i<N;i++)
    9fe0800e:	2685                	addiw	a3,a3,1
         st->echo_noise[i] = MAX(.6f * st->echo_noise[i], st->residual_echo[i]);  /* power-based */
    9fe08010:	97ba                	add	a5,a5,a4
    9fe08012:	0007a787          	flw	fa5,0(a5)
      for (i=0;i<N;i++)
    9fe08016:	0711                	addi	a4,a4,4
         st->echo_noise[i] = MAX(.6f * st->echo_noise[i], st->residual_echo[i]);  /* power-based */
    9fe08018:	10d7f7d3          	fmul.s	fa5,fa5,fa3
    9fe0801c:	a0e79653          	flt.s	a2,fa5,fa4
    9fe08020:	e219                	bnez	a2,9fe08026 <NLP_AES+0x12e>
    9fe08022:	20f78753          	fmv.s	fa4,fa5
    9fe08026:	00e7a027          	fsw	fa4,0(a5)
      for (i=0;i<N;i++)
    9fe0802a:	fd66cde3          	blt	a3,s6,9fe08004 <NLP_AES+0x10c>
      filterbank_linear2sb(st->bank, st->echo_noise, st->echo_noise+N);
    9fe0802e:	7c2c                	ld	a1,120(s0)
    9fe08030:	6808                	ld	a0,16(s0)
    9fe08032:	01358633          	add	a2,a1,s3
    9fe08036:	167000ef          	jal	ra,9fe0899c <filterbank_linear2sb>
         st->echo_noise[i] = 0;
   }

   aes_analysis(st, y);
    9fe0803a:	85ca                	mv	a1,s2
    9fe0803c:	8522                	mv	a0,s0
    9fe0803e:	4e1000ef          	jal	ra,9fe08d1e <aes_analysis>

   /* Special case for first frame */
   if (st->nb_adapt==1)
    9fe08042:	0a042703          	lw	a4,160(s0)
    9fe08046:	4785                	li	a5,1
    9fe08048:	48f70263          	beq	a4,a5,9fe084cc <NLP_AES+0x5d4>
      for (i=0;i<N+M;i++)
         st->old_ps[i] = ps[i];

   for (i=0;i<N+M;i++) {
    9fe0804c:	71a05363          	blez	s10,9fe08752 <NLP_AES+0x85a>

      /* Update gamma */
      gamma = .1f + .89f * SQR(st->old_ps[i] / (st->old_ps[i] + tot_noise));

      /* Priori SNR */
      st->prior[i] = gamma * MAX(0, st->post[i]) + (FLOAT_ONE-gamma) * (st->old_ps[i] / tot_noise);
    9fe08050:	f0000053          	fmv.w.x	ft0,zero
    9fe08054:	86d2                	mv	a3,s4
      for (i=0;i<N+M;i++)
    9fe08056:	4701                	li	a4,0
    9fe08058:	0000a797          	auipc	a5,0xa
    9fe0805c:	1b87a407          	flw	fs0,440(a5) # 9fe12210 <__func__.1+0x58>
    9fe08060:	0000a797          	auipc	a5,0xa
    9fe08064:	3247a607          	flw	fa2,804(a5) # 9fe12384 <__func__.1+0x1cc>
    9fe08068:	0000a797          	auipc	a5,0xa
    9fe0806c:	3287a507          	flw	fa0,808(a5) # 9fe12390 <__func__.1+0x1d8>
    9fe08070:	0000a797          	auipc	a5,0xa
    9fe08074:	2787aa87          	flw	fs5,632(a5) # 9fe122e8 <__func__.1+0x130>
      float tot_noise = 1.f + st->echo_noise[i];
    9fe08078:	7c30                	ld	a2,120(s0)
    9fe0807a:	00271793          	slli	a5,a4,0x2
      st->post[i] = ps[i] / tot_noise - 1.f;
    9fe0807e:	0006a787          	flw	fa5,0(a3)
      float tot_noise = 1.f + st->echo_noise[i];
    9fe08082:	963e                	add	a2,a2,a5
    9fe08084:	00062707          	flw	fa4,0(a2)
      st->post[i] = ps[i] / tot_noise - 1.f;
    9fe08088:	742c                	ld	a1,104(s0)
   for (i=0;i<N+M;i++) {
    9fe0808a:	0705                	addi	a4,a4,1
      float tot_noise = 1.f + st->echo_noise[i];
    9fe0808c:	00877753          	fadd.s	fa4,fa4,fs0
      st->post[i] = ps[i] / tot_noise - 1.f;
    9fe08090:	95be                	add	a1,a1,a5
   for (i=0;i<N+M;i++) {
    9fe08092:	0007061b          	sext.w	a2,a4
    9fe08096:	0691                	addi	a3,a3,4
      st->post[i] = ps[i] / tot_noise - 1.f;
    9fe08098:	18e7f7d3          	fdiv.s	fa5,fa5,fa4
    9fe0809c:	0887f7d3          	fsub.s	fa5,fa5,fs0
    9fe080a0:	00f5a027          	fsw	fa5,0(a1)
      st->post[i]=MIN(st->post[i], 100.f);
    9fe080a4:	742c                	ld	a1,104(s0)
    9fe080a6:	95be                	add	a1,a1,a5
    9fe080a8:	0005a787          	flw	fa5,0(a1)
    9fe080ac:	a0f61553          	flt.s	a0,fa2,fa5
    9fe080b0:	c119                	beqz	a0,9fe080b6 <NLP_AES+0x1be>
    9fe080b2:	20c607d3          	fmv.s	fa5,fa2
    9fe080b6:	00f5a027          	fsw	fa5,0(a1)
      gamma = .1f + .89f * SQR(st->old_ps[i] / (st->old_ps[i] + tot_noise));
    9fe080ba:	6828                	ld	a0,80(s0)
      st->prior[i] = gamma * MAX(0, st->post[i]) + (FLOAT_ONE-gamma) * (st->old_ps[i] / tot_noise);
    9fe080bc:	742c                	ld	a1,104(s0)
      gamma = .1f + .89f * SQR(st->old_ps[i] / (st->old_ps[i] + tot_noise));
    9fe080be:	953e                	add	a0,a0,a5
    9fe080c0:	00052787          	flw	fa5,0(a0)
      st->prior[i] = gamma * MAX(0, st->post[i]) + (FLOAT_ONE-gamma) * (st->old_ps[i] / tot_noise);
    9fe080c4:	95be                	add	a1,a1,a5
    9fe080c6:	0005a687          	flw	fa3,0(a1)
    9fe080ca:	18e7f5d3          	fdiv.s	fa1,fa5,fa4
      gamma = .1f + .89f * SQR(st->old_ps[i] / (st->old_ps[i] + tot_noise));
    9fe080ce:	00e7f753          	fadd.s	fa4,fa5,fa4
      st->prior[i] = gamma * MAX(0, st->post[i]) + (FLOAT_ONE-gamma) * (st->old_ps[i] / tot_noise);
    9fe080d2:	a0d015d3          	flt.s	a1,ft0,fa3
      gamma = .1f + .89f * SQR(st->old_ps[i] / (st->old_ps[i] + tot_noise));
    9fe080d6:	18e7f7d3          	fdiv.s	fa5,fa5,fa4
    9fe080da:	10f7f7d3          	fmul.s	fa5,fa5,fa5
    9fe080de:	a8a7f7c3          	fmadd.s	fa5,fa5,fa0,fs5
      st->prior[i] = gamma * MAX(0, st->post[i]) + (FLOAT_ONE-gamma) * (st->old_ps[i] / tot_noise);
    9fe080e2:	e199                	bnez	a1,9fe080e8 <NLP_AES+0x1f0>
    9fe080e4:	f00006d3          	fmv.w.x	fa3,zero
    9fe080e8:	08f47753          	fsub.s	fa4,fs0,fa5
    9fe080ec:	702c                	ld	a1,96(s0)
    9fe080ee:	95be                	add	a1,a1,a5
    9fe080f0:	10b77753          	fmul.s	fa4,fa4,fa1
    9fe080f4:	70f6f7c3          	fmadd.s	fa5,fa3,fa5,fa4
    9fe080f8:	00f5a027          	fsw	fa5,0(a1)
      st->prior[i] = MIN(st->prior[i], 100.f);
    9fe080fc:	702c                	ld	a1,96(s0)
    9fe080fe:	97ae                	add	a5,a5,a1
    9fe08100:	0007a787          	flw	fa5,0(a5)
    9fe08104:	a0f615d3          	flt.s	a1,fa2,fa5
    9fe08108:	c199                	beqz	a1,9fe0810e <NLP_AES+0x216>
    9fe0810a:	20c607d3          	fmv.s	fa5,fa2
    9fe0810e:	00f7a027          	fsw	fa5,0(a5)
   for (i=0;i<N+M;i++) {
    9fe08112:	f7a643e3          	blt	a2,s10,9fe08078 <NLP_AES+0x180>
   }

   /* Recursive average of the priori SNR */
   st->zeta[0] = .7f * st->zeta[0] + .3f * st->prior[0];
    9fe08116:	7038                	ld	a4,96(s0)
    9fe08118:	783c                	ld	a5,112(s0)
    9fe0811a:	0000a697          	auipc	a3,0xa
    9fe0811e:	1826a007          	flw	ft0,386(a3) # 9fe1229c <__func__.1+0xe4>
    9fe08122:	00072707          	flw	fa4,0(a4)
    9fe08126:	0007a787          	flw	fa5,0(a5)
    9fe0812a:	0000a717          	auipc	a4,0xa
    9fe0812e:	11e72587          	flw	fa1,286(a4) # 9fe12248 <__func__.1+0x90>
    9fe08132:	10077753          	fmul.s	fa4,fa4,ft0
   for (i=1;i<N-1;i++)
    9fe08136:	4705                	li	a4,1
   st->zeta[0] = .7f * st->zeta[0] + .3f * st->prior[0];
    9fe08138:	70b7f7c3          	fmadd.s	fa5,fa5,fa1,fa4
    9fe0813c:	00f7a027          	fsw	fa5,0(a5)
   for (i=1;i<N-1;i++)
    9fe08140:	05975d63          	bge	a4,s9,9fe0819a <NLP_AES+0x2a2>
    9fe08144:	ffdb059b          	addiw	a1,s6,-3
    9fe08148:	02059793          	slli	a5,a1,0x20
    9fe0814c:	01e7d593          	srli	a1,a5,0x1e
    9fe08150:	05a1                	addi	a1,a1,8
    9fe08152:	4791                	li	a5,4
    9fe08154:	0000a717          	auipc	a4,0xa
    9fe08158:	12872087          	flw	ft1,296(a4) # 9fe1227c <__func__.1+0xc4>
    9fe0815c:	0000a717          	auipc	a4,0xa
    9fe08160:	23872507          	flw	fa0,568(a4) # 9fe12394 <__func__.1+0x1dc>
      st->zeta[i] = .7f * st->zeta[i] + .15f * st->prior[i] + .075f * st->prior[i-1] + .075f * st->prior[i+1];
    9fe08164:	7034                	ld	a3,96(s0)
    9fe08166:	7838                	ld	a4,112(s0)
    9fe08168:	00f68633          	add	a2,a3,a5
    9fe0816c:	00062787          	flw	fa5,0(a2)
    9fe08170:	973e                	add	a4,a4,a5
    9fe08172:	00072687          	flw	fa3,0(a4)
    9fe08176:	1017f653          	fmul.s	fa2,fa5,ft1
    9fe0817a:	ffc62707          	flw	fa4,-4(a2)
    9fe0817e:	0791                	addi	a5,a5,4
    9fe08180:	96be                	add	a3,a3,a5
    9fe08182:	0006a787          	flw	fa5,0(a3)
    9fe08186:	60b6f6c3          	fmadd.s	fa3,fa3,fa1,fa2
    9fe0818a:	68a77743          	fmadd.s	fa4,fa4,fa0,fa3
    9fe0818e:	70a7f7c3          	fmadd.s	fa5,fa5,fa0,fa4
    9fe08192:	00f72027          	fsw	fa5,0(a4)
   for (i=1;i<N-1;i++)
    9fe08196:	fcf597e3          	bne	a1,a5,9fe08164 <NLP_AES+0x26c>
   for (i=N-1;i<N+M;i++)
    9fe0819a:	0204ca63          	bltz	s1,9fe081ce <NLP_AES+0x2d6>
    9fe0819e:	02049613          	slli	a2,s1,0x20
    9fe081a2:	9201                	srli	a2,a2,0x20
    9fe081a4:	965a                	add	a2,a2,s6
    9fe081a6:	ffc98793          	addi	a5,s3,-4
    9fe081aa:	060a                	slli	a2,a2,0x2
      st->zeta[i] = .7f * st->zeta[i] + .3f * st->prior[i];
    9fe081ac:	7034                	ld	a3,96(s0)
    9fe081ae:	7838                	ld	a4,112(s0)
    9fe081b0:	96be                	add	a3,a3,a5
    9fe081b2:	0006a707          	flw	fa4,0(a3)
    9fe081b6:	973e                	add	a4,a4,a5
    9fe081b8:	00072787          	flw	fa5,0(a4)
    9fe081bc:	10077753          	fmul.s	fa4,fa4,ft0
   for (i=N-1;i<N+M;i++)
    9fe081c0:	0791                	addi	a5,a5,4
      st->zeta[i] = .7f * st->zeta[i] + .3f * st->prior[i];
    9fe081c2:	70b7f7c3          	fmadd.s	fa5,fa5,fa1,fa4
    9fe081c6:	00f72027          	fsw	fa5,0(a4)
   for (i=N-1;i<N+M;i++)
    9fe081ca:	fef611e3          	bne	a2,a5,9fe081ac <NLP_AES+0x2b4>

   Zframe = 0;
    9fe081ce:	f00007d3          	fmv.w.x	fa5,zero
   for (i=N;i<N+M;i++)
    9fe081d2:	03ab5663          	bge	s6,s10,9fe081fe <NLP_AES+0x306>
    9fe081d6:	fff4871b          	addiw	a4,s1,-1
      Zframe = Zframe + st->zeta[i];
    9fe081da:	783c                	ld	a5,112(s0)
    9fe081dc:	1702                	slli	a4,a4,0x20
    9fe081de:	9301                	srli	a4,a4,0x20
    9fe081e0:	975a                	add	a4,a4,s6
   Zframe = 0;
    9fe081e2:	f00007d3          	fmv.w.x	fa5,zero
    9fe081e6:	00478693          	addi	a3,a5,4
    9fe081ea:	070a                	slli	a4,a4,0x2
    9fe081ec:	97ce                	add	a5,a5,s3
    9fe081ee:	9736                	add	a4,a4,a3
      Zframe = Zframe + st->zeta[i];
    9fe081f0:	0007a707          	flw	fa4,0(a5)
   for (i=N;i<N+M;i++)
    9fe081f4:	0791                	addi	a5,a5,4
      Zframe = Zframe + st->zeta[i];
    9fe081f6:	00e7f7d3          	fadd.s	fa5,fa5,fa4
   for (i=N;i<N+M;i++)
    9fe081fa:	fef71be3          	bne	a4,a5,9fe081f0 <NLP_AES+0x2f8>

   Pframe = .1f + .899f * aes_qcurve(Zframe / st->nbands);
    9fe081fe:	0b042783          	lw	a5,176(s0)
    9fe08202:	d007f553          	fcvt.s.w	fa0,a5
    9fe08206:	18a7f553          	fdiv.s	fa0,fa5,fa0
    9fe0820a:	25f000ef          	jal	ra,9fe08c68 <aes_qcurve>
   effective_echo_suppress = (FLOAT_ONE - Pframe) * st->echo_sup + Pframe * st->echo_sup_active;
    9fe0820e:	08c42783          	lw	a5,140(s0)
   Pframe = .1f + .899f * aes_qcurve(Zframe / st->nbands);
    9fe08212:	0000a717          	auipc	a4,0xa
    9fe08216:	18672787          	flw	fa5,390(a4) # 9fe12398 <__func__.1+0x1e0>
    9fe0821a:	a8f57ac3          	fmadd.s	fs5,fa0,fa5,fs5
   effective_echo_suppress = (FLOAT_ONE - Pframe) * st->echo_sup + Pframe * st->echo_sup_active;
    9fe0821e:	d007f7d3          	fcvt.s.w	fa5,a5
    9fe08222:	08842783          	lw	a5,136(s0)
   aes_gain_floor(effective_echo_suppress, st->echo_noise+N, st->gain_floor+N, M);
    9fe08226:	602c                	ld	a1,64(s0)
    9fe08228:	7c28                	ld	a0,120(s0)
   effective_echo_suppress = (FLOAT_ONE - Pframe) * st->echo_sup + Pframe * st->echo_sup_active;
    9fe0822a:	09547553          	fsub.s	fa0,fs0,fs5
    9fe0822e:	1157f7d3          	fmul.s	fa5,fa5,fs5
    9fe08232:	d007f753          	fcvt.s.w	fa4,a5
   aes_gain_floor(effective_echo_suppress, st->echo_noise+N, st->gain_floor+N, M);
    9fe08236:	8626                	mv	a2,s1
    9fe08238:	95ce                	add	a1,a1,s3
    9fe0823a:	954e                	add	a0,a0,s3
    9fe0823c:	78e57543          	fmadd.s	fa0,fa0,fa4,fa5
    9fe08240:	247000ef          	jal	ra,9fe08c86 <aes_gain_floor>
         
   /* Compute speech probability of presence */
   for (i=N;i<N+M;i++) {
    9fe08244:	0fab5563          	bge	s6,s10,9fe0832e <NLP_AES+0x436>
    9fe08248:	34fd                	addiw	s1,s1,-1
    9fe0824a:	1482                	slli	s1,s1,0x20
    9fe0824c:	001b0c93          	addi	s9,s6,1
    9fe08250:	9081                	srli	s1,s1,0x20
    9fe08252:	94e6                	add	s1,s1,s9
    9fe08254:	00249c93          	slli	s9,s1,0x2
    9fe08258:	0000a797          	auipc	a5,0xa
    9fe0825c:	00c7a987          	flw	fs3,12(a5) # 9fe12264 <__func__.1+0xac>
    9fe08260:	84ce                	mv	s1,s3
    9fe08262:	0000a797          	auipc	a5,0xa
    9fe08266:	0a27aa07          	flw	fs4,162(a5) # 9fe12304 <__func__.1+0x14c>
    9fe0826a:	0000a797          	auipc	a5,0xa
    9fe0826e:	1327ab07          	flw	fs6,306(a5) # 9fe1239c <__func__.1+0x1e4>
      float MM;  /* gain from hypergeometric function */
      float prior_ratio;  /* Weiner filter gain */
      float P1;  /* priority probability of speech presence */
      float q;  /* speech absence the priori probability */

      prior_ratio = st->prior[i] / (st->prior[i] + 1.f);
    9fe08272:	7038                	ld	a4,96(s0)
      theta = prior_ratio * (1.f + st->post[i]);
    9fe08274:	743c                	ld	a5,104(s0)
      prior_ratio = st->prior[i] / (st->prior[i] + 1.f);
    9fe08276:	9726                	add	a4,a4,s1
    9fe08278:	00072507          	flw	fa0,0(a4)
      theta = prior_ratio * (1.f + st->post[i]);
    9fe0827c:	97a6                	add	a5,a5,s1
    9fe0827e:	0007ab87          	flw	fs7,0(a5)
      prior_ratio = st->prior[i] / (st->prior[i] + 1.f);
    9fe08282:	008574d3          	fadd.s	fs1,fa0,fs0
      theta = prior_ratio * (1.f + st->post[i]);
    9fe08286:	008bfbd3          	fadd.s	fs7,fs7,fs0
      prior_ratio = st->prior[i] / (st->prior[i] + 1.f);
    9fe0828a:	189574d3          	fdiv.s	fs1,fa0,fs1
      theta = prior_ratio * (1.f + st->post[i]);
    9fe0828e:	109bfbd3          	fmul.s	fs7,fs7,fs1

      MM = aes_hypergeom_gain(theta);
    9fe08292:	217b8553          	fmv.s	fa0,fs7
    9fe08296:	10d000ef          	jal	ra,9fe08ba2 <aes_hypergeom_gain>
      st->gain[i] = MIN(FLOAT_ONE, prior_ratio * MM);  /* gain with bound */
    9fe0829a:	10a4f553          	fmul.s	fa0,fs1,fa0
      st->old_ps[i] = .2f * st->old_ps[i] + .8f * SQR(st->gain[i]) * ps[i];  /* save old power spectrum */
    9fe0829e:	009a06b3          	add	a3,s4,s1
      st->gain[i] = MIN(FLOAT_ONE, prior_ratio * MM);  /* gain with bound */
    9fe082a2:	a08517d3          	flt.s	a5,fa0,fs0
    9fe082a6:	e399                	bnez	a5,9fe082ac <NLP_AES+0x3b4>
    9fe082a8:	20840553          	fmv.s	fa0,fs0
    9fe082ac:	6c3c                	ld	a5,88(s0)

      P1 = .199f + .8f * aes_qcurve(st->zeta[i]);
      q = FLOAT_ONE - Pframe * P1;
      st->gain2[i] = 1/(1.f + (q/(1.f-q))*(1+st->prior[i])*(float)exp(-theta));  /* lambda/(1+lambda) */
    9fe082ae:	217b9bd3          	fneg.s	fs7,fs7
      st->gain[i] = MIN(FLOAT_ONE, prior_ratio * MM);  /* gain with bound */
    9fe082b2:	97a6                	add	a5,a5,s1
    9fe082b4:	00a7a027          	fsw	fa0,0(a5)
      st->old_ps[i] = .2f * st->old_ps[i] + .8f * SQR(st->gain[i]) * ps[i];  /* save old power spectrum */
    9fe082b8:	6c38                	ld	a4,88(s0)
    9fe082ba:	0006a687          	flw	fa3,0(a3)
    9fe082be:	683c                	ld	a5,80(s0)
    9fe082c0:	9726                	add	a4,a4,s1
    9fe082c2:	00072787          	flw	fa5,0(a4)
    9fe082c6:	97a6                	add	a5,a5,s1
    9fe082c8:	0007a707          	flw	fa4,0(a5)
    9fe082cc:	10f7f7d3          	fmul.s	fa5,fa5,fa5
    9fe082d0:	1137f7d3          	fmul.s	fa5,fa5,fs3
    9fe082d4:	10d7f7d3          	fmul.s	fa5,fa5,fa3
    9fe082d8:	794777c3          	fmadd.s	fa5,fa4,fs4,fa5
    9fe082dc:	00f7a027          	fsw	fa5,0(a5)
      P1 = .199f + .8f * aes_qcurve(st->zeta[i]);
    9fe082e0:	783c                	ld	a5,112(s0)
    9fe082e2:	97a6                	add	a5,a5,s1
    9fe082e4:	0007a507          	flw	fa0,0(a5)
    9fe082e8:	181000ef          	jal	ra,9fe08c68 <aes_qcurve>
    9fe082ec:	b13574c3          	fmadd.s	fs1,fa0,fs3,fs6
      st->gain2[i] = 1/(1.f + (q/(1.f-q))*(1+st->prior[i])*(float)exp(-theta));  /* lambda/(1+lambda) */
    9fe082f0:	703c                	ld	a5,96(s0)
    9fe082f2:	420b8553          	fcvt.d.s	fa0,fs7
    9fe082f6:	97a6                	add	a5,a5,s1
      q = FLOAT_ONE - Pframe * P1;
    9fe082f8:	409af4cb          	fnmsub.s	fs1,fs5,fs1,fs0
      st->gain2[i] = 1/(1.f + (q/(1.f-q))*(1+st->prior[i])*(float)exp(-theta));  /* lambda/(1+lambda) */
    9fe082fc:	0007a787          	flw	fa5,0(a5)
    9fe08300:	0087f7d3          	fadd.s	fa5,fa5,fs0
    9fe08304:	08947753          	fsub.s	fa4,fs0,fs1
    9fe08308:	18e4f4d3          	fdiv.s	fs1,fs1,fa4
    9fe0830c:	1097f4d3          	fmul.s	fs1,fa5,fs1
    9fe08310:	8d1f80ef          	jal	ra,9fe00be0 <exp>
    9fe08314:	40157553          	fcvt.s.d	fa0,fa0
    9fe08318:	7c1c                	ld	a5,56(s0)
    9fe0831a:	40a4f4c3          	fmadd.s	fs1,fs1,fa0,fs0
    9fe0831e:	97a6                	add	a5,a5,s1
   for (i=N;i<N+M;i++) {
    9fe08320:	0491                	addi	s1,s1,4
      st->gain2[i] = 1/(1.f + (q/(1.f-q))*(1+st->prior[i])*(float)exp(-theta));  /* lambda/(1+lambda) */
    9fe08322:	189474d3          	fdiv.s	fs1,fs0,fs1
    9fe08326:	0097a027          	fsw	fs1,0(a5)
   for (i=N;i<N+M;i++) {
    9fe0832a:	f49c94e3          	bne	s9,s1,9fe08272 <NLP_AES+0x37a>

   }

   filterbank_sb2linear(st->bank,st->gain2+N, st->gain2);
    9fe0832e:	7c10                	ld	a2,56(s0)
    9fe08330:	6808                	ld	a0,16(s0)
    9fe08332:	013605b3          	add	a1,a2,s3
    9fe08336:	6e2000ef          	jal	ra,9fe08a18 <filterbank_sb2linear>
   filterbank_sb2linear(st->bank,st->gain+N, st->gain);
    9fe0833a:	6c30                	ld	a2,88(s0)
    9fe0833c:	6808                	ld	a0,16(s0)
    9fe0833e:	013605b3          	add	a1,a2,s3
    9fe08342:	6d6000ef          	jal	ra,9fe08a18 <filterbank_sb2linear>
   filterbank_sb2linear(st->bank,st->gain_floor+N, st->gain_floor);
    9fe08346:	6030                	ld	a2,64(s0)
    9fe08348:	6808                	ld	a0,16(s0)
    9fe0834a:	013605b3          	add	a1,a2,s3
    9fe0834e:	6ca000ef          	jal	ra,9fe08a18 <filterbank_sb2linear>

   /* Compute gain */
   for (i=0;i<N;i++) {
    9fe08352:	1f605163          	blez	s6,9fe08534 <NLP_AES+0x63c>
    9fe08356:	4481                	li	s1,0
    9fe08358:	0000a797          	auipc	a5,0xa
    9fe0835c:	f0c7a987          	flw	fs3,-244(a5) # 9fe12264 <__func__.1+0xac>
    9fe08360:	0000a797          	auipc	a5,0xa
    9fe08364:	fa47aa07          	flw	fs4,-92(a5) # 9fe12304 <__func__.1+0x14c>
    9fe08368:	0000a797          	auipc	a5,0xa
    9fe0836c:	0207aa87          	flw	fs5,32(a5) # 9fe12388 <__func__.1+0x1d0>
      g = MIN(FLOAT_ONE, prior_ratio * MM);  /* gain with bound */
      p = st->gain2[i];  /* interpolated speech probability of presence */

      /* Constrain the gain to be close to the scale gain */
      if ((.333f *g) > st->gain[i])
         g = 3.f * st->gain[i];
    9fe08370:	0000a797          	auipc	a5,0xa
    9fe08374:	f207ab07          	flw	fs6,-224(a5) # 9fe12290 <__func__.1+0xd8>
    9fe08378:	a0f1                	j	9fe08444 <NLP_AES+0x54c>
      g = MIN(FLOAT_ONE, prior_ratio * MM);  /* gain with bound */
    9fe0837a:	20840553          	fmv.s	fa0,fs0
      if ((.333f *g) > st->gain[i])
    9fe0837e:	6c3c                	ld	a5,88(s0)
      p = st->gain2[i];  /* interpolated speech probability of presence */
    9fe08380:	7c18                	ld	a4,56(s0)
      st->gain[i] = g;

      /* save old power spectrum */
      st->old_ps[i] = .2f * st->old_ps[i] + .8f * SQR(st->gain[i]) * ps[i];
    9fe08382:	009a06b3          	add	a3,s4,s1
      if ((.333f *g) > st->gain[i])
    9fe08386:	97a6                	add	a5,a5,s1
    9fe08388:	0007a787          	flw	fa5,0(a5)
      p = st->gain2[i];  /* interpolated speech probability of presence */
    9fe0838c:	9726                	add	a4,a4,s1
    9fe0838e:	00072b87          	flw	fs7,0(a4)
      if ((.333f *g) > st->gain[i])
    9fe08392:	a0e79753          	flt.s	a4,fa5,fa4
    9fe08396:	c319                	beqz	a4,9fe0839c <NLP_AES+0x4a4>
         g = 3.f * st->gain[i];
    9fe08398:	1167f553          	fmul.s	fa0,fa5,fs6
      st->gain[i] = g;
    9fe0839c:	00a7a027          	fsw	fa0,0(a5)
      st->old_ps[i] = .2f * st->old_ps[i] + .8f * SQR(st->gain[i]) * ps[i];
    9fe083a0:	6c38                	ld	a4,88(s0)
    9fe083a2:	0006a787          	flw	fa5,0(a3)
    9fe083a6:	683c                	ld	a5,80(s0)
    9fe083a8:	9726                	add	a4,a4,s1
    9fe083aa:	00072707          	flw	fa4,0(a4)
    9fe083ae:	97a6                	add	a5,a5,s1
    9fe083b0:	0007a687          	flw	fa3,0(a5)
    9fe083b4:	10e77753          	fmul.s	fa4,fa4,fa4
    9fe083b8:	11377753          	fmul.s	fa4,fa4,fs3
    9fe083bc:	10f77753          	fmul.s	fa4,fa4,fa5
    9fe083c0:	7146f743          	fmadd.s	fa4,fa3,fs4,fa4
    9fe083c4:	00e7a027          	fsw	fa4,0(a5)

      /* Apply gain floor */
      if (st->gain[i] < st->gain_floor[i])
    9fe083c8:	6c3c                	ld	a5,88(s0)
    9fe083ca:	6038                	ld	a4,64(s0)
    9fe083cc:	97a6                	add	a5,a5,s1
    9fe083ce:	9726                	add	a4,a4,s1
    9fe083d0:	0007a507          	flw	fa0,0(a5)
    9fe083d4:	00072787          	flw	fa5,0(a4)
    9fe083d8:	a0f51753          	flt.s	a4,fa0,fa5
    9fe083dc:	c719                	beqz	a4,9fe083ea <NLP_AES+0x4f2>
         st->gain[i] = st->gain_floor[i];
    9fe083de:	00f7a027          	fsw	fa5,0(a5)
         
      /* Take into account speech probability of presence */
      tmp = p * (float)math_sqrt(st->gain[i]) + (FLOAT_ONE -p) * (float)math_sqrt(st->gain_floor[i]);
    9fe083e2:	6c3c                	ld	a5,88(s0)
    9fe083e4:	97a6                	add	a5,a5,s1
    9fe083e6:	0007a507          	flw	fa0,0(a5)
    9fe083ea:	42050553          	fcvt.d.s	fa0,fa0
    9fe083ee:	a05f80ef          	jal	ra,9fe00df2 <sqrt>
    9fe083f2:	603c                	ld	a5,64(s0)
    9fe083f4:	22a504d3          	fmv.d	fs1,fa0
    9fe083f8:	97a6                	add	a5,a5,s1
    9fe083fa:	0007a507          	flw	fa0,0(a5)
    9fe083fe:	42050553          	fcvt.d.s	fa0,fa0
    9fe08402:	9f1f80ef          	jal	ra,9fe00df2 <sqrt>
    9fe08406:	09747753          	fsub.s	fa4,fs0,fs7
    9fe0840a:	401577d3          	fcvt.s.d	fa5,fa0
    9fe0840e:	4014f4d3          	fcvt.s.d	fs1,fs1
      st->gain2[i] = SQR(tmp);
    9fe08412:	7c1c                	ld	a5,56(s0)
      tmp = p * (float)math_sqrt(st->gain[i]) + (FLOAT_ONE -p) * (float)math_sqrt(st->gain_floor[i]);
    9fe08414:	10f777d3          	fmul.s	fa5,fa4,fa5
      st->gain2[i] = SQR(tmp);
    9fe08418:	97a6                	add	a5,a5,s1
      tmp = p * (float)math_sqrt(st->gain[i]) + (FLOAT_ONE -p) * (float)math_sqrt(st->gain_floor[i]);
    9fe0841a:	7974f7c3          	fmadd.s	fa5,fs1,fs7,fa5
      st->gain2[i] = SQR(tmp);
    9fe0841e:	10f7f7d3          	fmul.s	fa5,fa5,fa5
    9fe08422:	00f7a027          	fsw	fa5,0(a5)

      //if (st->st_vad)
      //if (st->RER_vad)
         st->gain2[i] = st->gain2[i] * st->gain[i];
    9fe08426:	7c1c                	ld	a5,56(s0)
    9fe08428:	6c38                	ld	a4,88(s0)
    9fe0842a:	97a6                	add	a5,a5,s1
    9fe0842c:	9726                	add	a4,a4,s1
    9fe0842e:	0007a787          	flw	fa5,0(a5)
    9fe08432:	00072707          	flw	fa4,0(a4)
   for (i=0;i<N;i++) {
    9fe08436:	0491                	addi	s1,s1,4
         st->gain2[i] = st->gain2[i] * st->gain[i];
    9fe08438:	10e7f7d3          	fmul.s	fa5,fa5,fa4
    9fe0843c:	00f7a027          	fsw	fa5,0(a5)
   for (i=0;i<N;i++) {
    9fe08440:	0a998763          	beq	s3,s1,9fe084ee <NLP_AES+0x5f6>
      prior_ratio = st->prior[i] / (st->prior[i] + 1.f);
    9fe08444:	7038                	ld	a4,96(s0)
      theta = prior_ratio * (1.f + st->post[i]);
    9fe08446:	743c                	ld	a5,104(s0)
      prior_ratio = st->prior[i] / (st->prior[i] + 1.f);
    9fe08448:	9726                	add	a4,a4,s1
    9fe0844a:	00072487          	flw	fs1,0(a4)
      theta = prior_ratio * (1.f + st->post[i]);
    9fe0844e:	97a6                	add	a5,a5,s1
    9fe08450:	0007a507          	flw	fa0,0(a5)
      prior_ratio = st->prior[i] / (st->prior[i] + 1.f);
    9fe08454:	0084f7d3          	fadd.s	fa5,fs1,fs0
      theta = prior_ratio * (1.f + st->post[i]);
    9fe08458:	00857553          	fadd.s	fa0,fa0,fs0
      prior_ratio = st->prior[i] / (st->prior[i] + 1.f);
    9fe0845c:	18f4f4d3          	fdiv.s	fs1,fs1,fa5
      MM = aes_hypergeom_gain(theta);
    9fe08460:	10957553          	fmul.s	fa0,fa0,fs1
    9fe08464:	73e000ef          	jal	ra,9fe08ba2 <aes_hypergeom_gain>
      g = MIN(FLOAT_ONE, prior_ratio * MM);  /* gain with bound */
    9fe08468:	10a4f553          	fmul.s	fa0,fs1,fa0
    9fe0846c:	215a8753          	fmv.s	fa4,fs5
    9fe08470:	a08517d3          	flt.s	a5,fa0,fs0
    9fe08474:	f00783e3          	beqz	a5,9fe0837a <NLP_AES+0x482>
      if ((.333f *g) > st->gain[i])
    9fe08478:	11557753          	fmul.s	fa4,fa0,fs5
    9fe0847c:	b709                	j	9fe0837e <NLP_AES+0x486>
      st->nb_adapt = 20000;
    9fe0847e:	0af42023          	sw	a5,160(s0)
   st->min_count++;
    9fe08482:	0a442783          	lw	a5,164(s0)
   M = st->nbands;
    9fe08486:	0b042483          	lw	s1,176(s0)
   if (st->echo_state) {
    9fe0848a:	6c18                	ld	a4,24(s0)
   st->min_count++;
    9fe0848c:	2785                	addiw	a5,a5,1
    9fe0848e:	0af42223          	sw	a5,164(s0)
      for (i=0;i<N+M;i++)
    9fe08492:	009b0d3b          	addw	s10,s6,s1
      filterbank_linear2sb(st->bank, st->echo_noise, st->echo_noise+N);
    9fe08496:	002b1993          	slli	s3,s6,0x2
   if (st->echo_state) {
    9fe0849a:	b00712e3          	bnez	a4,9fe07f9e <NLP_AES+0xa6>
      for (i=0;i<N+M;i++)
    9fe0849e:	002d1693          	slli	a3,s10,0x2
    9fe084a2:	4781                	li	a5,0
    9fe084a4:	01a05963          	blez	s10,9fe084b6 <NLP_AES+0x5be>
         st->echo_noise[i] = 0;
    9fe084a8:	7c38                	ld	a4,120(s0)
    9fe084aa:	973e                	add	a4,a4,a5
    9fe084ac:	00072023          	sw	zero,0(a4)
      for (i=0;i<N+M;i++)
    9fe084b0:	0791                	addi	a5,a5,4
    9fe084b2:	fef69be3          	bne	a3,a5,9fe084a8 <NLP_AES+0x5b0>
   aes_analysis(st, y);
    9fe084b6:	85ca                	mv	a1,s2
    9fe084b8:	8522                	mv	a0,s0
    9fe084ba:	065000ef          	jal	ra,9fe08d1e <aes_analysis>
   if (st->nb_adapt==1)
    9fe084be:	0a042703          	lw	a4,160(s0)
    9fe084c2:	4785                	li	a5,1
    9fe084c4:	fffb0c9b          	addiw	s9,s6,-1
    9fe084c8:	b8f712e3          	bne	a4,a5,9fe0804c <NLP_AES+0x154>
      for (i=0;i<N+M;i++)
    9fe084cc:	002d1613          	slli	a2,s10,0x2
    9fe084d0:	4781                	li	a5,0
    9fe084d2:	29a05063          	blez	s10,9fe08752 <NLP_AES+0x85a>
         st->old_ps[i] = ps[i];
    9fe084d6:	6838                	ld	a4,80(s0)
    9fe084d8:	00fa06b3          	add	a3,s4,a5
    9fe084dc:	0006a787          	flw	fa5,0(a3)
    9fe084e0:	973e                	add	a4,a4,a5
      for (i=0;i<N+M;i++)
    9fe084e2:	0791                	addi	a5,a5,4
         st->old_ps[i] = ps[i];
    9fe084e4:	00f72027          	fsw	fa5,0(a4)
      for (i=0;i<N+M;i++)
    9fe084e8:	fef617e3          	bne	a2,a5,9fe084d6 <NLP_AES+0x5de>
    9fe084ec:	b695                	j	9fe08050 <NLP_AES+0x158>

      }


   for (i=1;i<N;i++) {
    9fe084ee:	4705                	li	a4,1
    9fe084f0:	4591                	li	a1,4
    9fe084f2:	4791                	li	a5,4
    9fe084f4:	05675063          	bge	a4,s6,9fe08534 <NLP_AES+0x63c>
      st->ft[2*i-1] = st->gain2[i] * st->ft[2*i-1];
    9fe084f8:	7414                	ld	a3,40(s0)
    9fe084fa:	7c10                	ld	a2,56(s0)
      st->ft[2*i] = st->gain2[i] * st->ft[2*i];
    9fe084fc:	00179513          	slli	a0,a5,0x1
      st->ft[2*i-1] = st->gain2[i] * st->ft[2*i-1];
    9fe08500:	96ae                	add	a3,a3,a1
    9fe08502:	963e                	add	a2,a2,a5
    9fe08504:	0006a787          	flw	fa5,0(a3)
    9fe08508:	00062707          	flw	fa4,0(a2)
   for (i=1;i<N;i++) {
    9fe0850c:	05a1                	addi	a1,a1,8
      st->ft[2*i-1] = st->gain2[i] * st->ft[2*i-1];
    9fe0850e:	10e7f7d3          	fmul.s	fa5,fa5,fa4
    9fe08512:	00f6a027          	fsw	fa5,0(a3)
      st->ft[2*i] = st->gain2[i] * st->ft[2*i];
    9fe08516:	7418                	ld	a4,40(s0)
    9fe08518:	7c14                	ld	a3,56(s0)
    9fe0851a:	972a                	add	a4,a4,a0
    9fe0851c:	96be                	add	a3,a3,a5
    9fe0851e:	00072787          	flw	fa5,0(a4)
    9fe08522:	0006a707          	flw	fa4,0(a3)
   for (i=1;i<N;i++) {
    9fe08526:	0791                	addi	a5,a5,4
      st->ft[2*i] = st->gain2[i] * st->ft[2*i];
    9fe08528:	10e7f7d3          	fmul.s	fa5,fa5,fa4
    9fe0852c:	00f72027          	fsw	fa5,0(a4)
   for (i=1;i<N;i++) {
    9fe08530:	fcf994e3          	bne	s3,a5,9fe084f8 <NLP_AES+0x600>
   }
   st->ft[0] = st->gain2[0] * st->ft[0];
    9fe08534:	7418                	ld	a4,40(s0)
    9fe08536:	7c1c                	ld	a5,56(s0)
   st->ft[2*N-1] = st->gain2[N-1] * st->ft[2*N-1];
    9fe08538:	002c1493          	slli	s1,s8,0x2
   st->ft[0] = st->gain2[0] * st->ft[0];
    9fe0853c:	00072787          	flw	fa5,0(a4)
    9fe08540:	0007a707          	flw	fa4,0(a5)
   st->ft[2*N-1] = st->gain2[N-1] * st->ft[2*N-1];
    9fe08544:	ffc48693          	addi	a3,s1,-4
   st->ft[0] = st->gain2[0] * st->ft[0];
    9fe08548:	10e7f7d3          	fmul.s	fa5,fa5,fa4
    9fe0854c:	00f72027          	fsw	fa5,0(a4)
   st->ft[2*N-1] = st->gain2[N-1] * st->ft[2*N-1];
    9fe08550:	741c                	ld	a5,40(s0)
    9fe08552:	7c18                	ld	a4,56(s0)
    9fe08554:	97b6                	add	a5,a5,a3
    9fe08556:	99ba                	add	s3,s3,a4
    9fe08558:	0007a787          	flw	fa5,0(a5)
    9fe0855c:	ffc9a707          	flw	fa4,-4(s3)
    9fe08560:	10e7f7d3          	fmul.s	fa5,fa5,fa4
    9fe08564:	00f7a027          	fsw	fa5,0(a5)

   speech_ifft(st->fft_lookup, st->ft, st->frame);
    9fe08568:	7010                	ld	a2,32(s0)
    9fe0856a:	740c                	ld	a1,40(s0)
    9fe0856c:	7448                	ld	a0,168(s0)
    9fe0856e:	39b000ef          	jal	ra,9fe09108 <speech_ifft>

   /* Apply synthesis window (for WOLA) */
   for (i=0;i<2*N;i++)
    9fe08572:	4781                	li	a5,0
    9fe08574:	03805163          	blez	s8,9fe08596 <NLP_AES+0x69e>
      st->frame[i] = st->frame[i] * st->window[i];
    9fe08578:	7018                	ld	a4,32(s0)
    9fe0857a:	6434                	ld	a3,72(s0)
    9fe0857c:	973e                	add	a4,a4,a5
    9fe0857e:	96be                	add	a3,a3,a5
    9fe08580:	00072787          	flw	fa5,0(a4)
    9fe08584:	0006a707          	flw	fa4,0(a3)
   for (i=0;i<2*N;i++)
    9fe08588:	0791                	addi	a5,a5,4
      st->frame[i] = st->frame[i] * st->window[i];
    9fe0858a:	10e7f7d3          	fmul.s	fa5,fa5,fa4
    9fe0858e:	00f72027          	fsw	fa5,0(a4)
   for (i=0;i<2*N;i++)
    9fe08592:	fef493e3          	bne	s1,a5,9fe08578 <NLP_AES+0x680>

   /* Perform overlap and add */
   for (i=0;i<N3;i++) {
    9fe08596:	03705d63          	blez	s7,9fe085d0 <NLP_AES+0x6d8>
    9fe0859a:	6c50                	ld	a2,152(s0)
    9fe0859c:	fffa859b          	addiw	a1,s5,-1
    9fe085a0:	02059793          	slli	a5,a1,0x20
    9fe085a4:	01e7d593          	srli	a1,a5,0x1e
    9fe085a8:	00460793          	addi	a5,a2,4
    9fe085ac:	7014                	ld	a3,32(s0)
    9fe085ae:	870a                	mv	a4,sp
    9fe085b0:	95be                	add	a1,a1,a5
    9fe085b2:	a011                	j	9fe085b6 <NLP_AES+0x6be>
    9fe085b4:	0791                	addi	a5,a5,4
      y_tmp[i] = st->outbuf[i] + st->frame[i];
    9fe085b6:	00062787          	flw	fa5,0(a2)
    9fe085ba:	0006a707          	flw	fa4,0(a3)
   for (i=0;i<N3;i++) {
    9fe085be:	0711                	addi	a4,a4,4
    9fe085c0:	863e                	mv	a2,a5
      y_tmp[i] = st->outbuf[i] + st->frame[i];
    9fe085c2:	00e7f7d3          	fadd.s	fa5,fa5,fa4
   for (i=0;i<N3;i++) {
    9fe085c6:	0691                	addi	a3,a3,4
      y_tmp[i] = st->outbuf[i] + st->frame[i];
    9fe085c8:	fef72e27          	fsw	fa5,-4(a4)
   for (i=0;i<N3;i++) {
    9fe085cc:	fef594e3          	bne	a1,a5,9fe085b4 <NLP_AES+0x6bc>
   }

   if (1 == (unsigned short)aes_frame)
    9fe085d0:	c01917d3          	fcvt.wu.s	a5,fs2,rtz
    9fe085d4:	4705                	li	a4,1
    9fe085d6:	17c2                	slli	a5,a5,0x30
    9fe085d8:	93c1                	srli	a5,a5,0x30
    9fe085da:	14e78d63          	beq	a5,a4,9fe08734 <NLP_AES+0x83c>
      st->frame1_last_sample = y_tmp[N3-1];
   if (2 == (unsigned short)aes_frame) {
    9fe085de:	4709                	li	a4,2
    9fe085e0:	06e79263          	bne	a5,a4,9fe08644 <NLP_AES+0x74c>
      alpha2 = 1.0F/160.0F;
      alpha = 1 - alpha2;
      y_tmp[0] = alpha * st->frame1_last_sample + alpha2 * y_tmp[0];
    9fe085e4:	00012787          	flw	fa5,0(sp)
    9fe085e8:	0000a797          	auipc	a5,0xa
    9fe085ec:	d287a687          	flw	fa3,-728(a5) # 9fe12310 <__func__.1+0x158>
    9fe085f0:	0e442707          	flw	fa4,228(s0)
    9fe085f4:	10d7f7d3          	fmul.s	fa5,fa5,fa3
    9fe085f8:	0000a797          	auipc	a5,0xa
    9fe085fc:	d1c7a687          	flw	fa3,-740(a5) # 9fe12314 <__func__.1+0x15c>
      for (i = 0; i < N3-1; i++) {
    9fe08600:	fffa869b          	addiw	a3,s5,-1
      y_tmp[0] = alpha * st->frame1_last_sample + alpha2 * y_tmp[0];
    9fe08604:	78d77743          	fmadd.s	fa4,fa4,fa3,fa5
    9fe08608:	00e12027          	fsw	fa4,0(sp)
      for (i = 0; i < N3-1; i++) {
    9fe0860c:	02d05c63          	blez	a3,9fe08644 <NLP_AES+0x74c>
    9fe08610:	0058                	addi	a4,sp,4
    9fe08612:	4781                	li	a5,0
    9fe08614:	0000a617          	auipc	a2,0xa
    9fe08618:	d0462587          	flw	fa1,-764(a2) # 9fe12318 <__func__.1+0x160>
         alpha2 = (float)(1.0F + i)/160.0F;
    9fe0861c:	d007f7d3          	fcvt.s.w	fa5,a5
         alpha = 1 - alpha2;
         y_tmp[i+1] =  alpha * y_tmp[i] + alpha2 * y_tmp[i+1];
    9fe08620:	00072607          	flw	fa2,0(a4)
      for (i = 0; i < N3-1; i++) {
    9fe08624:	0711                	addi	a4,a4,4
         alpha2 = (float)(1.0F + i)/160.0F;
    9fe08626:	0087f7d3          	fadd.s	fa5,fa5,fs0
         y_tmp[i+1] =  alpha * y_tmp[i] + alpha2 * y_tmp[i+1];
    9fe0862a:	2785                	addiw	a5,a5,1
         alpha2 = (float)(1.0F + i)/160.0F;
    9fe0862c:	18b7f7d3          	fdiv.s	fa5,fa5,fa1
         alpha = 1 - alpha2;
    9fe08630:	08f476d3          	fsub.s	fa3,fs0,fa5
         y_tmp[i+1] =  alpha * y_tmp[i] + alpha2 * y_tmp[i+1];
    9fe08634:	10c7f7d3          	fmul.s	fa5,fa5,fa2
    9fe08638:	78e6f743          	fmadd.s	fa4,fa3,fa4,fa5
    9fe0863c:	fee72e27          	fsw	fa4,-4(a4)
      for (i = 0; i < N3-1; i++) {
    9fe08640:	fcd79ee3          	bne	a5,a3,9fe0861c <NLP_AES+0x724>
      }
   }

   for (i=0;i<N3;i++)
    9fe08644:	09705d63          	blez	s7,9fe086de <NLP_AES+0x7e6>
    9fe08648:	3afd                	addiw	s5,s5,-1
    9fe0864a:	020a9793          	slli	a5,s5,0x20
    9fe0864e:	01e7da93          	srli	s5,a5,0x1e
      y[i] = (short)WORD2INT(y_tmp[i]);
    9fe08652:	69a1                	lui	s3,0x8
    9fe08654:	005c                	addi	a5,sp,4
    9fe08656:	9abe                	add	s5,s5,a5
    9fe08658:	848a                	mv	s1,sp
    9fe0865a:	0000a797          	auipc	a5,0xa
    9fe0865e:	bf67a407          	flw	fs0,-1034(a5) # 9fe12250 <__func__.1+0x98>
    9fe08662:	0000a797          	auipc	a5,0xa
    9fe08666:	bf27a487          	flw	fs1,-1038(a5) # 9fe12254 <__func__.1+0x9c>
    9fe0866a:	19fd                	addi	s3,s3,-1
    9fe0866c:	0000a797          	auipc	a5,0xa
    9fe08670:	bec7b907          	fld	fs2,-1044(a5) # 9fe12258 <__func__.1+0xa0>
    9fe08674:	a031                	j	9fe08680 <NLP_AES+0x788>
    9fe08676:	00f91023          	sh	a5,0(s2)
   for (i=0;i<N3;i++)
    9fe0867a:	0909                	addi	s2,s2,2
    9fe0867c:	03548e63          	beq	s1,s5,9fe086b8 <NLP_AES+0x7c0>
      y[i] = (short)WORD2INT(y_tmp[i]);
    9fe08680:	0004a507          	flw	fa0,0(s1)
    9fe08684:	77e1                	lui	a5,0xffff8
   for (i=0;i<N3;i++)
    9fe08686:	0491                	addi	s1,s1,4
      y[i] = (short)WORD2INT(y_tmp[i]);
    9fe08688:	a0851753          	flt.s	a4,fa0,fs0
    9fe0868c:	f76d                	bnez	a4,9fe08676 <NLP_AES+0x77e>
    9fe0868e:	a0a49753          	flt.s	a4,fs1,fa0
    9fe08692:	87ce                	mv	a5,s3
    9fe08694:	f36d                	bnez	a4,9fe08676 <NLP_AES+0x77e>
    9fe08696:	42050553          	fcvt.d.s	fa0,fa0
   for (i=0;i<N3;i++)
    9fe0869a:	0909                	addi	s2,s2,2
      y[i] = (short)WORD2INT(y_tmp[i]);
    9fe0869c:	03257553          	fadd.d	fa0,fa0,fs2
    9fe086a0:	ac2f80ef          	jal	ra,9fe00962 <floor>
    9fe086a4:	c20517d3          	fcvt.w.d	a5,fa0,rtz
    9fe086a8:	0107979b          	slliw	a5,a5,0x10
    9fe086ac:	4107d79b          	sraiw	a5,a5,0x10
    9fe086b0:	fef91f23          	sh	a5,-2(s2)
   for (i=0;i<N3;i++)
    9fe086b4:	fd5496e3          	bne	s1,s5,9fe08680 <NLP_AES+0x788>
    9fe086b8:	4701                	li	a4,0

   /* Update OLA outbuf */
   for (i=0;i<N3;i++)
      st->outbuf[i] = st->frame[st->frame_size+i];  /* output 50% OLA */
    9fe086ba:	401c                	lw	a5,0(s0)
    9fe086bc:	7010                	ld	a2,32(s0)
    9fe086be:	6c54                	ld	a3,152(s0)
    9fe086c0:	9fb9                	addw	a5,a5,a4
    9fe086c2:	078a                	slli	a5,a5,0x2
    9fe086c4:	97b2                	add	a5,a5,a2
    9fe086c6:	0007a787          	flw	fa5,0(a5) # ffffffffffff8000 <_end+0xffffffff60138300>
    9fe086ca:	00271793          	slli	a5,a4,0x2
    9fe086ce:	97b6                	add	a5,a5,a3
   for (i=0;i<N3;i++)
    9fe086d0:	0705                	addi	a4,a4,1
      st->outbuf[i] = st->frame[st->frame_size+i];  /* output 50% OLA */
    9fe086d2:	00f7a027          	fsw	fa5,0(a5)
   for (i=0;i<N3;i++)
    9fe086d6:	0007079b          	sext.w	a5,a4
    9fe086da:	ff77c0e3          	blt	a5,s7,9fe086ba <NLP_AES+0x7c2>

}
    9fe086de:	31813083          	ld	ra,792(sp)
    9fe086e2:	31013403          	ld	s0,784(sp)
    9fe086e6:	30813483          	ld	s1,776(sp)
    9fe086ea:	30013903          	ld	s2,768(sp)
    9fe086ee:	2f813983          	ld	s3,760(sp)
    9fe086f2:	2f013a03          	ld	s4,752(sp)
    9fe086f6:	2e813a83          	ld	s5,744(sp)
    9fe086fa:	2e013b03          	ld	s6,736(sp)
    9fe086fe:	2d813b83          	ld	s7,728(sp)
    9fe08702:	2d013c03          	ld	s8,720(sp)
    9fe08706:	2c813c83          	ld	s9,712(sp)
    9fe0870a:	2c013d03          	ld	s10,704(sp)
    9fe0870e:	2b813407          	fld	fs0,696(sp)
    9fe08712:	2b013487          	fld	fs1,688(sp)
    9fe08716:	2a813907          	fld	fs2,680(sp)
    9fe0871a:	2a013987          	fld	fs3,672(sp)
    9fe0871e:	29813a07          	fld	fs4,664(sp)
    9fe08722:	29013a87          	fld	fs5,656(sp)
    9fe08726:	28813b07          	fld	fs6,648(sp)
    9fe0872a:	28013b87          	fld	fs7,640(sp)
    9fe0872e:	32010113          	addi	sp,sp,800
    9fe08732:	8082                	ret
      st->frame1_last_sample = y_tmp[N3-1];
    9fe08734:	fffa879b          	addiw	a5,s5,-1
    9fe08738:	078a                	slli	a5,a5,0x2
    9fe0873a:	0518                	addi	a4,sp,640
    9fe0873c:	97ba                	add	a5,a5,a4
    9fe0873e:	d807a787          	flw	fa5,-640(a5)
    9fe08742:	0ef42227          	fsw	fa5,228(s0)
   if (2 == (unsigned short)aes_frame) {
    9fe08746:	bdfd                	j	9fe08644 <NLP_AES+0x74c>
      for (i=0;i<N;i++)
    9fe08748:	fffb0c9b          	addiw	s9,s6,-1
    9fe0874c:	8b6045e3          	bgtz	s6,9fe07ff6 <NLP_AES+0xfe>
    9fe08750:	b8f9                	j	9fe0802e <NLP_AES+0x136>
    9fe08752:	0000a797          	auipc	a5,0xa
    9fe08756:	abe7a407          	flw	fs0,-1346(a5) # 9fe12210 <__func__.1+0x58>
    9fe0875a:	0000a797          	auipc	a5,0xa
    9fe0875e:	b8e7aa87          	flw	fs5,-1138(a5) # 9fe122e8 <__func__.1+0x130>
    9fe08762:	ba55                	j	9fe08116 <NLP_AES+0x21e>

000000009fe08764 <filterbank_create>:
#include "packfft.h"
#include "nlpaes_subfun.h"

/* Function Definitions */
FilterBank *filterbank_create(int banks, float sampling, int len, int type)
{
    9fe08764:	7135                	addi	sp,sp,-160
    9fe08766:	aca2                	fsd	fs0,88(sp)
   int id1;
   int id2;

   type = type;
   df = sampling / (float)(2 * len);
   max_mel = (float)toBARK(sampling/2);
    9fe08768:	0000a797          	auipc	a5,0xa
    9fe0876c:	ac87a407          	flw	fs0,-1336(a5) # 9fe12230 <__func__.1+0x78>
    9fe08770:	10857453          	fmul.s	fs0,fa0,fs0
{
    9fe08774:	b856                	fsd	fs5,48(sp)
   max_mel = (float)toBARK(sampling/2);
    9fe08776:	0000a797          	auipc	a5,0xa
    9fe0877a:	c2a7aa87          	flw	fs5,-982(a5) # 9fe123a0 <__func__.1+0x1e8>
   df = sampling / (float)(2 * len);
    9fe0877e:	0015979b          	slliw	a5,a1,0x1
{
    9fe08782:	bc52                	fsd	fs4,56(sp)
   max_mel = (float)toBARK(sampling/2);
    9fe08784:	115477d3          	fmul.s	fa5,fs0,fs5
   df = sampling / (float)(2 * len);
    9fe08788:	d007fa53          	fcvt.s.w	fs4,a5
{
    9fe0878c:	ed06                	sd	ra,152(sp)
    9fe0878e:	e922                	sd	s0,144(sp)
   df = sampling / (float)(2 * len);
    9fe08790:	19457a53          	fdiv.s	fs4,fa0,fs4
   max_mel = (float)toBARK(sampling/2);
    9fe08794:	42078553          	fcvt.d.s	fa0,fa5
{
    9fe08798:	e526                	sd	s1,136(sp)
    9fe0879a:	e14a                	sd	s2,128(sp)
    9fe0879c:	84ae                	mv	s1,a1
    9fe0879e:	892a                	mv	s2,a0
    9fe087a0:	fcce                	sd	s3,120(sp)
    9fe087a2:	f4d6                	sd	s5,104(sp)
    9fe087a4:	f0da                	sd	s6,96(sp)
    9fe087a6:	a8a6                	fsd	fs1,80(sp)
    9fe087a8:	a4ca                	fsd	fs2,72(sp)
    9fe087aa:	a0ce                	fsd	fs3,64(sp)
    9fe087ac:	b45a                	fsd	fs6,40(sp)
    9fe087ae:	b05e                	fsd	fs7,32(sp)
    9fe087b0:	ac62                	fsd	fs8,24(sp)
    9fe087b2:	a866                	fsd	fs9,16(sp)
    9fe087b4:	f8d2                	sd	s4,112(sp)
    9fe087b6:	a46a                	fsd	fs10,8(sp)
   max_mel = (float)toBARK(sampling/2);
    9fe087b8:	dd9f70ef          	jal	ra,9fe00590 <atan>
    9fe087bc:	108477d3          	fmul.s	fa5,fs0,fs0
    9fe087c0:	0000a797          	auipc	a5,0xa
    9fe087c4:	be47ab07          	flw	fs6,-1052(a5) # 9fe123a4 <__func__.1+0x1ec>
    9fe087c8:	22a504d3          	fmv.d	fs1,fa0
   mel_interval = max_mel / (float)(banks - 1);
   
   bank = (FilterBank*)mem_alloc(sizeof(FilterBank));
   bank->nb_banks = banks;
   bank->len = len;
   bank->bank_left = (int*)mem_alloc(len*sizeof(int));
    9fe087cc:	00249a9b          	slliw	s5,s1,0x2
   mel_interval = max_mel / (float)(banks - 1);
    9fe087d0:	fff9041b          	addiw	s0,s2,-1
   max_mel = (float)toBARK(sampling/2);
    9fe087d4:	1167f553          	fmul.s	fa0,fa5,fs6
    9fe087d8:	42050553          	fcvt.d.s	fa0,fa0
    9fe087dc:	db5f70ef          	jal	ra,9fe00590 <atan>
    9fe087e0:	0000a797          	auipc	a5,0xa
    9fe087e4:	bd87bb87          	fld	fs7,-1064(a5) # 9fe123b8 <__func__.1+0x200>
    9fe087e8:	13757553          	fmul.d	fa0,fa0,fs7
    9fe087ec:	0000a797          	auipc	a5,0xa
    9fe087f0:	bd47bc07          	fld	fs8,-1068(a5) # 9fe123c0 <__func__.1+0x208>
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe087f4:	02800513          	li	a0,40
    9fe087f8:	0000a797          	auipc	a5,0xa
    9fe087fc:	bb07ac87          	flw	fs9,-1104(a5) # 9fe123a8 <__func__.1+0x1f0>
    9fe08800:	11947953          	fmul.s	fs2,fs0,fs9
   mel_interval = max_mel / (float)(banks - 1);
    9fe08804:	d00479d3          	fcvt.s.w	fs3,s0
   max_mel = (float)toBARK(sampling/2);
    9fe08808:	5384f4c3          	fmadd.d	fs1,fs1,fs8,fa0
    9fe0880c:	56b050ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe08810:	02800613          	li	a2,40
    9fe08814:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe08816:	89aa                	mv	s3,a0
   memset(ptr, 0, size);
    9fe08818:	764030ef          	jal	ra,9fe0bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe0881c:	8556                	mv	a0,s5
   bank->nb_banks = banks;
    9fe0881e:	0329a023          	sw	s2,32(s3) # 8020 <_EL1_STACK_SIZE+0x7820>
   bank->len = len;
    9fe08822:	0299a223          	sw	s1,36(s3)
    9fe08826:	551050ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe0882a:	8656                	mv	a2,s5
    9fe0882c:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe0882e:	8b2a                	mv	s6,a0
   max_mel = (float)toBARK(sampling/2);
    9fe08830:	42090953          	fcvt.d.s	fs2,fs2
   memset(ptr, 0, size);
    9fe08834:	748030ef          	jal	ra,9fe0bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe08838:	8556                	mv	a0,s5
   bank->bank_left = (int*)mem_alloc(len*sizeof(int));
    9fe0883a:	0169b023          	sd	s6,0(s3)
    9fe0883e:	539050ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe08842:	8656                	mv	a2,s5
    9fe08844:	4581                	li	a1,0
   max_mel = (float)toBARK(sampling/2);
    9fe08846:	02997953          	fadd.d	fs2,fs2,fs1
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe0884a:	8b2a                	mv	s6,a0
   memset(ptr, 0, size);
    9fe0884c:	730030ef          	jal	ra,9fe0bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe08850:	8556                	mv	a0,s5
   bank->bank_right = (int*)mem_alloc(len*sizeof(int));
    9fe08852:	0169b423          	sd	s6,8(s3)
    9fe08856:	521050ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe0885a:	8656                	mv	a2,s5
    9fe0885c:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe0885e:	8b2a                	mv	s6,a0
   memset(ptr, 0, size);
    9fe08860:	71c030ef          	jal	ra,9fe0bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe08864:	8556                	mv	a0,s5
   bank->filter_left = (float*)mem_alloc(len*sizeof(float));
    9fe08866:	0169b823          	sd	s6,16(s3)
    9fe0886a:	50d050ef          	jal	ra,9fe0e576 <pvPortMalloc>
   max_mel = (float)toBARK(sampling/2);
    9fe0886e:	40197953          	fcvt.s.d	fs2,fs2
    9fe08872:	8b2a                	mv	s6,a0
   memset(ptr, 0, size);
    9fe08874:	8656                	mv	a2,s5
    9fe08876:	4581                	li	a1,0
    9fe08878:	704030ef          	jal	ra,9fe0bf7c <memset>
   bank->filter_right = (float*)mem_alloc(len*sizeof(float));
    9fe0887c:	0169bc23          	sd	s6,24(s3)
   mel_interval = max_mel / (float)(banks - 1);
    9fe08880:	193979d3          	fdiv.s	fs3,fs2,fs3
   
   //bank->scaling = (float*)mem_alloc(banks*sizeof(float));

   for (i=0;i<len;i++) {
    9fe08884:	0c905063          	blez	s1,9fe08944 <filterbank_create+0x1e0>
    9fe08888:	4a01                	li	s4,0
      } else {
         val = (mel - id1*mel_interval) / mel_interval;
      }
      id2 = id1+1;
      bank->bank_left[i] = id1;
      bank->filter_left[i] = FLOAT_ONE - val;
    9fe0888a:	0000a797          	auipc	a5,0xa
    9fe0888e:	9867ad07          	flw	fs10,-1658(a5) # 9fe12210 <__func__.1+0x58>
         id1 = banks-2;
    9fe08892:	3979                	addiw	s2,s2,-2
    9fe08894:	a80d                	j	9fe088c6 <filterbank_create+0x162>
    9fe08896:	86ca                	mv	a3,s2
      bank->bank_left[i] = id1;
    9fe08898:	0009b703          	ld	a4,0(s3)
    9fe0889c:	002a1793          	slli	a5,s4,0x2
   for (i=0;i<len;i++) {
    9fe088a0:	0a05                	addi	s4,s4,1
      bank->bank_left[i] = id1;
    9fe088a2:	973e                	add	a4,a4,a5
    9fe088a4:	c314                	sw	a3,0(a4)
      bank->filter_left[i] = FLOAT_ONE - val;
    9fe088a6:	0109b703          	ld	a4,16(s3)
    9fe088aa:	973e                	add	a4,a4,a5
    9fe088ac:	00e72027          	fsw	fa4,0(a4)
      bank->bank_right[i] = id2;
    9fe088b0:	0089b703          	ld	a4,8(s3)
    9fe088b4:	973e                	add	a4,a4,a5
    9fe088b6:	c310                	sw	a2,0(a4)
      bank->filter_right[i] = val;
    9fe088b8:	0189b703          	ld	a4,24(s3)
    9fe088bc:	97ba                	add	a5,a5,a4
    9fe088be:	00f7a027          	fsw	fa5,0(a5)
   for (i=0;i<len;i++) {
    9fe088c2:	09448163          	beq	s1,s4,9fe08944 <filterbank_create+0x1e0>
      curr_freq = (float)(i * df);
    9fe088c6:	d00a7453          	fcvt.s.w	fs0,s4
    9fe088ca:	11447453          	fmul.s	fs0,fs0,fs4
      mel = (float)toBARK(curr_freq);
    9fe088ce:	11547553          	fmul.s	fa0,fs0,fs5
    9fe088d2:	42050553          	fcvt.d.s	fa0,fa0
    9fe088d6:	cbbf70ef          	jal	ra,9fe00590 <atan>
    9fe088da:	108477d3          	fmul.s	fa5,fs0,fs0
    9fe088de:	22a504d3          	fmv.d	fs1,fa0
    9fe088e2:	1167f553          	fmul.s	fa0,fa5,fs6
    9fe088e6:	42050553          	fcvt.d.s	fa0,fa0
    9fe088ea:	ca7f70ef          	jal	ra,9fe00590 <atan>
    9fe088ee:	13757553          	fmul.d	fa0,fa0,fs7
    9fe088f2:	11947453          	fmul.s	fs0,fs0,fs9
    9fe088f6:	42040453          	fcvt.d.s	fs0,fs0
    9fe088fa:	5384f4c3          	fmadd.d	fs1,fs1,fs8,fa0
    9fe088fe:	02947453          	fadd.d	fs0,fs0,fs1
    9fe08902:	40147453          	fcvt.s.d	fs0,fs0
      if (mel > max_mel)
    9fe08906:	a08917d3          	flt.s	a5,fs2,fs0
    9fe0890a:	ef8d                	bnez	a5,9fe08944 <filterbank_create+0x1e0>
      id1 = (int)(floor(mel/mel_interval));
    9fe0890c:	19347553          	fdiv.s	fa0,fs0,fs3
    9fe08910:	42050553          	fcvt.d.s	fa0,fa0
    9fe08914:	84ef80ef          	jal	ra,9fe00962 <floor>
    9fe08918:	c20517d3          	fcvt.w.d	a5,fa0,rtz
    9fe0891c:	f0000753          	fmv.w.x	fa4,zero
         val = FLOAT_ONE;
    9fe08920:	21ad07d3          	fmv.s	fa5,fs10
      id1 = (int)(floor(mel/mel_interval));
    9fe08924:	0007869b          	sext.w	a3,a5
      if (id1>banks-2) {
    9fe08928:	8622                	mv	a2,s0
    9fe0892a:	f686d6e3          	bge	a3,s0,9fe08896 <filterbank_create+0x132>
         val = (mel - id1*mel_interval) / mel_interval;
    9fe0892e:	d007f7d3          	fcvt.s.w	fa5,a5
      id2 = id1+1;
    9fe08932:	0017861b          	addiw	a2,a5,1
         val = (mel - id1*mel_interval) / mel_interval;
    9fe08936:	4137f7cb          	fnmsub.s	fa5,fa5,fs3,fs0
    9fe0893a:	1937f7d3          	fdiv.s	fa5,fa5,fs3
      bank->filter_left[i] = FLOAT_ONE - val;
    9fe0893e:	08fd7753          	fsub.s	fa4,fs10,fa5
    9fe08942:	bf99                	j	9fe08898 <filterbank_create+0x134>
   for (i=0;i<bank->nb_banks;i++)
      bank->scaling[i] = FLOAT_ONE/(bank->scaling[i]);
   #endif
   
   return bank;
}
    9fe08944:	60ea                	ld	ra,152(sp)
    9fe08946:	644a                	ld	s0,144(sp)
    9fe08948:	64aa                	ld	s1,136(sp)
    9fe0894a:	690a                	ld	s2,128(sp)
    9fe0894c:	7a46                	ld	s4,112(sp)
    9fe0894e:	7aa6                	ld	s5,104(sp)
    9fe08950:	7b06                	ld	s6,96(sp)
    9fe08952:	2466                	fld	fs0,88(sp)
    9fe08954:	24c6                	fld	fs1,80(sp)
    9fe08956:	2926                	fld	fs2,72(sp)
    9fe08958:	2986                	fld	fs3,64(sp)
    9fe0895a:	3a62                	fld	fs4,56(sp)
    9fe0895c:	3ac2                	fld	fs5,48(sp)
    9fe0895e:	3b22                	fld	fs6,40(sp)
    9fe08960:	3b82                	fld	fs7,32(sp)
    9fe08962:	2c62                	fld	fs8,24(sp)
    9fe08964:	2cc2                	fld	fs9,16(sp)
    9fe08966:	2d22                	fld	fs10,8(sp)
    9fe08968:	854e                	mv	a0,s3
    9fe0896a:	79e6                	ld	s3,120(sp)
    9fe0896c:	610d                	addi	sp,sp,160
    9fe0896e:	8082                	ret

000000009fe08970 <filterbank_free>:

inline void filterbank_free(FilterBank *bank)
{
    9fe08970:	1141                	addi	sp,sp,-16
    9fe08972:	e406                	sd	ra,8(sp)
    9fe08974:	e022                	sd	s0,0(sp)
    9fe08976:	842a                	mv	s0,a0
   vPortFree(ptr);
    9fe08978:	6108                	ld	a0,0(a0)
    9fe0897a:	563050ef          	jal	ra,9fe0e6dc <vPortFree>
    9fe0897e:	6408                	ld	a0,8(s0)
    9fe08980:	55d050ef          	jal	ra,9fe0e6dc <vPortFree>
    9fe08984:	6808                	ld	a0,16(s0)
    9fe08986:	557050ef          	jal	ra,9fe0e6dc <vPortFree>
    9fe0898a:	6c08                	ld	a0,24(s0)
    9fe0898c:	551050ef          	jal	ra,9fe0e6dc <vPortFree>
    9fe08990:	8522                	mv	a0,s0
   mem_free(bank->bank_right);
   mem_free(bank->filter_left);
   mem_free(bank->filter_right);
   //mem_free(bank->scaling);
   mem_free(bank);
}
    9fe08992:	6402                	ld	s0,0(sp)
    9fe08994:	60a2                	ld	ra,8(sp)
    9fe08996:	0141                	addi	sp,sp,16
    9fe08998:	5450506f          	j	9fe0e6dc <vPortFree>

000000009fe0899c <filterbank_linear2sb>:

inline void filterbank_linear2sb(FilterBank *bank, float *ps, float *mel)
{
   int i;
   for (i=0;i<bank->nb_banks;i++)
    9fe0899c:	511c                	lw	a5,32(a0)
    9fe0899e:	00f05b63          	blez	a5,9fe089b4 <filterbank_linear2sb+0x18>
    9fe089a2:	8732                	mv	a4,a2
    9fe089a4:	4781                	li	a5,0
      mel[i] = 0;
    9fe089a6:	00072023          	sw	zero,0(a4)
   for (i=0;i<bank->nb_banks;i++)
    9fe089aa:	5114                	lw	a3,32(a0)
    9fe089ac:	2785                	addiw	a5,a5,1
    9fe089ae:	0711                	addi	a4,a4,4
    9fe089b0:	fed7cbe3          	blt	a5,a3,9fe089a6 <filterbank_linear2sb+0xa>

   for (i=0;i<bank->len;i++) {
    9fe089b4:	515c                	lw	a5,36(a0)
    9fe089b6:	06f05063          	blez	a5,9fe08a16 <filterbank_linear2sb+0x7a>
    9fe089ba:	4681                	li	a3,0
      int id;
      id = bank->bank_left[i];
    9fe089bc:	611c                	ld	a5,0(a0)
    9fe089be:	00269713          	slli	a4,a3,0x2
      mel[id] += (bank->filter_left[i] * ps[i]);
    9fe089c2:	01053803          	ld	a6,16(a0)
      id = bank->bank_left[i];
    9fe089c6:	97ba                	add	a5,a5,a4
      mel[id] += (bank->filter_left[i] * ps[i]);
    9fe089c8:	439c                	lw	a5,0(a5)
    9fe089ca:	983a                	add	a6,a6,a4
    9fe089cc:	0005a687          	flw	fa3,0(a1)
    9fe089d0:	078a                	slli	a5,a5,0x2
    9fe089d2:	97b2                	add	a5,a5,a2
    9fe089d4:	0007a707          	flw	fa4,0(a5)
    9fe089d8:	00082787          	flw	fa5,0(a6)
   for (i=0;i<bank->len;i++) {
    9fe089dc:	0591                	addi	a1,a1,4
    9fe089de:	0685                	addi	a3,a3,1
      mel[id] += (bank->filter_left[i] * ps[i]);
    9fe089e0:	70d7f7c3          	fmadd.s	fa5,fa5,fa3,fa4
   for (i=0;i<bank->len;i++) {
    9fe089e4:	0006889b          	sext.w	a7,a3
      mel[id] += (bank->filter_left[i] * ps[i]);
    9fe089e8:	00f7a027          	fsw	fa5,0(a5)
      id = bank->bank_right[i];
    9fe089ec:	651c                	ld	a5,8(a0)
      mel[id] += (bank->filter_right[i] * ps[i]);
    9fe089ee:	01853803          	ld	a6,24(a0)
    9fe089f2:	ffc5a687          	flw	fa3,-4(a1)
      id = bank->bank_right[i];
    9fe089f6:	97ba                	add	a5,a5,a4
      mel[id] += (bank->filter_right[i] * ps[i]);
    9fe089f8:	439c                	lw	a5,0(a5)
    9fe089fa:	9742                	add	a4,a4,a6
    9fe089fc:	00072787          	flw	fa5,0(a4)
    9fe08a00:	078a                	slli	a5,a5,0x2
    9fe08a02:	97b2                	add	a5,a5,a2
    9fe08a04:	0007a707          	flw	fa4,0(a5)
    9fe08a08:	70d7f7c3          	fmadd.s	fa5,fa5,fa3,fa4
    9fe08a0c:	00f7a027          	fsw	fa5,0(a5)
   for (i=0;i<bank->len;i++) {
    9fe08a10:	515c                	lw	a5,36(a0)
    9fe08a12:	faf8c5e3          	blt	a7,a5,9fe089bc <filterbank_linear2sb+0x20>
   
   /*for (i=0;i<bank->nb_banks;i++)
      mel[i] = (bank->scaling[i]) * mel[i];
   */

}
    9fe08a16:	8082                	ret

000000009fe08a18 <filterbank_sb2linear>:

inline void filterbank_sb2linear(FilterBank *bank, float *mel, float *ps)
{
   int i;
   for (i=0;i<bank->len;i++) {
    9fe08a18:	515c                	lw	a5,36(a0)
    9fe08a1a:	04f05a63          	blez	a5,9fe08a6e <filterbank_sb2linear+0x56>
    9fe08a1e:	88b2                	mv	a7,a2
    9fe08a20:	4601                	li	a2,0
      float tmp;
      int id1, id2;
      id1 = bank->bank_left[i];
      id2 = bank->bank_right[i];
    9fe08a22:	6518                	ld	a4,8(a0)
    9fe08a24:	00261693          	slli	a3,a2,0x2
      id1 = bank->bank_left[i];
    9fe08a28:	611c                	ld	a5,0(a0)
      id2 = bank->bank_right[i];
    9fe08a2a:	9736                	add	a4,a4,a3
      tmp =  mel[id1] * bank->filter_left[i];
      tmp += (mel[id2] * bank->filter_right[i]);
    9fe08a2c:	4318                	lw	a4,0(a4)
    9fe08a2e:	01853803          	ld	a6,24(a0)
      id1 = bank->bank_left[i];
    9fe08a32:	97b6                	add	a5,a5,a3
      tmp += (mel[id2] * bank->filter_right[i]);
    9fe08a34:	070a                	slli	a4,a4,0x2
    9fe08a36:	972e                	add	a4,a4,a1
    9fe08a38:	9836                	add	a6,a6,a3
    9fe08a3a:	00072787          	flw	fa5,0(a4)
      tmp =  mel[id1] * bank->filter_left[i];
    9fe08a3e:	439c                	lw	a5,0(a5)
      tmp += (mel[id2] * bank->filter_right[i]);
    9fe08a40:	00082707          	flw	fa4,0(a6)
      tmp =  mel[id1] * bank->filter_left[i];
    9fe08a44:	6918                	ld	a4,16(a0)
    9fe08a46:	078a                	slli	a5,a5,0x2
      tmp += (mel[id2] * bank->filter_right[i]);
    9fe08a48:	10e7f753          	fmul.s	fa4,fa5,fa4
      tmp =  mel[id1] * bank->filter_left[i];
    9fe08a4c:	97ae                	add	a5,a5,a1
    9fe08a4e:	96ba                	add	a3,a3,a4
      tmp += (mel[id2] * bank->filter_right[i]);
    9fe08a50:	0007a787          	flw	fa5,0(a5)
    9fe08a54:	0006a687          	flw	fa3,0(a3)
   for (i=0;i<bank->len;i++) {
    9fe08a58:	0891                	addi	a7,a7,4
    9fe08a5a:	0605                	addi	a2,a2,1
      tmp += (mel[id2] * bank->filter_right[i]);
    9fe08a5c:	70d7f7c3          	fmadd.s	fa5,fa5,fa3,fa4
   for (i=0;i<bank->len;i++) {
    9fe08a60:	0006079b          	sext.w	a5,a2
      ps[i] = tmp;
    9fe08a64:	fef8ae27          	fsw	fa5,-4(a7)
   for (i=0;i<bank->len;i++) {
    9fe08a68:	5158                	lw	a4,36(a0)
    9fe08a6a:	fae7cce3          	blt	a5,a4,9fe08a22 <filterbank_sb2linear+0xa>
   }
}
    9fe08a6e:	8082                	ret

000000009fe08a70 <aes_conj_window>:

inline void aes_conj_window(float *w, int len)  /* Hanning */
{
   int i;
   for (i=0;i<len;i++) {
    9fe08a70:	12b05863          	blez	a1,9fe08ba0 <aes_conj_window+0x130>
{
    9fe08a74:	711d                	addi	sp,sp,-96
    9fe08a76:	e8a2                	sd	s0,80(sp)
    9fe08a78:	e4a6                	sd	s1,72(sp)
    9fe08a7a:	e0ca                	sd	s2,64(sp)
    9fe08a7c:	bc22                	fsd	fs0,56(sp)
    9fe08a7e:	b826                	fsd	fs1,48(sp)
    9fe08a80:	b44a                	fsd	fs2,40(sp)
    9fe08a82:	b04e                	fsd	fs3,32(sp)
    9fe08a84:	ac52                	fsd	fs4,24(sp)
    9fe08a86:	a856                	fsd	fs5,16(sp)
    9fe08a88:	a45a                	fsd	fs6,8(sp)
    9fe08a8a:	a05e                	fsd	fs7,0(sp)
      float tmp;    
      float x = (float)(4.f * i) / (float)len;
    9fe08a8c:	d005fb53          	fcvt.s.w	fs6,a1
{
    9fe08a90:	ec86                	sd	ra,88(sp)
    9fe08a92:	84ae                	mv	s1,a1
    9fe08a94:	842a                	mv	s0,a0
   for (i=0;i<len;i++) {
    9fe08a96:	4901                	li	s2,0
    9fe08a98:	0000a797          	auipc	a5,0xa
    9fe08a9c:	8d87a907          	flw	fs2,-1832(a5) # 9fe12370 <__func__.1+0x1b8>
    9fe08aa0:	00009797          	auipc	a5,0x9
    9fe08aa4:	7707a487          	flw	fs1,1904(a5) # 9fe12210 <__func__.1+0x58>
    9fe08aa8:	0000a797          	auipc	a5,0xa
    9fe08aac:	9047aa87          	flw	fs5,-1788(a5) # 9fe123ac <__func__.1+0x1f4>
    9fe08ab0:	0000a797          	auipc	a5,0xa
    9fe08ab4:	9187ba07          	fld	fs4,-1768(a5) # 9fe123c8 <__func__.1+0x210>
    9fe08ab8:	00009797          	auipc	a5,0x9
    9fe08abc:	7787a407          	flw	fs0,1912(a5) # 9fe12230 <__func__.1+0x78>
      int inv = 0;
      if (x<1.f) {
      } else if (x<2.f) {
    9fe08ac0:	00009797          	auipc	a5,0x9
    9fe08ac4:	78c7a987          	flw	fs3,1932(a5) # 9fe1224c <__func__.1+0x94>
         x = 2.f-x;
         inv = 1;
      } else if (x<3.f) {
    9fe08ac8:	00009797          	auipc	a5,0x9
    9fe08acc:	7c87ab87          	flw	fs7,1992(a5) # 9fe12290 <__func__.1+0xd8>
    9fe08ad0:	a081                	j	9fe08b10 <aes_conj_window+0xa0>
      } else if (x<2.f) {
    9fe08ad2:	a13517d3          	flt.s	a5,fa0,fs3
    9fe08ad6:	cfd1                	beqz	a5,9fe08b72 <aes_conj_window+0x102>
         x = 2.f-x;
    9fe08ad8:	08a9f553          	fsub.s	fa0,fs3,fa0
         x = x-2.f;
         inv = 1;
      } else {
         x = 4.f-x;
      }
      x = 1.271903f * x;
    9fe08adc:	11557553          	fmul.s	fa0,fa0,fs5
   for (i=0;i<len;i++) {
    9fe08ae0:	0411                	addi	s0,s0,4
    9fe08ae2:	2905                	addiw	s2,s2,1
      tmp = .5f-.5f * (float)math_cos_norm(x);  /* Hanning */
    9fe08ae4:	42050553          	fcvt.d.s	fa0,fa0
    9fe08ae8:	13457553          	fmul.d	fa0,fa0,fs4
    9fe08aec:	de7f70ef          	jal	ra,9fe008d2 <cos>
    9fe08af0:	40157553          	fcvt.s.d	fa0,fa0
    9fe08af4:	4085754b          	fnmsub.s	fa0,fa0,fs0,fs0
      tmp = tmp * tmp;
      if (inv)
         tmp = FLOAT_ONE - tmp;
    9fe08af8:	48a5754b          	fnmsub.s	fa0,fa0,fa0,fs1
      w[i] = (float)math_sqrt(tmp);
    9fe08afc:	42050553          	fcvt.d.s	fa0,fa0
    9fe08b00:	af2f80ef          	jal	ra,9fe00df2 <sqrt>
    9fe08b04:	40157553          	fcvt.s.d	fa0,fa0
    9fe08b08:	fea42e27          	fsw	fa0,-4(s0)
   for (i=0;i<len;i++) {
    9fe08b0c:	05248563          	beq	s1,s2,9fe08b56 <aes_conj_window+0xe6>
      float x = (float)(4.f * i) / (float)len;
    9fe08b10:	d0097553          	fcvt.s.w	fa0,s2
    9fe08b14:	11257553          	fmul.s	fa0,fa0,fs2
    9fe08b18:	19657553          	fdiv.s	fa0,fa0,fs6
      if (x<1.f) {
    9fe08b1c:	a09517d3          	flt.s	a5,fa0,fs1
    9fe08b20:	dbcd                	beqz	a5,9fe08ad2 <aes_conj_window+0x62>
      x = 1.271903f * x;
    9fe08b22:	11557553          	fmul.s	fa0,fa0,fs5
      tmp = .5f-.5f * (float)math_cos_norm(x);  /* Hanning */
    9fe08b26:	42050553          	fcvt.d.s	fa0,fa0
    9fe08b2a:	13457553          	fmul.d	fa0,fa0,fs4
    9fe08b2e:	da5f70ef          	jal	ra,9fe008d2 <cos>
    9fe08b32:	40157553          	fcvt.s.d	fa0,fa0
    9fe08b36:	4085754b          	fnmsub.s	fa0,fa0,fs0,fs0
      tmp = tmp * tmp;
    9fe08b3a:	10a57553          	fmul.s	fa0,fa0,fa0
      w[i] = (float)math_sqrt(tmp);
    9fe08b3e:	42050553          	fcvt.d.s	fa0,fa0
   for (i=0;i<len;i++) {
    9fe08b42:	0411                	addi	s0,s0,4
    9fe08b44:	2905                	addiw	s2,s2,1
      w[i] = (float)math_sqrt(tmp);
    9fe08b46:	aacf80ef          	jal	ra,9fe00df2 <sqrt>
    9fe08b4a:	40157553          	fcvt.s.d	fa0,fa0
    9fe08b4e:	fea42e27          	fsw	fa0,-4(s0)
   for (i=0;i<len;i++) {
    9fe08b52:	fb249fe3          	bne	s1,s2,9fe08b10 <aes_conj_window+0xa0>

   }
}
    9fe08b56:	60e6                	ld	ra,88(sp)
    9fe08b58:	6446                	ld	s0,80(sp)
    9fe08b5a:	64a6                	ld	s1,72(sp)
    9fe08b5c:	6906                	ld	s2,64(sp)
    9fe08b5e:	3462                	fld	fs0,56(sp)
    9fe08b60:	34c2                	fld	fs1,48(sp)
    9fe08b62:	3922                	fld	fs2,40(sp)
    9fe08b64:	3982                	fld	fs3,32(sp)
    9fe08b66:	2a62                	fld	fs4,24(sp)
    9fe08b68:	2ac2                	fld	fs5,16(sp)
    9fe08b6a:	2b22                	fld	fs6,8(sp)
    9fe08b6c:	2b82                	fld	fs7,0(sp)
    9fe08b6e:	6125                	addi	sp,sp,96
    9fe08b70:	8082                	ret
      } else if (x<3.f) {
    9fe08b72:	a17517d3          	flt.s	a5,fa0,fs7
    9fe08b76:	c781                	beqz	a5,9fe08b7e <aes_conj_window+0x10e>
         x = x-2.f;
    9fe08b78:	09357553          	fsub.s	fa0,fa0,fs3
         inv = 1;
    9fe08b7c:	b785                	j	9fe08adc <aes_conj_window+0x6c>
         x = 4.f-x;
    9fe08b7e:	08a97553          	fsub.s	fa0,fs2,fa0
      x = 1.271903f * x;
    9fe08b82:	11557553          	fmul.s	fa0,fa0,fs5
      tmp = .5f-.5f * (float)math_cos_norm(x);  /* Hanning */
    9fe08b86:	42050553          	fcvt.d.s	fa0,fa0
    9fe08b8a:	13457553          	fmul.d	fa0,fa0,fs4
    9fe08b8e:	d45f70ef          	jal	ra,9fe008d2 <cos>
    9fe08b92:	40157553          	fcvt.s.d	fa0,fa0
    9fe08b96:	4085754b          	fnmsub.s	fa0,fa0,fs0,fs0
      tmp = tmp * tmp;
    9fe08b9a:	10a57553          	fmul.s	fa0,fa0,fa0
      if (inv)
    9fe08b9e:	b745                	j	9fe08b3e <aes_conj_window+0xce>
    9fe08ba0:	8082                	ret

000000009fe08ba2 <aes_hypergeom_gain>:

inline float aes_hypergeom_gain(float vk)
{
    9fe08ba2:	1101                	addi	sp,sp,-32
    9fe08ba4:	a422                	fsd	fs0,8(sp)
   0.82157f, 1.02017f, 1.20461f, 1.37534f, 1.53363f, 1.68092f, 1.81865f,
   1.94811f, 2.07038f, 2.18638f, 2.29688f, 2.40255f, 2.50391f, 2.60144f,
   2.69551f, 2.78647f, 2.87458f, 2.96015f, 3.04333f, 3.12431f, 3.20326f};

   x = AES_EXPIN_SCALING*vk;
   integer = (float)floor(2*x);
    9fe08ba6:	00a57453          	fadd.s	fs0,fa0,fa0
{
    9fe08baa:	a026                	fsd	fs1,0(sp)
    9fe08bac:	20a504d3          	fmv.s	fs1,fa0
    9fe08bb0:	ec06                	sd	ra,24(sp)
   integer = (float)floor(2*x);
    9fe08bb2:	42040553          	fcvt.d.s	fa0,fs0
    9fe08bb6:	dadf70ef          	jal	ra,9fe00962 <floor>
    9fe08bba:	40157553          	fcvt.s.d	fa0,fa0
   ind = (int)integer;
    9fe08bbe:	c00517d3          	fcvt.w.s	a5,fa0,rtz
    9fe08bc2:	0007871b          	sext.w	a4,a5
   if (ind<0)
    9fe08bc6:	08074863          	bltz	a4,9fe08c56 <aes_hypergeom_gain+0xb4>
      return AES_FRAC_SCALING;
   if (ind>19)
    9fe08bca:	46cd                	li	a3,19
    9fe08bcc:	02e6d763          	bge	a3,a4,9fe08bfa <aes_hypergeom_gain+0x58>
      return (float)(AES_FRAC_SCALING*(1.f+.1296/x));
    9fe08bd0:	420484d3          	fcvt.d.s	fs1,fs1
    9fe08bd4:	00009797          	auipc	a5,0x9
    9fe08bd8:	7fc7b507          	fld	fa0,2044(a5) # 9fe123d0 <__func__.1+0x218>
    9fe08bdc:	00009797          	auipc	a5,0x9
    9fe08be0:	6f47b787          	fld	fa5,1780(a5) # 9fe122d0 <__func__.1+0x118>
    9fe08be4:	1a957553          	fdiv.d	fa0,fa0,fs1
   frac = 2*x-integer;
   return (float)(AES_FRAC_SCALING*((1.f-frac)*table[ind] + frac*table[ind+1])/sqrt(x+.0001f));
   
}
    9fe08be8:	60e2                	ld	ra,24(sp)
    9fe08bea:	2422                	fld	fs0,8(sp)
    9fe08bec:	2482                	fld	fs1,0(sp)
    9fe08bee:	6105                	addi	sp,sp,32
      return (float)(AES_FRAC_SCALING*(1.f+.1296/x));
    9fe08bf0:	02f57553          	fadd.d	fa0,fa0,fa5
    9fe08bf4:	40157553          	fcvt.s.d	fa0,fa0
}
    9fe08bf8:	8082                	ret
   return (float)(AES_FRAC_SCALING*((1.f-frac)*table[ind] + frac*table[ind+1])/sqrt(x+.0001f));
    9fe08bfa:	2785                	addiw	a5,a5,1
   frac = 2*x-integer;
    9fe08bfc:	08a47553          	fsub.s	fa0,fs0,fa0
   return (float)(AES_FRAC_SCALING*((1.f-frac)*table[ind] + frac*table[ind+1])/sqrt(x+.0001f));
    9fe08c00:	00009697          	auipc	a3,0x9
    9fe08c04:	2f068693          	addi	a3,a3,752 # 9fe11ef0 <table.0>
    9fe08c08:	078a                	slli	a5,a5,0x2
    9fe08c0a:	97b6                	add	a5,a5,a3
    9fe08c0c:	0007a787          	flw	fa5,0(a5)
    9fe08c10:	00009797          	auipc	a5,0x9
    9fe08c14:	6007a407          	flw	fs0,1536(a5) # 9fe12210 <__func__.1+0x58>
    9fe08c18:	08a47453          	fsub.s	fs0,fs0,fa0
    9fe08c1c:	10f577d3          	fmul.s	fa5,fa0,fa5
    9fe08c20:	070a                	slli	a4,a4,0x2
    9fe08c22:	9736                	add	a4,a4,a3
    9fe08c24:	00009797          	auipc	a5,0x9
    9fe08c28:	7847a507          	flw	fa0,1924(a5) # 9fe123a8 <__func__.1+0x1f0>
    9fe08c2c:	00a4f553          	fadd.s	fa0,fs1,fa0
    9fe08c30:	00072707          	flw	fa4,0(a4)
    9fe08c34:	78e47443          	fmadd.s	fs0,fs0,fa4,fa5
    9fe08c38:	42050553          	fcvt.d.s	fa0,fa0
    9fe08c3c:	9b6f80ef          	jal	ra,9fe00df2 <sqrt>
    9fe08c40:	42040453          	fcvt.d.s	fs0,fs0
}
    9fe08c44:	60e2                	ld	ra,24(sp)
    9fe08c46:	2482                	fld	fs1,0(sp)
   return (float)(AES_FRAC_SCALING*((1.f-frac)*table[ind] + frac*table[ind+1])/sqrt(x+.0001f));
    9fe08c48:	1aa47553          	fdiv.d	fa0,fs0,fa0
}
    9fe08c4c:	2422                	fld	fs0,8(sp)
    9fe08c4e:	6105                	addi	sp,sp,32
   return (float)(AES_FRAC_SCALING*((1.f-frac)*table[ind] + frac*table[ind+1])/sqrt(x+.0001f));
    9fe08c50:	40157553          	fcvt.s.d	fa0,fa0
}
    9fe08c54:	8082                	ret
    9fe08c56:	60e2                	ld	ra,24(sp)
    9fe08c58:	2422                	fld	fs0,8(sp)
    9fe08c5a:	2482                	fld	fs1,0(sp)
      return AES_FRAC_SCALING;
    9fe08c5c:	00009797          	auipc	a5,0x9
    9fe08c60:	5b47a507          	flw	fa0,1460(a5) # 9fe12210 <__func__.1+0x58>
}
    9fe08c64:	6105                	addi	sp,sp,32
    9fe08c66:	8082                	ret

000000009fe08c68 <aes_qcurve>:

inline float aes_qcurve(float x)
{
   return 1.f/(1.f+.15f/(AES_SNR_SCALING*x));
    9fe08c68:	00009797          	auipc	a5,0x9
    9fe08c6c:	6147a787          	flw	fa5,1556(a5) # 9fe1227c <__func__.1+0xc4>
    9fe08c70:	18a7f7d3          	fdiv.s	fa5,fa5,fa0
    9fe08c74:	00009797          	auipc	a5,0x9
    9fe08c78:	59c7a707          	flw	fa4,1436(a5) # 9fe12210 <__func__.1+0x58>
    9fe08c7c:	00e7f7d3          	fadd.s	fa5,fa5,fa4
}
    9fe08c80:	18f77553          	fdiv.s	fa0,fa4,fa5
    9fe08c84:	8082                	ret

000000009fe08c86 <aes_gain_floor>:
inline void aes_gain_floor(float effective_echo_suppress, float *echo, float *gain_floor, int len)
{
   int i;
   float echo_floor;

   echo_floor = (float)exp(.2302585f * effective_echo_suppress);
    9fe08c86:	00009797          	auipc	a5,0x9
    9fe08c8a:	72a7a787          	flw	fa5,1834(a5) # 9fe123b0 <__func__.1+0x1f8>
    9fe08c8e:	10f57553          	fmul.s	fa0,fa0,fa5
{
    9fe08c92:	7139                	addi	sp,sp,-64
    9fe08c94:	f04a                	sd	s2,32(sp)
    9fe08c96:	8932                	mv	s2,a2
    9fe08c98:	f822                	sd	s0,48(sp)
   echo_floor = (float)exp(.2302585f * effective_echo_suppress);
    9fe08c9a:	42050553          	fcvt.d.s	fa0,fa0
{
    9fe08c9e:	f426                	sd	s1,40(sp)
    9fe08ca0:	fc06                	sd	ra,56(sp)
    9fe08ca2:	ac22                	fsd	fs0,24(sp)
    9fe08ca4:	a826                	fsd	fs1,16(sp)
    9fe08ca6:	a44a                	fsd	fs2,8(sp)
    9fe08ca8:	842a                	mv	s0,a0
    9fe08caa:	84ae                	mv	s1,a1
   echo_floor = (float)exp(.2302585f * effective_echo_suppress);
    9fe08cac:	f35f70ef          	jal	ra,9fe00be0 <exp>

   /* Compute the gain floor for the residual echo */
   for (i=0;i<len;i++)
    9fe08cb0:	05205e63          	blez	s2,9fe08d0c <aes_gain_floor+0x86>
    9fe08cb4:	397d                	addiw	s2,s2,-1
    9fe08cb6:	02091793          	slli	a5,s2,0x20
    9fe08cba:	401574d3          	fcvt.s.d	fs1,fa0
    9fe08cbe:	01e7d913          	srli	s2,a5,0x1e
    9fe08cc2:	00440793          	addi	a5,s0,4
    9fe08cc6:	993e                	add	s2,s2,a5
    9fe08cc8:	00009797          	auipc	a5,0x9
    9fe08ccc:	5487a907          	flw	fs2,1352(a5) # 9fe12210 <__func__.1+0x58>
      gain_floor[i] = AES_FRAC_SCALING * (float)sqrt(echo_floor * echo[i]) / (float)sqrt(1.f + echo[i]);
    9fe08cd0:	00042507          	flw	fa0,0(s0)
   for (i=0;i<len;i++)
    9fe08cd4:	0411                	addi	s0,s0,4
    9fe08cd6:	0491                	addi	s1,s1,4
      gain_floor[i] = AES_FRAC_SCALING * (float)sqrt(echo_floor * echo[i]) / (float)sqrt(1.f + echo[i]);
    9fe08cd8:	10a4f553          	fmul.s	fa0,fs1,fa0
    9fe08cdc:	42050553          	fcvt.d.s	fa0,fa0
    9fe08ce0:	912f80ef          	jal	ra,9fe00df2 <sqrt>
    9fe08ce4:	ffc42787          	flw	fa5,-4(s0)
    9fe08ce8:	22a50453          	fmv.d	fs0,fa0
    9fe08cec:	0127f553          	fadd.s	fa0,fa5,fs2
    9fe08cf0:	42050553          	fcvt.d.s	fa0,fa0
    9fe08cf4:	8fef80ef          	jal	ra,9fe00df2 <sqrt>
    9fe08cf8:	40157553          	fcvt.s.d	fa0,fa0
    9fe08cfc:	40147453          	fcvt.s.d	fs0,fs0
    9fe08d00:	18a47453          	fdiv.s	fs0,fs0,fa0
    9fe08d04:	fe84ae27          	fsw	fs0,-4(s1)
   for (i=0;i<len;i++)
    9fe08d08:	fd2414e3          	bne	s0,s2,9fe08cd0 <aes_gain_floor+0x4a>
}
    9fe08d0c:	70e2                	ld	ra,56(sp)
    9fe08d0e:	7442                	ld	s0,48(sp)
    9fe08d10:	74a2                	ld	s1,40(sp)
    9fe08d12:	7902                	ld	s2,32(sp)
    9fe08d14:	2462                	fld	fs0,24(sp)
    9fe08d16:	24c2                	fld	fs1,16(sp)
    9fe08d18:	2922                	fld	fs2,8(sp)
    9fe08d1a:	6121                	addi	sp,sp,64
    9fe08d1c:	8082                	ret

000000009fe08d1e <aes_analysis>:

inline void aes_analysis(NonLinearEchoState *st, short *x)
{
    9fe08d1e:	1101                	addi	sp,sp,-32
    9fe08d20:	e822                	sd	s0,16(sp)
    9fe08d22:	ec06                	sd	ra,24(sp)
    9fe08d24:	e426                	sd	s1,8(sp)
    9fe08d26:	e04a                	sd	s2,0(sp)
   int i;
   int N = st->ps_size;
    9fe08d28:	00452903          	lw	s2,4(a0)
   int N3 = 2*N - st->frame_size;
    9fe08d2c:	411c                	lw	a5,0(a0)
   float *ps = st->ps;
    9fe08d2e:	7904                	ld	s1,48(a0)
   int N3 = 2*N - st->frame_size;
    9fe08d30:	0019189b          	slliw	a7,s2,0x1
{
    9fe08d34:	842a                	mv	s0,a0
   int N3 = 2*N - st->frame_size;
    9fe08d36:	40f8853b          	subw	a0,a7,a5

   /* Build input buffer for windowing */      
   for (i=0;i<st->frame_size;i++) {
    9fe08d3a:	04f05663          	blez	a5,9fe08d86 <aes_analysis+0x68>
    9fe08d3e:	050a                	slli	a0,a0,0x2
    9fe08d40:	4781                	li	a5,0
      st->frame[i] = st->inbuf[i];  /* take data in previous frame */
    9fe08d42:	6850                	ld	a2,144(s0)
    9fe08d44:	00279693          	slli	a3,a5,0x2
    9fe08d48:	7018                	ld	a4,32(s0)
    9fe08d4a:	9636                	add	a2,a2,a3
    9fe08d4c:	00062787          	flw	fa5,0(a2)
    9fe08d50:	9736                	add	a4,a4,a3
   for (i=0;i<st->frame_size;i++) {
    9fe08d52:	0589                	addi	a1,a1,2
      st->frame[i] = st->inbuf[i];  /* take data in previous frame */
    9fe08d54:	00f72027          	fsw	fa5,0(a4)
      st->frame[N3+i] = x[i];  /* take data in current frame */
    9fe08d58:	ffe59803          	lh	a6,-2(a1)
    9fe08d5c:	7018                	ld	a4,32(s0)
   for (i=0;i<st->frame_size;i++) {
    9fe08d5e:	0785                	addi	a5,a5,1
      st->frame[N3+i] = x[i];  /* take data in current frame */
    9fe08d60:	d00877d3          	fcvt.s.w	fa5,a6
    9fe08d64:	972a                	add	a4,a4,a0
   for (i=0;i<st->frame_size;i++) {
    9fe08d66:	0007861b          	sext.w	a2,a5
      st->frame[N3+i] = x[i];  /* take data in current frame */
    9fe08d6a:	00f72027          	fsw	fa5,0(a4)
      st->inbuf[i] = x[i];  /* update data in previous frame */
    9fe08d6e:	ffe59803          	lh	a6,-2(a1)
    9fe08d72:	6858                	ld	a4,144(s0)
   for (i=0;i<st->frame_size;i++) {
    9fe08d74:	0511                	addi	a0,a0,4
      st->inbuf[i] = x[i];  /* update data in previous frame */
    9fe08d76:	d00877d3          	fcvt.s.w	fa5,a6
    9fe08d7a:	9736                	add	a4,a4,a3
    9fe08d7c:	00f72027          	fsw	fa5,0(a4)
   for (i=0;i<st->frame_size;i++) {
    9fe08d80:	4018                	lw	a4,0(s0)
    9fe08d82:	fce640e3          	blt	a2,a4,9fe08d42 <aes_analysis+0x24>
   }

   /* Windowing */
   for (i=0;i<2*N;i++)
    9fe08d86:	03105463          	blez	a7,9fe08dae <aes_analysis+0x90>
    9fe08d8a:	00289613          	slli	a2,a7,0x2
    9fe08d8e:	4781                	li	a5,0
      st->frame[i] = st->frame[i] * st->window[i];
    9fe08d90:	7018                	ld	a4,32(s0)
    9fe08d92:	6434                	ld	a3,72(s0)
    9fe08d94:	973e                	add	a4,a4,a5
    9fe08d96:	96be                	add	a3,a3,a5
    9fe08d98:	00072787          	flw	fa5,0(a4)
    9fe08d9c:	0006a707          	flw	fa4,0(a3)
   for (i=0;i<2*N;i++)
    9fe08da0:	0791                	addi	a5,a5,4
      st->frame[i] = st->frame[i] * st->window[i];
    9fe08da2:	10e7f7d3          	fmul.s	fa5,fa5,fa4
    9fe08da6:	00f72027          	fsw	fa5,0(a4)
   for (i=0;i<2*N;i++)
    9fe08daa:	fef613e3          	bne	a2,a5,9fe08d90 <aes_analysis+0x72>
   
   /* Perform FFT */
   speech_fft(st->fft_lookup, st->frame, st->ft);
    9fe08dae:	7410                	ld	a2,40(s0)
    9fe08db0:	700c                	ld	a1,32(s0)
    9fe08db2:	7448                	ld	a0,168(s0)
    9fe08db4:	2e8000ef          	jal	ra,9fe0909c <speech_fft>

   /* Power spectrum */
   ps[0] = st->ft[0] * st->ft[0];  /* re^2 */
    9fe08db8:	7418                	ld	a4,40(s0)
   for (i=1;i<N;i++)  /* 0 to N-1 is enough for filterbank computation */
    9fe08dba:	4785                	li	a5,1
   ps[0] = st->ft[0] * st->ft[0];  /* re^2 */
    9fe08dbc:	00072787          	flw	fa5,0(a4)
    9fe08dc0:	10f7f7d3          	fmul.s	fa5,fa5,fa5
    9fe08dc4:	00f4a027          	fsw	fa5,0(s1)
   for (i=1;i<N;i++)  /* 0 to N-1 is enough for filterbank computation */
    9fe08dc8:	0327dc63          	bge	a5,s2,9fe08e00 <aes_analysis+0xe2>
    9fe08dcc:	ffe9061b          	addiw	a2,s2,-2
    9fe08dd0:	02061793          	slli	a5,a2,0x20
    9fe08dd4:	01d7d613          	srli	a2,a5,0x1d
    9fe08dd8:	00448693          	addi	a3,s1,4
    9fe08ddc:	0631                	addi	a2,a2,12
    9fe08dde:	4711                	li	a4,4
      ps[i] = st->ft[2*i-1] * st->ft[2*i-1] + st->ft[2*i] * st->ft[2*i];  /* re^2 + im^2 */
    9fe08de0:	741c                	ld	a5,40(s0)
   for (i=1;i<N;i++)  /* 0 to N-1 is enough for filterbank computation */
    9fe08de2:	0691                	addi	a3,a3,4
      ps[i] = st->ft[2*i-1] * st->ft[2*i-1] + st->ft[2*i] * st->ft[2*i];  /* re^2 + im^2 */
    9fe08de4:	97ba                	add	a5,a5,a4
    9fe08de6:	0047a707          	flw	fa4,4(a5)
    9fe08dea:	0007a787          	flw	fa5,0(a5)
   for (i=1;i<N;i++)  /* 0 to N-1 is enough for filterbank computation */
    9fe08dee:	0721                	addi	a4,a4,8
      ps[i] = st->ft[2*i-1] * st->ft[2*i-1] + st->ft[2*i] * st->ft[2*i];  /* re^2 + im^2 */
    9fe08df0:	10e77753          	fmul.s	fa4,fa4,fa4
    9fe08df4:	70f7f7c3          	fmadd.s	fa5,fa5,fa5,fa4
    9fe08df8:	fef6ae27          	fsw	fa5,-4(a3)
   for (i=1;i<N;i++)  /* 0 to N-1 is enough for filterbank computation */
    9fe08dfc:	fee612e3          	bne	a2,a4,9fe08de0 <aes_analysis+0xc2>

   filterbank_linear2sb(st->bank, ps, ps+N);
    9fe08e00:	6818                	ld	a4,16(s0)
    9fe08e02:	090a                	slli	s2,s2,0x2
    9fe08e04:	9926                	add	s2,s2,s1
   for (i=0;i<bank->nb_banks;i++)
    9fe08e06:	531c                	lw	a5,32(a4)
    9fe08e08:	00f05b63          	blez	a5,9fe08e1e <aes_analysis+0x100>
    9fe08e0c:	86ca                	mv	a3,s2
    9fe08e0e:	4781                	li	a5,0
      mel[i] = 0;
    9fe08e10:	0006a023          	sw	zero,0(a3)
   for (i=0;i<bank->nb_banks;i++)
    9fe08e14:	5310                	lw	a2,32(a4)
    9fe08e16:	2785                	addiw	a5,a5,1
    9fe08e18:	0691                	addi	a3,a3,4
    9fe08e1a:	fec7cbe3          	blt	a5,a2,9fe08e10 <aes_analysis+0xf2>
   for (i=0;i<bank->len;i++) {
    9fe08e1e:	535c                	lw	a5,36(a4)
    9fe08e20:	04f05f63          	blez	a5,9fe08e7e <aes_analysis+0x160>
    9fe08e24:	8626                	mv	a2,s1
    9fe08e26:	4581                	li	a1,0
      id = bank->bank_left[i];
    9fe08e28:	631c                	ld	a5,0(a4)
    9fe08e2a:	00259693          	slli	a3,a1,0x2
      mel[id] += (bank->filter_left[i] * ps[i]);
    9fe08e2e:	6b08                	ld	a0,16(a4)
      id = bank->bank_left[i];
    9fe08e30:	97b6                	add	a5,a5,a3
      mel[id] += (bank->filter_left[i] * ps[i]);
    9fe08e32:	439c                	lw	a5,0(a5)
    9fe08e34:	9536                	add	a0,a0,a3
    9fe08e36:	00062687          	flw	fa3,0(a2)
    9fe08e3a:	078a                	slli	a5,a5,0x2
    9fe08e3c:	97ca                	add	a5,a5,s2
    9fe08e3e:	0007a707          	flw	fa4,0(a5)
    9fe08e42:	00052787          	flw	fa5,0(a0)
   for (i=0;i<bank->len;i++) {
    9fe08e46:	0611                	addi	a2,a2,4
    9fe08e48:	0585                	addi	a1,a1,1
      mel[id] += (bank->filter_left[i] * ps[i]);
    9fe08e4a:	70d7f7c3          	fmadd.s	fa5,fa5,fa3,fa4
   for (i=0;i<bank->len;i++) {
    9fe08e4e:	0005881b          	sext.w	a6,a1
      mel[id] += (bank->filter_left[i] * ps[i]);
    9fe08e52:	00f7a027          	fsw	fa5,0(a5)
      id = bank->bank_right[i];
    9fe08e56:	671c                	ld	a5,8(a4)
      mel[id] += (bank->filter_right[i] * ps[i]);
    9fe08e58:	6f08                	ld	a0,24(a4)
    9fe08e5a:	ffc62687          	flw	fa3,-4(a2)
      id = bank->bank_right[i];
    9fe08e5e:	97b6                	add	a5,a5,a3
      mel[id] += (bank->filter_right[i] * ps[i]);
    9fe08e60:	439c                	lw	a5,0(a5)
    9fe08e62:	96aa                	add	a3,a3,a0
    9fe08e64:	0006a787          	flw	fa5,0(a3)
    9fe08e68:	078a                	slli	a5,a5,0x2
    9fe08e6a:	97ca                	add	a5,a5,s2
    9fe08e6c:	0007a707          	flw	fa4,0(a5)
    9fe08e70:	70d7f7c3          	fmadd.s	fa5,fa5,fa3,fa4
    9fe08e74:	00f7a027          	fsw	fa5,0(a5)
   for (i=0;i<bank->len;i++) {
    9fe08e78:	535c                	lw	a5,36(a4)
    9fe08e7a:	faf847e3          	blt	a6,a5,9fe08e28 <aes_analysis+0x10a>
   
}
    9fe08e7e:	60e2                	ld	ra,24(sp)
    9fe08e80:	6442                	ld	s0,16(sp)
    9fe08e82:	64a2                	ld	s1,8(sp)
    9fe08e84:	6902                	ld	s2,0(sp)
    9fe08e86:	6105                	addi	sp,sp,32
    9fe08e88:	8082                	ret

000000009fe08e8a <notch_para>:
      {8192,0,8192,0,-16096, 16240}
  };

  /* Notch Filter Parameter */
  para_obj = para;
  tmp = MIN(MAX(para_obj->para_notch_freq, 0), 1);    /* the notch freq, 0 for 1kHz and 1 for 4kHz */
    9fe08e8a:	01c5d783          	lhu	a5,28(a1)
    9fe08e8e:	0107971b          	slliw	a4,a5,0x10
    9fe08e92:	4107571b          	sraiw	a4,a4,0x10
    9fe08e96:	c311                	beqz	a4,9fe08e9a <notch_para+0x10>
    9fe08e98:	4785                	li	a5,1
  if (Fs == 8000.0F)
    9fe08e9a:	00009717          	auipc	a4,0x9
    9fe08e9e:	4da72787          	flw	fa5,1242(a4) # 9fe12374 <__func__.1+0x1bc>
    9fe08ea2:	03079713          	slli	a4,a5,0x30
    9fe08ea6:	9341                	srli	a4,a4,0x30
    9fe08ea8:	a0f526d3          	feq.s	a3,fa0,fa5
    9fe08eac:	00171793          	slli	a5,a4,0x1
    9fe08eb0:	97ba                	add	a5,a5,a4
    9fe08eb2:	078a                	slli	a5,a5,0x2
    9fe08eb4:	ca81                	beqz	a3,9fe08ec4 <notch_para+0x3a>
    notch_obj->qcoef = &nb_notch_coef[tmp][0];
    9fe08eb6:	0000a717          	auipc	a4,0xa
    9fe08eba:	1ca70713          	addi	a4,a4,458 # 9fe13080 <nb_notch_coef.1>
    9fe08ebe:	97ba                	add	a5,a5,a4
    9fe08ec0:	e11c                	sd	a5,0(a0)
  else
    notch_obj->qcoef = &wb_notch_coef[tmp][0];
  
}
    9fe08ec2:	8082                	ret
    notch_obj->qcoef = &wb_notch_coef[tmp][0];
    9fe08ec4:	0000a717          	auipc	a4,0xa
    9fe08ec8:	1d470713          	addi	a4,a4,468 # 9fe13098 <wb_notch_coef.0>
    9fe08ecc:	97ba                	add	a5,a5,a4
    9fe08ece:	e11c                	sd	a5,0(a0)
}
    9fe08ed0:	8082                	ret

000000009fe08ed2 <notch_init>:
void notch_init(qfilter_struct *notch_obj, int *notch_state)
{
  unsigned short i;

  for(i=0; i<4;i++) {
    notch_state[i] = 0;
    9fe08ed2:	0005a023          	sw	zero,0(a1)
    9fe08ed6:	0005a223          	sw	zero,4(a1)
    9fe08eda:	0005a423          	sw	zero,8(a1)
    9fe08ede:	0005a623          	sw	zero,12(a1)
  }

  notch_obj->nq = 1;
    9fe08ee2:	4785                	li	a5,1
    9fe08ee4:	00f51823          	sh	a5,16(a0)
  notch_obj->pstate = notch_state;
    9fe08ee8:	e50c                	sd	a1,8(a0)
  
}
    9fe08eea:	8082                	ret

000000009fe08eec <notch_filter>:

  //initialize
  acc0 =0;

	ptr1 = pin;
	ptr2 = pout;
    9fe08eec:	00169793          	slli	a5,a3,0x1
{
    9fe08ef0:	7159                	addi	sp,sp,-112
    9fe08ef2:	97aa                	add	a5,a5,a0
    9fe08ef4:	f4a2                	sd	s0,104(sp)
    9fe08ef6:	f0a6                	sd	s1,96(sp)
    9fe08ef8:	ecca                	sd	s2,88(sp)
    9fe08efa:	e8ce                	sd	s3,80(sp)
    9fe08efc:	e4d2                	sd	s4,72(sp)
    9fe08efe:	e0d6                	sd	s5,64(sp)
    9fe08f00:	fc5a                	sd	s6,56(sp)
    9fe08f02:	f85e                	sd	s7,48(sp)
    9fe08f04:	f462                	sd	s8,40(sp)
    9fe08f06:	f066                	sd	s9,32(sp)
    9fe08f08:	ec6a                	sd	s10,24(sp)
    9fe08f0a:	e86e                	sd	s11,16(sp)
    9fe08f0c:	e43e                	sd	a5,8(sp)

	for(i = frame_size; i > 0; i--) {
    9fe08f0e:	10d05a63          	blez	a3,9fe09022 <notch_filter+0x136>
			acc0 = (((int)((int)acc0>>16)) * (*pcoef));
		else
			acc0 = -(((int)(-(int)acc0>>16)) * (*pcoef));  /* remove zero-inputs-limit-cycle osicillation */

		//acc0 = MAX(((int)0x80000000), (MIN(0x7fffffff, (((int)acc0)<<3))));
		acc0 = MAX(((int)0x80000000), (MIN(0x7fffffff, ((acc0)<<3))));  /* Q3.13 */
    9fe08f12:	80000db7          	lui	s11,0x80000
			acc0 = ((unsigned short)(xn))*(*pcoef++);  /* low part */
    9fe08f16:	63c1                	lui	t2,0x10
    9fe08f18:	8baa                	mv	s7,a0
    9fe08f1a:	8c2e                	mv	s8,a1
    9fe08f1c:	8cb2                	mv	s9,a2
    9fe08f1e:	4781                	li	a5,0
    9fe08f20:	13fd                	addi	t2,t2,-1
		acc0 = MAX(((int)0x80000000), (MIN(0x7fffffff, ((acc0)<<3))));  /* Q3.13 */
    9fe08f22:	fffdcd13          	not	s10,s11
	 	xn = (((int) (*ptr1++))<<16);
    9fe08f26:	000b9e83          	lh	t4,0(s7)
		for(j = filter->nq; j > 0; j--) {
    9fe08f2a:	010cdb03          	lhu	s6,16(s9)
		pcoef = filter->qcoef;
    9fe08f2e:	000cba83          	ld	s5,0(s9)
		pst = filter->pstate;
    9fe08f32:	008cb703          	ld	a4,8(s9)
	 	xn = (((int) (*ptr1++))<<16);
    9fe08f36:	0b89                	addi	s7,s7,2
    9fe08f38:	010e9e9b          	slliw	t4,t4,0x10
		for(j = filter->nq; j > 0; j--) {
    9fe08f3c:	100b0a63          	beqz	s6,9fe09050 <notch_filter+0x164>
    9fe08f40:	004b1a13          	slli	s4,s6,0x4
    9fe08f44:	9a3a                	add	s4,s4,a4
		pcoef = filter->qcoef;
    9fe08f46:	8356                	mv	t1,s5
			xn1 = *pst;  /* take x(n-1) */
    9fe08f48:	4314                	lw	a3,0(a4)
			acc0 = ((unsigned short)(xn))*(*pcoef++);  /* low part */
    9fe08f4a:	00031983          	lh	s3,0(t1)
			*pst++ = xn;  /* update x(n-1)*/
    9fe08f4e:	01d72023          	sw	t4,0(a4)
			acc0 += ((unsigned short)(xn1))*(*pcoef++);  /* low part */
    9fe08f52:	00231903          	lh	s2,2(t1)
			xn2 = *pst;  /* take x(n-2) */
    9fe08f56:	00472803          	lw	a6,4(a4)
			*pst++ = xn1;  /* update x(n-2) */
    9fe08f5a:	c354                	sw	a3,4(a4)
			acc0 += ((unsigned short)(xn2))*(*pcoef++);  /* low part */
    9fe08f5c:	00431483          	lh	s1,4(t1)
			yn1 = *pst++;  /* take y(n-1) */
    9fe08f60:	470c                	lw	a1,8(a4)
			acc0 += ((unsigned short)(yn1))*(*pcoef++);  /* low part */
    9fe08f62:	00631403          	lh	s0,6(t1)
			yn2 = *pst;  /* take y(n-2) */
    9fe08f66:	475c                	lw	a5,12(a4)
			acc0 = ((unsigned short)(xn))*(*pcoef++);  /* low part */
    9fe08f68:	007ef633          	and	a2,t4,t2
			acc0 += ((unsigned short)(xn1))*(*pcoef++);  /* low part */
    9fe08f6c:	0076f2b3          	and	t0,a3,t2
			coef_tmp5 = *pcoef;  /* for high part */
    9fe08f70:	00831503          	lh	a0,8(t1)
			acc0 += ((unsigned short)(xn2))*(*pcoef++);  /* low part */
    9fe08f74:	00787fb3          	and	t6,a6,t2
			acc0 = ((unsigned short)(xn))*(*pcoef++);  /* low part */
    9fe08f78:	02c9863b          	mulw	a2,s3,a2
			acc0 += ((unsigned short)(yn1))*(*pcoef++);  /* low part */
    9fe08f7c:	0075ff33          	and	t5,a1,t2
			acc0 += ((unsigned short)(yn2))*(*pcoef++);  /* low part */
    9fe08f80:	0077f8b3          	and	a7,a5,t2
			state_tmp1 = ((short)(xn>>0x10));  /* for high part */
    9fe08f84:	410ede9b          	sraiw	t4,t4,0x10
			state_tmp2 = ((short)(xn1>>0x10));  /* for high part */
    9fe08f88:	4106d69b          	sraiw	a3,a3,0x10
			state_tmp3 = ((short)(xn2>>0x10));  /* for high part */
    9fe08f8c:	4108581b          	sraiw	a6,a6,0x10
			state_tmp4 = ((short)(yn1>>0x10));  /* for high part */
    9fe08f90:	4105de1b          	sraiw	t3,a1,0x10
			state_tmp5 = ((short)(yn2>>0x10));  /* for high part */
    9fe08f94:	4107d79b          	sraiw	a5,a5,0x10
    9fe08f98:	0741                	addi	a4,a4,16
			*pst++ = yn1;  /* update y(n-2) */
    9fe08f9a:	feb72e23          	sw	a1,-4(a4)
			acc0 += ((unsigned short)(xn1))*(*pcoef++);  /* low part */
    9fe08f9e:	025902bb          	mulw	t0,s2,t0
    9fe08fa2:	0329                	addi	t1,t1,10
			acc0 += ((unsigned short)(xn2))*(*pcoef++);  /* low part */
    9fe08fa4:	03f48fbb          	mulw	t6,s1,t6
			acc0 += ((unsigned short)(xn1))*(*pcoef++);  /* low part */
    9fe08fa8:	9616                	add	a2,a2,t0
			acc0 += ((unsigned short)(yn1))*(*pcoef++);  /* low part */
    9fe08faa:	03e40f3b          	mulw	t5,s0,t5
			acc0 += ((unsigned short)(xn2))*(*pcoef++);  /* low part */
    9fe08fae:	9fb2                	add	t6,t6,a2
			acc0 += ((unsigned short)(yn2))*(*pcoef++);  /* low part */
    9fe08fb0:	02a888bb          	mulw	a7,a7,a0
			acc0 += ((unsigned short)(yn1))*(*pcoef++);  /* low part */
    9fe08fb4:	9f7e                	add	t5,t5,t6
			acc0 += ((short)(state_tmp1))*coef_tmp1;  /* high part */
    9fe08fb6:	033e8ebb          	mulw	t4,t4,s3
			acc0 += ((unsigned short)(yn2))*(*pcoef++);  /* low part */
    9fe08fba:	98fa                	add	a7,a7,t5
			acc0 >>= 0x10;  /* be low part */
    9fe08fbc:	4108d893          	srai	a7,a7,0x10
			acc0 += ((short)(state_tmp2))*coef_tmp2;  /* high part */
    9fe08fc0:	032686bb          	mulw	a3,a3,s2
			acc0 += ((short)(state_tmp1))*coef_tmp1;  /* high part */
    9fe08fc4:	9ec6                	add	t4,t4,a7
			acc0 += ((short)(state_tmp3))*coef_tmp3;  /* high part */
    9fe08fc6:	0298083b          	mulw	a6,a6,s1
			acc0 += ((short)(state_tmp2))*coef_tmp2;  /* high part */
    9fe08fca:	9eb6                	add	t4,t4,a3
			acc0 += ((short)(state_tmp4))*coef_tmp4;  /* high part */
    9fe08fcc:	028e0e3b          	mulw	t3,t3,s0
			acc0 += ((short)(state_tmp3))*coef_tmp3;  /* high part */
    9fe08fd0:	9876                	add	a6,a6,t4
			acc0 += ((short)(state_tmp5))*coef_tmp5;  /* high part */
    9fe08fd2:	02a78ebb          	mulw	t4,a5,a0
			acc0 += ((short)(state_tmp4))*coef_tmp4;  /* high part */
    9fe08fd6:	9e42                	add	t3,t3,a6
			acc0 += ((short)(state_tmp5))*coef_tmp5;  /* high part */
    9fe08fd8:	9ef2                	add	t4,t4,t3
			acc0 = MAX(((int)0x80000000), (MIN(0x7fffffff, (((int)acc0)<<2))));  /* Q2.14 */
    9fe08fda:	002e9e9b          	slliw	t4,t4,0x2
			pst[-2] = (int)acc0 ;  /* update y(n-1) */
    9fe08fde:	ffd72c23          	sw	t4,-8(a4)
		for(j = filter->nq; j > 0; j--) {
    9fe08fe2:	f74713e3          	bne	a4,s4,9fe08f48 <notch_filter+0x5c>
			acc0 += ((unsigned short)(yn2))*(*pcoef++);  /* low part */
    9fe08fe6:	002b1793          	slli	a5,s6,0x2
    9fe08fea:	9b3e                	add	s6,s6,a5
    9fe08fec:	0b06                	slli	s6,s6,0x1
    9fe08fee:	9ada                	add	s5,s5,s6
			acc0 = MAX(((int)0x80000000), (MIN(0x7fffffff, (((int)acc0)<<2))));  /* Q2.14 */
    9fe08ff0:	87f6                	mv	a5,t4
			acc0 = (((int)((int)acc0>>16)) * (*pcoef));
    9fe08ff2:	000a9703          	lh	a4,0(s5)
		if(acc0>=0)
    9fe08ff6:	0407c463          	bltz	a5,9fe0903e <notch_filter+0x152>
			acc0 = (((int)((int)acc0>>16)) * (*pcoef));
    9fe08ffa:	410ed79b          	sraiw	a5,t4,0x10
    9fe08ffe:	02e787bb          	mulw	a5,a5,a4
		acc0 = MAX(((int)0x80000000), (MIN(0x7fffffff, ((acc0)<<3))));  /* Q3.13 */
    9fe09002:	078e                	slli	a5,a5,0x3
    9fe09004:	00fd5363          	bge	s10,a5,9fe0900a <notch_filter+0x11e>
    9fe09008:	87ea                	mv	a5,s10
    9fe0900a:	01b7d463          	bge	a5,s11,9fe09012 <notch_filter+0x126>
    9fe0900e:	800007b7          	lui	a5,0x80000
		*ptr2++ = (short)(acc0>>16);
    9fe09012:	4107d713          	srai	a4,a5,0x10
    9fe09016:	00ec1023          	sh	a4,0(s8)
	for(i = frame_size; i > 0; i--) {
    9fe0901a:	6722                	ld	a4,8(sp)
		*ptr2++ = (short)(acc0>>16);
    9fe0901c:	0c09                	addi	s8,s8,2
	for(i = frame_size; i > 0; i--) {
    9fe0901e:	f0eb94e3          	bne	s7,a4,9fe08f26 <notch_filter+0x3a>

	}

}
    9fe09022:	7426                	ld	s0,104(sp)
    9fe09024:	7486                	ld	s1,96(sp)
    9fe09026:	6966                	ld	s2,88(sp)
    9fe09028:	69c6                	ld	s3,80(sp)
    9fe0902a:	6a26                	ld	s4,72(sp)
    9fe0902c:	6a86                	ld	s5,64(sp)
    9fe0902e:	7b62                	ld	s6,56(sp)
    9fe09030:	7bc2                	ld	s7,48(sp)
    9fe09032:	7c22                	ld	s8,40(sp)
    9fe09034:	7c82                	ld	s9,32(sp)
    9fe09036:	6d62                	ld	s10,24(sp)
    9fe09038:	6dc2                	ld	s11,16(sp)
    9fe0903a:	6165                	addi	sp,sp,112
    9fe0903c:	8082                	ret
			acc0 = -(((int)(-(int)acc0>>16)) * (*pcoef));  /* remove zero-inputs-limit-cycle osicillation */
    9fe0903e:	41d00ebb          	negw	t4,t4
    9fe09042:	410ed79b          	sraiw	a5,t4,0x10
    9fe09046:	02e787bb          	mulw	a5,a5,a4
    9fe0904a:	40f007bb          	negw	a5,a5
    9fe0904e:	bf55                	j	9fe09002 <notch_filter+0x116>
			acc0 = (((int)((int)acc0>>16)) * (*pcoef));
    9fe09050:	00078e9b          	sext.w	t4,a5
    9fe09054:	bf79                	j	9fe08ff2 <notch_filter+0x106>

000000009fe09056 <speech_fft_init>:
#include "fftcore.h"
#include "packfft.h"

/* Function Definitions */
void *speech_fft_init(int size)
{
    9fe09056:	1101                	addi	sp,sp,-32
    9fe09058:	e426                	sd	s1,8(sp)
    9fe0905a:	84aa                	mv	s1,a0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe0905c:	4561                	li	a0,24
    9fe0905e:	ec06                	sd	ra,24(sp)
    9fe09060:	e822                	sd	s0,16(sp)
    9fe09062:	514050ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe09066:	4661                	li	a2,24
    9fe09068:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe0906a:	842a                	mv	s0,a0
   memset(ptr, 0, size);
    9fe0906c:	711020ef          	jal	ra,9fe0bf7c <memset>
   struct drft_lookup *table;
   table = mem_alloc(sizeof(struct drft_lookup));
   core_drft_init((struct drft_lookup *)table, size);
    9fe09070:	8522                	mv	a0,s0
    9fe09072:	85a6                	mv	a1,s1
    9fe09074:	375020ef          	jal	ra,9fe0bbe8 <core_drft_init>
   return (void*)table;
}
    9fe09078:	60e2                	ld	ra,24(sp)
    9fe0907a:	8522                	mv	a0,s0
    9fe0907c:	6442                	ld	s0,16(sp)
    9fe0907e:	64a2                	ld	s1,8(sp)
    9fe09080:	6105                	addi	sp,sp,32
    9fe09082:	8082                	ret

000000009fe09084 <speech_fft_free>:

void speech_fft_free(void *table)
{
    9fe09084:	1141                	addi	sp,sp,-16
    9fe09086:	e022                	sd	s0,0(sp)
    9fe09088:	e406                	sd	ra,8(sp)
    9fe0908a:	842a                	mv	s0,a0
   core_drft_clear(table);
    9fe0908c:	567020ef          	jal	ra,9fe0bdf2 <core_drft_clear>
   vPortFree(ptr);
    9fe09090:	8522                	mv	a0,s0
   mem_free(table);
}
    9fe09092:	6402                	ld	s0,0(sp)
    9fe09094:	60a2                	ld	ra,8(sp)
    9fe09096:	0141                	addi	sp,sp,16
    9fe09098:	6440506f          	j	9fe0e6dc <vPortFree>

000000009fe0909c <speech_fft>:

void speech_fft(void *table, float *in, float *out)
{
   if (in==out) {
      int i;
      float scale = (float)(1./((struct drft_lookup *)table)->n);
    9fe0909c:	00052803          	lw	a6,0(a0)
    9fe090a0:	00009797          	auipc	a5,0x9
    9fe090a4:	2307b707          	fld	fa4,560(a5) # 9fe122d0 <__func__.1+0x118>
{
    9fe090a8:	87ae                	mv	a5,a1
      float scale = (float)(1./((struct drft_lookup *)table)->n);
    9fe090aa:	d20807d3          	fcvt.d.w	fa5,a6
{
    9fe090ae:	85b2                	mv	a1,a2
      float scale = (float)(1./((struct drft_lookup *)table)->n);
    9fe090b0:	1af77753          	fdiv.d	fa4,fa4,fa5
    9fe090b4:	40177753          	fcvt.s.d	fa4,fa4
   if (in==out) {
    9fe090b8:	02c78563          	beq	a5,a2,9fe090e2 <speech_fft+0x46>
      for (i=0;i<((struct drft_lookup *)table)->n;i++)
         out[i] = scale*in[i];
   } else {
      int i;
      float scale = (float)(1./((struct drft_lookup *)table)->n);
      for (i=0;i<((struct drft_lookup *)table)->n;i++)
    9fe090bc:	03005163          	blez	a6,9fe090de <speech_fft+0x42>
    9fe090c0:	86b2                	mv	a3,a2
    9fe090c2:	4701                	li	a4,0
         out[i] = scale*in[i];
    9fe090c4:	0007a787          	flw	fa5,0(a5)
      for (i=0;i<((struct drft_lookup *)table)->n;i++)
    9fe090c8:	0691                	addi	a3,a3,4
    9fe090ca:	2705                	addiw	a4,a4,1
         out[i] = scale*in[i];
    9fe090cc:	10e7f7d3          	fmul.s	fa5,fa5,fa4
      for (i=0;i<((struct drft_lookup *)table)->n;i++)
    9fe090d0:	0791                	addi	a5,a5,4
         out[i] = scale*in[i];
    9fe090d2:	fef6ae27          	fsw	fa5,-4(a3)
      for (i=0;i<((struct drft_lookup *)table)->n;i++)
    9fe090d6:	00052803          	lw	a6,0(a0)
    9fe090da:	ff0745e3          	blt	a4,a6,9fe090c4 <speech_fft+0x28>
   }
   core_drft_forward((struct drft_lookup *)table, out);
    9fe090de:	0070206f          	j	9fe0b8e4 <core_drft_forward>
      for (i=0;i<((struct drft_lookup *)table)->n;i++)
    9fe090e2:	86b2                	mv	a3,a2
    9fe090e4:	8732                	mv	a4,a2
    9fe090e6:	4781                	li	a5,0
    9fe090e8:	ff005be3          	blez	a6,9fe090de <speech_fft+0x42>
         out[i] = scale*in[i];
    9fe090ec:	0006a787          	flw	fa5,0(a3)
      for (i=0;i<((struct drft_lookup *)table)->n;i++)
    9fe090f0:	0711                	addi	a4,a4,4
    9fe090f2:	2785                	addiw	a5,a5,1
         out[i] = scale*in[i];
    9fe090f4:	10e7f7d3          	fmul.s	fa5,fa5,fa4
      for (i=0;i<((struct drft_lookup *)table)->n;i++)
    9fe090f8:	0691                	addi	a3,a3,4
         out[i] = scale*in[i];
    9fe090fa:	fef72e27          	fsw	fa5,-4(a4)
      for (i=0;i<((struct drft_lookup *)table)->n;i++)
    9fe090fe:	4110                	lw	a2,0(a0)
    9fe09100:	fec7c6e3          	blt	a5,a2,9fe090ec <speech_fft+0x50>
   core_drft_forward((struct drft_lookup *)table, out);
    9fe09104:	7e00206f          	j	9fe0b8e4 <core_drft_forward>

000000009fe09108 <speech_ifft>:
}

void speech_ifft(void *table, float *in, float *out)
{
    9fe09108:	87ae                	mv	a5,a1
    9fe0910a:	85b2                	mv	a1,a2
   if (in==out) {
    9fe0910c:	02c78263          	beq	a5,a2,9fe09130 <speech_ifft+0x28>
      //speech_warning("FFT should not be done in-place");
   } else {
      int i;
      for (i=0;i<((struct drft_lookup *)table)->n;i++)
    9fe09110:	4118                	lw	a4,0(a0)
    9fe09112:	00e05f63          	blez	a4,9fe09130 <speech_ifft+0x28>
    9fe09116:	86b2                	mv	a3,a2
    9fe09118:	4701                	li	a4,0
         out[i] = in[i];
    9fe0911a:	0007a787          	flw	fa5,0(a5)
      for (i=0;i<((struct drft_lookup *)table)->n;i++)
    9fe0911e:	2705                	addiw	a4,a4,1
    9fe09120:	0791                	addi	a5,a5,4
         out[i] = in[i];
    9fe09122:	00f6a027          	fsw	fa5,0(a3)
      for (i=0;i<((struct drft_lookup *)table)->n;i++)
    9fe09126:	00052803          	lw	a6,0(a0)
    9fe0912a:	0691                	addi	a3,a3,4
    9fe0912c:	ff0747e3          	blt	a4,a6,9fe0911a <speech_ifft+0x12>
   }
   core_drft_backward((struct drft_lookup *)table, out);
    9fe09130:	1290206f          	j	9fe0ba58 <core_drft_backward>

000000009fe09134 <c_power>:

/* Function Definitions */
void c_power(const float a[], float y[], int N)
{
  int k;
  for (k = 0; k < N; k++) {
    9fe09134:	02c05563          	blez	a2,9fe0915e <c_power+0x2a>
    9fe09138:	fff6079b          	addiw	a5,a2,-1
    9fe0913c:	02079713          	slli	a4,a5,0x20
    9fe09140:	01e75793          	srli	a5,a4,0x1e
    9fe09144:	00450713          	addi	a4,a0,4
    9fe09148:	97ba                	add	a5,a5,a4
    y[k] = a[k] * a[k];
    9fe0914a:	00052787          	flw	fa5,0(a0)
  for (k = 0; k < N; k++) {
    9fe0914e:	0591                	addi	a1,a1,4
    9fe09150:	0511                	addi	a0,a0,4
    y[k] = a[k] * a[k];
    9fe09152:	10f7f7d3          	fmul.s	fa5,fa5,fa5
    9fe09156:	fef5ae27          	fsw	fa5,-4(a1)
  for (k = 0; k < N; k++) {
    9fe0915a:	fef518e3          	bne	a0,a5,9fe0914a <c_power+0x16>
  }
}
    9fe0915e:	8082                	ret

000000009fe09160 <d_power>:

void d_power(const float a[321], float y[321])
{
    9fe09160:	1101                	addi	sp,sp,-32
    9fe09162:	e822                	sd	s0,16(sp)
    9fe09164:	e426                	sd	s1,8(sp)
    9fe09166:	e04a                	sd	s2,0(sp)
    9fe09168:	ec06                	sd	ra,24(sp)
    9fe0916a:	842a                	mv	s0,a0
    9fe0916c:	84ae                	mv	s1,a1
    9fe0916e:	50450913          	addi	s2,a0,1284
  int k;
  for (k = 0; k < 321; k++) {
    y[k] = (float)sqrt(a[k]);
    9fe09172:	00042507          	flw	fa0,0(s0)
  for (k = 0; k < 321; k++) {
    9fe09176:	0491                	addi	s1,s1,4
    9fe09178:	0411                	addi	s0,s0,4
    y[k] = (float)sqrt(a[k]);
    9fe0917a:	42050553          	fcvt.d.s	fa0,fa0
    9fe0917e:	c75f70ef          	jal	ra,9fe00df2 <sqrt>
    9fe09182:	40157553          	fcvt.s.d	fa0,fa0
    9fe09186:	fea4ae27          	fsw	fa0,-4(s1)
  for (k = 0; k < 321; k++) {
    9fe0918a:	ff2414e3          	bne	s0,s2,9fe09172 <d_power+0x12>
  }
}
    9fe0918e:	60e2                	ld	ra,24(sp)
    9fe09190:	6442                	ld	s0,16(sp)
    9fe09192:	64a2                	ld	s1,8(sp)
    9fe09194:	6902                	ld	s2,0(sp)
    9fe09196:	6105                	addi	sp,sp,32
    9fe09198:	8082                	ret

000000009fe0919a <slope_detection>:
  float temp;

  /*  signal power change based VAD */
  /*  consider small speech at the biginning, ensure it is not suppressed */
  instant_slope = 0;
  for (k = 0; k < 5; k++) {    /* subband based */
    9fe0919a:	613c                	ld	a5,64(a0)
    temp = st->amp_inst_band[k] / 4.0F;
    if ((temp - st->amp_inst_band[5 + k] > 0.0F) || (temp - st->amp_inst_band[10 + k] > 0.0F)) {
    9fe0919c:	f00006d3          	fmv.w.x	fa3,zero
  instant_slope = 0;
    9fe091a0:	4681                	li	a3,0
    9fe091a2:	01478613          	addi	a2,a5,20
    9fe091a6:	00009717          	auipc	a4,0x9
    9fe091aa:	0fa72607          	flw	fa2,250(a4) # 9fe122a0 <__func__.1+0xe8>
    temp = st->amp_inst_band[k] / 4.0F;
    9fe091ae:	0007a787          	flw	fa5,0(a5)
    if ((temp - st->amp_inst_band[5 + k] > 0.0F) || (temp - st->amp_inst_band[10 + k] > 0.0F)) {
    9fe091b2:	0147a707          	flw	fa4,20(a5)
    temp = st->amp_inst_band[k] / 4.0F;
    9fe091b6:	10c7f7d3          	fmul.s	fa5,fa5,fa2
    if ((temp - st->amp_inst_band[5 + k] > 0.0F) || (temp - st->amp_inst_band[10 + k] > 0.0F)) {
    9fe091ba:	08e7f753          	fsub.s	fa4,fa5,fa4
    9fe091be:	a0e69753          	flt.s	a4,fa3,fa4
    9fe091c2:	cb0d                	beqz	a4,9fe091f4 <slope_detection+0x5a>
      instant_slope = 1;
    9fe091c4:	4685                	li	a3,1
  for (k = 0; k < 5; k++) {    /* subband based */
    9fe091c6:	0791                	addi	a5,a5,4
    9fe091c8:	fef613e3          	bne	a2,a5,9fe091ae <slope_detection+0x14>
    }
  }

  if (instant_slope == 0) {
    9fe091cc:	ee85                	bnez	a3,9fe09204 <slope_detection+0x6a>
    temp = st->vad_slope_cnt - 1.0F;
    9fe091ce:	06852787          	flw	fa5,104(a0)
    9fe091d2:	00009797          	auipc	a5,0x9
    9fe091d6:	03e7a687          	flw	fa3,62(a5) # 9fe12210 <__func__.1+0x58>
    if (0.0F > temp) {
    9fe091da:	f0000753          	fmv.w.x	fa4,zero
    temp = st->vad_slope_cnt - 1.0F;
    9fe091de:	08d7f7d3          	fsub.s	fa5,fa5,fa3
    if (0.0F > temp) {
    9fe091e2:	a0e797d3          	flt.s	a5,fa5,fa4
    9fe091e6:	e3bd                	bnez	a5,9fe0924c <slope_detection+0xb2>
      temp = 0.0F;
    }

    st->vad_slope_cnt = temp;
    if (temp == 0.0F) {
    9fe091e8:	a0e7a7d3          	feq.s	a5,fa5,fa4
    st->vad_slope_cnt = temp;
    9fe091ec:	06f52427          	fsw	fa5,104(a0)
    if (temp == 0.0F) {
    9fe091f0:	e3a5                	bnez	a5,9fe09250 <slope_detection+0xb6>
        st->vad_slope_cnt = 4.0F;
      }
    }
  }

}
    9fe091f2:	8082                	ret
    if ((temp - st->amp_inst_band[5 + k] > 0.0F) || (temp - st->amp_inst_band[10 + k] > 0.0F)) {
    9fe091f4:	0287a707          	flw	fa4,40(a5)
    9fe091f8:	08e7f7d3          	fsub.s	fa5,fa5,fa4
    9fe091fc:	a0f69753          	flt.s	a4,fa3,fa5
    9fe09200:	f371                	bnez	a4,9fe091c4 <slope_detection+0x2a>
    9fe09202:	b7d1                	j	9fe091c6 <slope_detection+0x2c>
    if (st->Fs == 16000.0F) {
    9fe09204:	09c52787          	flw	fa5,156(a0)
    st->vad_slope = 1.0F;
    9fe09208:	00009797          	auipc	a5,0x9
    9fe0920c:	0087a707          	flw	fa4,8(a5) # 9fe12210 <__func__.1+0x58>
    if (st->Fs == 16000.0F) {
    9fe09210:	00009797          	auipc	a5,0x9
    9fe09214:	0047a687          	flw	fa3,4(a5) # 9fe12214 <__func__.1+0x5c>
    9fe09218:	a0d7a7d3          	feq.s	a5,fa5,fa3
    st->vad_slope = 1.0F;
    9fe0921c:	06e52627          	fsw	fa4,108(a0)
    if (st->Fs == 16000.0F) {
    9fe09220:	cb81                	beqz	a5,9fe09230 <slope_detection+0x96>
      st->vad_slope_cnt = 8.0F;
    9fe09222:	00009797          	auipc	a5,0x9
    9fe09226:	1b67a787          	flw	fa5,438(a5) # 9fe123d8 <__func__.1+0x220>
    9fe0922a:	06f52427          	fsw	fa5,104(a0)
    9fe0922e:	8082                	ret
      if (st->Fs == 8000.0F) {
    9fe09230:	00009797          	auipc	a5,0x9
    9fe09234:	1447a707          	flw	fa4,324(a5) # 9fe12374 <__func__.1+0x1bc>
    9fe09238:	a0e7a7d3          	feq.s	a5,fa5,fa4
    9fe0923c:	dbdd                	beqz	a5,9fe091f2 <slope_detection+0x58>
        st->vad_slope_cnt = 4.0F;
    9fe0923e:	00009797          	auipc	a5,0x9
    9fe09242:	1327a787          	flw	fa5,306(a5) # 9fe12370 <__func__.1+0x1b8>
    9fe09246:	06f52427          	fsw	fa5,104(a0)
}
    9fe0924a:	8082                	ret
    st->vad_slope_cnt = temp;
    9fe0924c:	06052423          	sw	zero,104(a0)
      st->vad_slope = 0.0F;
    9fe09250:	06052623          	sw	zero,108(a0)
    9fe09254:	8082                	ret

000000009fe09256 <c_sum>:
float c_sum(const float x[], int N)
{
  float y;
  int k;
  y = x[0];
  for (k = 0; k < N-1; k++) {
    9fe09256:	4785                	li	a5,1
  y = x[0];
    9fe09258:	00052507          	flw	fa0,0(a0)
  for (k = 0; k < N-1; k++) {
    9fe0925c:	02b7d363          	bge	a5,a1,9fe09282 <c_sum+0x2c>
    9fe09260:	ffe5879b          	addiw	a5,a1,-2
    9fe09264:	02079713          	slli	a4,a5,0x20
    9fe09268:	01e75793          	srli	a5,a4,0x1e
    9fe0926c:	00850713          	addi	a4,a0,8
    9fe09270:	97ba                	add	a5,a5,a4
    9fe09272:	0511                	addi	a0,a0,4
    y += x[k + 1];
    9fe09274:	00052787          	flw	fa5,0(a0)
  for (k = 0; k < N-1; k++) {
    9fe09278:	0511                	addi	a0,a0,4
    y += x[k + 1];
    9fe0927a:	00f57553          	fadd.s	fa0,fa0,fa5
  for (k = 0; k < N-1; k++) {
    9fe0927e:	fef51be3          	bne	a0,a5,9fe09274 <c_sum+0x1e>
  }

  return y;
}
    9fe09282:	8082                	ret

000000009fe09284 <a_abs>:

/* Function Definitions */
void a_abs(const creal32_T a[321], float y[321], int N)
{
  int k;
  for (k = 0; k < N; k++) {
    9fe09284:	04c05463          	blez	a2,9fe092cc <a_abs+0x48>
{
    9fe09288:	1101                	addi	sp,sp,-32
    9fe0928a:	e04a                	sd	s2,0(sp)
    9fe0928c:	fff6091b          	addiw	s2,a2,-1
    9fe09290:	02091793          	slli	a5,s2,0x20
    9fe09294:	01d7d913          	srli	s2,a5,0x1d
    9fe09298:	00850793          	addi	a5,a0,8
    9fe0929c:	e822                	sd	s0,16(sp)
    9fe0929e:	e426                	sd	s1,8(sp)
    9fe092a0:	ec06                	sd	ra,24(sp)
    9fe092a2:	842a                	mv	s0,a0
    9fe092a4:	84ae                	mv	s1,a1
    9fe092a6:	993e                	add	s2,s2,a5
    y[k] = rt_hypotf(a[k].re, a[k].im);
    9fe092a8:	00442587          	flw	fa1,4(s0)
    9fe092ac:	00042507          	flw	fa0,0(s0)
  for (k = 0; k < N; k++) {
    9fe092b0:	0491                	addi	s1,s1,4
    9fe092b2:	0421                	addi	s0,s0,8
    y[k] = rt_hypotf(a[k].re, a[k].im);
    9fe092b4:	39b020ef          	jal	ra,9fe0be4e <rt_hypotf>
    9fe092b8:	fea4ae27          	fsw	fa0,-4(s1)
  for (k = 0; k < N; k++) {
    9fe092bc:	ff2416e3          	bne	s0,s2,9fe092a8 <a_abs+0x24>
  }
}
    9fe092c0:	60e2                	ld	ra,24(sp)
    9fe092c2:	6442                	ld	s0,16(sp)
    9fe092c4:	64a2                	ld	s1,8(sp)
    9fe092c6:	6902                	ld	s2,0(sp)
    9fe092c8:	6105                	addi	sp,sp,32
    9fe092ca:	8082                	ret
    9fe092cc:	8082                	ret

000000009fe092ce <AGC>:
#include "agc_init.h"
#include "agc.h"

/* Function Definitions */
void AGC(short *sin, short *sout, agc_struct *agc_obj, ssp_para_struct *para_obj, boolean_T speech_vad, boolean_T st_vad, int nenr_silence_time, int nenr_silence_cnt, short path)
{
    9fe092ce:	7175                	addi	sp,sp,-144
    9fe092d0:	f86a                	sd	s10,48(sp)
  short sig_out;
  short sig_err;
  int temp32;
  int diff;

  if (1 == path) {
    9fe092d2:	09011d03          	lh	s10,144(sp)
{
    9fe092d6:	e122                	sd	s0,128(sp)
    9fe092d8:	fca6                	sd	s1,120(sp)
    9fe092da:	e4de                	sd	s7,72(sp)
    9fe092dc:	e506                	sd	ra,136(sp)
    9fe092de:	f8ca                	sd	s2,112(sp)
    9fe092e0:	f4ce                	sd	s3,104(sp)
    9fe092e2:	f0d2                	sd	s4,96(sp)
    9fe092e4:	ecd6                	sd	s5,88(sp)
    9fe092e6:	e8da                	sd	s6,80(sp)
    9fe092e8:	e0e2                	sd	s8,64(sp)
    9fe092ea:	fc66                	sd	s9,56(sp)
    9fe092ec:	f46e                	sd	s11,40(sp)
  if (1 == path) {
    9fe092ee:	4305                	li	t1,1
{
    9fe092f0:	e436                	sd	a3,8(sp)
    9fe092f2:	84aa                	mv	s1,a0
    9fe092f4:	842e                	mv	s0,a1
    9fe092f6:	8bb2                	mv	s7,a2
  if (1 == path) {
    9fe092f8:	386d0263          	beq	s10,t1,9fe0967c <AGC+0x3ae>
  		}
		#endif
  	}
  }

  if (nenr_silence_cnt < nenr_silence_time) {    /* be in silence to solve CODEC initial random signal issue and not to perform AGC as well */
    9fe092fc:	0108d663          	bge	a7,a6,9fe09308 <AGC+0x3a>
	agc_obj->agc_vad1 = false;
    9fe09300:	020b8423          	sb	zero,40(s7)
	agc_obj->agc_vad1_cnt = 0;
    9fe09304:	020b9523          	sh	zero,42(s7)
  }

  agc_obj->env = envelope(sin, agc_obj->frame_size);	/* calculate once every 20ms@NB or 10ms@WB */
    9fe09308:	032b9583          	lh	a1,50(s7)
    9fe0930c:	8526                	mv	a0,s1
    9fe0930e:	6a4000ef          	jal	ra,9fe099b2 <envelope>

  unit_gain = (1L << (agc_obj->max_gain));
    9fe09312:	000b9703          	lh	a4,0(s7)

  frame_signal_identify = 0;
  if (agc_obj->env > agc_obj->pcb_noise_thrd)
    9fe09316:	018b9683          	lh	a3,24(s7)
  unit_gain = (1L << (agc_obj->max_gain));
    9fe0931a:	4305                	li	t1,1
  	frame_signal_identify = 1;    /* no matter it is noise or speech signals */

  for (i = 0; i < agc_obj->frame_size; i++) {
    9fe0931c:	032b9783          	lh	a5,50(s7)
  unit_gain = (1L << (agc_obj->max_gain));
    9fe09320:	00e31333          	sll	t1,t1,a4
    9fe09324:	01031b1b          	slliw	s6,t1,0x10
  agc_obj->env = envelope(sin, agc_obj->frame_size);	/* calculate once every 20ms@NB or 10ms@WB */
    9fe09328:	e82a                	sd	a0,16(sp)
    9fe0932a:	00ab9423          	sh	a0,8(s7)
  if (agc_obj->env > agc_obj->pcb_noise_thrd)
    9fe0932e:	ec36                	sd	a3,24(sp)
  unit_gain = (1L << (agc_obj->max_gain));
    9fe09330:	410b5b1b          	sraiw	s6,s6,0x10
  for (i = 0; i < agc_obj->frame_size; i++) {
    9fe09334:	28f05763          	blez	a5,9fe095c2 <AGC+0x2f4>

	#if (1)    /* smooth output to avoid pop noise when unit gain changed */
	if (agc_obj->smooth_cnt) {
		sig_out = ((agc_obj->alpha * agc_obj->sout_hist) >> 15) + ((agc_obj->alpha2 * sig_out) >> 15);
		agc_obj->alpha -= 3276;    /* each step 1/10 */
		agc_obj ->alpha2 += 3276;    /* each step 1/10 */
    9fe09338:	6905                	lui	s2,0x1
    9fe0933a:	ccc9071b          	addiw	a4,s2,-820
  for (i = 0; i < agc_obj->frame_size; i++) {
    9fe0933e:	4c81                	li	s9,0
		agc_obj ->alpha2 += 3276;    /* each step 1/10 */
    9fe09340:	c23a                	sw	a4,4(sp)
  	if (agc_obj->unit_gain_change_det == true) {
    9fe09342:	01fbc703          	lbu	a4,31(s7)
  	sig_in = sin[i];
    9fe09346:	001c9a13          	slli	s4,s9,0x1
		agc_obj->gain32 = (((int)(agc_obj->gain32 >> 16) * MINUS_halfdB) << 1);	    /* MINUS_halfdB is Q1.15, so gain32 is Q1.31 */
    9fe0934a:	6c21                	lui	s8,0x8
		agc_obj->alpha -= 3276;    /* each step 1/10 */
    9fe0934c:	79fd                	lui	s3,0xfffff
  	sig_in = sin[i];
    9fe0934e:	01448933          	add	s2,s1,s4
  	if (agc_obj->unit_gain_change_det == true) {
    9fe09352:	4a85                	li	s5,1
  	sig_in = sin[i];
    9fe09354:	00091d83          	lh	s11,0(s2) # 1000 <_EL1_STACK_SIZE+0x800>
  for (i = 0; i < agc_obj->frame_size; i++) {
    9fe09358:	87aa                	mv	a5,a0
		agc_obj->gain32 = (((int)(agc_obj->gain32 >> 16) * MINUS_halfdB) << 1);	    /* MINUS_halfdB is Q1.15, so gain32 is Q1.31 */
    9fe0935a:	8d4c0c1b          	addiw	s8,s8,-1836
		agc_obj->alpha -= 3276;    /* each step 1/10 */
    9fe0935e:	3349899b          	addiw	s3,s3,820
  	if (agc_obj->unit_gain_change_det == true) {
    9fe09362:	15570563          	beq	a4,s5,9fe094ac <AGC+0x1de>
	tmp16 = agc_obj->gain32 >> 16;    /* leave space for gain>1, gain has Q format, unit_gain is 1 */
    9fe09366:	004baf03          	lw	t5,4(s7)
				agc_obj->target_high = (agc_obj->env*unit_gain) >> 15;    /* better for keeping speech fidelity */
    9fe0936a:	2781                	sext.w	a5,a5
	if (1 == path) {
    9fe0936c:	1b5d0a63          	beq	s10,s5,9fe09520 <AGC+0x252>
	if ( agc_obj->pcb_noise_cnt < agc_obj->pcb_noise_hold_time) {
    9fe09370:	01ab9583          	lh	a1,26(s7)
    9fe09374:	01cb9683          	lh	a3,28(s7)
	tmp16 = agc_obj->gain32 >> 16;    /* leave space for gain>1, gain has Q format, unit_gain is 1 */
    9fe09378:	410f571b          	sraiw	a4,t5,0x10
    9fe0937c:	410f5e93          	srai	t4,t5,0x10
	if ( agc_obj->pcb_noise_cnt < agc_obj->pcb_noise_hold_time) {
    9fe09380:	04d5d563          	bge	a1,a3,9fe093ca <AGC+0xfc>
		tmp16 = (agc_obj->env*unit_gain) >> 15;
    9fe09384:	02fb053b          	mulw	a0,s6,a5
		if (tmp16 < agc_obj->target_low)
    9fe09388:	00ab9583          	lh	a1,10(s7)
		if (tmp16 > agc_obj->target_high)
    9fe0938c:	00eb9683          	lh	a3,14(s7)
	sig_err = ((int)agc_obj->env)*((int)tmp16) >> 15;    /* use the MSB */
    9fe09390:	02f707bb          	mulw	a5,a4,a5
		tmp16 = (agc_obj->env*unit_gain) >> 15;
    9fe09394:	40f5551b          	sraiw	a0,a0,0xf
    9fe09398:	0105171b          	slliw	a4,a0,0x10
    9fe0939c:	4107571b          	sraiw	a4,a4,0x10
		if (tmp16 < agc_obj->target_low)
    9fe093a0:	00070e9b          	sext.w	t4,a4
	sig_err = ((int)agc_obj->env)*((int)tmp16) >> 15;    /* use the MSB */
    9fe093a4:	40f7d51b          	sraiw	a0,a5,0xf
			diff = (agc_obj->target_low) - sig_err;
    9fe093a8:	0105151b          	slliw	a0,a0,0x10
    9fe093ac:	4105579b          	sraiw	a5,a0,0x10
    9fe093b0:	853e                	mv	a0,a5
		if (tmp16 < agc_obj->target_low)
    9fe093b2:	26b75363          	bge	a4,a1,9fe09618 <AGC+0x34a>
		if (tmp16 > agc_obj->target_high)
    9fe093b6:	27d6c363          	blt	a3,t4,9fe0961c <AGC+0x34e>
			diff = (agc_obj->target_low) - sig_err;
    9fe093ba:	40f5853b          	subw	a0,a1,a5
		update_gain(diff, agc_obj);	   /* update agc_obj->gain32 sample by sample */
    9fe093be:	85de                	mv	a1,s7
    9fe093c0:	648000ef          	jal	ra,9fe09a08 <update_gain>
	temp32 = ((int)(agc_obj->gain32 >> 16)* (int)(sig_in)) >> agc_obj->unit_gain;
    9fe093c4:	006b9e83          	lh	t4,6(s7)
    9fe093c8:	8776                	mv	a4,t4
    9fe093ca:	03dd87bb          	mulw	a5,s11,t4
    9fe093ce:	002b9683          	lh	a3,2(s7)
	while (ABS(temp32) > 32767L) {    /* overflow limiter */
    9fe093d2:	6521                	lui	a0,0x8
	temp32 = ((int)(agc_obj->gain32 >> 16)* (int)(sig_in)) >> agc_obj->unit_gain;
    9fe093d4:	000d859b          	sext.w	a1,s11
    9fe093d8:	40d7d7bb          	sraw	a5,a5,a3
	while (ABS(temp32) > 32767L) {    /* overflow limiter */
    9fe093dc:	41f7df1b          	sraiw	t5,a5,0x1f
    9fe093e0:	00ff47b3          	xor	a5,t5,a5
    9fe093e4:	41e787bb          	subw	a5,a5,t5
    9fe093e8:	02a7c863          	blt	a5,a0,9fe09418 <AGC+0x14a>
		agc_obj->gain32 = (((int)(agc_obj->gain32 >> 16) * MINUS_halfdB) << 1);	    /* MINUS_halfdB is Q1.15, so gain32 is Q1.31 */
    9fe093ec:	0387073b          	mulw	a4,a4,s8
    9fe093f0:	00171f1b          	slliw	t5,a4,0x1
		temp32 = ((int)(agc_obj->gain32 >> 16)*(int)(sig_in)) >> agc_obj->unit_gain;
    9fe093f4:	410f5e9b          	sraiw	t4,t5,0x10
    9fe093f8:	03d587bb          	mulw	a5,a1,t4
	while (ABS(temp32) > 32767L) {    /* overflow limiter */
    9fe093fc:	410f571b          	sraiw	a4,t5,0x10
		temp32 = ((int)(agc_obj->gain32 >> 16)*(int)(sig_in)) >> agc_obj->unit_gain;
    9fe09400:	40d7d7bb          	sraw	a5,a5,a3
	while (ABS(temp32) > 32767L) {    /* overflow limiter */
    9fe09404:	41f7df9b          	sraiw	t6,a5,0x1f
    9fe09408:	00ffc7b3          	xor	a5,t6,a5
    9fe0940c:	41f787bb          	subw	a5,a5,t6
    9fe09410:	fca7dee3          	bge	a5,a0,9fe093ec <AGC+0x11e>
    9fe09414:	01eba223          	sw	t5,4(s7)
	sig_out = sin[i]*(agc_obj->gain32 >> 16) >> agc_obj->unit_gain;
    9fe09418:	00091783          	lh	a5,0(s2)
	if (agc_obj->smooth_cnt) {
    9fe0941c:	022b9703          	lh	a4,34(s7)
	sig_out = sin[i]*(agc_obj->gain32 >> 16) >> agc_obj->unit_gain;
    9fe09420:	03d78ebb          	mulw	t4,a5,t4
    9fe09424:	40ded6bb          	sraw	a3,t4,a3
    9fe09428:	0106969b          	slliw	a3,a3,0x10
    9fe0942c:	4106d69b          	sraiw	a3,a3,0x10
	if (agc_obj->smooth_cnt) {
    9fe09430:	cf1d                	beqz	a4,9fe0946e <AGC+0x1a0>
		sig_out = ((agc_obj->alpha * agc_obj->sout_hist) >> 15) + ((agc_obj->alpha2 * sig_out) >> 15);
    9fe09432:	026b9583          	lh	a1,38(s7)
    9fe09436:	024b9883          	lh	a7,36(s7)
    9fe0943a:	020b9783          	lh	a5,32(s7)
    9fe0943e:	02d5853b          	mulw	a0,a1,a3
		agc_obj ->alpha2 += 3276;    /* each step 1/10 */
    9fe09442:	4692                	lw	a3,4(sp)
		agc_obj->alpha -= 3276;    /* each step 1/10 */
    9fe09444:	01198ebb          	addw	t4,s3,a7
		agc_obj->smooth_cnt--;
    9fe09448:	377d                	addiw	a4,a4,-1
		agc_obj ->alpha2 += 3276;    /* each step 1/10 */
    9fe0944a:	9db5                	addw	a1,a1,a3
		agc_obj->alpha -= 3276;    /* each step 1/10 */
    9fe0944c:	03db9223          	sh	t4,36(s7)
		agc_obj ->alpha2 += 3276;    /* each step 1/10 */
    9fe09450:	02bb9323          	sh	a1,38(s7)
		agc_obj->smooth_cnt--;
    9fe09454:	02eb9123          	sh	a4,34(s7)
		sig_out = ((agc_obj->alpha * agc_obj->sout_hist) >> 15) + ((agc_obj->alpha2 * sig_out) >> 15);
    9fe09458:	031786bb          	mulw	a3,a5,a7
    9fe0945c:	40f5579b          	sraiw	a5,a0,0xf
    9fe09460:	40f6d69b          	sraiw	a3,a3,0xf
    9fe09464:	9ebd                	addw	a3,a3,a5
    9fe09466:	0106969b          	slliw	a3,a3,0x10
    9fe0946a:	4106d69b          	sraiw	a3,a3,0x10
	}
	#endif

  	sout[i] = sig_out;
    9fe0946e:	01440633          	add	a2,s0,s4
    9fe09472:	00d61023          	sh	a3,0(a2)

	/* modify for release processing, automaticly drop 6dB on max gain if big signal come in */
	if (agc_obj->unit_gain_change == true) {
    9fe09476:	01ebc783          	lbu	a5,30(s7)
    9fe0947a:	11578963          	beq	a5,s5,9fe0958c <AGC+0x2be>
		if (ABS(sig_in) > (short)(0.223*32768)) {
			agc_obj->unit_gain_change = false;
			agc_obj->unit_gain_change_det = true;
		}
	}
	agc_obj->sout_hist = sig_out;    /* update y(n-1) */
    9fe0947e:	2c85                	addiw	s9,s9,1
  for (i = 0; i < agc_obj->frame_size; i++) {
    9fe09480:	032b9783          	lh	a5,50(s7)
    9fe09484:	010c9c9b          	slliw	s9,s9,0x10
	agc_obj->sout_hist = sig_out;    /* update y(n-1) */
    9fe09488:	02db9023          	sh	a3,32(s7)
  for (i = 0; i < agc_obj->frame_size; i++) {
    9fe0948c:	410cdc9b          	sraiw	s9,s9,0x10
    9fe09490:	12fcd963          	bge	s9,a5,9fe095c2 <AGC+0x2f4>
  	if (agc_obj->unit_gain_change_det == true) {
    9fe09494:	01fbc703          	lbu	a4,31(s7)
  	sig_in = sin[i];
    9fe09498:	001c9a13          	slli	s4,s9,0x1
    9fe0949c:	01448933          	add	s2,s1,s4
		if (ABS(agc_obj->env) < (short)(0.0316*32768)) {
    9fe094a0:	008b9783          	lh	a5,8(s7)
  	sig_in = sin[i];
    9fe094a4:	00091d83          	lh	s11,0(s2)
  	if (agc_obj->unit_gain_change_det == true) {
    9fe094a8:	eb571fe3          	bne	a4,s5,9fe09366 <AGC+0x98>
		if (ABS(agc_obj->env) < (short)(0.0316*32768)) {
    9fe094ac:	40f7d69b          	sraiw	a3,a5,0xf
    9fe094b0:	00d7c733          	xor	a4,a5,a3
    9fe094b4:	9f15                	subw	a4,a4,a3
    9fe094b6:	1742                	slli	a4,a4,0x30
    9fe094b8:	9341                	srli	a4,a4,0x30
    9fe094ba:	40a00693          	li	a3,1034
    9fe094be:	eae6e4e3          	bltu	a3,a4,9fe09366 <AGC+0x98>
			agc_obj->max_gain++;    /* drop 6dB to max gain */
    9fe094c2:	000bd703          	lhu	a4,0(s7)
			agc_obj->target_low = (agc_obj->target_low_Q15*unit_gain) >> 15;
    9fe094c6:	00cb9683          	lh	a3,12(s7)
			agc_obj->target_high = (agc_obj->target_high_Q15*unit_gain) >> 15;
    9fe094ca:	010b9583          	lh	a1,16(s7)
			agc_obj->max_gain++;    /* drop 6dB to max gain */
    9fe094ce:	2705                	addiw	a4,a4,1
    9fe094d0:	0107171b          	slliw	a4,a4,0x10
    9fe094d4:	4107571b          	sraiw	a4,a4,0x10
			unit_gain = (1L << (agc_obj->max_gain));
    9fe094d8:	00ea9533          	sll	a0,s5,a4
    9fe094dc:	01051b1b          	slliw	s6,a0,0x10
    9fe094e0:	410b5b1b          	sraiw	s6,s6,0x10
			agc_obj->max_gain++;    /* drop 6dB to max gain */
    9fe094e4:	00eb9023          	sh	a4,0(s7)
			agc_obj->unit_gain = agc_obj->max_gain;
    9fe094e8:	00eb9123          	sh	a4,2(s7)
			agc_obj->smooth_cnt = 10;
    9fe094ec:	4729                	li	a4,10
			agc_obj->target_high = (agc_obj->target_high_Q15*unit_gain) >> 15;
    9fe094ee:	036585bb          	mulw	a1,a1,s6
			agc_obj->smooth_cnt = 10;
    9fe094f2:	02eb9123          	sh	a4,34(s7)
			agc_obj->gain32 = unit_gain << 16;
    9fe094f6:	0105151b          	slliw	a0,a0,0x10
    9fe094fa:	00aba223          	sw	a0,4(s7)
			agc_obj->unit_gain_change_det = false;
    9fe094fe:	000b8fa3          	sb	zero,31(s7)
			agc_obj->gain32 = unit_gain << 16;
    9fe09502:	010b1f13          	slli	t5,s6,0x10
				agc_obj->target_high = (agc_obj->env*unit_gain) >> 15;    /* better for keeping speech fidelity */
    9fe09506:	2781                	sext.w	a5,a5
			agc_obj->target_low = (agc_obj->target_low_Q15*unit_gain) >> 15;
    9fe09508:	0366873b          	mulw	a4,a3,s6
			agc_obj->target_high = (agc_obj->target_high_Q15*unit_gain) >> 15;
    9fe0950c:	40f5d69b          	sraiw	a3,a1,0xf
    9fe09510:	00db9723          	sh	a3,14(s7)
			agc_obj->target_low = (agc_obj->target_low_Q15*unit_gain) >> 15;
    9fe09514:	40f7571b          	sraiw	a4,a4,0xf
    9fe09518:	00eb9523          	sh	a4,10(s7)
	if (1 == path) {
    9fe0951c:	e55d1ae3          	bne	s10,s5,9fe09370 <AGC+0xa2>
		if (para_obj->para_agc_vad_ena == true) {
    9fe09520:	6722                	ld	a4,8(sp)
    9fe09522:	01a74703          	lbu	a4,26(a4)
    9fe09526:	e5a715e3          	bne	a4,s10,9fe09370 <AGC+0xa2>
			if ((agc_obj->agc_vad1 == true) && (agc_obj->agc_vad2 == true)) {
    9fe0952a:	028bc683          	lbu	a3,40(s7)
  				agc_obj->target_high = (agc_obj->target_high_Q15*unit_gain) >> 15;
    9fe0952e:	000b071b          	sext.w	a4,s6
			if ((agc_obj->agc_vad1 == true) && (agc_obj->agc_vad2 == true)) {
    9fe09532:	17a68b63          	beq	a3,s10,9fe096a8 <AGC+0x3da>
				agc_obj->target_high = (agc_obj->env*unit_gain) >> 15;    /* better for keeping speech fidelity */
    9fe09536:	02e786bb          	mulw	a3,a5,a4
	if ( agc_obj->pcb_noise_cnt < agc_obj->pcb_noise_hold_time) {
    9fe0953a:	01cb9503          	lh	a0,28(s7)
    9fe0953e:	01ab9583          	lh	a1,26(s7)
				agc_obj->agc_vad3 = false;
    9fe09542:	020b8823          	sb	zero,48(s7)
	tmp16 = agc_obj->gain32 >> 16;    /* leave space for gain>1, gain has Q format, unit_gain is 1 */
    9fe09546:	410f571b          	sraiw	a4,t5,0x10
    9fe0954a:	410f5e93          	srai	t4,t5,0x10
				agc_obj->target_high = (agc_obj->env*unit_gain) >> 15;    /* better for keeping speech fidelity */
    9fe0954e:	40f6d69b          	sraiw	a3,a3,0xf
    9fe09552:	0106969b          	slliw	a3,a3,0x10
    9fe09556:	4106d69b          	sraiw	a3,a3,0x10
    9fe0955a:	00db9723          	sh	a3,14(s7)
				agc_obj->target_low = (agc_obj->env*unit_gain) >> 15;     /* better for keeping speech fidelity */
    9fe0955e:	00db9523          	sh	a3,10(s7)
	if ( agc_obj->pcb_noise_cnt < agc_obj->pcb_noise_hold_time) {
    9fe09562:	e6a5d4e3          	bge	a1,a0,9fe093ca <AGC+0xfc>
		tmp16 = (agc_obj->env*unit_gain) >> 15;
    9fe09566:	02fb06bb          	mulw	a3,s6,a5
	sig_err = ((int)agc_obj->env)*((int)tmp16) >> 15;    /* use the MSB */
    9fe0956a:	02f707bb          	mulw	a5,a4,a5
		tmp16 = (agc_obj->env*unit_gain) >> 15;
    9fe0956e:	40f6d71b          	sraiw	a4,a3,0xf
    9fe09572:	0107171b          	slliw	a4,a4,0x10
    9fe09576:	4107571b          	sraiw	a4,a4,0x10
	sig_err = ((int)agc_obj->env)*((int)tmp16) >> 15;    /* use the MSB */
    9fe0957a:	40f7d79b          	sraiw	a5,a5,0xf
			diff = (agc_obj->target_low) - sig_err;
    9fe0957e:	0107979b          	slliw	a5,a5,0x10
    9fe09582:	4107d79b          	sraiw	a5,a5,0x10
			diff = tmp16 - sig_err;
    9fe09586:	40f7053b          	subw	a0,a4,a5
    9fe0958a:	bd15                	j	9fe093be <AGC+0xf0>
		if (ABS(sig_in) > (short)(0.223*32768)) {
    9fe0958c:	40fdd71b          	sraiw	a4,s11,0xf
    9fe09590:	00edc7b3          	xor	a5,s11,a4
    9fe09594:	9f99                	subw	a5,a5,a4
    9fe09596:	17c2                	slli	a5,a5,0x30
    9fe09598:	6709                	lui	a4,0x2
    9fe0959a:	93c1                	srli	a5,a5,0x30
    9fe0959c:	c8b70713          	addi	a4,a4,-885 # 1c8b <_EL1_STACK_SIZE+0x148b>
    9fe095a0:	ecf77fe3          	bgeu	a4,a5,9fe0947e <AGC+0x1b0>
			agc_obj->unit_gain_change = false;
    9fe095a4:	10000793          	li	a5,256
    9fe095a8:	00fb9f23          	sh	a5,30(s7)
	agc_obj->sout_hist = sig_out;    /* update y(n-1) */
    9fe095ac:	2c85                	addiw	s9,s9,1
  for (i = 0; i < agc_obj->frame_size; i++) {
    9fe095ae:	032b9783          	lh	a5,50(s7)
    9fe095b2:	010c9c9b          	slliw	s9,s9,0x10
	agc_obj->sout_hist = sig_out;    /* update y(n-1) */
    9fe095b6:	02db9023          	sh	a3,32(s7)
  for (i = 0; i < agc_obj->frame_size; i++) {
    9fe095ba:	410cdc9b          	sraiw	s9,s9,0x10
    9fe095be:	ecfccbe3          	blt	s9,a5,9fe09494 <AGC+0x1c6>

  }

  #if (1)
  if (frame_signal_identify == 0) {
    9fe095c2:	44c2                	lw	s1,16(sp)
    9fe095c4:	67e2                	ld	a5,24(sp)
  	agc_obj->pcb_noise_cnt++;
  	agc_obj->pcb_noise_cnt = MIN(agc_obj->pcb_noise_hold_time, agc_obj->pcb_noise_cnt);
    9fe095c6:	01cb9703          	lh	a4,28(s7)
  if (frame_signal_identify == 0) {
    9fe095ca:	0497cc63          	blt	a5,s1,9fe09622 <AGC+0x354>
  	agc_obj->pcb_noise_cnt++;
    9fe095ce:	01abd783          	lhu	a5,26(s7)
  	agc_obj->pcb_noise_cnt = MIN(agc_obj->pcb_noise_hold_time, agc_obj->pcb_noise_cnt);
    9fe095d2:	0007069b          	sext.w	a3,a4
  	agc_obj->pcb_noise_cnt++;
    9fe095d6:	2785                	addiw	a5,a5,1
  	agc_obj->pcb_noise_cnt = MIN(agc_obj->pcb_noise_hold_time, agc_obj->pcb_noise_cnt);
    9fe095d8:	0107961b          	slliw	a2,a5,0x10
    9fe095dc:	4106561b          	sraiw	a2,a2,0x10
    9fe095e0:	0cc74263          	blt	a4,a2,9fe096a4 <AGC+0x3d6>
    9fe095e4:	0107979b          	slliw	a5,a5,0x10
    9fe095e8:	4107d79b          	sraiw	a5,a5,0x10
    9fe095ec:	00fb9d23          	sh	a5,26(s7)
  }
  else
  	agc_obj->pcb_noise_cnt = 0;

  if ( agc_obj->pcb_noise_cnt == agc_obj->pcb_noise_hold_time) {
    9fe095f0:	04d78063          	beq	a5,a3,9fe09630 <AGC+0x362>
  	if ((agc_obj->gain32 >> 16) < unit_gain)
  		agc_obj->gain32 = unit_gain << 16;
  }
  #endif

  if (1 == path) {
    9fe095f4:	4785                	li	a5,1
    9fe095f6:	06fd0963          	beq	s10,a5,9fe09668 <AGC+0x39a>
  	if (para_obj->para_agc_vad_ena == true) {
  		agc_obj->agc_vad_hist = agc_obj->agc_vad3;
  	}
  }

}
    9fe095fa:	60aa                	ld	ra,136(sp)
    9fe095fc:	640a                	ld	s0,128(sp)
    9fe095fe:	74e6                	ld	s1,120(sp)
    9fe09600:	7946                	ld	s2,112(sp)
    9fe09602:	79a6                	ld	s3,104(sp)
    9fe09604:	7a06                	ld	s4,96(sp)
    9fe09606:	6ae6                	ld	s5,88(sp)
    9fe09608:	6b46                	ld	s6,80(sp)
    9fe0960a:	6ba6                	ld	s7,72(sp)
    9fe0960c:	6c06                	ld	s8,64(sp)
    9fe0960e:	7ce2                	ld	s9,56(sp)
    9fe09610:	7d42                	ld	s10,48(sp)
    9fe09612:	7da2                	ld	s11,40(sp)
    9fe09614:	6149                	addi	sp,sp,144
    9fe09616:	8082                	ret
		if (tmp16 > agc_obj->target_high)
    9fe09618:	f7d6d7e3          	bge	a3,t4,9fe09586 <AGC+0x2b8>
			diff = (agc_obj->target_high) - sig_err;
    9fe0961c:	40a6853b          	subw	a0,a3,a0
		if (tmp16 >= agc_obj->target_low && tmp16 <= agc_obj->target_high)
    9fe09620:	bb79                	j	9fe093be <AGC+0xf0>
  	agc_obj->pcb_noise_cnt = 0;
    9fe09622:	4781                	li	a5,0
    9fe09624:	0007069b          	sext.w	a3,a4
    9fe09628:	00fb9d23          	sh	a5,26(s7)
  if ( agc_obj->pcb_noise_cnt == agc_obj->pcb_noise_hold_time) {
    9fe0962c:	fcd794e3          	bne	a5,a3,9fe095f4 <AGC+0x326>
	tmp16 = (agc_obj->gain32 >> 16) >> 7;
    9fe09630:	004ba783          	lw	a5,4(s7)
    9fe09634:	4177d713          	srai	a4,a5,0x17
  	tmp16 = MAX(tmp16, 1);
    9fe09638:	86ba                	mv	a3,a4
  	tmp16 = (agc_obj->gain32 >> 16) - tmp16;
    9fe0963a:	4107d79b          	sraiw	a5,a5,0x10
  	tmp16 = MAX(tmp16, 1);
    9fe0963e:	00e04363          	bgtz	a4,9fe09644 <AGC+0x376>
    9fe09642:	4685                	li	a3,1
  	tmp16 = (agc_obj->gain32 >> 16) - tmp16;
    9fe09644:	9f95                	subw	a5,a5,a3
  	agc_obj->gain32 = ((long)tmp16) << 16;    /* cut down gain32 */
    9fe09646:	0107979b          	slliw	a5,a5,0x10
    9fe0964a:	4107d79b          	sraiw	a5,a5,0x10
    9fe0964e:	01079693          	slli	a3,a5,0x10
  	if ((agc_obj->gain32 >> 16) < unit_gain)
    9fe09652:	000b071b          	sext.w	a4,s6
    9fe09656:	0967d063          	bge	a5,s6,9fe096d6 <AGC+0x408>
  		agc_obj->gain32 = unit_gain << 16;
    9fe0965a:	0107171b          	slliw	a4,a4,0x10
    9fe0965e:	00eba223          	sw	a4,4(s7)
  if (1 == path) {
    9fe09662:	4785                	li	a5,1
    9fe09664:	f8fd1be3          	bne	s10,a5,9fe095fa <AGC+0x32c>
  	if (para_obj->para_agc_vad_ena == true) {
    9fe09668:	67a2                	ld	a5,8(sp)
    9fe0966a:	01a7c783          	lbu	a5,26(a5)
    9fe0966e:	f9a796e3          	bne	a5,s10,9fe095fa <AGC+0x32c>
  		agc_obj->agc_vad_hist = agc_obj->agc_vad3;
    9fe09672:	030bc783          	lbu	a5,48(s7)
    9fe09676:	02fb88a3          	sb	a5,49(s7)
}
    9fe0967a:	b741                	j	9fe095fa <AGC+0x32c>
  	if (para_obj->para_agc_vad_ena == true) {
    9fe0967c:	01a6c683          	lbu	a3,26(a3)
    9fe09680:	c7a69ee3          	bne	a3,s10,9fe092fc <AGC+0x2e>
  		if (speech_vad == false) {
    9fe09684:	ef21                	bnez	a4,9fe096dc <AGC+0x40e>
			agc_obj->agc_vad1_cnt = MAX(0, agc_obj->agc_vad1_cnt - 1);
    9fe09686:	02a61703          	lh	a4,42(a2)
    9fe0968a:	06ed5863          	bge	s10,a4,9fe096fa <AGC+0x42c>
    9fe0968e:	377d                	addiw	a4,a4,-1
    9fe09690:	02e61523          	sh	a4,42(a2)
		if (st_vad == false) {
    9fe09694:	e3c1                	bnez	a5,9fe09714 <AGC+0x446>
			agc_obj->agc_vad2 = true;
    9fe09696:	4785                	li	a5,1
    9fe09698:	02fb8623          	sb	a5,44(s7)
			agc_obj->agc_vad2_cnt = 3;
    9fe0969c:	478d                	li	a5,3
    9fe0969e:	02fb9723          	sh	a5,46(s7)
    9fe096a2:	b9a9                	j	9fe092fc <AGC+0x2e>
  	agc_obj->pcb_noise_cnt = MIN(agc_obj->pcb_noise_hold_time, agc_obj->pcb_noise_cnt);
    9fe096a4:	87ba                	mv	a5,a4
    9fe096a6:	bf3d                	j	9fe095e4 <AGC+0x316>
			if ((agc_obj->agc_vad1 == true) && (agc_obj->agc_vad2 == true)) {
    9fe096a8:	02cbc683          	lbu	a3,44(s7)
    9fe096ac:	e95695e3          	bne	a3,s5,9fe09536 <AGC+0x268>
				agc_obj->target_low = (agc_obj->target_low_Q15*unit_gain) >> 15;
    9fe096b0:	00cb9683          	lh	a3,12(s7)
  				agc_obj->target_high = (agc_obj->target_high_Q15*unit_gain) >> 15;
    9fe096b4:	010b9583          	lh	a1,16(s7)
				agc_obj->agc_vad3 = true;
    9fe096b8:	03ab8823          	sb	s10,48(s7)
  				agc_obj->target_high = (agc_obj->target_high_Q15*unit_gain) >> 15;
    9fe096bc:	02e585bb          	mulw	a1,a1,a4
				agc_obj->target_low = (agc_obj->target_low_Q15*unit_gain) >> 15;
    9fe096c0:	02e6873b          	mulw	a4,a3,a4
  				agc_obj->target_high = (agc_obj->target_high_Q15*unit_gain) >> 15;
    9fe096c4:	40f5d69b          	sraiw	a3,a1,0xf
    9fe096c8:	00db9723          	sh	a3,14(s7)
				agc_obj->target_low = (agc_obj->target_low_Q15*unit_gain) >> 15;
    9fe096cc:	40f7571b          	sraiw	a4,a4,0xf
    9fe096d0:	00eb9523          	sh	a4,10(s7)
				agc_obj->agc_vad3 = true;
    9fe096d4:	b971                	j	9fe09370 <AGC+0xa2>
  	agc_obj->gain32 = ((long)tmp16) << 16;    /* cut down gain32 */
    9fe096d6:	00dba223          	sw	a3,4(s7)
    9fe096da:	bf29                	j	9fe095f4 <AGC+0x326>
			if (agc_obj->Fs == 16000)
    9fe096dc:	03461683          	lh	a3,52(a2)
    9fe096e0:	6711                	lui	a4,0x4
			agc_obj->agc_vad1 = true;
    9fe096e2:	03a60423          	sb	s10,40(a2)
			if (agc_obj->Fs == 16000)
    9fe096e6:	e8070713          	addi	a4,a4,-384 # 3e80 <_EL1_STACK_SIZE+0x3680>
    9fe096ea:	00e68d63          	beq	a3,a4,9fe09704 <AGC+0x436>
  				agc_obj->agc_vad1_cnt = para_obj->para_agc_vad_cnt;           /* keep it longer than speech vad in order to have better speech fidelity at the end of speech segment */
    9fe096ee:	6722                	ld	a4,8(sp)
    9fe096f0:	02075703          	lhu	a4,32(a4)
    9fe096f4:	02e61523          	sh	a4,42(a2)
    9fe096f8:	bf71                	j	9fe09694 <AGC+0x3c6>
			agc_obj->agc_vad1_cnt = MAX(0, agc_obj->agc_vad1_cnt - 1);
    9fe096fa:	02061523          	sh	zero,42(a2)
      				agc_obj->agc_vad1 = false;
    9fe096fe:	02060423          	sb	zero,40(a2)
    9fe09702:	bf49                	j	9fe09694 <AGC+0x3c6>
  				agc_obj->agc_vad1_cnt = para_obj->para_agc_vad_cnt * 2;    /* keep it longer than speech vad in order to have better speech fidelity at the end of speech segment */
    9fe09704:	6722                	ld	a4,8(sp)
    9fe09706:	02075703          	lhu	a4,32(a4)
    9fe0970a:	0017171b          	slliw	a4,a4,0x1
    9fe0970e:	02e61523          	sh	a4,42(a2)
    9fe09712:	b749                	j	9fe09694 <AGC+0x3c6>
			agc_obj->agc_vad2_cnt = MAX(0, agc_obj->agc_vad2_cnt - 1);
    9fe09714:	02eb9783          	lh	a5,46(s7)
    9fe09718:	4705                	li	a4,1
    9fe0971a:	00f75663          	bge	a4,a5,9fe09726 <AGC+0x458>
    9fe0971e:	37fd                	addiw	a5,a5,-1
    9fe09720:	02fb9723          	sh	a5,46(s7)
			if (!agc_obj->agc_vad2_cnt)
    9fe09724:	bee1                	j	9fe092fc <AGC+0x2e>
			agc_obj->agc_vad2_cnt = MAX(0, agc_obj->agc_vad2_cnt - 1);
    9fe09726:	020b9723          	sh	zero,46(s7)
      				agc_obj->agc_vad2 = false;
    9fe0972a:	020b8623          	sb	zero,44(s7)
    9fe0972e:	b6f9                	j	9fe092fc <AGC+0x2e>

000000009fe09730 <AGC_init>:
  agc_obj = agc;
  agc_obj->Fs = (short)Fs;
  agc_obj->frame_size = (short)frame_size;
  agc_obj->env = 0L;

  agc_obj->fixed_step_size = 1 << 10;
    9fe09730:	40000713          	li	a4,1024
  agc_obj->Fs = (short)Fs;
    9fe09734:	c00517d3          	fcvt.w.s	a5,fa0,rtz
  agc_obj->fixed_step_size = 1 << 10;
    9fe09738:	00e51923          	sh	a4,18(a0) # 8012 <_EL1_STACK_SIZE+0x7812>
  agc_obj->stepsize_release = agc_obj->fixed_step_size;
    9fe0973c:	20000737          	lui	a4,0x20000
    9fe09740:	40070713          	addi	a4,a4,1024 # 20000400 <CVIMMAP_DRAM_SIZE+0x400>
  agc_obj->Fs = (short)Fs;
    9fe09744:	0107979b          	slliw	a5,a5,0x10
  agc_obj->stepsize_release = agc_obj->fixed_step_size;
    9fe09748:	c958                	sw	a4,20(a0)
  agc_obj->stepsize_attack = MAX( agc_obj->fixed_step_size, (1 << 13));

  agc_obj->pcb_noise_thrd = 38;
    9fe0974a:	02600713          	li	a4,38
  agc_obj->Fs = (short)Fs;
    9fe0974e:	4107d79b          	sraiw	a5,a5,0x10
  agc_obj->pcb_noise_thrd = 38;
    9fe09752:	00e51c23          	sh	a4,24(a0)
  if (agc_obj->Fs == 16000)    /* WB */
    9fe09756:	6711                	lui	a4,0x4
  agc_obj->frame_size = (short)frame_size;
    9fe09758:	02c51923          	sh	a2,50(a0)
  agc_obj->Fs = (short)Fs;
    9fe0975c:	02f51a23          	sh	a5,52(a0)
  agc_obj->env = 0L;
    9fe09760:	00051423          	sh	zero,8(a0)
  if (agc_obj->Fs == 16000)    /* WB */
    9fe09764:	e8070713          	addi	a4,a4,-384 # 3e80 <_EL1_STACK_SIZE+0x3680>
  	agc_obj->pcb_noise_hold_time = 50*(3+1);    /* unit is frame */
    9fe09768:	0c800613          	li	a2,200
  if (agc_obj->Fs == 16000)    /* WB */
    9fe0976c:	00e78463          	beq	a5,a4,9fe09774 <AGC_init+0x44>
  else    /* NB */
  	agc_obj->pcb_noise_hold_time = 25*(3+1);    /* unit is frame */
    9fe09770:	06400613          	li	a2,100
    9fe09774:	00c51e23          	sh	a2,28(a0)
  agc_obj->pcb_noise_cnt = 0;
    9fe09778:	00051d23          	sh	zero,26(a0)

  if (1 == path) {
    9fe0977c:	4785                	li	a5,1
    9fe0977e:	02f68863          	beq	a3,a5,9fe097ae <AGC_init+0x7e>
  	agc_obj->unit_gain_change = para_obj->para_agc_cut6_ena;    /* allow to drop unit gain 6dB and only for one time, controlled here!!! */
  	if (!para_obj->para_agc_max_gain)
  		agc_obj->unit_gain_change = false;
    9fe09782:	00050f23          	sb	zero,30(a0)
  }

  agc_obj->unit_gain_change_det = false;
  agc_obj->sout_hist = 0;
  agc_obj->smooth_cnt = 0;
  agc_obj->alpha = (short)((float)(9.0F/10.0F) * 32767);    /* coef for Lagrange Interpolation */
    9fe09786:	0ccd77b7          	lui	a5,0xccd7
    9fe0978a:	33278793          	addi	a5,a5,818 # ccd7332 <CVIMMAP_ION_SIZE+0x81d7332>
  agc_obj->unit_gain_change_det = false;
    9fe0978e:	00050fa3          	sb	zero,31(a0)
  agc_obj->sout_hist = 0;
    9fe09792:	02052023          	sw	zero,32(a0)
  agc_obj->alpha = (short)((float)(9.0F/10.0F) * 32767);    /* coef for Lagrange Interpolation */
    9fe09796:	d15c                	sw	a5,36(a0)
  agc_obj->alpha2 = 32767 - agc_obj->alpha;

  agc_obj->agc_vad1 = false;
    9fe09798:	02050423          	sb	zero,40(a0)
  agc_obj->agc_vad1_cnt = 0;
    9fe0979c:	02051523          	sh	zero,42(a0)
  agc_obj->agc_vad2 = false;
    9fe097a0:	02050623          	sb	zero,44(a0)
  agc_obj->agc_vad2_cnt = 0;
    9fe097a4:	02051723          	sh	zero,46(a0)
  agc_obj->agc_vad_hist = false;
    9fe097a8:	020508a3          	sb	zero,49(a0)

}
    9fe097ac:	8082                	ret
  	agc_obj->unit_gain_change = para_obj->para_agc_cut6_ena;    /* allow to drop unit gain 6dB and only for one time, controlled here!!! */
    9fe097ae:	0225c783          	lbu	a5,34(a1)
    9fe097b2:	00f50f23          	sb	a5,30(a0)
  	if (!para_obj->para_agc_max_gain)
    9fe097b6:	0145d783          	lhu	a5,20(a1)
    9fe097ba:	f7f1                	bnez	a5,9fe09786 <AGC_init+0x56>
    9fe097bc:	b7d9                	j	9fe09782 <AGC_init+0x52>

000000009fe097be <AGC_para>:

void AGC_para(agc_struct *agc, ssp_para_struct *para, short path)
{
    9fe097be:	1101                	addi	sp,sp,-32
    9fe097c0:	e822                	sd	s0,16(sp)
    9fe097c2:	e426                	sd	s1,8(sp)
    9fe097c4:	ec06                	sd	ra,24(sp)

  /* restrict parameter range */
  para_obj = para;
  agc_obj = agc;

  if (1 == path) {
    9fe097c6:	4785                	li	a5,1
{
    9fe097c8:	84aa                	mv	s1,a0
    9fe097ca:	842e                	mv	s0,a1
  if (1 == path) {
    9fe097cc:	10f60763          	beq	a2,a5,9fe098da <AGC_para+0x11c>
	agc_obj->target_low = db_to_linear(para_obj->para_agc_target_low);
  } else {
	para_obj->para_spk_agc_cut6_ena = 0;
	para_obj->para_spk_agc_vad_ena = 0;
	para_obj->para_spk_agc_vad_cnt = 7;
	para_obj->para_spk_agc_max_gain = MIN(MAX(para_obj->para_spk_agc_max_gain, 0), 6);
    9fe097d0:	0265d783          	lhu	a5,38(a1)
	para_obj->para_spk_agc_vad_cnt = 7;
    9fe097d4:	471d                	li	a4,7
    9fe097d6:	04e59723          	sh	a4,78(a1)
	para_obj->para_spk_agc_max_gain = MIN(MAX(para_obj->para_spk_agc_max_gain, 0), 6);
    9fe097da:	03079693          	slli	a3,a5,0x30
	para_obj->para_spk_agc_cut6_ena = 0;
    9fe097de:	04058823          	sb	zero,80(a1)
	para_obj->para_spk_agc_vad_ena = 0;
    9fe097e2:	04058623          	sb	zero,76(a1)
	para_obj->para_spk_agc_max_gain = MIN(MAX(para_obj->para_spk_agc_max_gain, 0), 6);
    9fe097e6:	92c1                	srli	a3,a3,0x30
    9fe097e8:	4719                	li	a4,6
    9fe097ea:	0cd76963          	bltu	a4,a3,9fe098bc <AGC_para+0xfe>
	para_obj->para_spk_agc_target_high = MIN(MAX(para_obj->para_spk_agc_target_high, 0), 36);
    9fe097ee:	02845703          	lhu	a4,40(s0)
	para_obj->para_spk_agc_max_gain = MIN(MAX(para_obj->para_spk_agc_max_gain, 0), 6);
    9fe097f2:	02f41323          	sh	a5,38(s0)
	para_obj->para_spk_agc_target_high = MIN(MAX(para_obj->para_spk_agc_target_high, 0), 36);
    9fe097f6:	02400693          	li	a3,36
    9fe097fa:	03071613          	slli	a2,a4,0x30
	para_obj->para_spk_agc_max_gain = MIN(MAX(para_obj->para_spk_agc_max_gain, 0), 6);
    9fe097fe:	17c2                	slli	a5,a5,0x30
	para_obj->para_spk_agc_target_high = MIN(MAX(para_obj->para_spk_agc_target_high, 0), 36);
    9fe09800:	9241                	srli	a2,a2,0x30
	para_obj->para_spk_agc_max_gain = MIN(MAX(para_obj->para_spk_agc_max_gain, 0), 6);
    9fe09802:	93c1                	srli	a5,a5,0x30
	para_obj->para_spk_agc_target_high = MIN(MAX(para_obj->para_spk_agc_target_high, 0), 36);
    9fe09804:	08c6ee63          	bltu	a3,a2,9fe098a0 <AGC_para+0xe2>
	para_obj->para_spk_agc_target_low = MIN(MAX(para_obj->para_spk_agc_target_low, 0), 72);
    9fe09808:	02a45683          	lhu	a3,42(s0)
	para_obj->para_spk_agc_target_high = MIN(MAX(para_obj->para_spk_agc_target_high, 0), 36);
    9fe0980c:	02e41423          	sh	a4,40(s0)
	para_obj->para_spk_agc_target_low = MIN(MAX(para_obj->para_spk_agc_target_low, 0), 72);
    9fe09810:	04800713          	li	a4,72
    9fe09814:	03069613          	slli	a2,a3,0x30
    9fe09818:	9241                	srli	a2,a2,0x30
    9fe0981a:	08c76063          	bltu	a4,a2,9fe0989a <AGC_para+0xdc>
	agc_obj->max_gain = agc_gain_table[para_obj->para_spk_agc_max_gain];
    9fe0981e:	00008717          	auipc	a4,0x8
    9fe09822:	72a70713          	addi	a4,a4,1834 # 9fe11f48 <agc_gain_table.0>
    9fe09826:	0786                	slli	a5,a5,0x1
    9fe09828:	97ba                	add	a5,a5,a4
    9fe0982a:	0007d783          	lhu	a5,0(a5)
	para_obj->para_spk_agc_target_low = MIN(MAX(para_obj->para_spk_agc_target_low, 0), 72);
    9fe0982e:	02d41523          	sh	a3,42(s0)
	agc_obj->max_gain = agc_gain_table[para_obj->para_spk_agc_max_gain];
    9fe09832:	00f49023          	sh	a5,0(s1)
	agc_obj->target_high = db_to_linear(para_obj->para_spk_agc_target_high);
    9fe09836:	02841503          	lh	a0,40(s0)
    9fe0983a:	32e000ef          	jal	ra,9fe09b68 <db_to_linear>
    9fe0983e:	00a49723          	sh	a0,14(s1)
	agc_obj->target_low = db_to_linear(para_obj->para_spk_agc_target_low);
    9fe09842:	02a41503          	lh	a0,42(s0)
    9fe09846:	322000ef          	jal	ra,9fe09b68 <db_to_linear>
  }

  unit_gain = (1L << (agc_obj->max_gain));    /* if max is Q3.13,  i.e 2^13=8192 */
    9fe0984a:	00049703          	lh	a4,0(s1)
  agc_obj->unit_gain = agc_obj->max_gain;
  agc_obj->gain32 = unit_gain << 16;    /* start from unit gain */

  agc_obj->target_high_Q15 = agc_obj->target_high;    /* target high in Q1.15 format */
    9fe0984e:	00e49783          	lh	a5,14(s1)
  unit_gain = (1L << (agc_obj->max_gain));    /* if max is Q3.13,  i.e 2^13=8192 */
    9fe09852:	66c1                	lui	a3,0x10
  agc_obj->gain32 = unit_gain << 16;    /* start from unit gain */
    9fe09854:	00e696b3          	sll	a3,a3,a4
  agc_obj->unit_gain = agc_obj->max_gain;
    9fe09858:	00e49123          	sh	a4,2(s1)
  agc_obj->gain32 = unit_gain << 16;    /* start from unit gain */
    9fe0985c:	c0d4                	sw	a3,4(s1)
  agc_obj->target_high_Q15 = agc_obj->target_high;    /* target high in Q1.15 format */
    9fe0985e:	00f49823          	sh	a5,16(s1)

  agc_obj->target_low = MIN(agc_obj->target_low, agc_obj->target_high);
    9fe09862:	0005069b          	sext.w	a3,a0
  unit_gain = (1L << (agc_obj->max_gain));    /* if max is Q3.13,  i.e 2^13=8192 */
    9fe09866:	2701                	sext.w	a4,a4
  agc_obj->target_low = MIN(agc_obj->target_low, agc_obj->target_high);
    9fe09868:	863e                	mv	a2,a5
    9fe0986a:	00f6d363          	bge	a3,a5,9fe09870 <AGC_para+0xb2>
    9fe0986e:	862a                	mv	a2,a0
    9fe09870:	0106169b          	slliw	a3,a2,0x10
    9fe09874:	4106d69b          	sraiw	a3,a3,0x10
  agc_obj->target_low_Q15 = agc_obj->target_low;    /* target low in Q1.15 format */

  agc_obj->target_high = (short)((agc_obj->target_high*unit_gain) >> 15);    /* proper Q format according to agc max_gain */
    9fe09878:	00e797b3          	sll	a5,a5,a4
  agc_obj->target_low = (short)((agc_obj->target_low*unit_gain) >> 15);    /* proper Q format according to agc max_gain */
    9fe0987c:	00e69733          	sll	a4,a3,a4
  agc_obj->target_high = (short)((agc_obj->target_high*unit_gain) >> 15);    /* proper Q format according to agc max_gain */
    9fe09880:	87bd                	srai	a5,a5,0xf
  agc_obj->target_low = (short)((agc_obj->target_low*unit_gain) >> 15);    /* proper Q format according to agc max_gain */
    9fe09882:	873d                	srai	a4,a4,0xf
  agc_obj->target_low_Q15 = agc_obj->target_low;    /* target low in Q1.15 format */
    9fe09884:	00c49623          	sh	a2,12(s1)
  agc_obj->target_high = (short)((agc_obj->target_high*unit_gain) >> 15);    /* proper Q format according to agc max_gain */
    9fe09888:	00f49723          	sh	a5,14(s1)
  agc_obj->target_low = (short)((agc_obj->target_low*unit_gain) >> 15);    /* proper Q format according to agc max_gain */
    9fe0988c:	00e49523          	sh	a4,10(s1)

}
    9fe09890:	60e2                	ld	ra,24(sp)
    9fe09892:	6442                	ld	s0,16(sp)
    9fe09894:	64a2                	ld	s1,8(sp)
    9fe09896:	6105                	addi	sp,sp,32
    9fe09898:	8082                	ret
	para_obj->para_spk_agc_target_low = MIN(MAX(para_obj->para_spk_agc_target_low, 0), 72);
    9fe0989a:	04800693          	li	a3,72
    9fe0989e:	b741                	j	9fe0981e <AGC_para+0x60>
    9fe098a0:	02a45683          	lhu	a3,42(s0)
	para_obj->para_spk_agc_target_high = MIN(MAX(para_obj->para_spk_agc_target_high, 0), 36);
    9fe098a4:	02400713          	li	a4,36
    9fe098a8:	02e41423          	sh	a4,40(s0)
	para_obj->para_spk_agc_target_low = MIN(MAX(para_obj->para_spk_agc_target_low, 0), 72);
    9fe098ac:	03069613          	slli	a2,a3,0x30
    9fe098b0:	04800713          	li	a4,72
    9fe098b4:	9241                	srli	a2,a2,0x30
    9fe098b6:	f6c774e3          	bgeu	a4,a2,9fe0981e <AGC_para+0x60>
    9fe098ba:	b7c5                	j	9fe0989a <AGC_para+0xdc>
	para_obj->para_spk_agc_target_high = MIN(MAX(para_obj->para_spk_agc_target_high, 0), 36);
    9fe098bc:	02845703          	lhu	a4,40(s0)
	para_obj->para_spk_agc_max_gain = MIN(MAX(para_obj->para_spk_agc_max_gain, 0), 6);
    9fe098c0:	4799                	li	a5,6
    9fe098c2:	02f41323          	sh	a5,38(s0)
	para_obj->para_spk_agc_target_high = MIN(MAX(para_obj->para_spk_agc_target_high, 0), 36);
    9fe098c6:	03071613          	slli	a2,a4,0x30
	para_obj->para_spk_agc_max_gain = MIN(MAX(para_obj->para_spk_agc_max_gain, 0), 6);
    9fe098ca:	17c2                	slli	a5,a5,0x30
	para_obj->para_spk_agc_target_high = MIN(MAX(para_obj->para_spk_agc_target_high, 0), 36);
    9fe098cc:	02400693          	li	a3,36
    9fe098d0:	9241                	srli	a2,a2,0x30
	para_obj->para_spk_agc_max_gain = MIN(MAX(para_obj->para_spk_agc_max_gain, 0), 6);
    9fe098d2:	93c1                	srli	a5,a5,0x30
	para_obj->para_spk_agc_target_high = MIN(MAX(para_obj->para_spk_agc_target_high, 0), 36);
    9fe098d4:	f2c6fae3          	bgeu	a3,a2,9fe09808 <AGC_para+0x4a>
    9fe098d8:	b7e1                	j	9fe098a0 <AGC_para+0xe2>
  	para_obj->para_agc_max_gain = MIN(MAX(para_obj->para_agc_max_gain, 0), 6);
    9fe098da:	0145d783          	lhu	a5,20(a1)
  	para_obj->para_agc_vad_cnt = 7;
    9fe098de:	471d                	li	a4,7
    9fe098e0:	02e59023          	sh	a4,32(a1)
  	para_obj->para_agc_max_gain = MIN(MAX(para_obj->para_agc_max_gain, 0), 6);
    9fe098e4:	03079693          	slli	a3,a5,0x30
  	para_obj->para_agc_cut6_ena = 1;
    9fe098e8:	02c58123          	sb	a2,34(a1)
  	para_obj->para_agc_max_gain = MIN(MAX(para_obj->para_agc_max_gain, 0), 6);
    9fe098ec:	92c1                	srli	a3,a3,0x30
    9fe098ee:	4719                	li	a4,6
    9fe098f0:	0ad76263          	bltu	a4,a3,9fe09994 <AGC_para+0x1d6>
  	para_obj->para_agc_target_high = MIN(MAX(para_obj->para_agc_target_high, 0), 36);
    9fe098f4:	01645683          	lhu	a3,22(s0)
  	para_obj->para_agc_max_gain = MIN(MAX(para_obj->para_agc_max_gain, 0), 6);
    9fe098f8:	00f41a23          	sh	a5,20(s0)
  	para_obj->para_agc_target_high = MIN(MAX(para_obj->para_agc_target_high, 0), 36);
    9fe098fc:	02400713          	li	a4,36
    9fe09900:	03069613          	slli	a2,a3,0x30
  	para_obj->para_agc_max_gain = MIN(MAX(para_obj->para_agc_max_gain, 0), 6);
    9fe09904:	17c2                	slli	a5,a5,0x30
  	para_obj->para_agc_target_high = MIN(MAX(para_obj->para_agc_target_high, 0), 36);
    9fe09906:	9241                	srli	a2,a2,0x30
  	para_obj->para_agc_max_gain = MIN(MAX(para_obj->para_agc_max_gain, 0), 6);
    9fe09908:	93c1                	srli	a5,a5,0x30
  	para_obj->para_agc_target_high = MIN(MAX(para_obj->para_agc_target_high, 0), 36);
    9fe0990a:	06c76763          	bltu	a4,a2,9fe09978 <AGC_para+0x1ba>
  	para_obj->para_agc_target_low = MIN(MAX(para_obj->para_agc_target_low, 0), 72);
    9fe0990e:	01845703          	lhu	a4,24(s0)
  	para_obj->para_agc_target_high = MIN(MAX(para_obj->para_agc_target_high, 0), 36);
    9fe09912:	00d41b23          	sh	a3,22(s0)
  	para_obj->para_agc_target_low = MIN(MAX(para_obj->para_agc_target_low, 0), 72);
    9fe09916:	04800693          	li	a3,72
    9fe0991a:	03071613          	slli	a2,a4,0x30
    9fe0991e:	9241                	srli	a2,a2,0x30
    9fe09920:	04c6e263          	bltu	a3,a2,9fe09964 <AGC_para+0x1a6>
  	para_obj->para_agc_vad_ena = MIN(MAX(para_obj->para_agc_vad_ena, 0), 1);
    9fe09924:	01a44683          	lbu	a3,26(s0)
  	para_obj->para_agc_target_low = MIN(MAX(para_obj->para_agc_target_low, 0), 72);
    9fe09928:	00e41c23          	sh	a4,24(s0)
  	para_obj->para_agc_vad_ena = MIN(MAX(para_obj->para_agc_vad_ena, 0), 1);
    9fe0992c:	0ff6f713          	andi	a4,a3,255
    9fe09930:	eb05                	bnez	a4,9fe09960 <AGC_para+0x1a2>
	agc_obj->max_gain = agc_gain_table[para_obj->para_agc_max_gain];
    9fe09932:	00008717          	auipc	a4,0x8
    9fe09936:	61670713          	addi	a4,a4,1558 # 9fe11f48 <agc_gain_table.0>
    9fe0993a:	0786                	slli	a5,a5,0x1
    9fe0993c:	97ba                	add	a5,a5,a4
    9fe0993e:	0007d783          	lhu	a5,0(a5)
  	para_obj->para_agc_vad_ena = MIN(MAX(para_obj->para_agc_vad_ena, 0), 1);
    9fe09942:	00d40d23          	sb	a3,26(s0)
	agc_obj->max_gain = agc_gain_table[para_obj->para_agc_max_gain];
    9fe09946:	00f49023          	sh	a5,0(s1)
	agc_obj->target_high = db_to_linear(para_obj->para_agc_target_high);
    9fe0994a:	01641503          	lh	a0,22(s0)
    9fe0994e:	21a000ef          	jal	ra,9fe09b68 <db_to_linear>
    9fe09952:	00a49723          	sh	a0,14(s1)
	agc_obj->target_low = db_to_linear(para_obj->para_agc_target_low);
    9fe09956:	01841503          	lh	a0,24(s0)
    9fe0995a:	20e000ef          	jal	ra,9fe09b68 <db_to_linear>
    9fe0995e:	b5f5                	j	9fe0984a <AGC_para+0x8c>
  	para_obj->para_agc_vad_ena = MIN(MAX(para_obj->para_agc_vad_ena, 0), 1);
    9fe09960:	4685                	li	a3,1
    9fe09962:	bfc1                	j	9fe09932 <AGC_para+0x174>
    9fe09964:	01a44683          	lbu	a3,26(s0)
  	para_obj->para_agc_target_low = MIN(MAX(para_obj->para_agc_target_low, 0), 72);
    9fe09968:	04800713          	li	a4,72
    9fe0996c:	00e41c23          	sh	a4,24(s0)
  	para_obj->para_agc_vad_ena = MIN(MAX(para_obj->para_agc_vad_ena, 0), 1);
    9fe09970:	0ff6f713          	andi	a4,a3,255
    9fe09974:	df5d                	beqz	a4,9fe09932 <AGC_para+0x174>
    9fe09976:	b7ed                	j	9fe09960 <AGC_para+0x1a2>
  	para_obj->para_agc_target_low = MIN(MAX(para_obj->para_agc_target_low, 0), 72);
    9fe09978:	01845703          	lhu	a4,24(s0)
  	para_obj->para_agc_target_high = MIN(MAX(para_obj->para_agc_target_high, 0), 36);
    9fe0997c:	02400693          	li	a3,36
    9fe09980:	00d41b23          	sh	a3,22(s0)
  	para_obj->para_agc_target_low = MIN(MAX(para_obj->para_agc_target_low, 0), 72);
    9fe09984:	03071613          	slli	a2,a4,0x30
    9fe09988:	04800693          	li	a3,72
    9fe0998c:	9241                	srli	a2,a2,0x30
    9fe0998e:	f8c6fbe3          	bgeu	a3,a2,9fe09924 <AGC_para+0x166>
    9fe09992:	bfc9                	j	9fe09964 <AGC_para+0x1a6>
  	para_obj->para_agc_target_high = MIN(MAX(para_obj->para_agc_target_high, 0), 36);
    9fe09994:	01645683          	lhu	a3,22(s0)
  	para_obj->para_agc_max_gain = MIN(MAX(para_obj->para_agc_max_gain, 0), 6);
    9fe09998:	4799                	li	a5,6
    9fe0999a:	00f41a23          	sh	a5,20(s0)
  	para_obj->para_agc_target_high = MIN(MAX(para_obj->para_agc_target_high, 0), 36);
    9fe0999e:	03069613          	slli	a2,a3,0x30
  	para_obj->para_agc_max_gain = MIN(MAX(para_obj->para_agc_max_gain, 0), 6);
    9fe099a2:	17c2                	slli	a5,a5,0x30
  	para_obj->para_agc_target_high = MIN(MAX(para_obj->para_agc_target_high, 0), 36);
    9fe099a4:	02400713          	li	a4,36
    9fe099a8:	9241                	srli	a2,a2,0x30
  	para_obj->para_agc_max_gain = MIN(MAX(para_obj->para_agc_max_gain, 0), 6);
    9fe099aa:	93c1                	srli	a5,a5,0x30
  	para_obj->para_agc_target_high = MIN(MAX(para_obj->para_agc_target_high, 0), 36);
    9fe099ac:	f6c771e3          	bgeu	a4,a2,9fe0990e <AGC_para+0x150>
    9fe099b0:	b7e1                	j	9fe09978 <AGC_para+0x1ba>

000000009fe099b2 <envelope>:
#include "define.h"
#include "agc_subfun.h"

/* Function Definitions */
short envelope(short* sin, short frame_size)	/* Envelope detector based on frame */
{
    9fe099b2:	86aa                	mv	a3,a0
  short *ptr_sin;
  //int y1, y2;

  ptr_sin = sin;
  temp_max = 0x4;    /* keep a minimal DC here */
  for (i = 0; i < frame_size; i++) {
    9fe099b4:	04b05863          	blez	a1,9fe09a04 <envelope+0x52>
    9fe099b8:	0586                	slli	a1,a1,0x1
  	temp = *ptr_sin++;
  	if (temp == (short)0x8000)
  		temp = (short)0x8001;
  	temp = ABS(temp);
    9fe099ba:	7861                	lui	a6,0xffff8
    9fe099bc:	00b50633          	add	a2,a0,a1
    9fe099c0:	2805                	addiw	a6,a6,1
  temp_max = 0x4;    /* keep a minimal DC here */
    9fe099c2:	4511                	li	a0,4
  	temp = ABS(temp);
    9fe099c4:	75e1                	lui	a1,0xffff8
  	temp = *ptr_sin++;
    9fe099c6:	00069703          	lh	a4,0(a3) # 10000 <_EL1_STACK_SIZE+0xf800>
    9fe099ca:	0689                	addi	a3,a3,2
  	temp = ABS(temp);
    9fe099cc:	87ba                	mv	a5,a4
    9fe099ce:	00e5c363          	blt	a1,a4,9fe099d4 <envelope+0x22>
    9fe099d2:	87c2                	mv	a5,a6
    9fe099d4:	0107971b          	slliw	a4,a5,0x10
    9fe099d8:	4107571b          	sraiw	a4,a4,0x10
    9fe099dc:	40f7571b          	sraiw	a4,a4,0xf
    9fe099e0:	8fb9                	xor	a5,a5,a4
    9fe099e2:	9f99                	subw	a5,a5,a4
    9fe099e4:	17c2                	slli	a5,a5,0x30
    9fe099e6:	93c1                	srli	a5,a5,0x30
  	if (temp > temp_max)
    9fe099e8:	0107971b          	slliw	a4,a5,0x10
    9fe099ec:	4107571b          	sraiw	a4,a4,0x10
    9fe099f0:	00a75363          	bge	a4,a0,9fe099f6 <envelope+0x44>
    9fe099f4:	87aa                	mv	a5,a0
    9fe099f6:	0107951b          	slliw	a0,a5,0x10
    9fe099fa:	4105551b          	sraiw	a0,a0,0x10
  for (i = 0; i < frame_size; i++) {
    9fe099fe:	fcd614e3          	bne	a2,a3,9fe099c6 <envelope+0x14>
    9fe09a02:	8082                	ret
  temp_max = 0x4;    /* keep a minimal DC here */
    9fe09a04:	4511                	li	a0,4
  y = (y1 + y2) >> 16;
  #endif
  
  return y;

}
    9fe09a06:	8082                	ret

000000009fe09a08 <update_gain>:
{
  int delta32;
  int gain32;
  short step_size;

  if (diff > 32767)
    9fe09a08:	67a1                	lui	a5,0x8
    9fe09a0a:	00f55963          	bge	a0,a5,9fe09a1c <update_gain+0x14>
  	diff = 32767;
  else if (diff < -32768)
    9fe09a0e:	77e1                	lui	a5,0xffff8
    9fe09a10:	02f55863          	bge	a0,a5,9fe09a40 <update_gain+0x38>
  	diff = -32768;

  if (diff > 0)    /* attack time and release time constants should be separated here!!! */
  	step_size = agc_obj->stepsize_release;	/* usually gain slowly increase, so release time constant here slowly */
  else
  	step_size = agc_obj->stepsize_attack;	/* usually gain quickly decrease, so attack time constant here quickly */
    9fe09a14:	01659783          	lh	a5,22(a1) # ffffffffffff8016 <_end+0xffffffff60138316>
  	diff = -32768;
    9fe09a18:	7561                	lui	a0,0xffff8
  	step_size = agc_obj->stepsize_attack;	/* usually gain quickly decrease, so attack time constant here quickly */
    9fe09a1a:	a029                	j	9fe09a24 <update_gain+0x1c>
  	diff = 32767;
    9fe09a1c:	fff78513          	addi	a0,a5,-1 # ffffffffffff7fff <_end+0xffffffff601382ff>
  	step_size = agc_obj->stepsize_release;	/* usually gain slowly increase, so release time constant here slowly */
    9fe09a20:	01459783          	lh	a5,20(a1)

  delta32 = ((int)(step_size) * (int)(diff)) << 1;
    9fe09a24:	02a787bb          	mulw	a5,a5,a0
  gain32 = agc_obj->gain32 + delta32;
    9fe09a28:	41d4                	lw	a3,4(a1)

  //if(gain32 <0)
  //	printf("");
  if (((unsigned int)gain32) > 32767*65536)    /* saturation restriction */
    9fe09a2a:	7fff0737          	lui	a4,0x7fff0
  delta32 = ((int)(step_size) * (int)(diff)) << 1;
    9fe09a2e:	0017979b          	slliw	a5,a5,0x1
  gain32 = agc_obj->gain32 + delta32;
    9fe09a32:	9fb5                	addw	a5,a5,a3
  if (((unsigned int)gain32) > 32767*65536)    /* saturation restriction */
    9fe09a34:	00f77463          	bgeu	a4,a5,9fe09a3c <update_gain+0x34>
  	gain32 = 32767*65536;    /* 0x7FFF0000 */
    9fe09a38:	7fff07b7          	lui	a5,0x7fff0

  agc_obj->gain32 = gain32;
    9fe09a3c:	c1dc                	sw	a5,4(a1)

 }
    9fe09a3e:	8082                	ret
  if (diff > 0)    /* attack time and release time constants should be separated here!!! */
    9fe09a40:	fea040e3          	bgtz	a0,9fe09a20 <update_gain+0x18>
  	step_size = agc_obj->stepsize_attack;	/* usually gain quickly decrease, so attack time constant here quickly */
    9fe09a44:	01659783          	lh	a5,22(a1)
    9fe09a48:	bff1                	j	9fe09a24 <update_gain+0x1c>

000000009fe09a4a <bessel_function>:
  double tmp2_d;
  boolean_T short_iteration;
  int i, m;
  float tmp1;

  if (v == 0.0F) {
    9fe09a4a:	f0000753          	fmv.w.x	fa4,zero
{
    9fe09a4e:	862e                	mv	a2,a1
  if (v == 0.0F) {
    9fe09a50:	a0e527d3          	feq.s	a5,fa0,fa4
    9fe09a54:	10079163          	bnez	a5,9fe09b56 <bessel_function+0x10c>
    bessel_f_ptr0 = &bessel_v0_f[0];
    bessel_d_ptr0 = &bessel_v0_d[0];
  } else {
    bessel_f_ptr0 = &bessel_v1_f[0];
    bessel_d_ptr0 = &bessel_v1_d[0];
    9fe09a58:	00009e17          	auipc	t3,0x9
    9fe09a5c:	6b8e0e13          	addi	t3,t3,1720 # 9fe13110 <bessel_v1_d.0>
    bessel_f_ptr0 = &bessel_v1_f[0];
    9fe09a60:	00009817          	auipc	a6,0x9
    9fe09a64:	6d880813          	addi	a6,a6,1752 # 9fe13138 <bessel_v1_f.1>
      bessel_f_ptr++;
    }

    if (short_iteration == true) {
      /* bessel(i,1) = ((x/2)^v)*acc0 */
      if (v == 0.0F) {
    9fe09a68:	f0000753          	fmv.w.x	fa4,zero
    9fe09a6c:	85aa                	mv	a1,a0
    9fe09a6e:	50460893          	addi	a7,a2,1284
    9fe09a72:	a0e52353          	feq.s	t1,fa0,fa4
    9fe09a76:	03480693          	addi	a3,a6,52
    9fe09a7a:	00008797          	auipc	a5,0x8
    9fe09a7e:	7967a187          	flw	ft3,1942(a5) # 9fe12210 <__func__.1+0x58>
    9fe09a82:	00009797          	auipc	a5,0x9
    9fe09a86:	95e7b587          	fld	fa1,-1698(a5) # 9fe123e0 <__func__.1+0x228>
        bessel[i] = acc0_f;
      } else {
        bessel[i] = x[i] / 2.0F * acc0_f;
    9fe09a8a:	00008797          	auipc	a5,0x8
    9fe09a8e:	7a67a207          	flw	ft4,1958(a5) # 9fe12230 <__func__.1+0x78>
    9fe09a92:	028e0513          	addi	a0,t3,40
    9fe09a96:	00009797          	auipc	a5,0x9
    9fe09a9a:	9527b107          	fld	ft2,-1710(a5) # 9fe123e8 <__func__.1+0x230>
    tmp1 = x[i] * x[i];  
    9fe09a9e:	0005a507          	flw	fa0,0(a1)
    tmp2_f = 1.0F;
    9fe09aa2:	20318753          	fmv.s	fa4,ft3
    acc0_f = 1.0F;     /*  result for m = 0 */
    9fe09aa6:	203186d3          	fmv.s	fa3,ft3
    tmp1 = x[i] * x[i];  
    9fe09aaa:	10a57653          	fmul.s	fa2,fa0,fa0
    bessel_f_ptr = bessel_f_ptr0;
    9fe09aae:	87c2                	mv	a5,a6
      if ((double)(tmp2_f*tmp1) > 3.4E+38)    /* positive for sure */
    9fe09ab0:	10c77753          	fmul.s	fa4,fa4,fa2
    9fe09ab4:	420707d3          	fcvt.d.s	fa5,fa4
    9fe09ab8:	a2f59753          	flt.d	a4,fa1,fa5
    9fe09abc:	c709                	beqz	a4,9fe09ac6 <bessel_function+0x7c>
        tmp2_f = (float)3.4E+38;
    9fe09abe:	00009717          	auipc	a4,0x9
    9fe09ac2:	91e72707          	flw	fa4,-1762(a4) # 9fe123dc <__func__.1+0x224>
      acc0_f = acc0_f + tmp2_f / (*bessel_f_ptr);
    9fe09ac6:	0007a787          	flw	fa5,0(a5)
      bessel_f_ptr++;
    9fe09aca:	0791                	addi	a5,a5,4
      acc0_f = acc0_f + tmp2_f / (*bessel_f_ptr);
    9fe09acc:	18f777d3          	fdiv.s	fa5,fa4,fa5
    9fe09ad0:	00d7f7d3          	fadd.s	fa5,fa5,fa3
      if (acc0_f == acc1_f) {
    9fe09ad4:	a0d7a753          	feq.s	a4,fa5,fa3
      acc0_f = acc0_f + tmp2_f / (*bessel_f_ptr);
    9fe09ad8:	20f786d3          	fmv.s	fa3,fa5
      if (acc0_f == acc1_f) {
    9fe09adc:	e32d                	bnez	a4,9fe09b3e <bessel_function+0xf4>
    for (m = 0; m < 13; m++) {
    9fe09ade:	fcd799e3          	bne	a5,a3,9fe09ab0 <bessel_function+0x66>
      }
      goto bessel_end;
    }
    
    tmp2_d = (double)tmp2_f;
    9fe09ae2:	42070753          	fcvt.d.s	fa4,fa4
    acc0_d = (double)acc0_f;
    9fe09ae6:	420787d3          	fcvt.d.s	fa5,fa5
    acc1_d = acc0_d;
    bessel_d_ptr = bessel_d_ptr0;

    for (m = 0; m < 5; m++) {
      tmp2_d *= tmp1;    /* positive for sure */
    9fe09aea:	42060653          	fcvt.d.s	fa2,fa2
    bessel_d_ptr = bessel_d_ptr0;
    9fe09aee:	87f2                	mv	a5,t3
      tmp2_d *= tmp1;    /* positive for sure */
    9fe09af0:	12c77753          	fmul.d	fa4,fa4,fa2
      if (tmp2_d > 1.7E+200)    /* 1.7E+308 */
    9fe09af4:	a2e11753          	flt.d	a4,ft2,fa4
    9fe09af8:	ef21                	bnez	a4,9fe09b50 <bessel_function+0x106>
        break;
      acc0_d = acc0_d + tmp2_d / (*bessel_d_ptr);
    9fe09afa:	2394                	fld	fa3,0(a5)
      if ((float)(acc0_d) == (float)(acc1_d))
    9fe09afc:	4017f053          	fcvt.s.d	ft0,fa5
         break;
      acc1_d = acc0_d;
      bessel_d_ptr++;
    9fe09b00:	07a1                	addi	a5,a5,8
      acc0_d = acc0_d + tmp2_d / (*bessel_d_ptr);
    9fe09b02:	1ad776d3          	fdiv.d	fa3,fa4,fa3
    9fe09b06:	02f6f6d3          	fadd.d	fa3,fa3,fa5
      if ((float)(acc0_d) == (float)(acc1_d))
    9fe09b0a:	4016f0d3          	fcvt.s.d	ft1,fa3
      acc0_d = acc0_d + tmp2_d / (*bessel_d_ptr);
    9fe09b0e:	22d687d3          	fmv.d	fa5,fa3
      if ((float)(acc0_d) == (float)(acc1_d))
    9fe09b12:	a000a753          	feq.s	a4,ft1,ft0
    9fe09b16:	e319                	bnez	a4,9fe09b1c <bessel_function+0xd2>
    for (m = 0; m < 5; m++) {
    9fe09b18:	fca79ce3          	bne	a5,a0,9fe09af0 <bessel_function+0xa6>
    }

    /* bessel(i,1) = ((x/2)^v)*acc0 */
    if (v == 0.0F) {
    9fe09b1c:	00031863          	bnez	t1,9fe09b2c <bessel_function+0xe2>
      bessel[i] = (float)(acc0_d);
    } else {
      bessel[i] = (float)(x[i] / 2.0F * acc0_d);
    9fe09b20:	10457553          	fmul.s	fa0,fa0,ft4
    9fe09b24:	42050553          	fcvt.d.s	fa0,fa0
    9fe09b28:	12d576d3          	fmul.d	fa3,fa0,fa3
    9fe09b2c:	4016f6d3          	fcvt.s.d	fa3,fa3
    9fe09b30:	00d62027          	fsw	fa3,0(a2)
  for (i = 0; i < 321; i++) {    /*  input vector length */
    9fe09b34:	0611                	addi	a2,a2,4
    9fe09b36:	0591                	addi	a1,a1,4
    9fe09b38:	f71613e3          	bne	a2,a7,9fe09a9e <bessel_function+0x54>
    9fe09b3c:	8082                	ret
      if (v == 0.0F) {
    9fe09b3e:	00031663          	bnez	t1,9fe09b4a <bessel_function+0x100>
        bessel[i] = x[i] / 2.0F * acc0_f;
    9fe09b42:	10457553          	fmul.s	fa0,fa0,ft4
    9fe09b46:	10f577d3          	fmul.s	fa5,fa0,fa5
    9fe09b4a:	00f62027          	fsw	fa5,0(a2)
    9fe09b4e:	b7dd                	j	9fe09b34 <bessel_function+0xea>
    9fe09b50:	22f786d3          	fmv.d	fa3,fa5
    9fe09b54:	b7e1                	j	9fe09b1c <bessel_function+0xd2>
    bessel_d_ptr0 = &bessel_v0_d[0];
    9fe09b56:	00009e17          	auipc	t3,0x9
    9fe09b5a:	55ae0e13          	addi	t3,t3,1370 # 9fe130b0 <bessel_v0_d.2>
    bessel_f_ptr0 = &bessel_v0_f[0];
    9fe09b5e:	00009817          	auipc	a6,0x9
    9fe09b62:	57a80813          	addi	a6,a6,1402 # 9fe130d8 <bessel_v0_f.3>
    9fe09b66:	b709                	j	9fe09a68 <bessel_function+0x1e>

000000009fe09b68 <db_to_linear>:
{
  short i;
  short tmp16;
  
  tmp16 = 0x7fff;
  db_num = MAX(0,db_num);
    9fe09b68:	fff54713          	not	a4,a0
    9fe09b6c:	977d                	srai	a4,a4,0x3f
    9fe09b6e:	8f69                	and	a4,a4,a0
  for (i = 0; i < db_num; i++)
    9fe09b70:	02a05863          	blez	a0,9fe09ba0 <db_to_linear+0x38>
  tmp16 = 0x7fff;
    9fe09b74:	6521                	lui	a0,0x8
  	tmp16 = (short)(((long)tmp16 * (long)29204) >> 15);
    9fe09b76:	669d                	lui	a3,0x7
  tmp16 = 0x7fff;
    9fe09b78:	157d                	addi	a0,a0,-1
  for (i = 0; i < db_num; i++)
    9fe09b7a:	4781                	li	a5,0
    9fe09b7c:	2701                	sext.w	a4,a4
  	tmp16 = (short)(((long)tmp16 * (long)29204) >> 15);
    9fe09b7e:	21468693          	addi	a3,a3,532 # 7214 <_EL1_STACK_SIZE+0x6a14>
    9fe09b82:	02d50533          	mul	a0,a0,a3
    9fe09b86:	2785                	addiw	a5,a5,1
    9fe09b88:	0107979b          	slliw	a5,a5,0x10
    9fe09b8c:	4107d79b          	sraiw	a5,a5,0x10
    9fe09b90:	853d                	srai	a0,a0,0xf
    9fe09b92:	0105151b          	slliw	a0,a0,0x10
    9fe09b96:	4105551b          	sraiw	a0,a0,0x10
  for (i = 0; i < db_num; i++)
    9fe09b9a:	fee7c4e3          	blt	a5,a4,9fe09b82 <db_to_linear+0x1a>
    9fe09b9e:	8082                	ret
  tmp16 = 0x7fff;
    9fe09ba0:	6521                	lui	a0,0x8
    9fe09ba2:	157d                	addi	a0,a0,-1
  return tmp16;
  
}
    9fe09ba4:	8082                	ret

000000009fe09ba6 <dr_detection>:
  int k;
  float alpha;

  /*  DR based VAD is good at low and high SNRs, but not good for tone */
  /*  alike signals and also sensitive to DC setup */
  DR_bin_cnt = 0.0F;
    9fe09ba6:	f0000153          	fmv.w.x	ft2,zero
  for (k = 0; k < 5; k++) {
    if (st->amp_inst_band[k] - st->noisy_st_trough[k] > 0.0F) {
    9fe09baa:	6538                	ld	a4,72(a0)
    9fe09bac:	4781                	li	a5,0
    9fe09bae:	202105d3          	fmv.s	fa1,ft2
    9fe09bb2:	00009697          	auipc	a3,0x9
    9fe09bb6:	8526a807          	flw	fa6,-1966(a3) # 9fe12404 <__func__.1+0x24c>
    9fe09bba:	00009697          	auipc	a3,0x9
    9fe09bbe:	8526a387          	flw	ft7,-1966(a3) # 9fe1240c <__func__.1+0x254>
    9fe09bc2:	00009697          	auipc	a3,0x9
    9fe09bc6:	82e6a307          	flw	ft6,-2002(a3) # 9fe123f0 <__func__.1+0x238>
      alpha = 0.98F;
    9fe09bca:	00009697          	auipc	a3,0x9
    9fe09bce:	82a6a287          	flw	ft5,-2006(a3) # 9fe123f4 <__func__.1+0x23c>
    if (st->amp_inst_band[k] - st->noisy_st_trough[k] > 0.0F) {
    9fe09bd2:	00008697          	auipc	a3,0x8
    9fe09bd6:	65e6a887          	flw	fa7,1630(a3) # 9fe12230 <__func__.1+0x78>
    9fe09bda:	00009697          	auipc	a3,0x9
    9fe09bde:	81e6a207          	flw	ft4,-2018(a3) # 9fe123f8 <__func__.1+0x240>
      alpha = 0.5F;
    }

    st->noisy_st_trough[k] = alpha * st->noisy_st_trough[k] + (1.0F - alpha) * st->amp_inst_band[k];
    if (st->amp_inst_band[k] - st->noisy_st_peak[k] > 0.0F) {
      alpha = 0.9F;
    9fe09be2:	00008697          	auipc	a3,0x8
    9fe09be6:	65e6a187          	flw	ft3,1630(a3) # 9fe12240 <__func__.1+0x88>
    if (st->amp_inst_band[k] - st->noisy_st_peak[k] > 0.0F) {
    9fe09bea:	00009697          	auipc	a3,0x9
    9fe09bee:	8126af87          	flw	ft11,-2030(a3) # 9fe123fc <__func__.1+0x244>
    } else {
      alpha = 0.93F;
    9fe09bf2:	00009697          	auipc	a3,0x9
    9fe09bf6:	80e6af07          	flw	ft10,-2034(a3) # 9fe12400 <__func__.1+0x248>

    st->noisy_st_peak[k] = alpha * st->noisy_st_peak[k] + (1.0F - alpha) * st->amp_inst_band[k];

    /*  to make sure noisy_st_peak cannot go up too much, now maximal 24 dB range */
    if (st->noisy_st_peak[k] / 16.0F - st->noisy_st_trough[k] > 0.0F) {
      st->noisy_st_peak[k] = st->noisy_st_trough[k] * 16.0F;
    9fe09bfa:	00009697          	auipc	a3,0x9
    9fe09bfe:	80e6ae87          	flw	ft9,-2034(a3) # 9fe12408 <__func__.1+0x250>
    }

    /*  the smaller the threshold, the faster to suppress noise but easily introduce more speech distortion as trade-off */
    if (st->noisy_st_peak[k] * 0.5012F - st->noisy_st_trough[k] > 0.0F) {
      DR_bin_cnt++;
    9fe09c02:	00008697          	auipc	a3,0x8
    9fe09c06:	60e6ae07          	flw	ft8,1550(a3) # 9fe12210 <__func__.1+0x58>
  for (k = 0; k < 5; k++) {
    9fe09c0a:	4651                	li	a2,20
    if (st->amp_inst_band[k] - st->noisy_st_trough[k] > 0.0F) {
    9fe09c0c:	6134                	ld	a3,64(a0)
    9fe09c0e:	973e                	add	a4,a4,a5
    9fe09c10:	00072687          	flw	fa3,0(a4)
    9fe09c14:	96be                	add	a3,a3,a5
    9fe09c16:	0006a607          	flw	fa2,0(a3)
    9fe09c1a:	20630753          	fmv.s	fa4,ft6
      alpha = 0.98F;
    9fe09c1e:	205287d3          	fmv.s	fa5,ft5
    if (st->amp_inst_band[k] - st->noisy_st_trough[k] > 0.0F) {
    9fe09c22:	08d670d3          	fsub.s	ft1,fa2,fa3
    9fe09c26:	20420053          	fmv.s	ft0,ft4
      alpha = 0.9F;
    9fe09c2a:	20318553          	fmv.s	fa0,ft3
    if (st->amp_inst_band[k] - st->noisy_st_trough[k] > 0.0F) {
    9fe09c2e:	a01596d3          	flt.s	a3,fa1,ft1
    9fe09c32:	e689                	bnez	a3,9fe09c3c <dr_detection+0x96>
    9fe09c34:	21188753          	fmv.s	fa4,fa7
      alpha = 0.5F;
    9fe09c38:	211887d3          	fmv.s	fa5,fa7
    st->noisy_st_trough[k] = alpha * st->noisy_st_trough[k] + (1.0F - alpha) * st->amp_inst_band[k];
    9fe09c3c:	10e67653          	fmul.s	fa2,fa2,fa4
    9fe09c40:	60f6f6c3          	fmadd.s	fa3,fa3,fa5,fa2
    9fe09c44:	00d72027          	fsw	fa3,0(a4)
    if (st->amp_inst_band[k] - st->noisy_st_peak[k] > 0.0F) {
    9fe09c48:	6134                	ld	a3,64(a0)
    9fe09c4a:	6938                	ld	a4,80(a0)
    9fe09c4c:	96be                	add	a3,a3,a5
    9fe09c4e:	973e                	add	a4,a4,a5
    9fe09c50:	0006a707          	flw	fa4,0(a3)
    9fe09c54:	00072787          	flw	fa5,0(a4)
    9fe09c58:	08f776d3          	fsub.s	fa3,fa4,fa5
    9fe09c5c:	a0d596d3          	flt.s	a3,fa1,fa3
    9fe09c60:	e689                	bnez	a3,9fe09c6a <dr_detection+0xc4>
    9fe09c62:	21ff8053          	fmv.s	ft0,ft11
      alpha = 0.93F;
    9fe09c66:	21ef0553          	fmv.s	fa0,ft10
    st->noisy_st_peak[k] = alpha * st->noisy_st_peak[k] + (1.0F - alpha) * st->amp_inst_band[k];
    9fe09c6a:	10077753          	fmul.s	fa4,fa4,ft0
    9fe09c6e:	70a7f7c3          	fmadd.s	fa5,fa5,fa0,fa4
    9fe09c72:	00f72027          	fsw	fa5,0(a4)
    if (st->noisy_st_peak[k] / 16.0F - st->noisy_st_trough[k] > 0.0F) {
    9fe09c76:	6538                	ld	a4,72(a0)
    9fe09c78:	6934                	ld	a3,80(a0)
    9fe09c7a:	00f705b3          	add	a1,a4,a5
    9fe09c7e:	96be                	add	a3,a3,a5
    9fe09c80:	0005a707          	flw	fa4,0(a1)
    9fe09c84:	0006a787          	flw	fa5,0(a3)
    9fe09c88:	7107f6c7          	fmsub.s	fa3,fa5,fa6,fa4
    9fe09c8c:	a0d595d3          	flt.s	a1,fa1,fa3
    9fe09c90:	cd91                	beqz	a1,9fe09cac <dr_detection+0x106>
      st->noisy_st_peak[k] = st->noisy_st_trough[k] * 16.0F;
    9fe09c92:	11d77753          	fmul.s	fa4,fa4,ft9
    9fe09c96:	00e6a027          	fsw	fa4,0(a3)
    if (st->noisy_st_peak[k] * 0.5012F - st->noisy_st_trough[k] > 0.0F) {
    9fe09c9a:	6934                	ld	a3,80(a0)
    9fe09c9c:	6538                	ld	a4,72(a0)
    9fe09c9e:	96be                	add	a3,a3,a5
    9fe09ca0:	00f705b3          	add	a1,a4,a5
    9fe09ca4:	0006a787          	flw	fa5,0(a3)
    9fe09ca8:	0005a707          	flw	fa4,0(a1)
    9fe09cac:	7077f7c7          	fmsub.s	fa5,fa5,ft7,fa4
  for (k = 0; k < 5; k++) {
    9fe09cb0:	0791                	addi	a5,a5,4
    if (st->noisy_st_peak[k] * 0.5012F - st->noisy_st_trough[k] > 0.0F) {
    9fe09cb2:	a0f596d3          	flt.s	a3,fa1,fa5
    9fe09cb6:	c299                	beqz	a3,9fe09cbc <dr_detection+0x116>
      DR_bin_cnt++;
    9fe09cb8:	01c17153          	fadd.s	ft2,ft2,ft8
  for (k = 0; k < 5; k++) {
    9fe09cbc:	f4c798e3          	bne	a5,a2,9fe09c0c <dr_detection+0x66>
    }
  }

  if (DR_bin_cnt == 0.0F) {
    9fe09cc0:	f00007d3          	fmv.w.x	fa5,zero
    9fe09cc4:	a0f127d3          	feq.s	a5,ft2,fa5
    9fe09cc8:	c395                	beqz	a5,9fe09cec <dr_detection+0x146>
    DR_bin_cnt = st->vad_dr_cnt - 1.0F;
    9fe09cca:	07052707          	flw	fa4,112(a0) # 8070 <_EL1_STACK_SIZE+0x7870>
    9fe09cce:	00008797          	auipc	a5,0x8
    9fe09cd2:	5427a687          	flw	fa3,1346(a5) # 9fe12210 <__func__.1+0x58>
    9fe09cd6:	08d77753          	fsub.s	fa4,fa4,fa3
    if (0.0F > DR_bin_cnt) {
    9fe09cda:	a0f717d3          	flt.s	a5,fa4,fa5
    9fe09cde:	e7a9                	bnez	a5,9fe09d28 <dr_detection+0x182>
      DR_bin_cnt = 0.0F;
    }

    st->vad_dr_cnt = DR_bin_cnt;
    if (DR_bin_cnt == 0.0F) {
    9fe09ce0:	a0f727d3          	feq.s	a5,fa4,fa5
    st->vad_dr_cnt = DR_bin_cnt;
    9fe09ce4:	06e52827          	fsw	fa4,112(a0)
    if (DR_bin_cnt == 0.0F) {
    9fe09ce8:	e3b1                	bnez	a5,9fe09d2c <dr_detection+0x186>
        st->vad_dr_cnt = 7.0F;
      }
    }
  }

}
    9fe09cea:	8082                	ret
    if (st->Fs == 16000.0F) {
    9fe09cec:	09c52787          	flw	fa5,156(a0)
    st->vad_dr = 1.0F;
    9fe09cf0:	00008797          	auipc	a5,0x8
    9fe09cf4:	5207a707          	flw	fa4,1312(a5) # 9fe12210 <__func__.1+0x58>
    if (st->Fs == 16000.0F) {
    9fe09cf8:	00008797          	auipc	a5,0x8
    9fe09cfc:	51c7a687          	flw	fa3,1308(a5) # 9fe12214 <__func__.1+0x5c>
    9fe09d00:	a0d7a7d3          	feq.s	a5,fa5,fa3
    st->vad_dr = 1.0F;
    9fe09d04:	06e52a27          	fsw	fa4,116(a0)
    if (st->Fs == 16000.0F) {
    9fe09d08:	cb81                	beqz	a5,9fe09d18 <dr_detection+0x172>
      st->vad_dr_cnt = 7.0F;
    9fe09d0a:	00008797          	auipc	a5,0x8
    9fe09d0e:	5127a787          	flw	fa5,1298(a5) # 9fe1221c <__func__.1+0x64>
    9fe09d12:	06f52827          	fsw	fa5,112(a0)
    9fe09d16:	8082                	ret
      if (st->Fs == 8000.0F) {
    9fe09d18:	00008797          	auipc	a5,0x8
    9fe09d1c:	65c7a707          	flw	fa4,1628(a5) # 9fe12374 <__func__.1+0x1bc>
    9fe09d20:	a0e7a7d3          	feq.s	a5,fa5,fa4
    9fe09d24:	f3fd                	bnez	a5,9fe09d0a <dr_detection+0x164>
    9fe09d26:	8082                	ret
    st->vad_dr_cnt = DR_bin_cnt;
    9fe09d28:	06052823          	sw	zero,112(a0)
      st->vad_dr = 0.0F;
    9fe09d2c:	06052a23          	sw	zero,116(a0)
    9fe09d30:	8082                	ret

000000009fe09d32 <dradf2>:

  if (n == 1) return;
  drfti1(n, wsave+n, ifac);
}

static void dradf2(int ido,int l1,float *cc,float *ch,float *wa1){
    9fe09d32:	7139                	addi	sp,sp,-64
    9fe09d34:	f04e                	sd	s3,32(sp)
  int i,k;
  float ti2,tr2;
  int t0,t1,t2,t3,t4,t5,t6;

  t1=0;
  t0=(t2=l1*ido);
    9fe09d36:	02a589bb          	mulw	s3,a1,a0
static void dradf2(int ido,int l1,float *cc,float *ch,float *wa1){
    9fe09d3a:	f44a                	sd	s2,40(sp)
    9fe09d3c:	ec52                	sd	s4,24(sp)
  t3=ido<<1;
    9fe09d3e:	0015129b          	slliw	t0,a0,0x1
static void dradf2(int ido,int l1,float *cc,float *ch,float *wa1){
    9fe09d42:	fc22                	sd	s0,56(sp)
    9fe09d44:	f826                	sd	s1,48(sp)
    9fe09d46:	e856                	sd	s5,16(sp)
    9fe09d48:	e45a                	sd	s6,8(sp)
  t3=ido<<1;
    9fe09d4a:	8916                	mv	s2,t0
  t0=(t2=l1*ido);
    9fe09d4c:	8a4e                	mv	s4,s3
  for(k=0;k<l1;k++){
    9fe09d4e:	04b05763          	blez	a1,9fe09d9c <dradf2+0x6a>
    9fe09d52:	00299813          	slli	a6,s3,0x2
    9fe09d56:	00251f13          	slli	t5,a0,0x2
    9fe09d5a:	88b2                	mv	a7,a2
    9fe09d5c:	9832                	add	a6,a6,a2
    9fe09d5e:	4781                	li	a5,0
    9fe09d60:	4e81                	li	t4,0
    ch[t1<<1]=cc[t1]+cc[t2];
    9fe09d62:	00082707          	flw	fa4,0(a6)
    9fe09d66:	0008a787          	flw	fa5,0(a7)
    9fe09d6a:	00279e13          	slli	t3,a5,0x2
    9fe09d6e:	9e36                	add	t3,t3,a3
    9fe09d70:	00e7f7d3          	fadd.s	fa5,fa5,fa4
    ch[(t1<<1)+t3-1]=cc[t1]-cc[t2];
    9fe09d74:	00f287bb          	addw	a5,t0,a5
    9fe09d78:	00279313          	slli	t1,a5,0x2
    9fe09d7c:	9336                	add	t1,t1,a3
  for(k=0;k<l1;k++){
    9fe09d7e:	2e85                	addiw	t4,t4,1
    ch[t1<<1]=cc[t1]+cc[t2];
    9fe09d80:	00fe2027          	fsw	fa5,0(t3)
    ch[(t1<<1)+t3-1]=cc[t1]-cc[t2];
    9fe09d84:	0008a787          	flw	fa5,0(a7)
    9fe09d88:	00082707          	flw	fa4,0(a6)
  for(k=0;k<l1;k++){
    9fe09d8c:	98fa                	add	a7,a7,t5
    9fe09d8e:	987a                	add	a6,a6,t5
    ch[(t1<<1)+t3-1]=cc[t1]-cc[t2];
    9fe09d90:	08e7f7d3          	fsub.s	fa5,fa5,fa4
    9fe09d94:	fef32e27          	fsw	fa5,-4(t1)
  for(k=0;k<l1;k++){
    9fe09d98:	fdd595e3          	bne	a1,t4,9fe09d62 <dradf2+0x30>
    t1+=ido;
    t2+=ido;
  }

  if(ido<2)return;
    9fe09d9c:	4785                	li	a5,1
    9fe09d9e:	0ea7d563          	bge	a5,a0,9fe09e88 <dradf2+0x156>
  if(ido==2)goto L105;
    9fe09da2:	4789                	li	a5,2
    9fe09da4:	0ef50b63          	beq	a0,a5,9fe09e9a <dradf2+0x168>
    }
    t1+=ido;
    t2+=ido;
  }

  if(ido%2==1)return;
    9fe09da8:	00157b13          	andi	s6,a0,1
  for(k=0;k<l1;k++){
    9fe09dac:	0cb05e63          	blez	a1,9fe09e88 <dradf2+0x156>
    9fe09db0:	8496                	mv	s1,t0
    9fe09db2:	00251f13          	slli	t5,a0,0x2
    9fe09db6:	8fb2                	mv	t6,a2
    9fe09db8:	00291a93          	slli	s5,s2,0x2
    9fe09dbc:	8436                	mv	s0,a3
    9fe09dbe:	098a                	slli	s3,s3,0x2
    9fe09dc0:	4381                	li	t2,0
    for(i=2;i<ido;i+=2){
    9fe09dc2:	00249813          	slli	a6,s1,0x2
    9fe09dc6:	8e3a                	mv	t3,a4
    9fe09dc8:	01f98333          	add	t1,s3,t6
    9fe09dcc:	9836                	add	a6,a6,a3
    t4=(t1<<1)+(ido<<1);
    9fe09dce:	88a2                	mv	a7,s0
    9fe09dd0:	87fe                	mv	a5,t6
    for(i=2;i<ido;i+=2){
    9fe09dd2:	4e89                	li	t4,2
      tr2=wa1[i-2]*cc[t3-1]+wa1[i-1]*cc[t3];
    9fe09dd4:	00432587          	flw	fa1,4(t1)
    9fe09dd8:	004e2687          	flw	fa3,4(t3)
    9fe09ddc:	000e2707          	flw	fa4,0(t3)
    9fe09de0:	00832787          	flw	fa5,8(t1)
      ti2=wa1[i-2]*cc[t3]-wa1[i-1]*cc[t3-1];
    9fe09de4:	10d5f553          	fmul.s	fa0,fa1,fa3
      ch[t6]=cc[t5]+ti2;
    9fe09de8:	0087a607          	flw	fa2,8(a5)
      tr2=wa1[i-2]*cc[t3-1]+wa1[i-1]*cc[t3];
    9fe09dec:	10f6f6d3          	fmul.s	fa3,fa3,fa5
    for(i=2;i<ido;i+=2){
    9fe09df0:	08a1                	addi	a7,a7,8
    9fe09df2:	07a1                	addi	a5,a5,8
      ti2=wa1[i-2]*cc[t3]-wa1[i-1]*cc[t3-1];
    9fe09df4:	50f777c7          	fmsub.s	fa5,fa4,fa5,fa0
    for(i=2;i<ido;i+=2){
    9fe09df8:	1861                	addi	a6,a6,-8
      tr2=wa1[i-2]*cc[t3-1]+wa1[i-1]*cc[t3];
    9fe09dfa:	68b77743          	fmadd.s	fa4,fa4,fa1,fa3
    for(i=2;i<ido;i+=2){
    9fe09dfe:	2e89                	addiw	t4,t4,2
    9fe09e00:	0e21                	addi	t3,t3,8
      ch[t6]=cc[t5]+ti2;
    9fe09e02:	00f67653          	fadd.s	fa2,fa2,fa5
    for(i=2;i<ido;i+=2){
    9fe09e06:	0321                	addi	t1,t1,8
      ch[t6]=cc[t5]+ti2;
    9fe09e08:	00c8a027          	fsw	fa2,0(a7)
      ch[t4]=ti2-cc[t5];
    9fe09e0c:	0007a687          	flw	fa3,0(a5)
    9fe09e10:	08d7f7d3          	fsub.s	fa5,fa5,fa3
    9fe09e14:	00f82027          	fsw	fa5,0(a6)
      ch[t6-1]=cc[t5-1]+tr2;
    9fe09e18:	ffc7a787          	flw	fa5,-4(a5)
    9fe09e1c:	00e7f7d3          	fadd.s	fa5,fa5,fa4
    9fe09e20:	fef8ae27          	fsw	fa5,-4(a7)
      ch[t4-1]=cc[t5-1]-tr2;
    9fe09e24:	ffc7a787          	flw	fa5,-4(a5)
    9fe09e28:	08e7f7d3          	fsub.s	fa5,fa5,fa4
    9fe09e2c:	fef82e27          	fsw	fa5,-4(a6)
    for(i=2;i<ido;i+=2){
    9fe09e30:	faaec2e3          	blt	t4,a0,9fe09dd4 <dradf2+0xa2>
  for(k=0;k<l1;k++){
    9fe09e34:	2385                	addiw	t2,t2,1
    9fe09e36:	009904bb          	addw	s1,s2,s1
    9fe09e3a:	9ffa                	add	t6,t6,t5
    9fe09e3c:	9456                	add	s0,s0,s5
    9fe09e3e:	f87592e3          	bne	a1,t2,9fe09dc2 <dradf2+0x90>
  if(ido%2==1)return;
    9fe09e42:	040b1363          	bnez	s6,9fe09e88 <dradf2+0x156>

 L105:
  t3=(t2=(t1=ido)-1);
    9fe09e46:	fff5081b          	addiw	a6,a0,-1
  t2+=t0;
    9fe09e4a:	01480a3b          	addw	s4,a6,s4
  for(k=0;k<l1;k++){
    9fe09e4e:	002a1793          	slli	a5,s4,0x2
    9fe09e52:	41400a33          	neg	s4,s4
    9fe09e56:	963e                	add	a2,a2,a5
    9fe09e58:	028a                	slli	t0,t0,0x2
    9fe09e5a:	96fa                	add	a3,a3,t5
    9fe09e5c:	002a1513          	slli	a0,s4,0x2
    9fe09e60:	080a                	slli	a6,a6,0x2
  t3=(t2=(t1=ido)-1);
    9fe09e62:	4701                	li	a4,0
    ch[t1]=-cc[t2];
    9fe09e64:	00062787          	flw	fa5,0(a2)
    ch[t1-1]=cc[t3];
    9fe09e68:	00a607b3          	add	a5,a2,a0
    9fe09e6c:	97c2                	add	a5,a5,a6
    ch[t1]=-cc[t2];
    9fe09e6e:	20f797d3          	fneg.s	fa5,fa5
  for(k=0;k<l1;k++){
    9fe09e72:	2705                	addiw	a4,a4,1
    9fe09e74:	967a                	add	a2,a2,t5
    ch[t1]=-cc[t2];
    9fe09e76:	00f6a027          	fsw	fa5,0(a3)
    ch[t1-1]=cc[t3];
    9fe09e7a:	0007a787          	flw	fa5,0(a5)
    9fe09e7e:	fef6ae27          	fsw	fa5,-4(a3)
  for(k=0;k<l1;k++){
    9fe09e82:	9696                	add	a3,a3,t0
    9fe09e84:	feb740e3          	blt	a4,a1,9fe09e64 <dradf2+0x132>
    t1+=ido<<1;
    t2+=ido;
    t3+=ido;
  }
}
    9fe09e88:	7462                	ld	s0,56(sp)
    9fe09e8a:	74c2                	ld	s1,48(sp)
    9fe09e8c:	7922                	ld	s2,40(sp)
    9fe09e8e:	7982                	ld	s3,32(sp)
    9fe09e90:	6a62                	ld	s4,24(sp)
    9fe09e92:	6ac2                	ld	s5,16(sp)
    9fe09e94:	6b22                	ld	s6,8(sp)
    9fe09e96:	6121                	addi	sp,sp,64
    9fe09e98:	8082                	ret
  for(k=0;k<l1;k++){
    9fe09e9a:	feb057e3          	blez	a1,9fe09e88 <dradf2+0x156>
  t2+=t0;
    9fe09e9e:	2a05                	addiw	s4,s4,1
  t3=(t2=(t1=ido)-1);
    9fe09ea0:	4805                	li	a6,1
    9fe09ea2:	4f21                	li	t5,8
    9fe09ea4:	b76d                	j	9fe09e4e <dradf2+0x11c>

000000009fe09ea6 <dradf4>:
static void dradf4(int ido,int l1,float *cc,float *ch,float *wa1,
	    float *wa2,float *wa3){
  static float hsqt2 = .70710678118654752f;
  int i,k,t0,t1,t2,t3,t4,t5,t6;
  float ci2,ci3,ci4,cr2,cr3,cr4,ti1,ti2,ti3,ti4,tr1,tr2,tr3,tr4;
  t0=l1*ido;
    9fe09ea6:	02a588bb          	mulw	a7,a1,a0
	    float *wa2,float *wa3){
    9fe09eaa:	7119                	addi	sp,sp,-128
    9fe09eac:	fca2                	sd	s0,120(sp)
    9fe09eae:	f8a6                	sd	s1,112(sp)
    9fe09eb0:	f4ca                	sd	s2,104(sp)
    9fe09eb2:	f0ce                	sd	s3,96(sp)
    9fe09eb4:	ecd2                	sd	s4,88(sp)
    9fe09eb6:	e8d6                	sd	s5,80(sp)
    9fe09eb8:	e4da                	sd	s6,72(sp)
    9fe09eba:	e0de                	sd	s7,64(sp)

  t1=t0;
  t4=t1<<1;
    9fe09ebc:	00189e9b          	slliw	t4,a7,0x1
	    float *wa2,float *wa3){
    9fe09ec0:	fc62                	sd	s8,56(sp)
    9fe09ec2:	f866                	sd	s9,48(sp)
    9fe09ec4:	f46a                	sd	s10,40(sp)
    9fe09ec6:	f06e                	sd	s11,32(sp)
  t0=l1*ido;
    9fe09ec8:	c446                	sw	a7,8(sp)
  t4=t1<<1;
    9fe09eca:	c676                	sw	t4,12(sp)
  t0=l1*ido;
    9fe09ecc:	e046                	sd	a7,0(sp)
  t2=t1+(t1<<1);
    9fe09ece:	01d88f3b          	addw	t5,a7,t4
  t3=0;

  for(k=0;k<l1;k++){
    9fe09ed2:	08b05b63          	blez	a1,9fe09f68 <dradf4+0xc2>
    9fe09ed6:	6882                	ld	a7,0(sp)
    9fe09ed8:	0f0a                	slli	t5,t5,0x2
    9fe09eda:	0e8a                	slli	t4,t4,0x2
    9fe09edc:	00289f93          	slli	t6,a7,0x2
    tr1=cc[t1]+cc[t2];
    tr2=cc[t3]+cc[t4];

    ch[t5=t3<<2]=tr1+tr2;
    ch[(ido<<2)+t5-1]=tr2-tr1;
    9fe09ee0:	0025141b          	slliw	s0,a0,0x2
    ch[(t5+=(ido<<1))-1]=cc[t3]-cc[t4];
    9fe09ee4:	0015149b          	slliw	s1,a0,0x1
    9fe09ee8:	00251a13          	slli	s4,a0,0x2
    9fe09eec:	9fb2                	add	t6,t6,a2
    9fe09eee:	9f32                	add	t5,t5,a2
    9fe09ef0:	82b2                	mv	t0,a2
    9fe09ef2:	9eb2                	add	t4,t4,a2
    9fe09ef4:	4e01                	li	t3,0
  for(k=0;k<l1;k++){
    9fe09ef6:	4381                	li	t2,0
    tr2=cc[t3]+cc[t4];
    9fe09ef8:	000ea687          	flw	fa3,0(t4)
    tr1=cc[t1]+cc[t2];
    9fe09efc:	000fa707          	flw	fa4,0(t6)
    9fe09f00:	000f2607          	flw	fa2,0(t5)
    tr2=cc[t3]+cc[t4];
    9fe09f04:	0002a787          	flw	fa5,0(t0)
    ch[t5=t3<<2]=tr1+tr2;
    9fe09f08:	002e1913          	slli	s2,t3,0x2
    tr1=cc[t1]+cc[t2];
    9fe09f0c:	00c77753          	fadd.s	fa4,fa4,fa2
    tr2=cc[t3]+cc[t4];
    9fe09f10:	00d7f7d3          	fadd.s	fa5,fa5,fa3
    ch[(ido<<2)+t5-1]=tr2-tr1;
    9fe09f14:	01c4033b          	addw	t1,s0,t3
    ch[t5=t3<<2]=tr1+tr2;
    9fe09f18:	9936                	add	s2,s2,a3
    ch[(ido<<2)+t5-1]=tr2-tr1;
    9fe09f1a:	030a                	slli	t1,t1,0x2
    9fe09f1c:	9336                	add	t1,t1,a3
    ch[t5=t3<<2]=tr1+tr2;
    9fe09f1e:	00f776d3          	fadd.s	fa3,fa4,fa5
    ch[(ido<<2)+t5-1]=tr2-tr1;
    9fe09f22:	08e7f7d3          	fsub.s	fa5,fa5,fa4
    ch[(t5+=(ido<<1))-1]=cc[t3]-cc[t4];
    9fe09f26:	01c488bb          	addw	a7,s1,t3
    9fe09f2a:	088a                	slli	a7,a7,0x2
    9fe09f2c:	98b6                	add	a7,a7,a3
    ch[t5=t3<<2]=tr1+tr2;
    9fe09f2e:	00d92027          	fsw	fa3,0(s2)
    ch[(ido<<2)+t5-1]=tr2-tr1;
    9fe09f32:	fef32e27          	fsw	fa5,-4(t1)
    ch[(t5+=(ido<<1))-1]=cc[t3]-cc[t4];
    9fe09f36:	000ea707          	flw	fa4,0(t4)
    9fe09f3a:	0002a787          	flw	fa5,0(t0)
  for(k=0;k<l1;k++){
    9fe09f3e:	2385                	addiw	t2,t2,1
    9fe09f40:	92d2                	add	t0,t0,s4
    ch[(t5+=(ido<<1))-1]=cc[t3]-cc[t4];
    9fe09f42:	08e7f7d3          	fsub.s	fa5,fa5,fa4
  for(k=0;k<l1;k++){
    9fe09f46:	9ed2                	add	t4,t4,s4
    9fe09f48:	01c40e3b          	addw	t3,s0,t3
    ch[(t5+=(ido<<1))-1]=cc[t3]-cc[t4];
    9fe09f4c:	fef8ae27          	fsw	fa5,-4(a7)
    ch[t5]=cc[t2]-cc[t1];
    9fe09f50:	000f2787          	flw	fa5,0(t5)
    9fe09f54:	000fa707          	flw	fa4,0(t6)
  for(k=0;k<l1;k++){
    9fe09f58:	9f52                	add	t5,t5,s4
    9fe09f5a:	9fd2                	add	t6,t6,s4
    ch[t5]=cc[t2]-cc[t1];
    9fe09f5c:	08e7f7d3          	fsub.s	fa5,fa5,fa4
    9fe09f60:	00f8a027          	fsw	fa5,0(a7)
  for(k=0;k<l1;k++){
    9fe09f64:	f8759ae3          	bne	a1,t2,9fe09ef8 <dradf4+0x52>
    t2+=ido;
    t3+=ido;
    t4+=ido;
  }

  if(ido<2)return;
    9fe09f68:	4885                	li	a7,1
    9fe09f6a:	20a8d563          	bge	a7,a0,9fe0a174 <dradf4+0x2ce>
  if(ido==2)goto L105;
    9fe09f6e:	4889                	li	a7,2
    9fe09f70:	23150063          	beq	a0,a7,9fe0a190 <dradf4+0x2ea>
      ch[t5+t6-1]=tr2-tr1;
      ch[t5+t6]=ti1-ti2;
    }
    t1+=ido;
  }
  if(ido&1)return;
    9fe09f74:	00157413          	andi	s0,a0,1
    9fe09f78:	ec22                	sd	s0,24(sp)
  for(k=0;k<l1;k++){
    9fe09f7a:	1eb05d63          	blez	a1,9fe0a174 <dradf4+0x2ce>
    9fe09f7e:	6402                	ld	s0,0(sp)
    t5=(t6=ido<<1)+t4;
    9fe09f80:	00151a9b          	slliw	s5,a0,0x1
    9fe09f84:	00251a13          	slli	s4,a0,0x2
    9fe09f88:	408004b3          	neg	s1,s0
    9fe09f8c:	00241c93          	slli	s9,s0,0x2
    9fe09f90:	e826                	sd	s1,16(sp)
    9fe09f92:	01960b33          	add	s6,a2,s9
    9fe09f96:	00341d93          	slli	s11,s0,0x3
    9fe09f9a:	00249d13          	slli	s10,s1,0x2
  t1=0;
    9fe09f9e:	4c01                	li	s8,0
  for(k=0;k<l1;k++){
    9fe09fa0:	4b81                	li	s7,0
    t4=t1<<2;
    9fe09fa2:	002c131b          	slliw	t1,s8,0x2
    for(i=2;i<ido;i+=2){
    9fe09fa6:	015308bb          	addw	a7,t1,s5
    9fe09faa:	006a8eb3          	add	t4,s5,t1
    9fe09fae:	011a8e33          	add	t3,s5,a7
    9fe09fb2:	030a                	slli	t1,t1,0x2
    9fe09fb4:	088a                	slli	a7,a7,0x2
    9fe09fb6:	0e8a                	slli	t4,t4,0x2
    9fe09fb8:	0e0a                	slli	t3,t3,0x2
    9fe09fba:	893a                	mv	s2,a4
    9fe09fbc:	84be                	mv	s1,a5
    9fe09fbe:	016c8433          	add	s0,s9,s6
    9fe09fc2:	83c2                	mv	t2,a6
    9fe09fc4:	016d82b3          	add	t0,s11,s6
    9fe09fc8:	016d0fb3          	add	t6,s10,s6
    9fe09fcc:	9336                	add	t1,t1,a3
    9fe09fce:	98b6                	add	a7,a7,a3
    9fe09fd0:	9eb6                	add	t4,t4,a3
    9fe09fd2:	9e36                	add	t3,t3,a3
    t4=t1<<2;
    9fe09fd4:	8f5a                	mv	t5,s6
    for(i=2;i<ido;i+=2){
    9fe09fd6:	4989                	li	s3,2
      cr2=wa1[i-2]*cc[t3-1]+wa1[i-1]*cc[t3];
    9fe09fd8:	008f2287          	flw	ft5,8(t5)
      cr3=wa2[i-2]*cc[t3-1]+wa2[i-1]*cc[t3];
    9fe09fdc:	00442607          	flw	fa2,4(s0)
    9fe09fe0:	00842207          	flw	ft4,8(s0)
      cr4=wa3[i-2]*cc[t3-1]+wa3[i-1]*cc[t3];
    9fe09fe4:	0043a007          	flw	ft0,4(t2) # 10004 <_EL1_STACK_SIZE+0xf804>
    9fe09fe8:	0082a187          	flw	ft3,8(t0)
      cr2=wa1[i-2]*cc[t3-1]+wa1[i-1]*cc[t3];
    9fe09fec:	004f2087          	flw	ft1,4(t5)
    9fe09ff0:	00492587          	flw	fa1,4(s2)
      cr3=wa2[i-2]*cc[t3-1]+wa2[i-1]*cc[t3];
    9fe09ff4:	0044a507          	flw	fa0,4(s1)
      cr4=wa3[i-2]*cc[t3-1]+wa3[i-1]*cc[t3];
    9fe09ff8:	0042a787          	flw	fa5,4(t0)
      cr2=wa1[i-2]*cc[t3-1]+wa1[i-1]*cc[t3];
    9fe09ffc:	1055f853          	fmul.s	fa6,fa1,ft5
      cr3=wa2[i-2]*cc[t3-1]+wa2[i-1]*cc[t3];
    9fe0a000:	104573d3          	fmul.s	ft7,fa0,ft4
      ci4=wa3[i-2]*cc[t3]-wa3[i-1]*cc[t3-1];
    9fe0a004:	1007f153          	fmul.s	ft2,fa5,ft0
      ci2=wa1[i-2]*cc[t3]-wa1[i-1]*cc[t3-1];
    9fe0a008:	10b0f5d3          	fmul.s	fa1,ft1,fa1
      cr4=wa3[i-2]*cc[t3-1]+wa3[i-1]*cc[t3];
    9fe0a00c:	10307353          	fmul.s	ft6,ft0,ft3
      ci3=wa2[i-2]*cc[t3]-wa2[i-1]*cc[t3-1];
    9fe0a010:	10a67553          	fmul.s	fa0,fa2,fa0
      cr3=wa2[i-2]*cc[t3-1]+wa2[i-1]*cc[t3];
    9fe0a014:	0004a687          	flw	fa3,0(s1)
      cr2=wa1[i-2]*cc[t3-1]+wa1[i-1]*cc[t3];
    9fe0a018:	00092707          	flw	fa4,0(s2)
      cr4=wa3[i-2]*cc[t3-1]+wa3[i-1]*cc[t3];
    9fe0a01c:	0003a007          	flw	ft0,0(t2)
      cr3=wa2[i-2]*cc[t3-1]+wa2[i-1]*cc[t3];
    9fe0a020:	38c6f3c3          	fmadd.s	ft7,fa3,fa2,ft7
      cr2=wa1[i-2]*cc[t3-1]+wa1[i-1]*cc[t3];
    9fe0a024:	801770c3          	fmadd.s	ft1,fa4,ft1,fa6
      ci3=wa2[i-2]*cc[t3]-wa2[i-1]*cc[t3-1];
    9fe0a028:	5046f547          	fmsub.s	fa0,fa3,ft4,fa0
      ci2=wa1[i-2]*cc[t3]-wa1[i-1]*cc[t3-1];
    9fe0a02c:	58577747          	fmsub.s	fa4,fa4,ft5,fa1
      cr4=wa3[i-2]*cc[t3-1]+wa3[i-1]*cc[t3];
    9fe0a030:	30f077c3          	fmadd.s	fa5,ft0,fa5,ft6
      ci4=wa3[i-2]*cc[t3]-wa3[i-1]*cc[t3-1];
    9fe0a034:	10307047          	fmsub.s	ft0,ft0,ft3,ft2
      ti2=cc[t2]+ci3;
    9fe0a038:	008fa687          	flw	fa3,8(t6)
      tr2=cc[t2-1]+cr3;
    9fe0a03c:	004fa607          	flw	fa2,4(t6)
    for(i=2;i<ido;i+=2){
    9fe0a040:	2989                	addiw	s3,s3,2
      ti2=cc[t2]+ci3;
    9fe0a042:	00a6f253          	fadd.s	ft4,fa3,fa0
      tr1=cr2+cr4;
    9fe0a046:	00f0f2d3          	fadd.s	ft5,ft1,fa5
      ti1=ci2+ci4;
    9fe0a04a:	00077153          	fadd.s	ft2,fa4,ft0
      tr2=cc[t2-1]+cr3;
    9fe0a04e:	007671d3          	fadd.s	ft3,fa2,ft7
      tr4=cr4-cr2;
    9fe0a052:	0817f7d3          	fsub.s	fa5,fa5,ft1
      ti4=ci2-ci4;
    9fe0a056:	08077753          	fsub.s	fa4,fa4,ft0
      ti3=cc[t2]-ci3;
    9fe0a05a:	08a6f6d3          	fsub.s	fa3,fa3,fa0
      tr3=cc[t2-1]-cr3;
    9fe0a05e:	08767653          	fsub.s	fa2,fa2,ft7
      ch[t4-1]=tr1+tr2;
    9fe0a062:	0032f0d3          	fadd.s	ft1,ft5,ft3
      ch[t4]=ti1+ti2;
    9fe0a066:	00417053          	fadd.s	ft0,ft2,ft4
      ch[t5+t6-1]=tr2-tr1;
    9fe0a06a:	0851f1d3          	fsub.s	ft3,ft3,ft5
      ch[t5]=tr4-ti3;
    9fe0a06e:	08d7f5d3          	fsub.s	fa1,fa5,fa3
      ch[t5-1]=tr3-ti4;
    9fe0a072:	08e67553          	fsub.s	fa0,fa2,fa4
      ch[t4+t6]=tr4+ti3;
    9fe0a076:	00d7f7d3          	fadd.s	fa5,fa5,fa3
      ch[t4+t6-1]=ti4+tr3;
    9fe0a07a:	00c77753          	fadd.s	fa4,fa4,fa2
      ch[t5+t6]=ti1-ti2;
    9fe0a07e:	08417153          	fsub.s	ft2,ft2,ft4
      ch[t4-1]=tr1+tr2;
    9fe0a082:	00132227          	fsw	ft1,4(t1)
      ch[t4]=ti1+ti2;
    9fe0a086:	00032427          	fsw	ft0,8(t1)
      ch[t5-1]=tr3-ti4;
    9fe0a08a:	fea8aa27          	fsw	fa0,-12(a7)
      ch[t5]=tr4-ti3;
    9fe0a08e:	feb8ac27          	fsw	fa1,-8(a7)
      ch[t4+t6-1]=ti4+tr3;
    9fe0a092:	00eea227          	fsw	fa4,4(t4)
      ch[t4+t6]=tr4+ti3;
    9fe0a096:	00fea427          	fsw	fa5,8(t4)
      ch[t5+t6-1]=tr2-tr1;
    9fe0a09a:	fe3e2a27          	fsw	ft3,-12(t3)
      ch[t5+t6]=ti1-ti2;
    9fe0a09e:	fe2e2c27          	fsw	ft2,-8(t3)
    for(i=2;i<ido;i+=2){
    9fe0a0a2:	0921                	addi	s2,s2,8
    9fe0a0a4:	0f21                	addi	t5,t5,8
    9fe0a0a6:	04a1                	addi	s1,s1,8
    9fe0a0a8:	0421                	addi	s0,s0,8
    9fe0a0aa:	03a1                	addi	t2,t2,8
    9fe0a0ac:	02a1                	addi	t0,t0,8
    9fe0a0ae:	0fa1                	addi	t6,t6,8
    9fe0a0b0:	0321                	addi	t1,t1,8
    9fe0a0b2:	18e1                	addi	a7,a7,-8
    9fe0a0b4:	0ea1                	addi	t4,t4,8
    9fe0a0b6:	1e61                	addi	t3,t3,-8
    9fe0a0b8:	f2a9c0e3          	blt	s3,a0,9fe09fd8 <dradf4+0x132>
  for(k=0;k<l1;k++){
    9fe0a0bc:	2b85                	addiw	s7,s7,1
    t1+=ido;
    9fe0a0be:	01850c3b          	addw	s8,a0,s8
  for(k=0;k<l1;k++){
    9fe0a0c2:	9b52                	add	s6,s6,s4
    9fe0a0c4:	ed759fe3          	bne	a1,s7,9fe09fa2 <dradf4+0xfc>
  if(ido&1)return;
    9fe0a0c8:	67e2                	ld	a5,24(sp)
    9fe0a0ca:	e7cd                	bnez	a5,9fe0a174 <dradf4+0x2ce>

 L105:

  t2=(t1=t0+ido-1)+(t0<<1);
    9fe0a0cc:	47a2                	lw	a5,8(sp)
    9fe0a0ce:	4432                	lw	s0,12(sp)
  t3=ido<<2;
    9fe0a0d0:	0025189b          	slliw	a7,a0,0x2
  t2=(t1=t0+ido-1)+(t0<<1);
    9fe0a0d4:	9fa9                	addw	a5,a5,a0
    9fe0a0d6:	fff7871b          	addiw	a4,a5,-1
    9fe0a0da:	00870e3b          	addw	t3,a4,s0
  t4=ido;
  t5=ido<<1;
  t6=ido;

  for(k=0;k<l1;k++){
    9fe0a0de:	6782                	ld	a5,0(sp)
    9fe0a0e0:	6442                	ld	s0,16(sp)
    9fe0a0e2:	00aa8333          	add	t1,s5,a0
    9fe0a0e6:	973e                	add	a4,a4,a5
    9fe0a0e8:	00271813          	slli	a6,a4,0x2
    9fe0a0ec:	40a00533          	neg	a0,a0
    9fe0a0f0:	030a                	slli	t1,t1,0x2
    9fe0a0f2:	00251e93          	slli	t4,a0,0x2
    9fe0a0f6:	014607b3          	add	a5,a2,s4
    9fe0a0fa:	01468733          	add	a4,a3,s4
    9fe0a0fe:	9642                	add	a2,a2,a6
    9fe0a100:	088a                	slli	a7,a7,0x2
    9fe0a102:	969a                	add	a3,a3,t1
    9fe0a104:	00241f13          	slli	t5,s0,0x2
    9fe0a108:	0e0a                	slli	t3,t3,0x2
  t3=ido<<2;
    9fe0a10a:	4801                	li	a6,0
    9fe0a10c:	00008517          	auipc	a0,0x8
    9fe0a110:	30452507          	flw	fa0,772(a0) # 9fe12410 <__func__.1+0x258>
    9fe0a114:	00008517          	auipc	a0,0x8
    9fe0a118:	30052587          	flw	fa1,768(a0) # 9fe12414 <__func__.1+0x25c>
    ti1=-hsqt2*(cc[t1]+cc[t2]);
    9fe0a11c:	01d78533          	add	a0,a5,t4
    9fe0a120:	01e60333          	add	t1,a2,t5
    9fe0a124:	9572                	add	a0,a0,t3
    9fe0a126:	00032787          	flw	fa5,0(t1)
    9fe0a12a:	00052607          	flw	fa2,0(a0)
    tr1=hsqt2*(cc[t1]-cc[t2]);

    ch[t4-1]=tr1+cc[t6-1];
    9fe0a12e:	ffc7a687          	flw	fa3,-4(a5)
  for(k=0;k<l1;k++){
    9fe0a132:	2805                	addiw	a6,a6,1
    tr1=hsqt2*(cc[t1]-cc[t2]);
    9fe0a134:	08c7f753          	fsub.s	fa4,fa5,fa2
    ti1=-hsqt2*(cc[t1]+cc[t2]);
    9fe0a138:	00c7f7d3          	fadd.s	fa5,fa5,fa2
    ch[t4-1]=tr1+cc[t6-1];
    9fe0a13c:	68a776c3          	fmadd.s	fa3,fa4,fa0,fa3
    9fe0a140:	fed72e27          	fsw	fa3,-4(a4)
    ch[t4+t5-1]=cc[t6-1]-tr1;
    9fe0a144:	ffc7a687          	flw	fa3,-4(a5)
  for(k=0;k<l1;k++){
    9fe0a148:	97d2                	add	a5,a5,s4
    ch[t4+t5-1]=cc[t6-1]-tr1;
    9fe0a14a:	68a7774b          	fnmsub.s	fa4,fa4,fa0,fa3
    9fe0a14e:	fee6ae27          	fsw	fa4,-4(a3)

    ch[t4]=ti1-cc[t1+t0];
    9fe0a152:	00062707          	flw	fa4,0(a2)
    9fe0a156:	70b7f747          	fmsub.s	fa4,fa5,fa1,fa4
    9fe0a15a:	00e72027          	fsw	fa4,0(a4)
    ch[t4+t5]=ti1+cc[t1+t0];
    9fe0a15e:	00062707          	flw	fa4,0(a2)
  for(k=0;k<l1;k++){
    9fe0a162:	9746                	add	a4,a4,a7
    9fe0a164:	9652                	add	a2,a2,s4
    ch[t4+t5]=ti1+cc[t1+t0];
    9fe0a166:	70b7f7c3          	fmadd.s	fa5,fa5,fa1,fa4
    9fe0a16a:	00f6a027          	fsw	fa5,0(a3)
  for(k=0;k<l1;k++){
    9fe0a16e:	96c6                	add	a3,a3,a7
    9fe0a170:	fab846e3          	blt	a6,a1,9fe0a11c <dradf4+0x276>
    t1+=ido;
    t2+=ido;
    t4+=t3;
    t6+=ido;
  }
}
    9fe0a174:	7466                	ld	s0,120(sp)
    9fe0a176:	74c6                	ld	s1,112(sp)
    9fe0a178:	7926                	ld	s2,104(sp)
    9fe0a17a:	7986                	ld	s3,96(sp)
    9fe0a17c:	6a66                	ld	s4,88(sp)
    9fe0a17e:	6ac6                	ld	s5,80(sp)
    9fe0a180:	6b26                	ld	s6,72(sp)
    9fe0a182:	6b86                	ld	s7,64(sp)
    9fe0a184:	7c62                	ld	s8,56(sp)
    9fe0a186:	7cc2                	ld	s9,48(sp)
    9fe0a188:	7d22                	ld	s10,40(sp)
    9fe0a18a:	7d82                	ld	s11,32(sp)
    9fe0a18c:	6109                	addi	sp,sp,128
    9fe0a18e:	8082                	ret
  for(k=0;k<l1;k++){
    9fe0a190:	feb052e3          	blez	a1,9fe0a174 <dradf4+0x2ce>
  t2=(t1=t0+ido-1)+(t0<<1);
    9fe0a194:	47a2                	lw	a5,8(sp)
  t5=ido<<1;
    9fe0a196:	4a91                	li	s5,4
  t3=ido<<2;
    9fe0a198:	48a1                	li	a7,8
  t2=(t1=t0+ido-1)+(t0<<1);
    9fe0a19a:	0017871b          	addiw	a4,a5,1
    9fe0a19e:	47b2                	lw	a5,12(sp)
    9fe0a1a0:	4a21                	li	s4,8
    9fe0a1a2:	00e78e3b          	addw	t3,a5,a4
    9fe0a1a6:	6782                	ld	a5,0(sp)
    9fe0a1a8:	40f007b3          	neg	a5,a5
    9fe0a1ac:	e83e                	sd	a5,16(sp)
    9fe0a1ae:	bf05                	j	9fe0a0de <dradf4+0x238>

000000009fe0a1b0 <dradb2>:
  if(na==1)return;

  for(i=0;i<n;i++)c[i]=ch[i];
}

static void dradb2(int ido,int l1,float *cc,float *ch,float *wa1){
    9fe0a1b0:	1101                	addi	sp,sp,-32
    9fe0a1b2:	e44a                	sd	s2,8(sp)
    9fe0a1b4:	ec22                	sd	s0,24(sp)
    9fe0a1b6:	e826                	sd	s1,16(sp)
  int i,k,t0,t1,t2,t3,t4,t5,t6;
  float ti2,tr2;

  t0=l1*ido;
    9fe0a1b8:	02a5893b          	mulw	s2,a1,a0

  t1=0;
  t2=0;
  t3=(ido<<1)-1;
    9fe0a1bc:	00151e9b          	slliw	t4,a0,0x1
  for(k=0;k<l1;k++){
    9fe0a1c0:	04b05d63          	blez	a1,9fe0a21a <dradb2+0x6a>
    9fe0a1c4:	fffe841b          	addiw	s0,t4,-1
    9fe0a1c8:	00251293          	slli	t0,a0,0x2
    9fe0a1cc:	88b6                	mv	a7,a3
    9fe0a1ce:	00291f93          	slli	t6,s2,0x2
    9fe0a1d2:	8e76                	mv	t3,t4
  t2=0;
    9fe0a1d4:	4801                	li	a6,0
  for(k=0;k<l1;k++){
    9fe0a1d6:	4301                	li	t1,0
    ch[t1]=cc[t2]+cc[t3+t2];
    9fe0a1d8:	010407bb          	addw	a5,s0,a6
    9fe0a1dc:	078a                	slli	a5,a5,0x2
    9fe0a1de:	080a                	slli	a6,a6,0x2
    9fe0a1e0:	01060f33          	add	t5,a2,a6
    9fe0a1e4:	97b2                	add	a5,a5,a2
    9fe0a1e6:	0007a707          	flw	fa4,0(a5)
    9fe0a1ea:	000f2787          	flw	fa5,0(t5)
    ch[t1+t0]=cc[t2]-cc[t3+t2];
    9fe0a1ee:	01f883b3          	add	t2,a7,t6
  for(k=0;k<l1;k++){
    9fe0a1f2:	2305                	addiw	t1,t1,1
    ch[t1]=cc[t2]+cc[t3+t2];
    9fe0a1f4:	00e7f7d3          	fadd.s	fa5,fa5,fa4
    t2=(t1+=ido)<<1;
    9fe0a1f8:	000e081b          	sext.w	a6,t3
  for(k=0;k<l1;k++){
    9fe0a1fc:	01ce8e3b          	addw	t3,t4,t3
    ch[t1]=cc[t2]+cc[t3+t2];
    9fe0a200:	00f8a027          	fsw	fa5,0(a7)
    ch[t1+t0]=cc[t2]-cc[t3+t2];
    9fe0a204:	000f2787          	flw	fa5,0(t5)
    9fe0a208:	0007a707          	flw	fa4,0(a5)
  for(k=0;k<l1;k++){
    9fe0a20c:	9896                	add	a7,a7,t0
    ch[t1+t0]=cc[t2]-cc[t3+t2];
    9fe0a20e:	08e7f7d3          	fsub.s	fa5,fa5,fa4
    9fe0a212:	00f3a027          	fsw	fa5,0(t2)
  for(k=0;k<l1;k++){
    9fe0a216:	fc6591e3          	bne	a1,t1,9fe0a1d8 <dradb2+0x28>
  }

  if(ido<2)return;
    9fe0a21a:	4785                	li	a5,1
    9fe0a21c:	0ea7d863          	bge	a5,a0,9fe0a30c <dradb2+0x15c>
  if(ido==2)goto L105;
    9fe0a220:	4789                	li	a5,2
    9fe0a222:	0ef50a63          	beq	a0,a5,9fe0a316 <dradb2+0x166>
      ch[t6]=wa1[i-2]*ti2+wa1[i-1]*tr2;
    }
    t2=(t1+=ido)<<1;
  }

  if(ido%2==1)return;
    9fe0a226:	00157493          	andi	s1,a0,1
  for(k=0;k<l1;k++){
    9fe0a22a:	0eb05163          	blez	a1,9fe0a30c <dradb2+0x15c>
    9fe0a22e:	00251293          	slli	t0,a0,0x2
    9fe0a232:	8f36                	mv	t5,a3
    9fe0a234:	00291f93          	slli	t6,s2,0x2
  t2=0;
    9fe0a238:	4781                	li	a5,0
  t1=0;
    9fe0a23a:	4401                	li	s0,0
  for(k=0;k<l1;k++){
    9fe0a23c:	4381                	li	t2,0
    for(i=2;i<ido;i+=2){
    9fe0a23e:	00fe883b          	addw	a6,t4,a5
    9fe0a242:	080a                	slli	a6,a6,0x2
    9fe0a244:	078a                	slli	a5,a5,0x2
    9fe0a246:	97b2                	add	a5,a5,a2
    9fe0a248:	9832                	add	a6,a6,a2
    9fe0a24a:	88ba                	mv	a7,a4
    9fe0a24c:	01ef8e33          	add	t3,t6,t5
    t5=(t4=t2)+(ido<<1);
    9fe0a250:	837a                	mv	t1,t5
    for(i=2;i<ido;i+=2){
    9fe0a252:	4909                	li	s2,2
      ch[t3-1]=cc[t4-1]+cc[t5-1];
    9fe0a254:	ff482707          	flw	fa4,-12(a6)
    9fe0a258:	0047a787          	flw	fa5,4(a5)
    for(i=2;i<ido;i+=2){
    9fe0a25c:	0321                	addi	t1,t1,8
    9fe0a25e:	07a1                	addi	a5,a5,8
      ch[t3-1]=cc[t4-1]+cc[t5-1];
    9fe0a260:	00e7f7d3          	fadd.s	fa5,fa5,fa4
    for(i=2;i<ido;i+=2){
    9fe0a264:	1861                	addi	a6,a6,-8
    9fe0a266:	08a1                	addi	a7,a7,8
    9fe0a268:	0e21                	addi	t3,t3,8
    9fe0a26a:	2909                	addiw	s2,s2,2
      ch[t3-1]=cc[t4-1]+cc[t5-1];
    9fe0a26c:	fef32e27          	fsw	fa5,-4(t1)
      ch[t3]=cc[t4]-cc[t5];
    9fe0a270:	00082607          	flw	fa2,0(a6)
    9fe0a274:	0007a707          	flw	fa4,0(a5)
      tr2=cc[t4-1]-cc[t5-1];
    9fe0a278:	ffc82687          	flw	fa3,-4(a6)
    9fe0a27c:	ffc7a787          	flw	fa5,-4(a5)
      ch[t3]=cc[t4]-cc[t5];
    9fe0a280:	08c77753          	fsub.s	fa4,fa4,fa2
      tr2=cc[t4-1]-cc[t5-1];
    9fe0a284:	08d7f7d3          	fsub.s	fa5,fa5,fa3
      ch[t3]=cc[t4]-cc[t5];
    9fe0a288:	00e32027          	fsw	fa4,0(t1)
      ti2=cc[t4]+cc[t5];
    9fe0a28c:	0007a707          	flw	fa4,0(a5)
    9fe0a290:	00082587          	flw	fa1,0(a6)
      ch[t6-1]=wa1[i-2]*tr2-wa1[i-1]*ti2;
    9fe0a294:	ffc8a607          	flw	fa2,-4(a7)
    9fe0a298:	ff88a687          	flw	fa3,-8(a7)
      ti2=cc[t4]+cc[t5];
    9fe0a29c:	00b77753          	fadd.s	fa4,fa4,fa1
      ch[t6-1]=wa1[i-2]*tr2-wa1[i-1]*ti2;
    9fe0a2a0:	10c77653          	fmul.s	fa2,fa4,fa2
    9fe0a2a4:	60f6f6c7          	fmsub.s	fa3,fa3,fa5,fa2
    9fe0a2a8:	fede2e27          	fsw	fa3,-4(t3)
      ch[t6]=wa1[i-2]*ti2+wa1[i-1]*tr2;
    9fe0a2ac:	ffc8a607          	flw	fa2,-4(a7)
    9fe0a2b0:	ff88a687          	flw	fa3,-8(a7)
    9fe0a2b4:	10c7f7d3          	fmul.s	fa5,fa5,fa2
    9fe0a2b8:	78e6f7c3          	fmadd.s	fa5,fa3,fa4,fa5
    9fe0a2bc:	00fe2027          	fsw	fa5,0(t3)
    for(i=2;i<ido;i+=2){
    9fe0a2c0:	f8a94ae3          	blt	s2,a0,9fe0a254 <dradb2+0xa4>
    t2=(t1+=ido)<<1;
    9fe0a2c4:	9c29                	addw	s0,s0,a0
  for(k=0;k<l1;k++){
    9fe0a2c6:	2385                	addiw	t2,t2,1
    t2=(t1+=ido)<<1;
    9fe0a2c8:	0014179b          	slliw	a5,s0,0x1
  for(k=0;k<l1;k++){
    9fe0a2cc:	9f16                	add	t5,t5,t0
    9fe0a2ce:	f67598e3          	bne	a1,t2,9fe0a23e <dradb2+0x8e>

L105:
  t1=ido-1;
    9fe0a2d2:	fff5079b          	addiw	a5,a0,-1
  if(ido%2==1)return;
    9fe0a2d6:	e89d                	bnez	s1,9fe0a30c <dradb2+0x15c>
    9fe0a2d8:	078a                	slli	a5,a5,0x2
    9fe0a2da:	963e                	add	a2,a2,a5
    9fe0a2dc:	96be                	add	a3,a3,a5
    9fe0a2de:	0e8a                	slli	t4,t4,0x2
  t1=ido-1;
    9fe0a2e0:	4781                	li	a5,0
  t2=ido-1;
  for(k=0;k<l1;k++){
    ch[t1]=cc[t2]+cc[t2];
    9fe0a2e2:	00062787          	flw	fa5,0(a2)
    ch[t1+t0]=-(cc[t2+1]+cc[t2+1]);
    9fe0a2e6:	01f68733          	add	a4,a3,t6
  for(k=0;k<l1;k++){
    9fe0a2ea:	2785                	addiw	a5,a5,1
    ch[t1]=cc[t2]+cc[t2];
    9fe0a2ec:	00f7f7d3          	fadd.s	fa5,fa5,fa5
    9fe0a2f0:	00f6a027          	fsw	fa5,0(a3)
    ch[t1+t0]=-(cc[t2+1]+cc[t2+1]);
    9fe0a2f4:	00462787          	flw	fa5,4(a2)
  for(k=0;k<l1;k++){
    9fe0a2f8:	9696                	add	a3,a3,t0
    9fe0a2fa:	9676                	add	a2,a2,t4
    ch[t1+t0]=-(cc[t2+1]+cc[t2+1]);
    9fe0a2fc:	00f7f7d3          	fadd.s	fa5,fa5,fa5
    9fe0a300:	20f797d3          	fneg.s	fa5,fa5
    9fe0a304:	00f72027          	fsw	fa5,0(a4)
  for(k=0;k<l1;k++){
    9fe0a308:	fcb7cde3          	blt	a5,a1,9fe0a2e2 <dradb2+0x132>
    t1+=ido;
    t2+=ido<<1;
  }
}
    9fe0a30c:	6462                	ld	s0,24(sp)
    9fe0a30e:	64c2                	ld	s1,16(sp)
    9fe0a310:	6922                	ld	s2,8(sp)
    9fe0a312:	6105                	addi	sp,sp,32
    9fe0a314:	8082                	ret
  for(k=0;k<l1;k++){
    9fe0a316:	feb05be3          	blez	a1,9fe0a30c <dradb2+0x15c>
  t1=ido-1;
    9fe0a31a:	4785                	li	a5,1
    9fe0a31c:	42a1                	li	t0,8
    9fe0a31e:	00291f93          	slli	t6,s2,0x2
    9fe0a322:	bf5d                	j	9fe0a2d8 <dradb2+0x128>

000000009fe0a324 <dradb3>:

static void dradb3(int ido,int l1,float *cc,float *ch,float *wa1,
                          float *wa2){
    9fe0a324:	7139                	addi	sp,sp,-64
    9fe0a326:	f04e                	sd	s3,32(sp)
    9fe0a328:	ec52                	sd	s4,24(sp)
  float ci2,ci3,di2,di3,cr2,cr3,dr2,dr3,ti2,tr2;
  t0=l1*ido;

  t1=0;
  t2=t0<<1;
  t3=ido<<1;
    9fe0a32a:	0015199b          	slliw	s3,a0,0x1
                          float *wa2){
    9fe0a32e:	fc22                	sd	s0,56(sp)
    9fe0a330:	f826                	sd	s1,48(sp)
    9fe0a332:	f44a                	sd	s2,40(sp)
    9fe0a334:	e856                	sd	s5,16(sp)
    9fe0a336:	e45a                	sd	s6,8(sp)
  t0=l1*ido;
    9fe0a338:	02a58a3b          	mulw	s4,a1,a0
  t4=ido+(ido<<1);
    9fe0a33c:	00a98ebb          	addw	t4,s3,a0
  t5=0;
  for(k=0;k<l1;k++){
    9fe0a340:	18b05f63          	blez	a1,9fe0a4de <dradb3+0x1ba>
    9fe0a344:	893a                	mv	s2,a4
    9fe0a346:	001a1e1b          	slliw	t3,s4,0x1
    9fe0a34a:	00299713          	slli	a4,s3,0x2
    9fe0a34e:	41300f33          	neg	t5,s3
    9fe0a352:	8abe                	mv	s5,a5
    9fe0a354:	8432                	mv	s0,a2
    9fe0a356:	9732                	add	a4,a4,a2
    9fe0a358:	82b6                	mv	t0,a3
    9fe0a35a:	0e8a                	slli	t4,t4,0x2
    9fe0a35c:	00251613          	slli	a2,a0,0x2
    9fe0a360:	0f0a                	slli	t5,t5,0x2
    9fe0a362:	002a1493          	slli	s1,s4,0x2
    9fe0a366:	0e0a                	slli	t3,t3,0x2
    9fe0a368:	4801                	li	a6,0
    9fe0a36a:	00008797          	auipc	a5,0x8
    9fe0a36e:	ece7a107          	flw	ft2,-306(a5) # 9fe12238 <__func__.1+0x80>
    9fe0a372:	00008797          	auipc	a5,0x8
    9fe0a376:	0a67a587          	flw	fa1,166(a5) # 9fe12418 <__func__.1+0x260>
    tr2=cc[t3-1]+cc[t3-1];
    9fe0a37a:	ffc72787          	flw	fa5,-4(a4)
    cr2=cc[t5]+(taur*tr2);
    9fe0a37e:	01e707b3          	add	a5,a4,t5
    9fe0a382:	0007a707          	flw	fa4,0(a5)
    tr2=cc[t3-1]+cc[t3-1];
    9fe0a386:	00f7f7d3          	fadd.s	fa5,fa5,fa5
    ch[t1]=cc[t5]+tr2;
    ci3=taui*(cc[t3]+cc[t3]);
    ch[t1+t0]=cr2-ci3;
    9fe0a38a:	00968333          	add	t1,a3,s1
    ch[t1+t2]=cr2+ci3;
    9fe0a38e:	01c688b3          	add	a7,a3,t3
    9fe0a392:	87c2                	mv	a5,a6
  for(k=0;k<l1;k++){
    9fe0a394:	2805                	addiw	a6,a6,1
    ch[t1]=cc[t5]+tr2;
    9fe0a396:	00f776d3          	fadd.s	fa3,fa4,fa5
    cr2=cc[t5]+(taur*tr2);
    9fe0a39a:	7027f7c3          	fmadd.s	fa5,fa5,ft2,fa4
    ch[t1]=cc[t5]+tr2;
    9fe0a39e:	00d6a027          	fsw	fa3,0(a3)
    ci3=taui*(cc[t3]+cc[t3]);
    9fe0a3a2:	00072707          	flw	fa4,0(a4)
  for(k=0;k<l1;k++){
    9fe0a3a6:	96b2                	add	a3,a3,a2
    9fe0a3a8:	9776                	add	a4,a4,t4
    ci3=taui*(cc[t3]+cc[t3]);
    9fe0a3aa:	00e77753          	fadd.s	fa4,fa4,fa4
    ch[t1+t0]=cr2-ci3;
    9fe0a3ae:	78b776cb          	fnmsub.s	fa3,fa4,fa1,fa5
    ch[t1+t2]=cr2+ci3;
    9fe0a3b2:	78b777c3          	fmadd.s	fa5,fa4,fa1,fa5
    ch[t1+t0]=cr2-ci3;
    9fe0a3b6:	00d32027          	fsw	fa3,0(t1)
    ch[t1+t2]=cr2+ci3;
    9fe0a3ba:	00f8a027          	fsw	fa5,0(a7)
  for(k=0;k<l1;k++){
    9fe0a3be:	fb059ee3          	bne	a1,a6,9fe0a37a <dradb3+0x56>
    t1+=ido;
    t3+=t4;
    t5+=t4;
  }

  if(ido==1)return;
    9fe0a3c2:	4705                	li	a4,1
    9fe0a3c4:	10e50d63          	beq	a0,a4,9fe0a4de <dradb3+0x1ba>
    9fe0a3c8:	ffd5071b          	addiw	a4,a0,-3
    9fe0a3cc:	0017571b          	srliw	a4,a4,0x1
    9fe0a3d0:	070e                	slli	a4,a4,0x3
    9fe0a3d2:	00890f93          	addi	t6,s2,8
    9fe0a3d6:	9fba                	add	t6,t6,a4
    9fe0a3d8:	0a0e                	slli	s4,s4,0x3
    9fe0a3da:	4381                	li	t2,0
    9fe0a3dc:	4701                	li	a4,0
    t7=t1+(t1<<1);
    t6=(t5=t7+t3);
    t8=t1;
    t10=(t9=t1+t0)+t0;

    for(i=2;i<ido;i+=2){
    9fe0a3de:	4b09                	li	s6,2
    t7=t1+(t1<<1);
    9fe0a3e0:	0013969b          	slliw	a3,t2,0x1
    9fe0a3e4:	0076833b          	addw	t1,a3,t2
    t6=(t5=t7+t3);
    9fe0a3e8:	013306bb          	addw	a3,t1,s3
    for(i=2;i<ido;i+=2){
    9fe0a3ec:	0eab5063          	bge	s6,a0,9fe0a4cc <dradb3+0x1a8>
    9fe0a3f0:	068a                	slli	a3,a3,0x2
    9fe0a3f2:	96a2                	add	a3,a3,s0
    9fe0a3f4:	030a                	slli	t1,t1,0x2
    9fe0a3f6:	9322                	add	t1,t1,s0
    9fe0a3f8:	00928f33          	add	t5,t0,s1
    9fe0a3fc:	88d6                	mv	a7,s5
    9fe0a3fe:	005a0eb3          	add	t4,s4,t0
    9fe0a402:	85ca                	mv	a1,s2
    9fe0a404:	8e16                	mv	t3,t0
    9fe0a406:	8836                	mv	a6,a3
      t6-=2;
      t7+=2;
      t8+=2;
      t9+=2;
      t10+=2;
      tr2=cc[t5-1]+cc[t6-1];
    9fe0a408:	ff482707          	flw	fa4,-12(a6)
    9fe0a40c:	0046a787          	flw	fa5,4(a3)
      cr2=cc[t7-1]+(taur*tr2);
    9fe0a410:	00432687          	flw	fa3,4(t1)
    for(i=2;i<ido;i+=2){
    9fe0a414:	0e21                	addi	t3,t3,8
      tr2=cc[t5-1]+cc[t6-1];
    9fe0a416:	00e7f7d3          	fadd.s	fa5,fa5,fa4
    for(i=2;i<ido;i+=2){
    9fe0a41a:	06a1                	addi	a3,a3,8
    9fe0a41c:	1861                	addi	a6,a6,-8
    9fe0a41e:	0321                	addi	t1,t1,8
    9fe0a420:	05a1                	addi	a1,a1,8
      ch[t8-1]=cc[t7-1]+tr2;
    9fe0a422:	00f6f753          	fadd.s	fa4,fa3,fa5
      cr2=cc[t7-1]+(taur*tr2);
    9fe0a426:	6827f6c3          	fmadd.s	fa3,fa5,ft2,fa3
    for(i=2;i<ido;i+=2){
    9fe0a42a:	0f21                	addi	t5,t5,8
    9fe0a42c:	08a1                	addi	a7,a7,8
    9fe0a42e:	0ea1                	addi	t4,t4,8
      ch[t8-1]=cc[t7-1]+tr2;
    9fe0a430:	feee2e27          	fsw	fa4,-4(t3)
      ti2=cc[t5]-cc[t6];
    9fe0a434:	00082787          	flw	fa5,0(a6)
    9fe0a438:	0006a707          	flw	fa4,0(a3)
      ci2=cc[t7]+(taur*ti2);
    9fe0a43c:	00032607          	flw	fa2,0(t1)
      ti2=cc[t5]-cc[t6];
    9fe0a440:	08f77753          	fsub.s	fa4,fa4,fa5
      ch[t8]=cc[t7]+ti2;
    9fe0a444:	00e677d3          	fadd.s	fa5,fa2,fa4
      ci2=cc[t7]+(taur*ti2);
    9fe0a448:	60277643          	fmadd.s	fa2,fa4,ft2,fa2
      ch[t8]=cc[t7]+ti2;
    9fe0a44c:	00fe2027          	fsw	fa5,0(t3)
      cr3=taui*(cc[t5-1]-cc[t6-1]);
    9fe0a450:	ffc82007          	flw	ft0,-4(a6)
    9fe0a454:	ffc6a707          	flw	fa4,-4(a3)
      ci3=taui*(cc[t5]+cc[t6]);
    9fe0a458:	00082507          	flw	fa0,0(a6)
    9fe0a45c:	0006a787          	flw	fa5,0(a3)
      cr3=taui*(cc[t5-1]-cc[t6-1]);
    9fe0a460:	08077753          	fsub.s	fa4,fa4,ft0
      dr2=cr2-ci3;
      dr3=cr2+ci3;
      di2=ci2+cr3;
      di3=ci2-cr3;
      ch[t9-1]=wa1[i-2]*dr2-wa1[i-1]*di2;
    9fe0a464:	ffc5a007          	flw	ft0,-4(a1)
      ci3=taui*(cc[t5]+cc[t6]);
    9fe0a468:	00a7f7d3          	fadd.s	fa5,fa5,fa0
      ch[t9-1]=wa1[i-2]*dr2-wa1[i-1]*di2;
    9fe0a46c:	ff85a507          	flw	fa0,-8(a1)
      di2=ci2+cr3;
    9fe0a470:	60b770c3          	fmadd.s	ft1,fa4,fa1,fa2
      di3=ci2-cr3;
    9fe0a474:	60b7774b          	fnmsub.s	fa4,fa4,fa1,fa2
      dr2=cr2-ci3;
    9fe0a478:	68b7f64b          	fnmsub.s	fa2,fa5,fa1,fa3
      dr3=cr2+ci3;
    9fe0a47c:	68b7f7c3          	fmadd.s	fa5,fa5,fa1,fa3
      ch[t9-1]=wa1[i-2]*dr2-wa1[i-1]*di2;
    9fe0a480:	1000f053          	fmul.s	ft0,ft1,ft0
    9fe0a484:	00c57547          	fmsub.s	fa0,fa0,fa2,ft0
    9fe0a488:	feaf2e27          	fsw	fa0,-4(t5)
      ch[t9]=wa1[i-2]*di2+wa1[i-1]*dr2;
    9fe0a48c:	ffc5a507          	flw	fa0,-4(a1)
    9fe0a490:	ff85a687          	flw	fa3,-8(a1)
    9fe0a494:	10a67653          	fmul.s	fa2,fa2,fa0
    9fe0a498:	6016f643          	fmadd.s	fa2,fa3,ft1,fa2
    9fe0a49c:	00cf2027          	fsw	fa2,0(t5)
      ch[t10-1]=wa2[i-2]*dr3-wa2[i-1]*di3;
    9fe0a4a0:	ffc8a607          	flw	fa2,-4(a7)
    9fe0a4a4:	ff88a687          	flw	fa3,-8(a7)
    9fe0a4a8:	10c77653          	fmul.s	fa2,fa4,fa2
    9fe0a4ac:	60f6f6c7          	fmsub.s	fa3,fa3,fa5,fa2
    9fe0a4b0:	fedeae27          	fsw	fa3,-4(t4)
      ch[t10]=wa2[i-2]*di3+wa2[i-1]*dr3;
    9fe0a4b4:	ffc8a607          	flw	fa2,-4(a7)
    9fe0a4b8:	ff88a687          	flw	fa3,-8(a7)
    9fe0a4bc:	10c7f7d3          	fmul.s	fa5,fa5,fa2
    9fe0a4c0:	78e6f7c3          	fmadd.s	fa5,fa3,fa4,fa5
    9fe0a4c4:	00fea027          	fsw	fa5,0(t4)
    for(i=2;i<ido;i+=2){
    9fe0a4c8:	f4bf90e3          	bne	t6,a1,9fe0a408 <dradb3+0xe4>
    }
    t1+=ido;
    9fe0a4cc:	007503bb          	addw	t2,a0,t2
  for(k=0;k<l1;k++){
    9fe0a4d0:	0017069b          	addiw	a3,a4,1
    9fe0a4d4:	92b2                	add	t0,t0,a2
    9fe0a4d6:	00e78463          	beq	a5,a4,9fe0a4de <dradb3+0x1ba>
    9fe0a4da:	8736                	mv	a4,a3
    9fe0a4dc:	b711                	j	9fe0a3e0 <dradb3+0xbc>
  }
}
    9fe0a4de:	7462                	ld	s0,56(sp)
    9fe0a4e0:	74c2                	ld	s1,48(sp)
    9fe0a4e2:	7922                	ld	s2,40(sp)
    9fe0a4e4:	7982                	ld	s3,32(sp)
    9fe0a4e6:	6a62                	ld	s4,24(sp)
    9fe0a4e8:	6ac2                	ld	s5,16(sp)
    9fe0a4ea:	6b22                	ld	s6,8(sp)
    9fe0a4ec:	6121                	addi	sp,sp,64
    9fe0a4ee:	8082                	ret

000000009fe0a4f0 <dradb4>:

static void dradb4(int ido,int l1,float *cc,float *ch,float *wa1,
			  float *wa2,float *wa3){
    9fe0a4f0:	7175                	addi	sp,sp,-144
  int i,k,t0,t1,t2,t3,t4,t5,t6,t7,t8;
  float ci2,ci3,ci4,cr2,cr3,cr4,ti1,ti2,ti3,ti4,tr1,tr2,tr3,tr4;
  t0=l1*ido;

  t1=0;
  t2=ido<<2;
    9fe0a4f2:	0025189b          	slliw	a7,a0,0x2
			  float *wa2,float *wa3){
    9fe0a4f6:	fc6a                	sd	s10,56(sp)
    9fe0a4f8:	e436                	sd	a3,8(sp)
  t3=0;
  t6=ido<<1;
    9fe0a4fa:	00151d1b          	slliw	s10,a0,0x1
  t2=ido<<2;
    9fe0a4fe:	0008869b          	sext.w	a3,a7
			  float *wa2,float *wa3){
    9fe0a502:	e0e6                	sd	s9,64(sp)
    9fe0a504:	e522                	sd	s0,136(sp)
    9fe0a506:	e126                	sd	s1,128(sp)
    9fe0a508:	fcca                	sd	s2,120(sp)
    9fe0a50a:	f8ce                	sd	s3,112(sp)
    9fe0a50c:	f4d2                	sd	s4,104(sp)
    9fe0a50e:	f0d6                	sd	s5,96(sp)
    9fe0a510:	ecda                	sd	s6,88(sp)
    9fe0a512:	e8de                	sd	s7,80(sp)
    9fe0a514:	e4e2                	sd	s8,72(sp)
    9fe0a516:	f86e                	sd	s11,48(sp)
  t6=ido<<1;
    9fe0a518:	ce6a                	sw	s10,28(sp)
  t2=ido<<2;
    9fe0a51a:	e836                	sd	a3,16(sp)
  t0=l1*ido;
    9fe0a51c:	02a58cbb          	mulw	s9,a1,a0
  for(k=0;k<l1;k++){
    9fe0a520:	08b05863          	blez	a1,9fe0a5b0 <dradb4+0xc0>
    9fe0a524:	001c9693          	slli	a3,s9,0x1
    9fe0a528:	01968fb3          	add	t6,a3,s9
    9fe0a52c:	66c2                	ld	a3,16(sp)
    9fe0a52e:	002d1293          	slli	t0,s10,0x2
    9fe0a532:	41a00f33          	neg	t5,s10
    9fe0a536:	00269393          	slli	t2,a3,0x2
    9fe0a53a:	66a2                	ld	a3,8(sp)
    9fe0a53c:	005608b3          	add	a7,a2,t0
    9fe0a540:	00251a13          	slli	s4,a0,0x2
    9fe0a544:	0f0a                	slli	t5,t5,0x2
    9fe0a546:	002c9a93          	slli	s5,s9,0x2
    9fe0a54a:	003c9b13          	slli	s6,s9,0x3
    9fe0a54e:	0f8a                	slli	t6,t6,0x2
    9fe0a550:	4301                	li	t1,0
    9fe0a552:	00008417          	auipc	s0,0x8
    9fe0a556:	cfa42607          	flw	fa2,-774(s0) # 9fe1224c <__func__.1+0x94>
    t4=t3+t6;
    t5=t1;
    tr3=cc[t4-1]+cc[t4-1];
    tr4=cc[t4]+cc[t4];
    tr1=cc[t3]-cc[(t4+=t6)-1];
    9fe0a55a:	01e88eb3          	add	t4,a7,t5
    9fe0a55e:	00588e33          	add	t3,a7,t0
    9fe0a562:	000ea787          	flw	fa5,0(t4)
    9fe0a566:	ffce2507          	flw	fa0,-4(t3)
    tr3=cc[t4-1]+cc[t4-1];
    9fe0a56a:	ffc8a687          	flw	fa3,-4(a7)
    tr4=cc[t4]+cc[t4];
    9fe0a56e:	0008a707          	flw	fa4,0(a7)
    tr2=cc[t3]+cc[t4-1];
    9fe0a572:	00a7f5d3          	fadd.s	fa1,fa5,fa0
    tr1=cc[t3]-cc[(t4+=t6)-1];
    9fe0a576:	08a7f7d3          	fsub.s	fa5,fa5,fa0
    ch[t5]=tr2+tr3;
    ch[t5+=t0]=tr1-tr4;
    9fe0a57a:	01568433          	add	s0,a3,s5
    ch[t5+=t0]=tr2-tr3;
    9fe0a57e:	01668eb3          	add	t4,a3,s6
    ch[t5+=t0]=tr1+tr4;
    9fe0a582:	01f68e33          	add	t3,a3,t6
    ch[t5]=tr2+tr3;
    9fe0a586:	58c6f043          	fmadd.s	ft0,fa3,fa2,fa1
    ch[t5+=t0]=tr1-tr4;
    9fe0a58a:	78c7754b          	fnmsub.s	fa0,fa4,fa2,fa5
    ch[t5+=t0]=tr2-tr3;
    9fe0a58e:	58c6f6cb          	fnmsub.s	fa3,fa3,fa2,fa1
    ch[t5+=t0]=tr1+tr4;
    9fe0a592:	78c777c3          	fmadd.s	fa5,fa4,fa2,fa5
  for(k=0;k<l1;k++){
    9fe0a596:	2305                	addiw	t1,t1,1
    ch[t5]=tr2+tr3;
    9fe0a598:	0006a027          	fsw	ft0,0(a3)
    ch[t5+=t0]=tr1-tr4;
    9fe0a59c:	00a42027          	fsw	fa0,0(s0)
    ch[t5+=t0]=tr2-tr3;
    9fe0a5a0:	00dea027          	fsw	fa3,0(t4)
    ch[t5+=t0]=tr1+tr4;
    9fe0a5a4:	00fe2027          	fsw	fa5,0(t3)
  for(k=0;k<l1;k++){
    9fe0a5a8:	989e                	add	a7,a7,t2
    9fe0a5aa:	96d2                	add	a3,a3,s4
    9fe0a5ac:	fa6597e3          	bne	a1,t1,9fe0a55a <dradb4+0x6a>
    t1+=ido;
    t3+=t2;
  }

  if(ido<2)return;
    9fe0a5b0:	4685                	li	a3,1
    9fe0a5b2:	20a6d363          	bge	a3,a0,9fe0a7b8 <dradb4+0x2c8>
  if(ido==2)goto L105;
    9fe0a5b6:	4689                	li	a3,2
    9fe0a5b8:	20d50e63          	beq	a0,a3,9fe0a7d4 <dradb4+0x2e4>
      ch[t8]=wa3[i-2]*ci4+wa3[i-1]*cr4;
    }
    t1+=ido;
  }

  if(ido%2 == 1)return;
    9fe0a5bc:	00157693          	andi	a3,a0,1
    9fe0a5c0:	f436                	sd	a3,40(sp)
  for(k=0;k<l1;k++){
    9fe0a5c2:	1eb05b63          	blez	a1,9fe0a7b8 <dradb4+0x2c8>
    9fe0a5c6:	001c9693          	slli	a3,s9,0x1
    9fe0a5ca:	69a2                	ld	s3,8(sp)
    9fe0a5cc:	01968db3          	add	s11,a3,s9
    9fe0a5d0:	f036                	sd	a3,32(sp)
    9fe0a5d2:	00251a13          	slli	s4,a0,0x2
    9fe0a5d6:	002c9a93          	slli	s5,s9,0x2
    9fe0a5da:	003c9b13          	slli	s6,s9,0x3
    9fe0a5de:	0d8a                	slli	s11,s11,0x2
  t1=0;
    9fe0a5e0:	4c01                	li	s8,0
  for(k=0;k<l1;k++){
    9fe0a5e2:	4b81                	li	s7,0
    t5=(t4=(t3=(t2=t1<<2)+t6))+t6;
    9fe0a5e4:	002c1e9b          	slliw	t4,s8,0x2
    9fe0a5e8:	01dd0f3b          	addw	t5,s10,t4
    for(i=2;i<ido;i+=2){
    9fe0a5ec:	01af0e3b          	addw	t3,t5,s10
    9fe0a5f0:	0f0a                	slli	t5,t5,0x2
    9fe0a5f2:	0e8a                	slli	t4,t4,0x2
    9fe0a5f4:	0e0a                	slli	t3,t3,0x2
    9fe0a5f6:	9f32                	add	t5,t5,a2
    9fe0a5f8:	9eb2                	add	t4,t4,a2
    9fe0a5fa:	9e32                	add	t3,t3,a2
    9fe0a5fc:	833a                	mv	t1,a4
    9fe0a5fe:	013a84b3          	add	s1,s5,s3
    9fe0a602:	88be                	mv	a7,a5
    9fe0a604:	013b0433          	add	s0,s6,s3
    9fe0a608:	86c2                	mv	a3,a6
    9fe0a60a:	013d83b3          	add	t2,s11,s3
    t5=(t4=(t3=(t2=t1<<2)+t6))+t6;
    9fe0a60e:	82ce                	mv	t0,s3
    9fe0a610:	8ffa                	mv	t6,t5
    for(i=2;i<ido;i+=2){
    9fe0a612:	4909                	li	s2,2
      ti1=cc[t2]+cc[t5];
    9fe0a614:	ff8e2287          	flw	ft5,-8(t3)
      ti3=cc[t3]-cc[t4];
    9fe0a618:	ff8fa107          	flw	ft2,-8(t6)
      tr1=cc[t2-1]-cc[t5-1];
    9fe0a61c:	ff4e2087          	flw	ft1,-12(t3)
      ti4=cc[t3-1]-cc[t4-1];
    9fe0a620:	ff4fa187          	flw	ft3,-12(t6)
      ti1=cc[t2]+cc[t5];
    9fe0a624:	008ea707          	flw	fa4,8(t4)
      ti3=cc[t3]-cc[t4];
    9fe0a628:	008f2787          	flw	fa5,8(t5)
      tr1=cc[t2-1]-cc[t5-1];
    9fe0a62c:	004ea587          	flw	fa1,4(t4)
      ti4=cc[t3-1]-cc[t4-1];
    9fe0a630:	004f2507          	flw	fa0,4(t5)
      ti3=cc[t3]-cc[t4];
    9fe0a634:	0827f053          	fsub.s	ft0,fa5,ft2
      tr2=cc[t2-1]+cc[t5-1];
    9fe0a638:	0015f6d3          	fadd.s	fa3,fa1,ft1
      tr3=cc[t3-1]+cc[t4-1];
    9fe0a63c:	00357253          	fadd.s	ft4,fa0,ft3
      ti2=cc[t2]-cc[t5];
    9fe0a640:	08577653          	fsub.s	fa2,fa4,ft5
      ti4=cc[t3-1]-cc[t4-1];
    9fe0a644:	08357553          	fsub.s	fa0,fa0,ft3
      ti1=cc[t2]+cc[t5];
    9fe0a648:	00577753          	fadd.s	fa4,fa4,ft5
      tr4=cc[t3]+cc[t4];
    9fe0a64c:	0027f7d3          	fadd.s	fa5,fa5,ft2
      ch[t7-1]=tr2+tr3;
    9fe0a650:	0046f153          	fadd.s	ft2,fa3,ft4
      ch[t7]=ti2+ti3;
    9fe0a654:	000672d3          	fadd.s	ft5,fa2,ft0
      tr1=cc[t2-1]-cc[t5-1];
    9fe0a658:	0815f5d3          	fsub.s	fa1,fa1,ft1
      ci2=ti1+ti4;
    9fe0a65c:	00a771d3          	fadd.s	ft3,fa4,fa0
      ci3=ti2-ti3;
    9fe0a660:	08067653          	fsub.s	fa2,fa2,ft0
      ch[t7-1]=tr2+tr3;
    9fe0a664:	0022a227          	fsw	ft2,4(t0)
      ch[t7]=ti2+ti3;
    9fe0a668:	0052a427          	fsw	ft5,8(t0)
      ch[(t8=t7+t0)-1]=wa1[i-2]*cr2-wa1[i-1]*ci2;
    9fe0a66c:	00432107          	flw	ft2,4(t1)
      cr2=tr1-tr4;
    9fe0a670:	08f5f053          	fsub.s	ft0,fa1,fa5
      ch[(t8=t7+t0)-1]=wa1[i-2]*cr2-wa1[i-1]*ci2;
    9fe0a674:	00032087          	flw	ft1,0(t1)
    9fe0a678:	1021f153          	fmul.s	ft2,ft3,ft2
      ci4=ti1-ti4;
    9fe0a67c:	08a77753          	fsub.s	fa4,fa4,fa0
      cr4=tr1+tr4;
    9fe0a680:	00b7f7d3          	fadd.s	fa5,fa5,fa1
    for(i=2;i<ido;i+=2){
    9fe0a684:	04a1                	addi	s1,s1,8
    9fe0a686:	08a1                	addi	a7,a7,8
      ch[(t8=t7+t0)-1]=wa1[i-2]*cr2-wa1[i-1]*ci2;
    9fe0a688:	1000f0c7          	fmsub.s	ft1,ft1,ft0,ft2
      cr3=tr2-tr3;
    9fe0a68c:	0846f6d3          	fsub.s	fa3,fa3,ft4
    for(i=2;i<ido;i+=2){
    9fe0a690:	0421                	addi	s0,s0,8
    9fe0a692:	06a1                	addi	a3,a3,8
    9fe0a694:	03a1                	addi	t2,t2,8
      ch[(t8=t7+t0)-1]=wa1[i-2]*cr2-wa1[i-1]*ci2;
    9fe0a696:	fe14ae27          	fsw	ft1,-4(s1)
      ch[t8]=wa1[i-2]*ci2+wa1[i-1]*cr2;
    9fe0a69a:	00432507          	flw	fa0,4(t1)
    9fe0a69e:	00032587          	flw	fa1,0(t1)
    for(i=2;i<ido;i+=2){
    9fe0a6a2:	2909                	addiw	s2,s2,2
      ch[t8]=wa1[i-2]*ci2+wa1[i-1]*cr2;
    9fe0a6a4:	10a07053          	fmul.s	ft0,ft0,fa0
    for(i=2;i<ido;i+=2){
    9fe0a6a8:	0ea1                	addi	t4,t4,8
    9fe0a6aa:	1e61                	addi	t3,t3,-8
    9fe0a6ac:	0f21                	addi	t5,t5,8
    9fe0a6ae:	1fe1                	addi	t6,t6,-8
      ch[t8]=wa1[i-2]*ci2+wa1[i-1]*cr2;
    9fe0a6b0:	0035f043          	fmadd.s	ft0,fa1,ft3,ft0
    for(i=2;i<ido;i+=2){
    9fe0a6b4:	02a1                	addi	t0,t0,8
    9fe0a6b6:	0321                	addi	t1,t1,8
      ch[t8]=wa1[i-2]*ci2+wa1[i-1]*cr2;
    9fe0a6b8:	0004a027          	fsw	ft0,0(s1)
      ch[(t8+=t0)-1]=wa2[i-2]*cr3-wa2[i-1]*ci3;
    9fe0a6bc:	ffc8a507          	flw	fa0,-4(a7)
    9fe0a6c0:	ff88a587          	flw	fa1,-8(a7)
    9fe0a6c4:	10a67553          	fmul.s	fa0,fa2,fa0
    9fe0a6c8:	50d5f5c7          	fmsub.s	fa1,fa1,fa3,fa0
    9fe0a6cc:	feb42e27          	fsw	fa1,-4(s0)
      ch[t8]=wa2[i-2]*ci3+wa2[i-1]*cr3;
    9fe0a6d0:	ffc8a507          	flw	fa0,-4(a7)
    9fe0a6d4:	ff88a587          	flw	fa1,-8(a7)
    9fe0a6d8:	10a6f6d3          	fmul.s	fa3,fa3,fa0
    9fe0a6dc:	68c5f6c3          	fmadd.s	fa3,fa1,fa2,fa3
    9fe0a6e0:	00d42027          	fsw	fa3,0(s0)
      ch[(t8+=t0)-1]=wa3[i-2]*cr4-wa3[i-1]*ci4;
    9fe0a6e4:	ffc6a607          	flw	fa2,-4(a3)
    9fe0a6e8:	ff86a687          	flw	fa3,-8(a3)
    9fe0a6ec:	10c77653          	fmul.s	fa2,fa4,fa2
    9fe0a6f0:	60f6f6c7          	fmsub.s	fa3,fa3,fa5,fa2
    9fe0a6f4:	fed3ae27          	fsw	fa3,-4(t2)
      ch[t8]=wa3[i-2]*ci4+wa3[i-1]*cr4;
    9fe0a6f8:	ffc6a607          	flw	fa2,-4(a3)
    9fe0a6fc:	ff86a687          	flw	fa3,-8(a3)
    9fe0a700:	10c7f7d3          	fmul.s	fa5,fa5,fa2
    9fe0a704:	78e6f7c3          	fmadd.s	fa5,fa3,fa4,fa5
    9fe0a708:	00f3a027          	fsw	fa5,0(t2)
    for(i=2;i<ido;i+=2){
    9fe0a70c:	f0a944e3          	blt	s2,a0,9fe0a614 <dradb4+0x124>
  for(k=0;k<l1;k++){
    9fe0a710:	2b85                	addiw	s7,s7,1
    t1+=ido;
    9fe0a712:	01850c3b          	addw	s8,a0,s8
  for(k=0;k<l1;k++){
    9fe0a716:	99d2                	add	s3,s3,s4
    9fe0a718:	ed7596e3          	bne	a1,s7,9fe0a5e4 <dradb4+0xf4>
  if(ido%2 == 1)return;
    9fe0a71c:	77a2                	ld	a5,40(sp)
    9fe0a71e:	efc9                	bnez	a5,9fe0a7b8 <dradb4+0x2c8>
 L105:

  t1=ido;
  t2=ido<<2;
  t3=ido-1;
  t4=ido+(ido<<1);
    9fe0a720:	4772                	lw	a4,28(sp)
  t3=ido-1;
    9fe0a722:	fff5079b          	addiw	a5,a0,-1
  t4=ido+(ido<<1);
    9fe0a726:	9d39                	addw	a0,a0,a4
  for(k=0;k<l1;k++){
    9fe0a728:	7702                	ld	a4,32(sp)
    9fe0a72a:	00251693          	slli	a3,a0,0x2
    9fe0a72e:	078a                	slli	a5,a5,0x2
    9fe0a730:	01970e33          	add	t3,a4,s9
    9fe0a734:	6742                	ld	a4,16(sp)
    9fe0a736:	0e0a                	slli	t3,t3,0x2
    9fe0a738:	00008417          	auipc	s0,0x8
    9fe0a73c:	ce442007          	flw	ft0,-796(s0) # 9fe1241c <__func__.1+0x264>
    9fe0a740:	00271513          	slli	a0,a4,0x2
    9fe0a744:	01460733          	add	a4,a2,s4
    9fe0a748:	9636                	add	a2,a2,a3
    9fe0a74a:	66a2                	ld	a3,8(sp)
    9fe0a74c:	00008417          	auipc	s0,0x8
    9fe0a750:	cd442507          	flw	fa0,-812(s0) # 9fe12420 <__func__.1+0x268>
    9fe0a754:	97b6                	add	a5,a5,a3
  t3=ido-1;
    9fe0a756:	4681                	li	a3,0
    t5=t3;
    ti1=cc[t1]+cc[t4];
    9fe0a758:	00072587          	flw	fa1,0(a4)
    ti2=cc[t4]-cc[t1];
    tr1=cc[t1-1]-cc[t4-1];
    9fe0a75c:	ffc62607          	flw	fa2,-4(a2)
    ti1=cc[t1]+cc[t4];
    9fe0a760:	00062787          	flw	fa5,0(a2)
    tr1=cc[t1-1]-cc[t4-1];
    9fe0a764:	ffc72707          	flw	fa4,-4(a4)
    tr2=cc[t1-1]+cc[t4-1];
    ch[t5]=tr2+tr2;
    ch[t5+=t0]=sqrt2*(tr1-ti1);
    9fe0a768:	01578333          	add	t1,a5,s5
    ti1=cc[t1]+cc[t4];
    9fe0a76c:	00f5f6d3          	fadd.s	fa3,fa1,fa5
    ti2=cc[t4]-cc[t1];
    9fe0a770:	08b7f7d3          	fsub.s	fa5,fa5,fa1
    tr1=cc[t1-1]-cc[t4-1];
    9fe0a774:	08c775d3          	fsub.s	fa1,fa4,fa2
    tr2=cc[t1-1]+cc[t4-1];
    9fe0a778:	00c77753          	fadd.s	fa4,fa4,fa2
    ch[t5+=t0]=ti2+ti2;
    9fe0a77c:	016788b3          	add	a7,a5,s6
    ch[t5+=t0]=-sqrt2*(tr1+ti1);
    9fe0a780:	01c78833          	add	a6,a5,t3
    ch[t5+=t0]=ti2+ti2;
    9fe0a784:	00f7f7d3          	fadd.s	fa5,fa5,fa5
    ch[t5+=t0]=sqrt2*(tr1-ti1);
    9fe0a788:	08d5f653          	fsub.s	fa2,fa1,fa3
    ch[t5+=t0]=-sqrt2*(tr1+ti1);
    9fe0a78c:	00b6f6d3          	fadd.s	fa3,fa3,fa1
    ch[t5]=tr2+tr2;
    9fe0a790:	00e77753          	fadd.s	fa4,fa4,fa4
  for(k=0;k<l1;k++){
    9fe0a794:	2685                	addiw	a3,a3,1
    9fe0a796:	972a                	add	a4,a4,a0
    ch[t5+=t0]=sqrt2*(tr1-ti1);
    9fe0a798:	10067653          	fmul.s	fa2,fa2,ft0
    ch[t5+=t0]=-sqrt2*(tr1+ti1);
    9fe0a79c:	10a6f6d3          	fmul.s	fa3,fa3,fa0
    ch[t5]=tr2+tr2;
    9fe0a7a0:	00e7a027          	fsw	fa4,0(a5)
  for(k=0;k<l1;k++){
    9fe0a7a4:	962a                	add	a2,a2,a0
    9fe0a7a6:	97d2                	add	a5,a5,s4
    ch[t5+=t0]=sqrt2*(tr1-ti1);
    9fe0a7a8:	00c32027          	fsw	fa2,0(t1)
    ch[t5+=t0]=ti2+ti2;
    9fe0a7ac:	00f8a027          	fsw	fa5,0(a7)
    ch[t5+=t0]=-sqrt2*(tr1+ti1);
    9fe0a7b0:	00d82027          	fsw	fa3,0(a6)
  for(k=0;k<l1;k++){
    9fe0a7b4:	fab6c2e3          	blt	a3,a1,9fe0a758 <dradb4+0x268>

    t3+=ido;
    t1+=t2;
    t4+=t2;
  }
}
    9fe0a7b8:	642a                	ld	s0,136(sp)
    9fe0a7ba:	648a                	ld	s1,128(sp)
    9fe0a7bc:	7966                	ld	s2,120(sp)
    9fe0a7be:	79c6                	ld	s3,112(sp)
    9fe0a7c0:	7a26                	ld	s4,104(sp)
    9fe0a7c2:	7a86                	ld	s5,96(sp)
    9fe0a7c4:	6b66                	ld	s6,88(sp)
    9fe0a7c6:	6bc6                	ld	s7,80(sp)
    9fe0a7c8:	6c26                	ld	s8,72(sp)
    9fe0a7ca:	6c86                	ld	s9,64(sp)
    9fe0a7cc:	7d62                	ld	s10,56(sp)
    9fe0a7ce:	7dc2                	ld	s11,48(sp)
    9fe0a7d0:	6149                	addi	sp,sp,144
    9fe0a7d2:	8082                	ret
  for(k=0;k<l1;k++){
    9fe0a7d4:	feb052e3          	blez	a1,9fe0a7b8 <dradb4+0x2c8>
  t4=ido+(ido<<1);
    9fe0a7d8:	47f2                	lw	a5,28(sp)
    9fe0a7da:	001c9713          	slli	a4,s9,0x1
    9fe0a7de:	4a21                	li	s4,8
    9fe0a7e0:	0027851b          	addiw	a0,a5,2
    9fe0a7e4:	002c9a93          	slli	s5,s9,0x2
  t3=ido-1;
    9fe0a7e8:	4785                	li	a5,1
    9fe0a7ea:	003c9b13          	slli	s6,s9,0x3
    9fe0a7ee:	f03a                	sd	a4,32(sp)
    9fe0a7f0:	bf25                	j	9fe0a728 <dradb4+0x238>

000000009fe0a7f2 <dradfg>:
                          float *c2,float *ch,float *ch2,float *wa){
    9fe0a7f2:	7155                	addi	sp,sp,-208
    9fe0a7f4:	aca2                	fsd	fs0,88(sp)
  arg=tpi/(float)ip;
    9fe0a7f6:	d005f453          	fcvt.s.w	fs0,a1
                          float *c2,float *ch,float *ch2,float *wa){
    9fe0a7fa:	ed56                	sd	s5,152(sp)
    9fe0a7fc:	8aae                	mv	s5,a1
  arg=tpi/(float)ip;
    9fe0a7fe:	00008597          	auipc	a1,0x8
    9fe0a802:	c265a787          	flw	fa5,-986(a1) # 9fe12424 <__func__.1+0x26c>
    9fe0a806:	1887f453          	fdiv.s	fs0,fa5,fs0
                          float *c2,float *ch,float *ch2,float *wa){
    9fe0a80a:	e1a2                	sd	s0,192(sp)
    9fe0a80c:	fd26                	sd	s1,184(sp)
    9fe0a80e:	8432                	mv	s0,a2
    9fe0a810:	84aa                	mv	s1,a0
    9fe0a812:	e55e                	sd	s7,136(sp)
  t0=l1*ido;
    9fe0a814:	02848bbb          	mulw	s7,s1,s0
                          float *c2,float *ch,float *ch2,float *wa){
    9fe0a818:	e586                	sd	ra,200(sp)
    9fe0a81a:	f94a                	sd	s2,176(sp)
    9fe0a81c:	f54e                	sd	s3,168(sp)
    9fe0a81e:	f152                	sd	s4,160(sp)
    9fe0a820:	89b6                	mv	s3,a3
    9fe0a822:	8a3e                	mv	s4,a5
    9fe0a824:	e95a                	sd	s6,144(sp)
    9fe0a826:	fce6                	sd	s9,120(sp)
    9fe0a828:	f8ea                	sd	s10,112(sp)
    9fe0a82a:	f4ee                	sd	s11,104(sp)
    9fe0a82c:	8d3a                	mv	s10,a4
    9fe0a82e:	8b42                	mv	s6,a6
    9fe0a830:	8946                	mv	s2,a7
  dcp=(float)cos(arg);
    9fe0a832:	42040453          	fcvt.d.s	fs0,fs0
                          float *c2,float *ch,float *ch2,float *wa){
    9fe0a836:	6cce                	ld	s9,208(sp)
    9fe0a838:	6dee                	ld	s11,216(sp)
  dcp=(float)cos(arg);
    9fe0a83a:	22840553          	fmv.d	fa0,fs0
                          float *c2,float *ch,float *ch2,float *wa){
    9fe0a83e:	e162                	sd	s8,128(sp)
  dcp=(float)cos(arg);
    9fe0a840:	892f60ef          	jal	ra,9fe008d2 <cos>
    9fe0a844:	22a507d3          	fmv.d	fa5,fa0
  dsp=(float)sin(arg);
    9fe0a848:	22840553          	fmv.d	fa0,fs0
  dcp=(float)cos(arg);
    9fe0a84c:	4017f453          	fcvt.s.d	fs0,fa5
  dsp=(float)sin(arg);
    9fe0a850:	b16f60ef          	jal	ra,9fe00b66 <sin>
  nbd=(ido-1)>>1;
    9fe0a854:	fff4869b          	addiw	a3,s1,-1
    9fe0a858:	c4b6                	sw	a3,72(sp)
    9fe0a85a:	4016d69b          	sraiw	a3,a3,0x1
  t2=ipp2*t0;
    9fe0a85e:	035b873b          	mulw	a4,s7,s5
  nbd=(ido-1)>>1;
    9fe0a862:	fc36                	sd	a3,56(sp)
  ipph=(ip+1)>>1;
    9fe0a864:	001a8e1b          	addiw	t3,s5,1
  t0=l1*ido;
    9fe0a868:	d25e                	sw	s7,36(sp)
  if(ido==1)goto L119;
    9fe0a86a:	4785                	li	a5,1
  dsp=(float)sin(arg);
    9fe0a86c:	401576d3          	fcvt.s.d	fa3,fa0
  ipph=(ip+1)>>1;
    9fe0a870:	401e5e1b          	sraiw	t3,t3,0x1
  t10=ip*ido;
    9fe0a874:	029a86bb          	mulw	a3,s5,s1
  t2=ipp2*t0;
    9fe0a878:	f83a                	sd	a4,48(sp)
  t10=ip*ido;
    9fe0a87a:	f436                	sd	a3,40(sp)
  if(ido==1)goto L119;
    9fe0a87c:	04f48ce3          	beq	s1,a5,9fe0b0d4 <dradfg+0x8e2>
  for(ik=0;ik<idl1;ik++)ch2[ik]=c2[ik];
    9fe0a880:	03305563          	blez	s3,9fe0a8aa <dradfg+0xb8>
    9fe0a884:	fff9869b          	addiw	a3,s3,-1
    9fe0a888:	02069793          	slli	a5,a3,0x20
    9fe0a88c:	01e7d693          	srli	a3,a5,0x1e
    9fe0a890:	004b0613          	addi	a2,s6,4
    9fe0a894:	87da                	mv	a5,s6
    9fe0a896:	8766                	mv	a4,s9
    9fe0a898:	96b2                	add	a3,a3,a2
    9fe0a89a:	0007a787          	flw	fa5,0(a5)
    9fe0a89e:	0791                	addi	a5,a5,4
    9fe0a8a0:	0711                	addi	a4,a4,4
    9fe0a8a2:	fef72e27          	fsw	fa5,-4(a4)
    9fe0a8a6:	fed79ae3          	bne	a5,a3,9fe0a89a <dradfg+0xa8>
  for(j=1;j<ip;j++){
    9fe0a8aa:	4785                	li	a5,1
  is=-ido;
    9fe0a8ac:	40900fbb          	negw	t6,s1
  for(j=1;j<ip;j++){
    9fe0a8b0:	6957d263          	bge	a5,s5,9fe0af34 <dradfg+0x742>
    9fe0a8b4:	002b9e93          	slli	t4,s7,0x2
    9fe0a8b8:	01da0533          	add	a0,s4,t4
    9fe0a8bc:	01d905b3          	add	a1,s2,t4
    9fe0a8c0:	00249793          	slli	a5,s1,0x2
    9fe0a8c4:	4f05                	li	t5,1
    for(k=0;k<l1;k++){
    9fe0a8c6:	862e                	mv	a2,a1
    9fe0a8c8:	86aa                	mv	a3,a0
    9fe0a8ca:	4701                	li	a4,0
    9fe0a8cc:	00805b63          	blez	s0,9fe0a8e2 <dradfg+0xf0>
      ch[t2]=c1[t2];
    9fe0a8d0:	0006a787          	flw	fa5,0(a3)
    for(k=0;k<l1;k++){
    9fe0a8d4:	2705                	addiw	a4,a4,1
    9fe0a8d6:	96be                	add	a3,a3,a5
      ch[t2]=c1[t2];
    9fe0a8d8:	00f62027          	fsw	fa5,0(a2)
    for(k=0;k<l1;k++){
    9fe0a8dc:	963e                	add	a2,a2,a5
    9fe0a8de:	fee419e3          	bne	s0,a4,9fe0a8d0 <dradfg+0xde>
  for(j=1;j<ip;j++){
    9fe0a8e2:	001f071b          	addiw	a4,t5,1
    9fe0a8e6:	9576                	add	a0,a0,t4
    9fe0a8e8:	95f6                	add	a1,a1,t4
    9fe0a8ea:	00ea8463          	beq	s5,a4,9fe0a8f2 <dradfg+0x100>
    9fe0a8ee:	8f3a                	mv	t5,a4
    9fe0a8f0:	bfd9                	j	9fe0a8c6 <dradfg+0xd4>
  if(nbd>l1){
    9fe0a8f2:	7762                	ld	a4,56(sp)
    9fe0a8f4:	0ae45863          	bge	s0,a4,9fe0a9a4 <dradfg+0x1b2>
    9fe0a8f8:	ffd4871b          	addiw	a4,s1,-3
    9fe0a8fc:	0017571b          	srliw	a4,a4,0x1
    9fe0a900:	0706                	slli	a4,a4,0x1
    9fe0a902:	0004869b          	sext.w	a3,s1
    9fe0a906:	e83a                	sd	a4,16(sp)
    9fe0a908:	008d8713          	addi	a4,s11,8 # ffffffff80000008 <_end+0xfffffffee0140308>
    9fe0a90c:	e436                	sd	a3,8(sp)
    9fe0a90e:	9fa6                	add	t6,t6,s1
    9fe0a910:	8c76                	mv	s8,t4
    9fe0a912:	53fd                	li	t2,-1
    9fe0a914:	4285                	li	t0,1
    9fe0a916:	ec3a                	sd	a4,24(sp)
        for(i=2;i<ido;i+=2){
    9fe0a918:	4309                	li	t1,2
      for(k=0;k<l1;k++){
    9fe0a91a:	06805a63          	blez	s0,9fe0a98e <dradfg+0x19c>
    9fe0a91e:	6742                	ld	a4,16(sp)
    9fe0a920:	00239893          	slli	a7,t2,0x2
    9fe0a924:	0891                	addi	a7,a7,4
    9fe0a926:	01f705b3          	add	a1,a4,t6
    9fe0a92a:	6762                	ld	a4,24(sp)
    9fe0a92c:	058a                	slli	a1,a1,0x2
    9fe0a92e:	98ee                	add	a7,a7,s11
    9fe0a930:	95ba                	add	a1,a1,a4
        idij=is-1;
    9fe0a932:	8562                	mv	a0,s8
      for(k=0;k<l1;k++){
    9fe0a934:	4801                	li	a6,0
        for(i=2;i<ido;i+=2){
    9fe0a936:	00aa06b3          	add	a3,s4,a0
    9fe0a93a:	00a90633          	add	a2,s2,a0
    9fe0a93e:	8746                	mv	a4,a7
    9fe0a940:	04935363          	bge	t1,s1,9fe0a986 <dradfg+0x194>
          ch[t3-1]=wa[idij-1]*c1[t3-1]+wa[idij]*c1[t3];
    9fe0a944:	00472707          	flw	fa4,4(a4)
    9fe0a948:	0086a587          	flw	fa1,8(a3)
    9fe0a94c:	00072787          	flw	fa5,0(a4)
    9fe0a950:	0046a607          	flw	fa2,4(a3)
    9fe0a954:	10b77753          	fmul.s	fa4,fa4,fa1
        for(i=2;i<ido;i+=2){
    9fe0a958:	0621                	addi	a2,a2,8
    9fe0a95a:	0721                	addi	a4,a4,8
    9fe0a95c:	06a1                	addi	a3,a3,8
          ch[t3-1]=wa[idij-1]*c1[t3-1]+wa[idij]*c1[t3];
    9fe0a95e:	70c7f7c3          	fmadd.s	fa5,fa5,fa2,fa4
    9fe0a962:	fef62e27          	fsw	fa5,-4(a2)
          ch[t3]=wa[idij-1]*c1[t3]-wa[idij]*c1[t3-1];
    9fe0a966:	ffc72707          	flw	fa4,-4(a4)
    9fe0a96a:	ffc6a587          	flw	fa1,-4(a3)
    9fe0a96e:	ff872787          	flw	fa5,-8(a4)
    9fe0a972:	0006a607          	flw	fa2,0(a3)
    9fe0a976:	10b77753          	fmul.s	fa4,fa4,fa1
    9fe0a97a:	70c7f7c7          	fmsub.s	fa5,fa5,fa2,fa4
    9fe0a97e:	00f62027          	fsw	fa5,0(a2)
        for(i=2;i<ido;i+=2){
    9fe0a982:	fcb711e3          	bne	a4,a1,9fe0a944 <dradfg+0x152>
      for(k=0;k<l1;k++){
    9fe0a986:	2805                	addiw	a6,a6,1
    9fe0a988:	953e                	add	a0,a0,a5
    9fe0a98a:	fb0416e3          	bne	s0,a6,9fe0a936 <dradfg+0x144>
    for(j=1;j<ip;j++){
    9fe0a98e:	66a2                	ld	a3,8(sp)
    9fe0a990:	0012871b          	addiw	a4,t0,1
    9fe0a994:	9fa6                	add	t6,t6,s1
    9fe0a996:	00d383bb          	addw	t2,t2,a3
    9fe0a99a:	9c76                	add	s8,s8,t4
    9fe0a99c:	585f0f63          	beq	t5,t0,9fe0af3a <dradfg+0x748>
    9fe0a9a0:	82ba                	mv	t0,a4
    9fe0a9a2:	bfa5                	j	9fe0a91a <dradfg+0x128>
    for(j=1;j<ip;j++){
    9fe0a9a4:	ffd4829b          	addiw	t0,s1,-3
    9fe0a9a8:	ffe2f293          	andi	t0,t0,-2
    9fe0a9ac:	00048f9b          	sext.w	t6,s1
  if(nbd>l1){
    9fe0a9b0:	537d                	li	t1,-1
  t1=0;
    9fe0a9b2:	4e81                	li	t4,0
    for(j=1;j<ip;j++){
    9fe0a9b4:	4885                	li	a7,1
      for(i=2;i<ido;i+=2){
    9fe0a9b6:	4f09                	li	t5,2
    9fe0a9b8:	2289                	addiw	t0,t0,2
      t1+=t0;
    9fe0a9ba:	01db8ebb          	addw	t4,s7,t4
      idij=is-1;
    9fe0a9be:	0003071b          	sext.w	a4,t1
      for(i=2;i<ido;i+=2){
    9fe0a9c2:	069f5663          	bge	t5,s1,9fe0aa2e <dradfg+0x23c>
    9fe0a9c6:	00271613          	slli	a2,a4,0x2
    9fe0a9ca:	0611                	addi	a2,a2,4
    9fe0a9cc:	966e                	add	a2,a2,s11
    9fe0a9ce:	01d2883b          	addw	a6,t0,t4
      t2=t1;
    9fe0a9d2:	8576                	mv	a0,t4
        t2+=2;
    9fe0a9d4:	2509                	addiw	a0,a0,2
        for(k=0;k<l1;k++){
    9fe0a9d6:	04805963          	blez	s0,9fe0aa28 <dradfg+0x236>
    9fe0a9da:	00251693          	slli	a3,a0,0x2
    9fe0a9de:	00da0733          	add	a4,s4,a3
    9fe0a9e2:	4581                	li	a1,0
    9fe0a9e4:	96ca                	add	a3,a3,s2
          ch[t3-1]=wa[idij-1]*c1[t3-1]+wa[idij]*c1[t3];
    9fe0a9e6:	00072587          	flw	fa1,0(a4)
    9fe0a9ea:	00462707          	flw	fa4,4(a2)
    9fe0a9ee:	ffc72607          	flw	fa2,-4(a4)
    9fe0a9f2:	00062787          	flw	fa5,0(a2)
    9fe0a9f6:	10b77753          	fmul.s	fa4,fa4,fa1
        for(k=0;k<l1;k++){
    9fe0a9fa:	2585                	addiw	a1,a1,1
          ch[t3-1]=wa[idij-1]*c1[t3-1]+wa[idij]*c1[t3];
    9fe0a9fc:	70c7f7c3          	fmadd.s	fa5,fa5,fa2,fa4
    9fe0aa00:	fef6ae27          	fsw	fa5,-4(a3)
          ch[t3]=wa[idij-1]*c1[t3]-wa[idij]*c1[t3-1];
    9fe0aa04:	ffc72587          	flw	fa1,-4(a4)
    9fe0aa08:	00462707          	flw	fa4,4(a2)
    9fe0aa0c:	00072607          	flw	fa2,0(a4)
    9fe0aa10:	00062787          	flw	fa5,0(a2)
    9fe0aa14:	10b77753          	fmul.s	fa4,fa4,fa1
        for(k=0;k<l1;k++){
    9fe0aa18:	973e                	add	a4,a4,a5
          ch[t3]=wa[idij-1]*c1[t3]-wa[idij]*c1[t3-1];
    9fe0aa1a:	70c7f7c7          	fmsub.s	fa5,fa5,fa2,fa4
    9fe0aa1e:	00f6a027          	fsw	fa5,0(a3)
        for(k=0;k<l1;k++){
    9fe0aa22:	96be                	add	a3,a3,a5
    9fe0aa24:	fcb411e3          	bne	s0,a1,9fe0a9e6 <dradfg+0x1f4>
      for(i=2;i<ido;i+=2){
    9fe0aa28:	0621                	addi	a2,a2,8
    9fe0aa2a:	fb0515e3          	bne	a0,a6,9fe0a9d4 <dradfg+0x1e2>
    for(j=1;j<ip;j++){
    9fe0aa2e:	2885                	addiw	a7,a7,1
    9fe0aa30:	01f3033b          	addw	t1,t1,t6
    9fe0aa34:	f91a93e3          	bne	s5,a7,9fe0a9ba <dradfg+0x1c8>
  if(nbd<l1){
    9fe0aa38:	77e2                	ld	a5,56(sp)
    9fe0aa3a:	5087d063          	bge	a5,s0,9fe0af3a <dradfg+0x748>
    for(j=1;j<ipph;j++){
    9fe0aa3e:	4785                	li	a5,1
    9fe0aa40:	69c7df63          	bge	a5,t3,9fe0b0de <dradfg+0x8ec>
    9fe0aa44:	77c2                	ld	a5,48(sp)
    9fe0aa46:	5692                	lw	a3,36(sp)
    9fe0aa48:	ffd4871b          	addiw	a4,s1,-3
    9fe0aa4c:	41778fb3          	sub	t6,a5,s7
    9fe0aa50:	40d00dbb          	negw	s11,a3
    9fe0aa54:	001b9e93          	slli	t4,s7,0x1
    9fe0aa58:	9b79                	andi	a4,a4,-2
    9fe0aa5a:	41bb8c33          	sub	s8,s7,s11
    9fe0aa5e:	40fe8eb3          	sub	t4,t4,a5
    9fe0aa62:	0f89                	addi	t6,t6,2
    9fe0aa64:	2711                	addiw	a4,a4,4
    9fe0aa66:	c86e                	sw	s11,16(sp)
    9fe0aa68:	0c0a                	slli	s8,s8,0x2
    9fe0aa6a:	0e8a                	slli	t4,t4,0x2
    9fe0aa6c:	409682bb          	subw	t0,a3,s1
    9fe0aa70:	0d8a                	slli	s11,s11,0x2
    9fe0aa72:	0f8a                	slli	t6,t6,0x2
    9fe0aa74:	00249793          	slli	a5,s1,0x2
    9fe0aa78:	4385                	li	t2,1
    9fe0aa7a:	c43a                	sw	a4,8(sp)
      for(i=2;i<ido;i+=2){
    9fe0aa7c:	4709                	li	a4,2
    9fe0aa7e:	08975063          	bge	a4,s1,9fe0aafe <dradfg+0x30c>
    9fe0aa82:	4722                	lw	a4,8(sp)
    9fe0aa84:	0022831b          	addiw	t1,t0,2
    9fe0aa88:	01f908b3          	add	a7,s2,t6
    9fe0aa8c:	01fa0833          	add	a6,s4,t6
    9fe0aa90:	00570f3b          	addw	t5,a4,t0
        for(k=0;k<l1;k++){
    9fe0aa94:	06805063          	blez	s0,9fe0aaf4 <dradfg+0x302>
    9fe0aa98:	01d886b3          	add	a3,a7,t4
    9fe0aa9c:	01d805b3          	add	a1,a6,t4
    9fe0aaa0:	8642                	mv	a2,a6
    9fe0aaa2:	8746                	mv	a4,a7
    9fe0aaa4:	4501                	li	a0,0
          c1[t5-1]=ch[t5-1]+ch[t6-1];
    9fe0aaa6:	ffc72707          	flw	fa4,-4(a4)
    9fe0aaaa:	ffc6a787          	flw	fa5,-4(a3)
        for(k=0;k<l1;k++){
    9fe0aaae:	2505                	addiw	a0,a0,1
          c1[t5-1]=ch[t5-1]+ch[t6-1];
    9fe0aab0:	00e7f7d3          	fadd.s	fa5,fa5,fa4
    9fe0aab4:	fef5ae27          	fsw	fa5,-4(a1)
          c1[t6-1]=ch[t5]-ch[t6];
    9fe0aab8:	00072707          	flw	fa4,0(a4)
    9fe0aabc:	0006a787          	flw	fa5,0(a3)
    9fe0aac0:	08e7f7d3          	fsub.s	fa5,fa5,fa4
    9fe0aac4:	fef62e27          	fsw	fa5,-4(a2)
          c1[t5]=ch[t5]+ch[t6];
    9fe0aac8:	00072707          	flw	fa4,0(a4)
    9fe0aacc:	0006a787          	flw	fa5,0(a3)
    9fe0aad0:	00e7f7d3          	fadd.s	fa5,fa5,fa4
    9fe0aad4:	00f5a027          	fsw	fa5,0(a1)
          c1[t6]=ch[t6-1]-ch[t5-1];
    9fe0aad8:	ffc72787          	flw	fa5,-4(a4)
    9fe0aadc:	ffc6a707          	flw	fa4,-4(a3)
        for(k=0;k<l1;k++){
    9fe0aae0:	973e                	add	a4,a4,a5
    9fe0aae2:	96be                	add	a3,a3,a5
          c1[t6]=ch[t6-1]-ch[t5-1];
    9fe0aae4:	08e7f7d3          	fsub.s	fa5,fa5,fa4
        for(k=0;k<l1;k++){
    9fe0aae8:	95be                	add	a1,a1,a5
          c1[t6]=ch[t6-1]-ch[t5-1];
    9fe0aaea:	00f62027          	fsw	fa5,0(a2)
        for(k=0;k<l1;k++){
    9fe0aaee:	963e                	add	a2,a2,a5
    9fe0aaf0:	faa41be3          	bne	s0,a0,9fe0aaa6 <dradfg+0x2b4>
      for(i=2;i<ido;i+=2){
    9fe0aaf4:	2309                	addiw	t1,t1,2
    9fe0aaf6:	08a1                	addi	a7,a7,8
    9fe0aaf8:	0821                	addi	a6,a6,8
    9fe0aafa:	f9e31de3          	bne	t1,t5,9fe0aa94 <dradfg+0x2a2>
    for(j=1;j<ipph;j++){
    9fe0aafe:	2385                	addiw	t2,t2,1
    9fe0ab00:	9ee2                	add	t4,t4,s8
    9fe0ab02:	017282bb          	addw	t0,t0,s7
    9fe0ab06:	9fee                	add	t6,t6,s11
    9fe0ab08:	f67e1ae3          	bne	t3,t2,9fe0aa7c <dradfg+0x28a>
  t2=ipp2*idl1;
    9fe0ab0c:	033a8c3b          	mulw	s8,s5,s3
  for(ik=0;ik<idl1;ik++)c2[ik]=ch2[ik];
    9fe0ab10:	03305763          	blez	s3,9fe0ab3e <dradfg+0x34c>
    9fe0ab14:	86e6                	mv	a3,s9
    9fe0ab16:	875a                	mv	a4,s6
      for(k=0;k<l1;k++){
    9fe0ab18:	4781                	li	a5,0
  for(ik=0;ik<idl1;ik++)c2[ik]=ch2[ik];
    9fe0ab1a:	0006a787          	flw	fa5,0(a3)
    9fe0ab1e:	2785                	addiw	a5,a5,1
    9fe0ab20:	0691                	addi	a3,a3,4
    9fe0ab22:	00f72027          	fsw	fa5,0(a4)
    9fe0ab26:	0711                	addi	a4,a4,4
    9fe0ab28:	ff37c9e3          	blt	a5,s3,9fe0ab1a <dradfg+0x328>
  for(j=1;j<ipph;j++){
    9fe0ab2c:	5692                	lw	a3,36(sp)
    9fe0ab2e:	4705                	li	a4,1
    9fe0ab30:	00249793          	slli	a5,s1,0x2
    9fe0ab34:	40d006bb          	negw	a3,a3
    9fe0ab38:	c836                	sw	a3,16(sp)
    9fe0ab3a:	1fc75763          	bge	a4,t3,9fe0ad28 <dradfg+0x536>
    9fe0ab3e:	4f42                	lw	t5,16(sp)
    9fe0ab40:	009b88b3          	add	a7,s7,s1
    9fe0ab44:	418888b3          	sub	a7,a7,s8
    9fe0ab48:	41e00fb3          	neg	t6,t5
    9fe0ab4c:	409b8833          	sub	a6,s7,s1
    9fe0ab50:	417c0733          	sub	a4,s8,s7
    9fe0ab54:	0f8a                	slli	t6,t6,0x2
    9fe0ab56:	088a                	slli	a7,a7,0x2
    9fe0ab58:	002b9293          	slli	t0,s7,0x2
    9fe0ab5c:	080a                	slli	a6,a6,0x2
    9fe0ab5e:	0f0a                	slli	t5,t5,0x2
    9fe0ab60:	00271313          	slli	t1,a4,0x2
    9fe0ab64:	00f903b3          	add	t2,s2,a5
      for(k=0;k<l1;k++){
    9fe0ab68:	4e85                	li	t4,1
    for(k=0;k<l1;k++){
    9fe0ab6a:	04805263          	blez	s0,9fe0abae <dradfg+0x3bc>
    9fe0ab6e:	00780633          	add	a2,a6,t2
    9fe0ab72:	006906b3          	add	a3,s2,t1
    9fe0ab76:	006a0733          	add	a4,s4,t1
    9fe0ab7a:	4501                	li	a0,0
      c1[t3]=ch[t3]+ch[t4];
    9fe0ab7c:	0006a707          	flw	fa4,0(a3)
    9fe0ab80:	00062787          	flw	fa5,0(a2)
    9fe0ab84:	011705b3          	add	a1,a4,a7
    9fe0ab88:	95c2                	add	a1,a1,a6
    9fe0ab8a:	00e7f7d3          	fadd.s	fa5,fa5,fa4
    for(k=0;k<l1;k++){
    9fe0ab8e:	2505                	addiw	a0,a0,1
      c1[t3]=ch[t3]+ch[t4];
    9fe0ab90:	00f5a027          	fsw	fa5,0(a1)
      c1[t4]=ch[t4]-ch[t3];
    9fe0ab94:	0006a787          	flw	fa5,0(a3)
    9fe0ab98:	00062707          	flw	fa4,0(a2)
    for(k=0;k<l1;k++){
    9fe0ab9c:	96be                	add	a3,a3,a5
    9fe0ab9e:	963e                	add	a2,a2,a5
      c1[t4]=ch[t4]-ch[t3];
    9fe0aba0:	08e7f7d3          	fsub.s	fa5,fa5,fa4
    9fe0aba4:	00f72027          	fsw	fa5,0(a4)
    for(k=0;k<l1;k++){
    9fe0aba8:	973e                	add	a4,a4,a5
    9fe0abaa:	fca419e3          	bne	s0,a0,9fe0ab7c <dradfg+0x38a>
  for(j=1;j<ipph;j++){
    9fe0abae:	2e85                	addiw	t4,t4,1
    9fe0abb0:	98fe                	add	a7,a7,t6
    9fe0abb2:	9816                	add	a6,a6,t0
    9fe0abb4:	937a                	add	t1,t1,t5
    9fe0abb6:	fbcecae3          	blt	t4,t3,9fe0ab6a <dradfg+0x378>
  t3=(ip-1)*idl1;
    9fe0abba:	fffa8f9b          	addiw	t6,s5,-1
    9fe0abbe:	033f8fbb          	mulw	t6,t6,s3
    9fe0abc2:	fff98a1b          	addiw	s4,s3,-1
    9fe0abc6:	1a02                	slli	s4,s4,0x20
    9fe0abc8:	020a5a13          	srli	s4,s4,0x20
    9fe0abcc:	0019979b          	slliw	a5,s3,0x1
    9fe0abd0:	01478533          	add	a0,a5,s4
    9fe0abd4:	40f007b3          	neg	a5,a5
    9fe0abd8:	078a                	slli	a5,a5,0x2
    9fe0abda:	413c0eb3          	sub	t4,s8,s3
    9fe0abde:	004b0713          	addi	a4,s6,4
    9fe0abe2:	413f86b3          	sub	a3,t6,s3
    9fe0abe6:	4130083b          	negw	a6,s3
    9fe0abea:	050a                	slli	a0,a0,0x2
    9fe0abec:	ec3e                	sd	a5,24(sp)
    9fe0abee:	f0000053          	fmv.w.x	ft0,zero
    9fe0abf2:	00269793          	slli	a5,a3,0x2
    9fe0abf6:	002a1893          	slli	a7,s4,0x2
    9fe0abfa:	00299313          	slli	t1,s3,0x2
    9fe0abfe:	0e8a                	slli	t4,t4,0x2
    9fe0ac00:	413005b3          	neg	a1,s3
    9fe0ac04:	fffa4a13          	not	s4,s4
    9fe0ac08:	00281d93          	slli	s11,a6,0x2
    9fe0ac0c:	e43e                	sd	a5,8(sp)
    9fe0ac0e:	00e507b3          	add	a5,a0,a4
    9fe0ac12:	e83e                	sd	a5,16(sp)
    9fe0ac14:	e0c6                	sd	a7,64(sp)
    9fe0ac16:	006c8f33          	add	t5,s9,t1
    9fe0ac1a:	9ee6                	add	t4,t4,s9
    9fe0ac1c:	01170ab3          	add	s5,a4,a7
    9fe0ac20:	0f8a                	slli	t6,t6,0x2
    9fe0ac22:	00259393          	slli	t2,a1,0x2
    9fe0ac26:	82ee                	mv	t0,s11
    9fe0ac28:	00007797          	auipc	a5,0x7
    9fe0ac2c:	5e87a507          	flw	fa0,1512(a5) # 9fe12210 <__func__.1+0x58>
    9fe0ac30:	4c05                	li	s8,1
    9fe0ac32:	0a0a                	slli	s4,s4,0x2
    ar1h=dcp*ar1-dsp*ai1;
    9fe0ac34:	1006f753          	fmul.s	fa4,fa3,ft0
    ai1=dcp*ai1+dsp*ar1;
    9fe0ac38:	10a6f7d3          	fmul.s	fa5,fa3,fa0
    for(ik=0;ik<idl1;ik++){
    9fe0ac3c:	86f6                	mv	a3,t4
    9fe0ac3e:	877a                	mv	a4,t5
    9fe0ac40:	87da                	mv	a5,s6
    ar1h=dcp*ar1-dsp*ai1;
    9fe0ac42:	70a47547          	fmsub.s	fa0,fs0,fa0,fa4
    ai1=dcp*ai1+dsp*ar1;
    9fe0ac46:	78047043          	fmadd.s	ft0,fs0,ft0,fa5
    for(ik=0;ik<idl1;ik++){
    9fe0ac4a:	03305963          	blez	s3,9fe0ac7c <dradfg+0x48a>
      ch2[t4++]=c2[ik]+ar1*c2[t7++];
    9fe0ac4e:	00678633          	add	a2,a5,t1
    9fe0ac52:	0007a707          	flw	fa4,0(a5)
    9fe0ac56:	00062787          	flw	fa5,0(a2)
    for(ik=0;ik<idl1;ik++){
    9fe0ac5a:	0711                	addi	a4,a4,4
      ch2[t5++]=ai1*c2[t6++];
    9fe0ac5c:	01f78633          	add	a2,a5,t6
      ch2[t4++]=c2[ik]+ar1*c2[t7++];
    9fe0ac60:	70a7f7c3          	fmadd.s	fa5,fa5,fa0,fa4
    for(ik=0;ik<idl1;ik++){
    9fe0ac64:	0691                	addi	a3,a3,4
    9fe0ac66:	0791                	addi	a5,a5,4
      ch2[t4++]=c2[ik]+ar1*c2[t7++];
    9fe0ac68:	fef72e27          	fsw	fa5,-4(a4)
      ch2[t5++]=ai1*c2[t6++];
    9fe0ac6c:	00062787          	flw	fa5,0(a2)
    9fe0ac70:	1007f7d3          	fmul.s	fa5,fa5,ft0
    9fe0ac74:	fef6ae27          	fsw	fa5,-4(a3)
    for(ik=0;ik<idl1;ik++){
    9fe0ac78:	fd579be3          	bne	a5,s5,9fe0ac4e <dradfg+0x45c>
    for(j=2;j<ipph;j++){
    9fe0ac7c:	4789                	li	a5,2
    9fe0ac7e:	07c7d663          	bge	a5,t3,9fe0acea <dradfg+0x4f8>
    ar2=ar1;
    9fe0ac82:	20a505d3          	fmv.s	fa1,fa0
    ai2=ai1;
    9fe0ac86:	20000653          	fmv.s	fa2,ft0
    for(j=2;j<ipph;j++){
    9fe0ac8a:	65c2                	ld	a1,16(sp)
    9fe0ac8c:	6822                	ld	a6,8(sp)
    9fe0ac8e:	6562                	ld	a0,24(sp)
    9fe0ac90:	4889                	li	a7,2
      ar2h=dc2*ar2-ds2*ai2;
    9fe0ac92:	10c07753          	fmul.s	fa4,ft0,fa2
      ai2=dc2*ai2+ds2*ar2;
    9fe0ac96:	10b077d3          	fmul.s	fa5,ft0,fa1
    9fe0ac9a:	00ba07b3          	add	a5,s4,a1
      for(ik=0;ik<idl1;ik++){
    9fe0ac9e:	86f6                	mv	a3,t4
    9fe0aca0:	877a                	mv	a4,t5
      ar2h=dc2*ar2-ds2*ai2;
    9fe0aca2:	70b575c7          	fmsub.s	fa1,fa0,fa1,fa4
      ai2=dc2*ai2+ds2*ar2;
    9fe0aca6:	78c57643          	fmadd.s	fa2,fa0,fa2,fa5
      for(ik=0;ik<idl1;ik++){
    9fe0acaa:	03305a63          	blez	s3,9fe0acde <dradfg+0x4ec>
        ch2[t6++]+=ar2*c2[t8++];
    9fe0acae:	00072707          	flw	fa4,0(a4)
    9fe0acb2:	0007a787          	flw	fa5,0(a5)
        ch2[t7++]+=ai2*c2[t9++];
    9fe0acb6:	00a78633          	add	a2,a5,a0
      for(ik=0;ik<idl1;ik++){
    9fe0acba:	0711                	addi	a4,a4,4
        ch2[t6++]+=ar2*c2[t8++];
    9fe0acbc:	70b7f7c3          	fmadd.s	fa5,fa5,fa1,fa4
      for(ik=0;ik<idl1;ik++){
    9fe0acc0:	0691                	addi	a3,a3,4
        ch2[t7++]+=ai2*c2[t9++];
    9fe0acc2:	9642                	add	a2,a2,a6
      for(ik=0;ik<idl1;ik++){
    9fe0acc4:	0791                	addi	a5,a5,4
        ch2[t6++]+=ar2*c2[t8++];
    9fe0acc6:	fef72e27          	fsw	fa5,-4(a4)
        ch2[t7++]+=ai2*c2[t9++];
    9fe0acca:	ffc6a707          	flw	fa4,-4(a3)
    9fe0acce:	00062787          	flw	fa5,0(a2)
    9fe0acd2:	70c7f7c3          	fmadd.s	fa5,fa5,fa2,fa4
    9fe0acd6:	fef6ae27          	fsw	fa5,-4(a3)
      for(ik=0;ik<idl1;ik++){
    9fe0acda:	fcb79ae3          	bne	a5,a1,9fe0acae <dradfg+0x4bc>
    for(j=2;j<ipph;j++){
    9fe0acde:	2885                	addiw	a7,a7,1
    9fe0ace0:	951e                	add	a0,a0,t2
    9fe0ace2:	9816                	add	a6,a6,t0
    9fe0ace4:	959a                	add	a1,a1,t1
    9fe0ace6:	fb1e16e3          	bne	t3,a7,9fe0ac92 <dradfg+0x4a0>
  for(l=1;l<ipph;l++){
    9fe0acea:	2c05                	addiw	s8,s8,1
    9fe0acec:	9f1a                	add	t5,t5,t1
    9fe0acee:	9eee                	add	t4,t4,s11
    9fe0acf0:	f5cc42e3          	blt	s8,t3,9fe0ac34 <dradfg+0x442>
    9fe0acf4:	6786                	ld	a5,64(sp)
    9fe0acf6:	004c8693          	addi	a3,s9,4
    9fe0acfa:	9b1a                	add	s6,s6,t1
    9fe0acfc:	96be                	add	a3,a3,a5
    9fe0acfe:	4605                	li	a2,1
    for(ik=0;ik<idl1;ik++)ch2[ik]+=c2[t2++];
    9fe0ad00:	87e6                	mv	a5,s9
    9fe0ad02:	875a                	mv	a4,s6
    9fe0ad04:	01305e63          	blez	s3,9fe0ad20 <dradfg+0x52e>
    9fe0ad08:	0007a787          	flw	fa5,0(a5)
    9fe0ad0c:	00072707          	flw	fa4,0(a4)
    9fe0ad10:	0791                	addi	a5,a5,4
    9fe0ad12:	0711                	addi	a4,a4,4
    9fe0ad14:	00e7f7d3          	fadd.s	fa5,fa5,fa4
    9fe0ad18:	fef7ae27          	fsw	fa5,-4(a5)
    9fe0ad1c:	fef696e3          	bne	a3,a5,9fe0ad08 <dradfg+0x516>
  for(j=1;j<ipph;j++){
    9fe0ad20:	2605                	addiw	a2,a2,1
    9fe0ad22:	9b1a                	add	s6,s6,t1
    9fe0ad24:	fdc64ee3          	blt	a2,t3,9fe0ad00 <dradfg+0x50e>
  if(ido<l1)goto L132;
    9fe0ad28:	1c84d163          	bge	s1,s0,9fe0aeea <dradfg+0x6f8>
  for(i=0;i<ido;i++){
    9fe0ad2c:	02905d63          	blez	s1,9fe0ad66 <dradfg+0x574>
    9fe0ad30:	77a2                	ld	a5,40(sp)
    9fe0ad32:	88ca                	mv	a7,s2
    9fe0ad34:	886a                	mv	a6,s10
    9fe0ad36:	00249593          	slli	a1,s1,0x2
    9fe0ad3a:	00279613          	slli	a2,a5,0x2
    9fe0ad3e:	4501                	li	a0,0
    for(k=0;k<l1;k++){
    9fe0ad40:	86c2                	mv	a3,a6
    9fe0ad42:	8746                	mv	a4,a7
    9fe0ad44:	4781                	li	a5,0
    9fe0ad46:	00805b63          	blez	s0,9fe0ad5c <dradfg+0x56a>
      cc[t2]=ch[t1];
    9fe0ad4a:	00072787          	flw	fa5,0(a4)
    for(k=0;k<l1;k++){
    9fe0ad4e:	2785                	addiw	a5,a5,1
    9fe0ad50:	972e                	add	a4,a4,a1
      cc[t2]=ch[t1];
    9fe0ad52:	00f6a027          	fsw	fa5,0(a3)
    for(k=0;k<l1;k++){
    9fe0ad56:	96b2                	add	a3,a3,a2
    9fe0ad58:	fef419e3          	bne	s0,a5,9fe0ad4a <dradfg+0x558>
  for(i=0;i<ido;i++){
    9fe0ad5c:	2505                	addiw	a0,a0,1
    9fe0ad5e:	0891                	addi	a7,a7,4
    9fe0ad60:	0811                	addi	a6,a6,4
    9fe0ad62:	fca49fe3          	bne	s1,a0,9fe0ad40 <dradfg+0x54e>
  t2=ido<<1;
    9fe0ad66:	00149c1b          	slliw	s8,s1,0x1
  for(j=1;j<ipph;j++){
    9fe0ad6a:	4785                	li	a5,1
  t2=ido<<1;
    9fe0ad6c:	82e2                	mv	t0,s8
  for(j=1;j<ipph;j++){
    9fe0ad6e:	07c7d863          	bge	a5,t3,9fe0adde <dradfg+0x5ec>
    9fe0ad72:	5792                	lw	a5,36(sp)
    9fe0ad74:	41700fb3          	neg	t6,s7
    9fe0ad78:	002b9a13          	slli	s4,s7,0x2
    9fe0ad7c:	40f003bb          	negw	t2,a5
    9fe0ad80:	77c2                	ld	a5,48(sp)
    9fe0ad82:	002c1993          	slli	s3,s8,0x2
    9fe0ad86:	0f8a                	slli	t6,t6,0x2
    9fe0ad88:	417785b3          	sub	a1,a5,s7
    9fe0ad8c:	77a2                	ld	a5,40(sp)
    9fe0ad8e:	01490f33          	add	t5,s2,s4
    9fe0ad92:	013d0eb3          	add	t4,s10,s3
    9fe0ad96:	038a                	slli	t2,t2,0x2
    9fe0ad98:	058a                	slli	a1,a1,0x2
    9fe0ad9a:	00249893          	slli	a7,s1,0x2
    9fe0ad9e:	00279813          	slli	a6,a5,0x2
    9fe0ada2:	857e                	mv	a0,t6
    9fe0ada4:	4305                	li	t1,1
    for(k=0;k<l1;k++){
    9fe0ada6:	8776                	mv	a4,t4
    9fe0ada8:	87fa                	mv	a5,t5
    9fe0adaa:	4601                	li	a2,0
    9fe0adac:	02805263          	blez	s0,9fe0add0 <dradfg+0x5de>
      cc[t5-1]=ch[t6];
    9fe0adb0:	0007a787          	flw	fa5,0(a5)
      cc[t5]=ch[t7];
    9fe0adb4:	00f506b3          	add	a3,a0,a5
    9fe0adb8:	96ae                	add	a3,a3,a1
      cc[t5-1]=ch[t6];
    9fe0adba:	fef72e27          	fsw	fa5,-4(a4)
      cc[t5]=ch[t7];
    9fe0adbe:	0006a787          	flw	fa5,0(a3)
    for(k=0;k<l1;k++){
    9fe0adc2:	2605                	addiw	a2,a2,1
    9fe0adc4:	97c6                	add	a5,a5,a7
      cc[t5]=ch[t7];
    9fe0adc6:	00f72027          	fsw	fa5,0(a4)
    for(k=0;k<l1;k++){
    9fe0adca:	9742                	add	a4,a4,a6
    9fe0adcc:	fec412e3          	bne	s0,a2,9fe0adb0 <dradfg+0x5be>
  for(j=1;j<ipph;j++){
    9fe0add0:	2305                	addiw	t1,t1,1
    9fe0add2:	9f52                	add	t5,t5,s4
    9fe0add4:	9ece                	add	t4,t4,s3
    9fe0add6:	957e                	add	a0,a0,t6
    9fe0add8:	959e                	add	a1,a1,t2
    9fe0adda:	fc6e16e3          	bne	t3,t1,9fe0ada6 <dradfg+0x5b4>
  if(ido==1)return;
    9fe0adde:	4785                	li	a5,1
    9fe0ade0:	0ef48563          	beq	s1,a5,9fe0aeca <dradfg+0x6d8>
  if(nbd<l1)goto L141;
    9fe0ade4:	7762                	ld	a4,56(sp)
  is=-ido;
    9fe0ade6:	40900cbb          	negw	s9,s1
  if(nbd<l1)goto L141;
    9fe0adea:	20874563          	blt	a4,s0,9fe0aff4 <dradfg+0x802>
  for(j=1;j<ipph;j++){
    9fe0adee:	0dc7de63          	bge	a5,t3,9fe0aeca <dradfg+0x6d8>
    9fe0adf2:	5792                	lw	a5,36(sp)
    9fe0adf4:	7742                	ld	a4,48(sp)
    9fe0adf6:	ffd4829b          	addiw	t0,s1,-3
    9fe0adfa:	40f007bb          	negw	a5,a5
    9fe0adfe:	417787b3          	sub	a5,a5,s7
    9fe0ae02:	078a                	slli	a5,a5,0x2
    9fe0ae04:	e43e                	sd	a5,8(sp)
    9fe0ae06:	77a2                	ld	a5,40(sp)
    9fe0ae08:	41770f33          	sub	t5,a4,s7
    9fe0ae0c:	417f0f33          	sub	t5,t5,s7
    9fe0ae10:	9ce2                	add	s9,s9,s8
    9fe0ae12:	0012d29b          	srliw	t0,t0,0x1
    9fe0ae16:	0f0a                	slli	t5,t5,0x2
    9fe0ae18:	9ca6                	add	s9,s9,s1
    9fe0ae1a:	00249993          	slli	s3,s1,0x2
    9fe0ae1e:	00279393          	slli	t2,a5,0x2
    9fe0ae22:	0286                	slli	t0,t0,0x1
    9fe0ae24:	8b62                	mv	s6,s8
    9fe0ae26:	8ade                	mv	s5,s7
    9fe0ae28:	4d85                	li	s11,1
      for(i=2;i<ido;i+=2){
    9fe0ae2a:	4f89                	li	t6,2
    9fe0ae2c:	00890a13          	addi	s4,s2,8
    for(k=0;k<l1;k++){
    9fe0ae30:	08805563          	blez	s0,9fe0aeba <dradfg+0x6c8>
    9fe0ae34:	002a9813          	slli	a6,s5,0x2
    9fe0ae38:	002b1513          	slli	a0,s6,0x2
    9fe0ae3c:	416c8eb3          	sub	t4,s9,s6
    9fe0ae40:	984a                	add	a6,a6,s2
    9fe0ae42:	956a                	add	a0,a0,s10
    9fe0ae44:	0e8a                	slli	t4,t4,0x2
    9fe0ae46:	8356                	mv	t1,s5
    9fe0ae48:	4881                	li	a7,0
      for(i=2;i<ido;i+=2){
    9fe0ae4a:	069fd263          	bge	t6,s1,9fe0aeae <dradfg+0x6bc>
    9fe0ae4e:	005305b3          	add	a1,t1,t0
    9fe0ae52:	058a                	slli	a1,a1,0x2
    9fe0ae54:	010f0733          	add	a4,t5,a6
    9fe0ae58:	00ae8633          	add	a2,t4,a0
    9fe0ae5c:	95d2                	add	a1,a1,s4
    9fe0ae5e:	86aa                	mv	a3,a0
    9fe0ae60:	87c2                	mv	a5,a6
        cc[i+t7-1]=ch[i+t8-1]+ch[i+t9-1];
    9fe0ae62:	0047a787          	flw	fa5,4(a5)
    9fe0ae66:	00472707          	flw	fa4,4(a4)
      for(i=2;i<ido;i+=2){
    9fe0ae6a:	06a1                	addi	a3,a3,8
    9fe0ae6c:	07a1                	addi	a5,a5,8
        cc[i+t7-1]=ch[i+t8-1]+ch[i+t9-1];
    9fe0ae6e:	00e7f7d3          	fadd.s	fa5,fa5,fa4
      for(i=2;i<ido;i+=2){
    9fe0ae72:	0721                	addi	a4,a4,8
    9fe0ae74:	1661                	addi	a2,a2,-8
        cc[i+t7-1]=ch[i+t8-1]+ch[i+t9-1];
    9fe0ae76:	fef6ae27          	fsw	fa5,-4(a3)
        cc[ic+t6-1]=ch[i+t8-1]-ch[i+t9-1];
    9fe0ae7a:	ffc72707          	flw	fa4,-4(a4)
    9fe0ae7e:	ffc7a787          	flw	fa5,-4(a5)
    9fe0ae82:	08e7f7d3          	fsub.s	fa5,fa5,fa4
    9fe0ae86:	fef62e27          	fsw	fa5,-4(a2)
        cc[i+t7]=ch[i+t8]+ch[i+t9];
    9fe0ae8a:	00072707          	flw	fa4,0(a4)
    9fe0ae8e:	0007a787          	flw	fa5,0(a5)
    9fe0ae92:	00e7f7d3          	fadd.s	fa5,fa5,fa4
    9fe0ae96:	00f6a027          	fsw	fa5,0(a3)
        cc[ic+t6]=ch[i+t9]-ch[i+t8];
    9fe0ae9a:	00072787          	flw	fa5,0(a4)
    9fe0ae9e:	0007a707          	flw	fa4,0(a5)
    9fe0aea2:	08e7f7d3          	fsub.s	fa5,fa5,fa4
    9fe0aea6:	00f62027          	fsw	fa5,0(a2)
      for(i=2;i<ido;i+=2){
    9fe0aeaa:	faf59ce3          	bne	a1,a5,9fe0ae62 <dradfg+0x670>
    for(k=0;k<l1;k++){
    9fe0aeae:	2885                	addiw	a7,a7,1
    9fe0aeb0:	984e                	add	a6,a6,s3
    9fe0aeb2:	951e                	add	a0,a0,t2
    9fe0aeb4:	9326                	add	t1,t1,s1
    9fe0aeb6:	f9141ae3          	bne	s0,a7,9fe0ae4a <dradfg+0x658>
  for(j=1;j<ipph;j++){
    9fe0aeba:	67a2                	ld	a5,8(sp)
    9fe0aebc:	2d85                	addiw	s11,s11,1
    9fe0aebe:	9ade                	add	s5,s5,s7
    9fe0aec0:	9f3e                	add	t5,t5,a5
    9fe0aec2:	9ce2                	add	s9,s9,s8
    9fe0aec4:	9b62                	add	s6,s6,s8
    9fe0aec6:	f7be15e3          	bne	t3,s11,9fe0ae30 <dradfg+0x63e>
}
    9fe0aeca:	60ae                	ld	ra,200(sp)
    9fe0aecc:	640e                	ld	s0,192(sp)
    9fe0aece:	74ea                	ld	s1,184(sp)
    9fe0aed0:	794a                	ld	s2,176(sp)
    9fe0aed2:	79aa                	ld	s3,168(sp)
    9fe0aed4:	7a0a                	ld	s4,160(sp)
    9fe0aed6:	6aea                	ld	s5,152(sp)
    9fe0aed8:	6b4a                	ld	s6,144(sp)
    9fe0aeda:	6baa                	ld	s7,136(sp)
    9fe0aedc:	6c0a                	ld	s8,128(sp)
    9fe0aede:	7ce6                	ld	s9,120(sp)
    9fe0aee0:	7d46                	ld	s10,112(sp)
    9fe0aee2:	7da6                	ld	s11,104(sp)
    9fe0aee4:	2466                	fld	fs0,88(sp)
    9fe0aee6:	6169                	addi	sp,sp,208
    9fe0aee8:	8082                	ret
  for(k=0;k<l1;k++){
    9fe0aeea:	e6805ee3          	blez	s0,9fe0ad66 <dradfg+0x574>
    9fe0aeee:	67a6                	ld	a5,72(sp)
    9fe0aef0:	00249813          	slli	a6,s1,0x2
    9fe0aef4:	854a                	mv	a0,s2
    9fe0aef6:	02079713          	slli	a4,a5,0x20
    9fe0aefa:	01e75693          	srli	a3,a4,0x1e
    9fe0aefe:	7722                	ld	a4,40(sp)
    9fe0af00:	00490793          	addi	a5,s2,4
    9fe0af04:	85ea                	mv	a1,s10
    9fe0af06:	00271893          	slli	a7,a4,0x2
    9fe0af0a:	96be                	add	a3,a3,a5
    9fe0af0c:	4601                	li	a2,0
    for(i=0;i<ido;i++)cc[t4++]=ch[t3++];
    9fe0af0e:	872e                	mv	a4,a1
    9fe0af10:	87aa                	mv	a5,a0
    9fe0af12:	00905a63          	blez	s1,9fe0af26 <dradfg+0x734>
    9fe0af16:	0007a787          	flw	fa5,0(a5)
    9fe0af1a:	0791                	addi	a5,a5,4
    9fe0af1c:	0711                	addi	a4,a4,4
    9fe0af1e:	fef72e27          	fsw	fa5,-4(a4)
    9fe0af22:	fef69ae3          	bne	a3,a5,9fe0af16 <dradfg+0x724>
  for(k=0;k<l1;k++){
    9fe0af26:	2605                	addiw	a2,a2,1
    9fe0af28:	9542                	add	a0,a0,a6
    9fe0af2a:	95c6                	add	a1,a1,a7
    9fe0af2c:	96c2                	add	a3,a3,a6
    9fe0af2e:	fec410e3          	bne	s0,a2,9fe0af0e <dradfg+0x71c>
    9fe0af32:	bd15                	j	9fe0ad66 <dradfg+0x574>
  if(nbd>l1){
    9fe0af34:	77e2                	ld	a5,56(sp)
    9fe0af36:	b0f451e3          	bge	s0,a5,9fe0aa38 <dradfg+0x246>
    for(j=1;j<ipph;j++){
    9fe0af3a:	4785                	li	a5,1
    9fe0af3c:	1bc7d163          	bge	a5,t3,9fe0b0de <dradfg+0x8ec>
    9fe0af40:	5792                	lw	a5,36(sp)
    9fe0af42:	ffd48e9b          	addiw	t4,s1,-3
    9fe0af46:	001ede9b          	srliw	t4,t4,0x1
    9fe0af4a:	40f00dbb          	negw	s11,a5
    9fe0af4e:	77c2                	ld	a5,48(sp)
    9fe0af50:	c86e                	sw	s11,16(sp)
    9fe0af52:	0e86                	slli	t4,t4,0x1
    9fe0af54:	417782b3          	sub	t0,a5,s7
    9fe0af58:	0d8a                	slli	s11,s11,0x2
    9fe0af5a:	028a                	slli	t0,t0,0x2
    9fe0af5c:	00249793          	slli	a5,s1,0x2
    9fe0af60:	8c5e                	mv	s8,s7
    9fe0af62:	4385                	li	t2,1
        for(i=2;i<ido;i+=2){
    9fe0af64:	4f09                	li	t5,2
    9fe0af66:	008a0f93          	addi	t6,s4,8
      for(k=0;k<l1;k++){
    9fe0af6a:	8896                	mv	a7,t0
    9fe0af6c:	8862                	mv	a6,s8
    9fe0af6e:	4301                	li	t1,0
    9fe0af70:	06805c63          	blez	s0,9fe0afe8 <dradfg+0x7f6>
        for(i=2;i<ido;i+=2){
    9fe0af74:	069f5563          	bge	t5,s1,9fe0afde <dradfg+0x7ec>
    9fe0af78:	010e8533          	add	a0,t4,a6
    9fe0af7c:	00281613          	slli	a2,a6,0x2
    9fe0af80:	050a                	slli	a0,a0,0x2
    9fe0af82:	00c906b3          	add	a3,s2,a2
    9fe0af86:	01288733          	add	a4,a7,s2
    9fe0af8a:	9652                	add	a2,a2,s4
    9fe0af8c:	014885b3          	add	a1,a7,s4
    9fe0af90:	957e                	add	a0,a0,t6
          c1[t5-1]=ch[t5-1]+ch[t6-1];
    9fe0af92:	0046a787          	flw	fa5,4(a3)
    9fe0af96:	00472707          	flw	fa4,4(a4)
        for(i=2;i<ido;i+=2){
    9fe0af9a:	0621                	addi	a2,a2,8
    9fe0af9c:	06a1                	addi	a3,a3,8
          c1[t5-1]=ch[t5-1]+ch[t6-1];
    9fe0af9e:	00e7f7d3          	fadd.s	fa5,fa5,fa4
        for(i=2;i<ido;i+=2){
    9fe0afa2:	0721                	addi	a4,a4,8
    9fe0afa4:	05a1                	addi	a1,a1,8
          c1[t5-1]=ch[t5-1]+ch[t6-1];
    9fe0afa6:	fef62e27          	fsw	fa5,-4(a2)
          c1[t6-1]=ch[t5]-ch[t6];
    9fe0afaa:	00072707          	flw	fa4,0(a4)
    9fe0afae:	0006a787          	flw	fa5,0(a3)
    9fe0afb2:	08e7f7d3          	fsub.s	fa5,fa5,fa4
    9fe0afb6:	fef5ae27          	fsw	fa5,-4(a1)
          c1[t5]=ch[t5]+ch[t6];
    9fe0afba:	00072707          	flw	fa4,0(a4)
    9fe0afbe:	0006a787          	flw	fa5,0(a3)
    9fe0afc2:	00e7f7d3          	fadd.s	fa5,fa5,fa4
    9fe0afc6:	00f62027          	fsw	fa5,0(a2)
          c1[t6]=ch[t6-1]-ch[t5-1];
    9fe0afca:	ffc72787          	flw	fa5,-4(a4)
    9fe0afce:	ffc6a707          	flw	fa4,-4(a3)
    9fe0afd2:	08e7f7d3          	fsub.s	fa5,fa5,fa4
    9fe0afd6:	00f5a027          	fsw	fa5,0(a1)
        for(i=2;i<ido;i+=2){
    9fe0afda:	faa61ce3          	bne	a2,a0,9fe0af92 <dradfg+0x7a0>
      for(k=0;k<l1;k++){
    9fe0afde:	2305                	addiw	t1,t1,1
    9fe0afe0:	9826                	add	a6,a6,s1
    9fe0afe2:	98be                	add	a7,a7,a5
    9fe0afe4:	f86418e3          	bne	s0,t1,9fe0af74 <dradfg+0x782>
    for(j=1;j<ipph;j++){
    9fe0afe8:	2385                	addiw	t2,t2,1
    9fe0afea:	9c5e                	add	s8,s8,s7
    9fe0afec:	92ee                	add	t0,t0,s11
    9fe0afee:	f67e1ee3          	bne	t3,t2,9fe0af6a <dradfg+0x778>
    9fe0aff2:	be29                	j	9fe0ab0c <dradfg+0x31a>
  for(j=1;j<ipph;j++){
    9fe0aff4:	edc7dbe3          	bge	a5,t3,9fe0aeca <dradfg+0x6d8>
    9fe0aff8:	76c2                	ld	a3,48(sp)
    9fe0affa:	5792                	lw	a5,36(sp)
    9fe0affc:	001b9f13          	slli	t5,s7,0x1
    9fe0b000:	41768733          	sub	a4,a3,s7
    9fe0b004:	0709                	addi	a4,a4,2
    9fe0b006:	070a                	slli	a4,a4,0x2
    9fe0b008:	993a                	add	s2,s2,a4
    9fe0b00a:	7722                	ld	a4,40(sp)
    9fe0b00c:	40f00abb          	negw	s5,a5
    9fe0b010:	ffd4879b          	addiw	a5,s1,-3
    9fe0b014:	415b8b33          	sub	s6,s7,s5
    9fe0b018:	40df0f33          	sub	t5,t5,a3
    9fe0b01c:	9bf9                	andi	a5,a5,-2
    9fe0b01e:	5bf1                	li	s7,-4
    9fe0b020:	0b0a                	slli	s6,s6,0x2
    9fe0b022:	0f0a                	slli	t5,t5,0x2
    9fe0b024:	0a8a                	slli	s5,s5,0x2
    9fe0b026:	00249513          	slli	a0,s1,0x2
    9fe0b02a:	00271393          	slli	t2,a4,0x2
    9fe0b02e:	8a62                	mv	s4,s8
    9fe0b030:	4985                	li	s3,1
    for(i=2;i<ido;i+=2){
    9fe0b032:	4c89                	li	s9,2
    9fe0b034:	40fb8bbb          	subw	s7,s7,a5
    9fe0b038:	089cd563          	bge	s9,s1,9fe0b0c2 <dradfg+0x8d0>
    9fe0b03c:	005a0eb3          	add	t4,s4,t0
    9fe0b040:	ffe28813          	addi	a6,t0,-2
    9fe0b044:	0e86                	slli	t4,t4,0x1
    9fe0b046:	080a                	slli	a6,a6,0x2
    9fe0b048:	9eea                	add	t4,t4,s10
    9fe0b04a:	ffe2831b          	addiw	t1,t0,-2
    9fe0b04e:	986a                	add	a6,a6,s10
    9fe0b050:	005b8fbb          	addw	t6,s7,t0
    9fe0b054:	0e86                	slli	t4,t4,0x1
      t6=idp2+t1-i;
    9fe0b056:	88ca                	mv	a7,s2
      for(k=0;k<l1;k++){
    9fe0b058:	06805063          	blez	s0,9fe0b0b8 <dradfg+0x8c6>
    9fe0b05c:	011f0733          	add	a4,t5,a7
    9fe0b060:	410e8633          	sub	a2,t4,a6
    9fe0b064:	86c2                	mv	a3,a6
    9fe0b066:	87c6                	mv	a5,a7
    9fe0b068:	4581                	li	a1,0
        cc[t7-1]=ch[t8-1]+ch[t9-1];
    9fe0b06a:	ffc7a707          	flw	fa4,-4(a5)
    9fe0b06e:	ffc72787          	flw	fa5,-4(a4)
      for(k=0;k<l1;k++){
    9fe0b072:	2585                	addiw	a1,a1,1
        cc[t7-1]=ch[t8-1]+ch[t9-1];
    9fe0b074:	00e7f7d3          	fadd.s	fa5,fa5,fa4
    9fe0b078:	fef62e27          	fsw	fa5,-4(a2)
        cc[t6-1]=ch[t8-1]-ch[t9-1];
    9fe0b07c:	ffc7a707          	flw	fa4,-4(a5)
    9fe0b080:	ffc72787          	flw	fa5,-4(a4)
    9fe0b084:	08e7f7d3          	fsub.s	fa5,fa5,fa4
    9fe0b088:	fef6ae27          	fsw	fa5,-4(a3)
        cc[t7]=ch[t8]+ch[t9];
    9fe0b08c:	0007a707          	flw	fa4,0(a5)
    9fe0b090:	00072787          	flw	fa5,0(a4)
    9fe0b094:	00e7f7d3          	fadd.s	fa5,fa5,fa4
    9fe0b098:	00f62027          	fsw	fa5,0(a2)
        cc[t6]=ch[t9]-ch[t8];
    9fe0b09c:	0007a787          	flw	fa5,0(a5)
    9fe0b0a0:	00072707          	flw	fa4,0(a4)
      for(k=0;k<l1;k++){
    9fe0b0a4:	97aa                	add	a5,a5,a0
    9fe0b0a6:	972a                	add	a4,a4,a0
        cc[t6]=ch[t9]-ch[t8];
    9fe0b0a8:	08e7f7d3          	fsub.s	fa5,fa5,fa4
      for(k=0;k<l1;k++){
    9fe0b0ac:	961e                	add	a2,a2,t2
        cc[t6]=ch[t9]-ch[t8];
    9fe0b0ae:	00f6a027          	fsw	fa5,0(a3)
      for(k=0;k<l1;k++){
    9fe0b0b2:	969e                	add	a3,a3,t2
    9fe0b0b4:	fab41be3          	bne	s0,a1,9fe0b06a <dradfg+0x878>
    for(i=2;i<ido;i+=2){
    9fe0b0b8:	3379                	addiw	t1,t1,-2
    9fe0b0ba:	08a1                	addi	a7,a7,8
    9fe0b0bc:	1861                	addi	a6,a6,-8
    9fe0b0be:	f86f9de3          	bne	t6,t1,9fe0b058 <dradfg+0x866>
  for(j=1;j<ipph;j++){
    9fe0b0c2:	2985                	addiw	s3,s3,1
    9fe0b0c4:	9f5a                	add	t5,t5,s6
    9fe0b0c6:	005c02bb          	addw	t0,s8,t0
    9fe0b0ca:	9a62                	add	s4,s4,s8
    9fe0b0cc:	9956                	add	s2,s2,s5
    9fe0b0ce:	f73e15e3          	bne	t3,s3,9fe0b038 <dradfg+0x846>
    9fe0b0d2:	bbe5                	j	9fe0aeca <dradfg+0x6d8>
  t2=ipp2*idl1;
    9fe0b0d4:	033a8c3b          	mulw	s8,s5,s3
  for(ik=0;ik<idl1;ik++)c2[ik]=ch2[ik];
    9fe0b0d8:	a3304ee3          	bgtz	s3,9fe0ab14 <dradfg+0x322>
    9fe0b0dc:	bc81                	j	9fe0ab2c <dradfg+0x33a>
  t2=ipp2*idl1;
    9fe0b0de:	033a8c3b          	mulw	s8,s5,s3
  for(ik=0;ik<idl1;ik++)c2[ik]=ch2[ik];
    9fe0b0e2:	a33049e3          	bgtz	s3,9fe0ab14 <dradfg+0x322>
    9fe0b0e6:	b189                	j	9fe0ad28 <dradfg+0x536>

000000009fe0b0e8 <dradbg>:

static void dradbg(int ido,int ip,int l1,int idl1,float *cc,float *c1,
            float *c2,float *ch,float *ch2,float *wa){
    9fe0b0e8:	7115                	addi	sp,sp,-224
    9fe0b0ea:	b4a2                	fsd	fs0,104(sp)
  float dcp,arg,dsp,ar1h,ar2h;
  int ipp2;

  t10=ip*ido;
  t0=l1*ido;
  arg=tpi/(float)ip;
    9fe0b0ec:	d005f453          	fcvt.s.w	fs0,a1
            float *c2,float *ch,float *ch2,float *wa){
    9fe0b0f0:	e9a2                	sd	s0,208(sp)
  arg=tpi/(float)ip;
    9fe0b0f2:	00007417          	auipc	s0,0x7
    9fe0b0f6:	33242787          	flw	fa5,818(s0) # 9fe12424 <__func__.1+0x26c>
    9fe0b0fa:	1887f453          	fdiv.s	fs0,fa5,fs0
            float *c2,float *ch,float *ch2,float *wa){
    9fe0b0fe:	e566                	sd	s9,136(sp)
  t0=l1*ido;
    9fe0b100:	02c50cbb          	mulw	s9,a0,a2
            float *c2,float *ch,float *ch2,float *wa){
    9fe0b104:	ed86                	sd	ra,216(sp)
    9fe0b106:	e5a6                	sd	s1,200(sp)
    9fe0b108:	e1ca                	sd	s2,192(sp)
    9fe0b10a:	fd4e                	sd	s3,184(sp)
    9fe0b10c:	892a                	mv	s2,a0
    9fe0b10e:	89be                	mv	s3,a5
    9fe0b110:	f952                	sd	s4,176(sp)
    9fe0b112:	f556                	sd	s5,168(sp)
    9fe0b114:	f15a                	sd	s6,160(sp)
    9fe0b116:	8aba                	mv	s5,a4
    9fe0b118:	ed5e                	sd	s7,152(sp)
    9fe0b11a:	e962                	sd	s8,144(sp)
  t10=ip*ido;
    9fe0b11c:	02a58bbb          	mulw	s7,a1,a0
            float *c2,float *ch,float *ch2,float *wa){
    9fe0b120:	e16a                	sd	s10,128(sp)
    9fe0b122:	e42e                	sd	a1,8(sp)
    9fe0b124:	8d2e                	mv	s10,a1
    9fe0b126:	8432                	mv	s0,a2
  dcp=(float)cos(arg);
    9fe0b128:	42040453          	fcvt.d.s	fs0,fs0
            float *c2,float *ch,float *ch2,float *wa){
    9fe0b12c:	8a36                	mv	s4,a3
    9fe0b12e:	e8c2                	sd	a6,80(sp)
  dcp=(float)cos(arg);
    9fe0b130:	22840553          	fmv.d	fa0,fs0
            float *c2,float *ch,float *ch2,float *wa){
    9fe0b134:	84c6                	mv	s1,a7
    9fe0b136:	7c0e                	ld	s8,224(sp)
    9fe0b138:	fcee                	sd	s11,120(sp)
  dcp=(float)cos(arg);
    9fe0b13a:	f98f50ef          	jal	ra,9fe008d2 <cos>
    9fe0b13e:	22a507d3          	fmv.d	fa5,fa0
  dsp=(float)sin(arg);
    9fe0b142:	22840553          	fmv.d	fa0,fs0
  t0=l1*ido;
    9fe0b146:	8b66                	mv	s6,s9
  dcp=(float)cos(arg);
    9fe0b148:	4017f453          	fcvt.s.d	fs0,fa5
  dsp=(float)sin(arg);
    9fe0b14c:	a1bf50ef          	jal	ra,9fe00b66 <sin>
  nbd=(ido-1)>>1;
    9fe0b150:	fff9079b          	addiw	a5,s2,-1
    9fe0b154:	4017d71b          	sraiw	a4,a5,0x1
  ipp2=ip;
  ipph=(ip+1)>>1;
    9fe0b158:	001d0f1b          	addiw	t5,s10,1
  nbd=(ido-1)>>1;
    9fe0b15c:	fc3a                	sd	a4,56(sp)
  dsp=(float)sin(arg);
    9fe0b15e:	401575d3          	fcvt.s.d	fa1,fa0
  ipph=(ip+1)>>1;
    9fe0b162:	401f5f1b          	sraiw	t5,t5,0x1
  if(ido<l1)goto L103;
    9fe0b166:	52894663          	blt	s2,s0,9fe0b692 <dradbg+0x5aa>

  t1=0;
  t2=0;
  for(k=0;k<l1;k++){
    9fe0b16a:	04805263          	blez	s0,9fe0b1ae <dradbg+0xc6>
    9fe0b16e:	02079713          	slli	a4,a5,0x20
    9fe0b172:	01e75793          	srli	a5,a4,0x1e
    9fe0b176:	004a8693          	addi	a3,s5,4
    9fe0b17a:	002b9813          	slli	a6,s7,0x2
    9fe0b17e:	8556                	mv	a0,s5
    9fe0b180:	00291893          	slli	a7,s2,0x2
    9fe0b184:	85a6                	mv	a1,s1
    9fe0b186:	96be                	add	a3,a3,a5
    9fe0b188:	4601                	li	a2,0
    t3=t1;
    t4=t2;
    for(i=0;i<ido;i++){
    9fe0b18a:	872e                	mv	a4,a1
    9fe0b18c:	87aa                	mv	a5,a0
    9fe0b18e:	01205a63          	blez	s2,9fe0b1a2 <dradbg+0xba>
      ch[t3]=cc[t4];
    9fe0b192:	0007a787          	flw	fa5,0(a5)
    for(i=0;i<ido;i++){
    9fe0b196:	0791                	addi	a5,a5,4
    9fe0b198:	0711                	addi	a4,a4,4
      ch[t3]=cc[t4];
    9fe0b19a:	fef72e27          	fsw	fa5,-4(a4)
    for(i=0;i<ido;i++){
    9fe0b19e:	fed79ae3          	bne	a5,a3,9fe0b192 <dradbg+0xaa>
  for(k=0;k<l1;k++){
    9fe0b1a2:	2605                	addiw	a2,a2,1
    9fe0b1a4:	9542                	add	a0,a0,a6
    9fe0b1a6:	95c6                	add	a1,a1,a7
    9fe0b1a8:	96c2                	add	a3,a3,a6
    9fe0b1aa:	fec410e3          	bne	s0,a2,9fe0b18a <dradbg+0xa2>
    t1++;
  }

 L106:
  t1=0;
  t2=ipp2*t0;
    9fe0b1ae:	6722                	ld	a4,8(sp)
  t7=(t5=ido<<1);
  for(j=1;j<ipph;j++){
    9fe0b1b0:	4785                	li	a5,1
  t7=(t5=ido<<1);
    9fe0b1b2:	00191d9b          	slliw	s11,s2,0x1
  t2=ipp2*t0;
    9fe0b1b6:	02eb073b          	mulw	a4,s6,a4
    9fe0b1ba:	e83a                	sd	a4,16(sp)
  for(j=1;j<ipph;j++){
    9fe0b1bc:	53e7d063          	bge	a5,t5,9fe0b6dc <dradbg+0x5f4>
    9fe0b1c0:	419007b3          	neg	a5,s9
    9fe0b1c4:	41600fbb          	negw	t6,s6
    9fe0b1c8:	00279293          	slli	t0,a5,0x2
    9fe0b1cc:	ecbe                	sd	a5,88(sp)
    9fe0b1ce:	002d9b13          	slli	s6,s11,0x2
    9fe0b1d2:	419707b3          	sub	a5,a4,s9
    9fe0b1d6:	002c9d13          	slli	s10,s9,0x2
    9fe0b1da:	c2fe                	sw	t6,68(sp)
    9fe0b1dc:	e4be                	sd	a5,72(sp)
    9fe0b1de:	016a8eb3          	add	t4,s5,s6
    9fe0b1e2:	01a48e33          	add	t3,s1,s10
    9fe0b1e6:	0f8a                	slli	t6,t6,0x2
    9fe0b1e8:	00279893          	slli	a7,a5,0x2
    9fe0b1ec:	002b9513          	slli	a0,s7,0x2
    9fe0b1f0:	00291713          	slli	a4,s2,0x2
    9fe0b1f4:	8816                	mv	a6,t0
    9fe0b1f6:	4305                	li	t1,1
    t1+=t0;
    t2-=t0;
    t3=t1;
    t4=t2;
    t6=t5;
    for(k=0;k<l1;k++){
    9fe0b1f8:	86f2                	mv	a3,t3
    9fe0b1fa:	87f6                	mv	a5,t4
    9fe0b1fc:	4581                	li	a1,0
    9fe0b1fe:	02805663          	blez	s0,9fe0b22a <dradbg+0x142>
      ch[t3]=cc[t6-1]+cc[t6-1];
    9fe0b202:	ffc7a787          	flw	fa5,-4(a5)
      ch[t4]=cc[t6]+cc[t6];
    9fe0b206:	01068633          	add	a2,a3,a6
    9fe0b20a:	9646                	add	a2,a2,a7
      ch[t3]=cc[t6-1]+cc[t6-1];
    9fe0b20c:	00f7f7d3          	fadd.s	fa5,fa5,fa5
    for(k=0;k<l1;k++){
    9fe0b210:	2585                	addiw	a1,a1,1
      ch[t3]=cc[t6-1]+cc[t6-1];
    9fe0b212:	00f6a027          	fsw	fa5,0(a3)
      ch[t4]=cc[t6]+cc[t6];
    9fe0b216:	0007a787          	flw	fa5,0(a5)
    for(k=0;k<l1;k++){
    9fe0b21a:	96ba                	add	a3,a3,a4
    9fe0b21c:	97aa                	add	a5,a5,a0
      ch[t4]=cc[t6]+cc[t6];
    9fe0b21e:	00f7f7d3          	fadd.s	fa5,fa5,fa5
    9fe0b222:	00f62027          	fsw	fa5,0(a2)
    for(k=0;k<l1;k++){
    9fe0b226:	fcb41ee3          	bne	s0,a1,9fe0b202 <dradbg+0x11a>
  for(j=1;j<ipph;j++){
    9fe0b22a:	2305                	addiw	t1,t1,1
    9fe0b22c:	9eda                	add	t4,t4,s6
    9fe0b22e:	9e6a                	add	t3,t3,s10
    9fe0b230:	9816                	add	a6,a6,t0
    9fe0b232:	98fe                	add	a7,a7,t6
    9fe0b234:	fc6f12e3          	bne	t5,t1,9fe0b1f8 <dradbg+0x110>
      t6+=t10;
    }
    t5+=t7;
  }

  if (ido == 1)goto L116;
    9fe0b238:	4785                	li	a5,1
    9fe0b23a:	0af90d63          	beq	s2,a5,9fe0b2f4 <dradbg+0x20c>
  if(nbd<l1)goto L112;
    9fe0b23e:	77e2                	ld	a5,56(sp)
    9fe0b240:	5487d763          	bge	a5,s0,9fe0b78e <dradbg+0x6a6>
    9fe0b244:	ffd9079b          	addiw	a5,s2,-3
    9fe0b248:	9bf9                	andi	a5,a5,-2
  }
  goto L116;

 L112:
  t1=0;
  t2=ipp2*t0;
    9fe0b24a:	6b42                	ld	s6,16(sp)
    9fe0b24c:	2789                	addiw	a5,a5,2
  t7=0;
    9fe0b24e:	4281                	li	t0,0
  t1=0;
    9fe0b250:	4b81                	li	s7,0
  for(j=1;j<ipph;j++){
    9fe0b252:	4385                	li	t2,1
    9fe0b254:	cc3e                	sw	a5,24(sp)
    t3=t1;
    t4=t2;
    t7+=(ido<<1);
    t8=t7;
    t9=t7;
    for(i=2;i<ido;i+=2){
    9fe0b256:	4789                	li	a5,2
    t1+=t0;
    9fe0b258:	017c8bbb          	addw	s7,s9,s7
    t2-=t0;
    9fe0b25c:	419b0b3b          	subw	s6,s6,s9
    t7+=(ido<<1);
    9fe0b260:	005d82bb          	addw	t0,s11,t0
    for(i=2;i<ido;i+=2){
    9fe0b264:	0927d563          	bge	a5,s2,9fe0b2ee <dradbg+0x206>
    9fe0b268:	47e2                	lw	a5,24(sp)
    t9=t7;
    9fe0b26a:	8e96                	mv	t4,t0
    t8=t7;
    9fe0b26c:	8e16                	mv	t3,t0
    9fe0b26e:	01778fbb          	addw	t6,a5,s7
    t4=t2;
    9fe0b272:	835a                	mv	t1,s6
    t3=t1;
    9fe0b274:	88de                	mv	a7,s7
      t3+=2;
    9fe0b276:	2889                	addiw	a7,a7,2
      t4+=2;
    9fe0b278:	2309                	addiw	t1,t1,2
      t8+=2;
    9fe0b27a:	2e09                	addiw	t3,t3,2
      t9-=2;
    9fe0b27c:	3ef9                	addiw	t4,t4,-2
      t5=t3;
      t6=t4;
      t11=t8;
      t12=t9;
      for(k=0;k<l1;k++){
    9fe0b27e:	06805663          	blez	s0,9fe0b2ea <dradbg+0x202>
    9fe0b282:	002e1693          	slli	a3,t3,0x2
    9fe0b286:	002e9793          	slli	a5,t4,0x2
    9fe0b28a:	00289593          	slli	a1,a7,0x2
    9fe0b28e:	00231613          	slli	a2,t1,0x2
    9fe0b292:	96d6                	add	a3,a3,s5
    9fe0b294:	97d6                	add	a5,a5,s5
    9fe0b296:	95a6                	add	a1,a1,s1
    9fe0b298:	9626                	add	a2,a2,s1
    9fe0b29a:	4801                	li	a6,0
        ch[t5-1]=cc[t11-1]+cc[t12-1];
    9fe0b29c:	ffc7a707          	flw	fa4,-4(a5)
    9fe0b2a0:	ffc6a787          	flw	fa5,-4(a3)
      for(k=0;k<l1;k++){
    9fe0b2a4:	2805                	addiw	a6,a6,1
        ch[t5-1]=cc[t11-1]+cc[t12-1];
    9fe0b2a6:	00e7f7d3          	fadd.s	fa5,fa5,fa4
    9fe0b2aa:	fef5ae27          	fsw	fa5,-4(a1)
        ch[t6-1]=cc[t11-1]-cc[t12-1];
    9fe0b2ae:	ffc7a707          	flw	fa4,-4(a5)
    9fe0b2b2:	ffc6a787          	flw	fa5,-4(a3)
    9fe0b2b6:	08e7f7d3          	fsub.s	fa5,fa5,fa4
    9fe0b2ba:	fef62e27          	fsw	fa5,-4(a2)
        ch[t5]=cc[t11]-cc[t12];
    9fe0b2be:	0007a707          	flw	fa4,0(a5)
    9fe0b2c2:	0006a787          	flw	fa5,0(a3)
    9fe0b2c6:	08e7f7d3          	fsub.s	fa5,fa5,fa4
    9fe0b2ca:	00f5a027          	fsw	fa5,0(a1)
        ch[t6]=cc[t11]+cc[t12];
    9fe0b2ce:	0006a787          	flw	fa5,0(a3)
    9fe0b2d2:	0007a707          	flw	fa4,0(a5)
      for(k=0;k<l1;k++){
    9fe0b2d6:	96aa                	add	a3,a3,a0
    9fe0b2d8:	97aa                	add	a5,a5,a0
        ch[t6]=cc[t11]+cc[t12];
    9fe0b2da:	00e7f7d3          	fadd.s	fa5,fa5,fa4
      for(k=0;k<l1;k++){
    9fe0b2de:	95ba                	add	a1,a1,a4
        ch[t6]=cc[t11]+cc[t12];
    9fe0b2e0:	00f62027          	fsw	fa5,0(a2)
      for(k=0;k<l1;k++){
    9fe0b2e4:	963a                	add	a2,a2,a4
    9fe0b2e6:	fb041be3          	bne	s0,a6,9fe0b29c <dradbg+0x1b4>
    for(i=2;i<ido;i+=2){
    9fe0b2ea:	f9f896e3          	bne	a7,t6,9fe0b276 <dradbg+0x18e>
  for(j=1;j<ipph;j++){
    9fe0b2ee:	2385                	addiw	t2,t2,1
    9fe0b2f0:	f67f13e3          	bne	t5,t2,9fe0b256 <dradbg+0x16e>
  ar1=1.f;
  ai1=0.f;
  t1=0;
  t9=(t2=ipp2*idl1);
  t3=(ip-1)*idl1;
  for(l=1;l<ipph;l++){
    9fe0b2f4:	67a2                	ld	a5,8(sp)
    9fe0b2f6:	fffa061b          	addiw	a2,s4,-1
    9fe0b2fa:	1602                	slli	a2,a2,0x20
    9fe0b2fc:	0347853b          	mulw	a0,a5,s4
    9fe0b300:	9201                	srli	a2,a2,0x20
    9fe0b302:	001a169b          	slliw	a3,s4,0x1
    9fe0b306:	00c688b3          	add	a7,a3,a2
    9fe0b30a:	6fc6                	ld	t6,80(sp)
    9fe0b30c:	40d006b3          	neg	a3,a3
    9fe0b310:	004c0793          	addi	a5,s8,4 # 8004 <_EL1_STACK_SIZE+0x7804>
    9fe0b314:	00261e93          	slli	t4,a2,0x2
    9fe0b318:	068a                	slli	a3,a3,0x2
    9fe0b31a:	4140083b          	negw	a6,s4
    9fe0b31e:	41450533          	sub	a0,a0,s4
    9fe0b322:	00251b13          	slli	s6,a0,0x2
    9fe0b326:	088a                	slli	a7,a7,0x2
    9fe0b328:	41450533          	sub	a0,a0,s4
  t9=(t2=ipp2*idl1);
    9fe0b32c:	f0000053          	fmv.w.x	ft0,zero
    9fe0b330:	080a                	slli	a6,a6,0x2
    9fe0b332:	002a1e13          	slli	t3,s4,0x2
    9fe0b336:	414005b3          	neg	a1,s4
    9fe0b33a:	fff64613          	not	a2,a2
    9fe0b33e:	9ebe                	add	t4,t4,a5
    9fe0b340:	f836                	sd	a3,48(sp)
    9fe0b342:	97c6                	add	a5,a5,a7
    9fe0b344:	00251693          	slli	a3,a0,0x2
    9fe0b348:	01cf82b3          	add	t0,t6,t3
    9fe0b34c:	f03e                	sd	a5,32(sp)
    9fe0b34e:	f442                	sd	a6,40(sp)
    9fe0b350:	9fda                	add	t6,t6,s6
    9fe0b352:	00259a93          	slli	s5,a1,0x2
    9fe0b356:	83c2                	mv	t2,a6
    9fe0b358:	ec36                	sd	a3,24(sp)
    9fe0b35a:	00007797          	auipc	a5,0x7
    9fe0b35e:	eb67a507          	flw	fa0,-330(a5) # 9fe12210 <__func__.1+0x58>
    9fe0b362:	4d85                	li	s11,1
    9fe0b364:	00261b93          	slli	s7,a2,0x2
    t1+=idl1;
    t2-=idl1;

    ar1h=dcp*ar1-dsp*ai1;
    9fe0b368:	1005f753          	fmul.s	fa4,fa1,ft0
    ai1=dcp*ai1+dsp*ar1;
    9fe0b36c:	10a5f7d3          	fmul.s	fa5,fa1,fa0
    t4=t1;
    t5=t2;
    t6=0;
    t7=idl1;
    t8=t3;
    for(ik=0;ik<idl1;ik++){
    9fe0b370:	867e                	mv	a2,t6
    9fe0b372:	8696                	mv	a3,t0
    9fe0b374:	87e2                	mv	a5,s8
    ar1h=dcp*ar1-dsp*ai1;
    9fe0b376:	70a47547          	fmsub.s	fa0,fs0,fa0,fa4
    ai1=dcp*ai1+dsp*ar1;
    9fe0b37a:	78047043          	fmadd.s	ft0,fs0,ft0,fa5
    for(ik=0;ik<idl1;ik++){
    9fe0b37e:	03405963          	blez	s4,9fe0b3b0 <dradbg+0x2c8>
      c2[t4++]=ch2[t6++]+ar1*ch2[t7++];
    9fe0b382:	01c785b3          	add	a1,a5,t3
    9fe0b386:	0007a707          	flw	fa4,0(a5)
    9fe0b38a:	0005a787          	flw	fa5,0(a1)
    for(ik=0;ik<idl1;ik++){
    9fe0b38e:	0691                	addi	a3,a3,4
      c2[t5++]=ai1*ch2[t8++];
    9fe0b390:	016785b3          	add	a1,a5,s6
      c2[t4++]=ch2[t6++]+ar1*ch2[t7++];
    9fe0b394:	70a7f7c3          	fmadd.s	fa5,fa5,fa0,fa4
    for(ik=0;ik<idl1;ik++){
    9fe0b398:	0611                	addi	a2,a2,4
    9fe0b39a:	0791                	addi	a5,a5,4
      c2[t4++]=ch2[t6++]+ar1*ch2[t7++];
    9fe0b39c:	fef6ae27          	fsw	fa5,-4(a3)
      c2[t5++]=ai1*ch2[t8++];
    9fe0b3a0:	0005a787          	flw	fa5,0(a1)
    9fe0b3a4:	1007f7d3          	fmul.s	fa5,fa5,ft0
    9fe0b3a8:	fef62e27          	fsw	fa5,-4(a2)
    for(ik=0;ik<idl1;ik++){
    9fe0b3ac:	fdd79be3          	bne	a5,t4,9fe0b382 <dradbg+0x29a>
    ar2=ar1;
    ai2=ai1;

    t6=idl1;
    t7=t9-idl1;
    for(j=2;j<ipph;j++){
    9fe0b3b0:	4789                	li	a5,2
    9fe0b3b2:	07e7dc63          	bge	a5,t5,9fe0b42a <dradbg+0x342>
    ar2=ar1;
    9fe0b3b6:	20a50653          	fmv.s	fa2,fa0
    ai2=ai1;
    9fe0b3ba:	200006d3          	fmv.s	fa3,ft0
    for(j=2;j<ipph;j++){
    9fe0b3be:	7502                	ld	a0,32(sp)
    9fe0b3c0:	68e2                	ld	a7,24(sp)
    9fe0b3c2:	7842                	ld	a6,48(sp)
    9fe0b3c4:	4309                	li	t1,2
      t6+=idl1;
      t7-=idl1;
      ar2h=dc2*ar2-ds2*ai2;
    9fe0b3c6:	10d07753          	fmul.s	fa4,ft0,fa3
      ai2=dc2*ai2+ds2*ar2;
    9fe0b3ca:	10c077d3          	fmul.s	fa5,ft0,fa2
    9fe0b3ce:	00ab87b3          	add	a5,s7,a0
      ar2=ar2h;
      t4=t1;
      t5=t2;
      t11=t6;
      t12=t7;
      for(ik=0;ik<idl1;ik++){
    9fe0b3d2:	867e                	mv	a2,t6
    9fe0b3d4:	8696                	mv	a3,t0
      ar2h=dc2*ar2-ds2*ai2;
    9fe0b3d6:	70c57647          	fmsub.s	fa2,fa0,fa2,fa4
      ai2=dc2*ai2+ds2*ar2;
    9fe0b3da:	78d576c3          	fmadd.s	fa3,fa0,fa3,fa5
      for(ik=0;ik<idl1;ik++){
    9fe0b3de:	03405a63          	blez	s4,9fe0b412 <dradbg+0x32a>
        c2[t4++]+=ar2*ch2[t11++];
    9fe0b3e2:	0006a707          	flw	fa4,0(a3)
    9fe0b3e6:	0007a787          	flw	fa5,0(a5)
        c2[t5++]+=ai2*ch2[t12++];
    9fe0b3ea:	010785b3          	add	a1,a5,a6
      for(ik=0;ik<idl1;ik++){
    9fe0b3ee:	0691                	addi	a3,a3,4
        c2[t4++]+=ar2*ch2[t11++];
    9fe0b3f0:	70c7f7c3          	fmadd.s	fa5,fa5,fa2,fa4
      for(ik=0;ik<idl1;ik++){
    9fe0b3f4:	0611                	addi	a2,a2,4
        c2[t5++]+=ai2*ch2[t12++];
    9fe0b3f6:	95c6                	add	a1,a1,a7
      for(ik=0;ik<idl1;ik++){
    9fe0b3f8:	0791                	addi	a5,a5,4
        c2[t4++]+=ar2*ch2[t11++];
    9fe0b3fa:	fef6ae27          	fsw	fa5,-4(a3)
        c2[t5++]+=ai2*ch2[t12++];
    9fe0b3fe:	ffc62707          	flw	fa4,-4(a2)
    9fe0b402:	0005a787          	flw	fa5,0(a1)
    9fe0b406:	70d7f7c3          	fmadd.s	fa5,fa5,fa3,fa4
    9fe0b40a:	fef62e27          	fsw	fa5,-4(a2)
      for(ik=0;ik<idl1;ik++){
    9fe0b40e:	fca79ae3          	bne	a5,a0,9fe0b3e2 <dradbg+0x2fa>
    for(j=2;j<ipph;j++){
    9fe0b412:	2305                	addiw	t1,t1,1
    9fe0b414:	9856                	add	a6,a6,s5
    9fe0b416:	989e                	add	a7,a7,t2
    9fe0b418:	9572                	add	a0,a0,t3
    9fe0b41a:	fa6f16e3          	bne	t5,t1,9fe0b3c6 <dradbg+0x2de>
  for(l=1;l<ipph;l++){
    9fe0b41e:	77a2                	ld	a5,40(sp)
    9fe0b420:	2d85                	addiw	s11,s11,1
    9fe0b422:	92f2                	add	t0,t0,t3
    9fe0b424:	9fbe                	add	t6,t6,a5
    9fe0b426:	f5edc1e3          	blt	s11,t5,9fe0b368 <dradbg+0x280>
      for(ik=0;ik<idl1;ik++){
    9fe0b42a:	8672                	mv	a2,t3
    9fe0b42c:	4585                	li	a1,1

  t1=0;
  for(j=1;j<ipph;j++){
    t1+=idl1;
    t2=t1;
    for(ik=0;ik<idl1;ik++)ch2[ik]+=ch2[t2++];
    9fe0b42e:	87e2                	mv	a5,s8
    9fe0b430:	01405f63          	blez	s4,9fe0b44e <dradbg+0x366>
    9fe0b434:	00c786b3          	add	a3,a5,a2
    9fe0b438:	0007a787          	flw	fa5,0(a5)
    9fe0b43c:	0006a707          	flw	fa4,0(a3)
    9fe0b440:	0791                	addi	a5,a5,4
    9fe0b442:	00e7f7d3          	fadd.s	fa5,fa5,fa4
    9fe0b446:	fef7ae27          	fsw	fa5,-4(a5)
    9fe0b44a:	ffd795e3          	bne	a5,t4,9fe0b434 <dradbg+0x34c>
  for(j=1;j<ipph;j++){
    9fe0b44e:	2585                	addiw	a1,a1,1
    9fe0b450:	9672                	add	a2,a2,t3
    9fe0b452:	fde5cee3          	blt	a1,t5,9fe0b42e <dradbg+0x346>
    9fe0b456:	67e6                	ld	a5,88(sp)
    9fe0b458:	4f96                	lw	t6,68(sp)
    9fe0b45a:	01a98eb3          	add	t4,s3,s10
    9fe0b45e:	00279293          	slli	t0,a5,0x2
    9fe0b462:	67a6                	ld	a5,72(sp)
    9fe0b464:	01a48e33          	add	t3,s1,s10
    9fe0b468:	0f8a                	slli	t6,t6,0x2
    9fe0b46a:	00279813          	slli	a6,a5,0x2
    9fe0b46e:	8896                	mv	a7,t0
    9fe0b470:	4305                	li	t1,1
  for(j=1;j<ipph;j++){
    t1+=t0;
    t2-=t0;
    t3=t1;
    t4=t2;
    for(k=0;k<l1;k++){
    9fe0b472:	04805063          	blez	s0,9fe0b4b2 <dradbg+0x3ca>
    9fe0b476:	01098633          	add	a2,s3,a6
    9fe0b47a:	86f2                	mv	a3,t3
    9fe0b47c:	87f6                	mv	a5,t4
    9fe0b47e:	4501                	li	a0,0
      ch[t3]=c1[t3]-c1[t4];
    9fe0b480:	00062707          	flw	fa4,0(a2)
    9fe0b484:	0007a787          	flw	fa5,0(a5)
      ch[t4]=c1[t3]+c1[t4];
    9fe0b488:	00d885b3          	add	a1,a7,a3
    9fe0b48c:	95c2                	add	a1,a1,a6
      ch[t3]=c1[t3]-c1[t4];
    9fe0b48e:	08e7f7d3          	fsub.s	fa5,fa5,fa4
    for(k=0;k<l1;k++){
    9fe0b492:	2505                	addiw	a0,a0,1
      ch[t3]=c1[t3]-c1[t4];
    9fe0b494:	00f6a027          	fsw	fa5,0(a3)
      ch[t4]=c1[t3]+c1[t4];
    9fe0b498:	0007a787          	flw	fa5,0(a5)
    9fe0b49c:	00062707          	flw	fa4,0(a2)
    for(k=0;k<l1;k++){
    9fe0b4a0:	97ba                	add	a5,a5,a4
    9fe0b4a2:	963a                	add	a2,a2,a4
      ch[t4]=c1[t3]+c1[t4];
    9fe0b4a4:	00e7f7d3          	fadd.s	fa5,fa5,fa4
    for(k=0;k<l1;k++){
    9fe0b4a8:	96ba                	add	a3,a3,a4
      ch[t4]=c1[t3]+c1[t4];
    9fe0b4aa:	00f5a027          	fsw	fa5,0(a1)
    for(k=0;k<l1;k++){
    9fe0b4ae:	fca419e3          	bne	s0,a0,9fe0b480 <dradbg+0x398>
  for(j=1;j<ipph;j++){
    9fe0b4b2:	2305                	addiw	t1,t1,1
    9fe0b4b4:	9eea                	add	t4,t4,s10
    9fe0b4b6:	9e6a                	add	t3,t3,s10
    9fe0b4b8:	9896                	add	a7,a7,t0
    9fe0b4ba:	987e                	add	a6,a6,t6
    9fe0b4bc:	fbe34be3          	blt	t1,t5,9fe0b472 <dradbg+0x38a>
      t3+=ido;
      t4+=ido;
    }
  }

  if(ido==1)goto L132;
    9fe0b4c0:	4785                	li	a5,1
    9fe0b4c2:	1af90863          	beq	s2,a5,9fe0b672 <dradbg+0x58a>
  if(nbd<l1)goto L128;
    9fe0b4c6:	76e2                	ld	a3,56(sp)
    9fe0b4c8:	2086dd63          	bge	a3,s0,9fe0b6e2 <dradbg+0x5fa>
  goto L132;

 L128:
  t1=0;
  t2=ipp2*t0;
  for(j=1;j<ipph;j++){
    9fe0b4cc:	4e05                	li	t3,1
  t1=0;
    9fe0b4ce:	4e81                	li	t4,0
  for(j=1;j<ipph;j++){
    9fe0b4d0:	09ee5f63          	bge	t3,t5,9fe0b56e <dradbg+0x486>
    9fe0b4d4:	ffd90f9b          	addiw	t6,s2,-3
    9fe0b4d8:	ffefff93          	andi	t6,t6,-2
    t1+=t0;
    t2-=t0;
    t3=t1;
    t4=t2;
    for(i=2;i<ido;i+=2){
    9fe0b4dc:	4289                	li	t0,2
    9fe0b4de:	2f89                	addiw	t6,t6,2
    t2-=t0;
    9fe0b4e0:	67c2                	ld	a5,16(sp)
    t1+=t0;
    9fe0b4e2:	01dc8ebb          	addw	t4,s9,t4
    t2-=t0;
    9fe0b4e6:	419787bb          	subw	a5,a5,s9
    9fe0b4ea:	e83e                	sd	a5,16(sp)
    for(i=2;i<ido;i+=2){
    9fe0b4ec:	0722de63          	bge	t0,s2,9fe0b568 <dradbg+0x480>
    t4=t2;
    9fe0b4f0:	68c2                	ld	a7,16(sp)
    9fe0b4f2:	01df833b          	addw	t1,t6,t4
    t3=t1;
    9fe0b4f6:	8876                	mv	a6,t4
      t3+=2;
    9fe0b4f8:	2809                	addiw	a6,a6,2
      t4+=2;
    9fe0b4fa:	2889                	addiw	a7,a7,2
      t5=t3;
      t6=t4;
      for(k=0;k<l1;k++){
    9fe0b4fc:	06805463          	blez	s0,9fe0b564 <dradbg+0x47c>
    9fe0b500:	00281593          	slli	a1,a6,0x2
    9fe0b504:	00289613          	slli	a2,a7,0x2
    9fe0b508:	00b986b3          	add	a3,s3,a1
    9fe0b50c:	00c987b3          	add	a5,s3,a2
    9fe0b510:	95a6                	add	a1,a1,s1
    9fe0b512:	9626                	add	a2,a2,s1
    9fe0b514:	4501                	li	a0,0
        ch[t5-1]=c1[t5-1]-c1[t6];
    9fe0b516:	0007a707          	flw	fa4,0(a5)
    9fe0b51a:	ffc6a787          	flw	fa5,-4(a3)
      for(k=0;k<l1;k++){
    9fe0b51e:	2505                	addiw	a0,a0,1
        ch[t5-1]=c1[t5-1]-c1[t6];
    9fe0b520:	08e7f7d3          	fsub.s	fa5,fa5,fa4
    9fe0b524:	fef5ae27          	fsw	fa5,-4(a1)
        ch[t6-1]=c1[t5-1]+c1[t6];
    9fe0b528:	0007a707          	flw	fa4,0(a5)
    9fe0b52c:	ffc6a787          	flw	fa5,-4(a3)
    9fe0b530:	00e7f7d3          	fadd.s	fa5,fa5,fa4
    9fe0b534:	fef62e27          	fsw	fa5,-4(a2)
        ch[t5]=c1[t5]+c1[t6-1];
    9fe0b538:	ffc7a707          	flw	fa4,-4(a5)
    9fe0b53c:	0006a787          	flw	fa5,0(a3)
    9fe0b540:	00e7f7d3          	fadd.s	fa5,fa5,fa4
    9fe0b544:	00f5a027          	fsw	fa5,0(a1)
        ch[t6]=c1[t5]-c1[t6-1];
    9fe0b548:	0006a787          	flw	fa5,0(a3)
    9fe0b54c:	ffc7a707          	flw	fa4,-4(a5)
      for(k=0;k<l1;k++){
    9fe0b550:	96ba                	add	a3,a3,a4
    9fe0b552:	97ba                	add	a5,a5,a4
        ch[t6]=c1[t5]-c1[t6-1];
    9fe0b554:	08e7f7d3          	fsub.s	fa5,fa5,fa4
      for(k=0;k<l1;k++){
    9fe0b558:	95ba                	add	a1,a1,a4
        ch[t6]=c1[t5]-c1[t6-1];
    9fe0b55a:	00f62027          	fsw	fa5,0(a2)
      for(k=0;k<l1;k++){
    9fe0b55e:	963a                	add	a2,a2,a4
    9fe0b560:	faa41be3          	bne	s0,a0,9fe0b516 <dradbg+0x42e>
    for(i=2;i<ido;i+=2){
    9fe0b564:	f9031ae3          	bne	t1,a6,9fe0b4f8 <dradbg+0x410>
  for(j=1;j<ipph;j++){
    9fe0b568:	2e05                	addiw	t3,t3,1
    9fe0b56a:	f7cf1be3          	bne	t5,t3,9fe0b4e0 <dradbg+0x3f8>
  }

L132:
  if(ido==1)return;

  for(ik=0;ik<idl1;ik++)c2[ik]=ch2[ik];
    9fe0b56e:	03405463          	blez	s4,9fe0b596 <dradbg+0x4ae>
    9fe0b572:	fffa071b          	addiw	a4,s4,-1
    9fe0b576:	02071793          	slli	a5,a4,0x20
    9fe0b57a:	01e7d713          	srli	a4,a5,0x1e
    9fe0b57e:	67c6                	ld	a5,80(sp)
    9fe0b580:	004c0693          	addi	a3,s8,4
    9fe0b584:	9736                	add	a4,a4,a3
    9fe0b586:	000c2787          	flw	fa5,0(s8)
    9fe0b58a:	0c11                	addi	s8,s8,4
    9fe0b58c:	0791                	addi	a5,a5,4
    9fe0b58e:	fef7ae27          	fsw	fa5,-4(a5)
    9fe0b592:	ff871ae3          	bne	a4,s8,9fe0b586 <dradbg+0x49e>

  t1=0;
  for(j=1;j<ip;j++){
    9fe0b596:	6722                	ld	a4,8(sp)
    9fe0b598:	4785                	li	a5,1
    9fe0b59a:	0ce7dc63          	bge	a5,a4,9fe0b672 <dradbg+0x58a>
    9fe0b59e:	002c9513          	slli	a0,s9,0x2
    9fe0b5a2:	00a48333          	add	t1,s1,a0
    9fe0b5a6:	00a988b3          	add	a7,s3,a0
    9fe0b5aa:	00291713          	slli	a4,s2,0x2
    9fe0b5ae:	8e46                	mv	t3,a7
    9fe0b5b0:	859a                	mv	a1,t1
    9fe0b5b2:	4805                	li	a6,1
    t2=(t1+=t0);
    for(k=0;k<l1;k++){
    9fe0b5b4:	8672                	mv	a2,t3
    9fe0b5b6:	86ae                	mv	a3,a1
    9fe0b5b8:	4781                	li	a5,0
    9fe0b5ba:	00805b63          	blez	s0,9fe0b5d0 <dradbg+0x4e8>
      c1[t2]=ch[t2];
    9fe0b5be:	0006a787          	flw	fa5,0(a3)
    for(k=0;k<l1;k++){
    9fe0b5c2:	2785                	addiw	a5,a5,1
    9fe0b5c4:	96ba                	add	a3,a3,a4
      c1[t2]=ch[t2];
    9fe0b5c6:	00f62027          	fsw	fa5,0(a2)
    for(k=0;k<l1;k++){
    9fe0b5ca:	963a                	add	a2,a2,a4
    9fe0b5cc:	fef419e3          	bne	s0,a5,9fe0b5be <dradbg+0x4d6>
  for(j=1;j<ip;j++){
    9fe0b5d0:	66a2                	ld	a3,8(sp)
    9fe0b5d2:	0018079b          	addiw	a5,a6,1
    9fe0b5d6:	95aa                	add	a1,a1,a0
    9fe0b5d8:	9e2a                	add	t3,t3,a0
    9fe0b5da:	00f68463          	beq	a3,a5,9fe0b5e2 <dradbg+0x4fa>
    9fe0b5de:	883e                	mv	a6,a5
    9fe0b5e0:	bfd1                	j	9fe0b5b4 <dradbg+0x4cc>
      t2+=ido;
    }
  }

  if(nbd>l1)goto L139;
    9fe0b5e2:	77e2                	ld	a5,56(sp)
    9fe0b5e4:	26f44563          	blt	s0,a5,9fe0b84e <dradbg+0x766>

  is= -ido-1;
  t1=0;
  for(j=1;j<ip;j++){
    9fe0b5e8:	77ae                	ld	a5,232(sp)
    9fe0b5ea:	ffd90e9b          	addiw	t4,s2,-3
    9fe0b5ee:	ffeefe93          	andi	t4,t4,-2
    9fe0b5f2:	ffc78e13          	addi	t3,a5,-4
  t1=0;
    9fe0b5f6:	4301                	li	t1,0
  for(j=1;j<ip;j++){
    9fe0b5f8:	4885                	li	a7,1
    is+=ido;
    t1+=t0;
    idij=is;
    t2=t1;
    for(i=2;i<ido;i+=2){
    9fe0b5fa:	4f09                	li	t5,2
    9fe0b5fc:	2e89                	addiw	t4,t4,2
    t1+=t0;
    9fe0b5fe:	006c833b          	addw	t1,s9,t1
    for(i=2;i<ido;i+=2){
    9fe0b602:	072f5363          	bge	t5,s2,9fe0b668 <dradbg+0x580>
    9fe0b606:	006e883b          	addw	a6,t4,t1
    9fe0b60a:	8672                	mv	a2,t3
    t2=t1;
    9fe0b60c:	851a                	mv	a0,t1
      t2+=2;
    9fe0b60e:	2509                	addiw	a0,a0,2
      idij+=2;
      t3=t2;
      for(k=0;k<l1;k++){
    9fe0b610:	04805963          	blez	s0,9fe0b662 <dradbg+0x57a>
    9fe0b614:	00251693          	slli	a3,a0,0x2
    9fe0b618:	00d487b3          	add	a5,s1,a3
    9fe0b61c:	4581                	li	a1,0
    9fe0b61e:	96ce                	add	a3,a3,s3
        c1[t3-1]=wa[idij-1]*ch[t3-1]-wa[idij]*ch[t3];
    9fe0b620:	0007a607          	flw	fa2,0(a5)
    9fe0b624:	00862707          	flw	fa4,8(a2)
    9fe0b628:	ffc7a687          	flw	fa3,-4(a5)
    9fe0b62c:	00462787          	flw	fa5,4(a2)
    9fe0b630:	10c77753          	fmul.s	fa4,fa4,fa2
      for(k=0;k<l1;k++){
    9fe0b634:	2585                	addiw	a1,a1,1
        c1[t3-1]=wa[idij-1]*ch[t3-1]-wa[idij]*ch[t3];
    9fe0b636:	70d7f7c7          	fmsub.s	fa5,fa5,fa3,fa4
    9fe0b63a:	fef6ae27          	fsw	fa5,-4(a3)
        c1[t3]=wa[idij-1]*ch[t3]+wa[idij]*ch[t3-1];
    9fe0b63e:	ffc7a607          	flw	fa2,-4(a5)
    9fe0b642:	00862707          	flw	fa4,8(a2)
    9fe0b646:	0007a687          	flw	fa3,0(a5)
    9fe0b64a:	00462787          	flw	fa5,4(a2)
    9fe0b64e:	10c77753          	fmul.s	fa4,fa4,fa2
      for(k=0;k<l1;k++){
    9fe0b652:	97ba                	add	a5,a5,a4
        c1[t3]=wa[idij-1]*ch[t3]+wa[idij]*ch[t3-1];
    9fe0b654:	70d7f7c3          	fmadd.s	fa5,fa5,fa3,fa4
    9fe0b658:	00f6a027          	fsw	fa5,0(a3)
      for(k=0;k<l1;k++){
    9fe0b65c:	96ba                	add	a3,a3,a4
    9fe0b65e:	fcb411e3          	bne	s0,a1,9fe0b620 <dradbg+0x538>
    for(i=2;i<ido;i+=2){
    9fe0b662:	0621                	addi	a2,a2,8
    9fe0b664:	fb0515e3          	bne	a0,a6,9fe0b60e <dradbg+0x526>
  for(j=1;j<ip;j++){
    9fe0b668:	67a2                	ld	a5,8(sp)
    9fe0b66a:	2885                	addiw	a7,a7,1
    9fe0b66c:	9e3a                	add	t3,t3,a4
    9fe0b66e:	f91798e3          	bne	a5,a7,9fe0b5fe <dradbg+0x516>
        c1[t3]=wa[idij-1]*ch[t3]+wa[idij]*ch[t3-1];
      }
      t2+=ido;
    }
  }
}
    9fe0b672:	60ee                	ld	ra,216(sp)
    9fe0b674:	644e                	ld	s0,208(sp)
    9fe0b676:	64ae                	ld	s1,200(sp)
    9fe0b678:	690e                	ld	s2,192(sp)
    9fe0b67a:	79ea                	ld	s3,184(sp)
    9fe0b67c:	7a4a                	ld	s4,176(sp)
    9fe0b67e:	7aaa                	ld	s5,168(sp)
    9fe0b680:	7b0a                	ld	s6,160(sp)
    9fe0b682:	6bea                	ld	s7,152(sp)
    9fe0b684:	6c4a                	ld	s8,144(sp)
    9fe0b686:	6caa                	ld	s9,136(sp)
    9fe0b688:	6d0a                	ld	s10,128(sp)
    9fe0b68a:	7de6                	ld	s11,120(sp)
    9fe0b68c:	3426                	fld	fs0,104(sp)
    9fe0b68e:	612d                	addi	sp,sp,224
    9fe0b690:	8082                	ret
  for(i=0;i<ido;i++){
    9fe0b692:	b1205ee3          	blez	s2,9fe0b1ae <dradbg+0xc6>
    9fe0b696:	88d6                	mv	a7,s5
    9fe0b698:	8826                	mv	a6,s1
    9fe0b69a:	002b9593          	slli	a1,s7,0x2
    9fe0b69e:	00291613          	slli	a2,s2,0x2
    9fe0b6a2:	4501                	li	a0,0
    for(k=0;k<l1;k++){
    9fe0b6a4:	86c2                	mv	a3,a6
    9fe0b6a6:	8746                	mv	a4,a7
    9fe0b6a8:	4781                	li	a5,0
    9fe0b6aa:	00805b63          	blez	s0,9fe0b6c0 <dradbg+0x5d8>
      ch[t2]=cc[t3];
    9fe0b6ae:	00072787          	flw	fa5,0(a4)
    for(k=0;k<l1;k++){
    9fe0b6b2:	2785                	addiw	a5,a5,1
    9fe0b6b4:	972e                	add	a4,a4,a1
      ch[t2]=cc[t3];
    9fe0b6b6:	00f6a027          	fsw	fa5,0(a3)
    for(k=0;k<l1;k++){
    9fe0b6ba:	96b2                	add	a3,a3,a2
    9fe0b6bc:	fef419e3          	bne	s0,a5,9fe0b6ae <dradbg+0x5c6>
    t1++;
    9fe0b6c0:	2505                	addiw	a0,a0,1
  for(i=0;i<ido;i++){
    9fe0b6c2:	0891                	addi	a7,a7,4
    9fe0b6c4:	0811                	addi	a6,a6,4
    9fe0b6c6:	fca91fe3          	bne	s2,a0,9fe0b6a4 <dradbg+0x5bc>
  t2=ipp2*t0;
    9fe0b6ca:	6722                	ld	a4,8(sp)
  for(j=1;j<ipph;j++){
    9fe0b6cc:	4785                	li	a5,1
  t7=(t5=ido<<1);
    9fe0b6ce:	00191d9b          	slliw	s11,s2,0x1
  t2=ipp2*t0;
    9fe0b6d2:	02eb073b          	mulw	a4,s6,a4
    9fe0b6d6:	e83a                	sd	a4,16(sp)
  for(j=1;j<ipph;j++){
    9fe0b6d8:	afe7c4e3          	blt	a5,t5,9fe0b1c0 <dradbg+0xd8>
  if (ido == 1)goto L116;
    9fe0b6dc:	e8f919e3          	bne	s2,a5,9fe0b56e <dradbg+0x486>
    9fe0b6e0:	bf49                	j	9fe0b672 <dradbg+0x58a>
  for(j=1;j<ipph;j++){
    9fe0b6e2:	e9e7d6e3          	bge	a5,t5,9fe0b56e <dradbg+0x486>
    9fe0b6e6:	4a96                	lw	s5,68(sp)
    9fe0b6e8:	67a6                	ld	a5,72(sp)
    9fe0b6ea:	ffd90e1b          	addiw	t3,s2,-3
    9fe0b6ee:	001e5e1b          	srliw	t3,t3,0x1
    9fe0b6f2:	0a8a                	slli	s5,s5,0x2
    9fe0b6f4:	00279b13          	slli	s6,a5,0x2
    9fe0b6f8:	0e06                	slli	t3,t3,0x1
    9fe0b6fa:	83e6                	mv	t2,s9
    9fe0b6fc:	4285                	li	t0,1
      for(i=2;i<ido;i+=2){
    9fe0b6fe:	4e89                	li	t4,2
    9fe0b700:	00848f93          	addi	t6,s1,8
    for(k=0;k<l1;k++){
    9fe0b704:	88da                	mv	a7,s6
    9fe0b706:	881e                	mv	a6,t2
    9fe0b708:	4301                	li	t1,0
    9fe0b70a:	06805c63          	blez	s0,9fe0b782 <dradbg+0x69a>
      for(i=2;i<ido;i+=2){
    9fe0b70e:	072ed563          	bge	t4,s2,9fe0b778 <dradbg+0x690>
    9fe0b712:	01c80533          	add	a0,a6,t3
    9fe0b716:	00281613          	slli	a2,a6,0x2
    9fe0b71a:	050a                	slli	a0,a0,0x2
    9fe0b71c:	013606b3          	add	a3,a2,s3
    9fe0b720:	011987b3          	add	a5,s3,a7
    9fe0b724:	9626                	add	a2,a2,s1
    9fe0b726:	011485b3          	add	a1,s1,a7
    9fe0b72a:	957e                	add	a0,a0,t6
        ch[t5-1]=c1[t5-1]-c1[t6];
    9fe0b72c:	0046a787          	flw	fa5,4(a3)
    9fe0b730:	0087a707          	flw	fa4,8(a5)
      for(i=2;i<ido;i+=2){
    9fe0b734:	0621                	addi	a2,a2,8
    9fe0b736:	06a1                	addi	a3,a3,8
        ch[t5-1]=c1[t5-1]-c1[t6];
    9fe0b738:	08e7f7d3          	fsub.s	fa5,fa5,fa4
      for(i=2;i<ido;i+=2){
    9fe0b73c:	07a1                	addi	a5,a5,8
    9fe0b73e:	05a1                	addi	a1,a1,8
        ch[t5-1]=c1[t5-1]-c1[t6];
    9fe0b740:	fef62e27          	fsw	fa5,-4(a2)
        ch[t6-1]=c1[t5-1]+c1[t6];
    9fe0b744:	0007a707          	flw	fa4,0(a5)
    9fe0b748:	ffc6a787          	flw	fa5,-4(a3)
    9fe0b74c:	00e7f7d3          	fadd.s	fa5,fa5,fa4
    9fe0b750:	fef5ae27          	fsw	fa5,-4(a1)
        ch[t5]=c1[t5]+c1[t6-1];
    9fe0b754:	ffc7a707          	flw	fa4,-4(a5)
    9fe0b758:	0006a787          	flw	fa5,0(a3)
    9fe0b75c:	00e7f7d3          	fadd.s	fa5,fa5,fa4
    9fe0b760:	00f62027          	fsw	fa5,0(a2)
        ch[t6]=c1[t5]-c1[t6-1];
    9fe0b764:	0006a787          	flw	fa5,0(a3)
    9fe0b768:	ffc7a707          	flw	fa4,-4(a5)
    9fe0b76c:	08e7f7d3          	fsub.s	fa5,fa5,fa4
    9fe0b770:	00f5a027          	fsw	fa5,0(a1)
      for(i=2;i<ido;i+=2){
    9fe0b774:	fac51ce3          	bne	a0,a2,9fe0b72c <dradbg+0x644>
    for(k=0;k<l1;k++){
    9fe0b778:	2305                	addiw	t1,t1,1
    9fe0b77a:	984a                	add	a6,a6,s2
    9fe0b77c:	98ba                	add	a7,a7,a4
    9fe0b77e:	f86418e3          	bne	s0,t1,9fe0b70e <dradbg+0x626>
  for(j=1;j<ipph;j++){
    9fe0b782:	2285                	addiw	t0,t0,1
    9fe0b784:	93e6                	add	t2,t2,s9
    9fe0b786:	9b56                	add	s6,s6,s5
    9fe0b788:	f65f1ee3          	bne	t5,t0,9fe0b704 <dradbg+0x61c>
    9fe0b78c:	b3cd                	j	9fe0b56e <dradbg+0x486>
  for(j=1;j<ipph;j++){
    9fe0b78e:	4696                	lw	a3,68(sp)
    9fe0b790:	67a6                	ld	a5,72(sp)
    9fe0b792:	ffd9029b          	addiw	t0,s2,-3
    9fe0b796:	419686b3          	sub	a3,a3,s9
    9fe0b79a:	016a8633          	add	a2,s5,s6
    9fe0b79e:	419787b3          	sub	a5,a5,s9
    9fe0b7a2:	0012d29b          	srliw	t0,t0,0x1
    9fe0b7a6:	068a                	slli	a3,a3,0x2
    9fe0b7a8:	ec32                	sd	a2,24(sp)
    9fe0b7aa:	f036                	sd	a3,32(sp)
    9fe0b7ac:	00279f93          	slli	t6,a5,0x2
    9fe0b7b0:	0286                	slli	t0,t0,0x1
  if(nbd<l1)goto L112;
    9fe0b7b2:	8be6                	mv	s7,s9
  for(j=1;j<ipph;j++){
    9fe0b7b4:	4d85                	li	s11,1
      for(i=2;i<ido;i+=2){
    9fe0b7b6:	4389                	li	t2,2
    9fe0b7b8:	00848a93          	addi	s5,s1,8
    for(k=0;k<l1;k++){
    9fe0b7bc:	06805f63          	blez	s0,9fe0b83a <dradbg+0x752>
    9fe0b7c0:	6362                	ld	t1,24(sp)
    9fe0b7c2:	002b9893          	slli	a7,s7,0x2
    9fe0b7c6:	98a6                	add	a7,a7,s1
    9fe0b7c8:	8ede                	mv	t4,s7
    9fe0b7ca:	4e01                	li	t3,0
      for(i=2;i<ido;i+=2){
    9fe0b7cc:	0723d163          	bge	t2,s2,9fe0b82e <dradbg+0x746>
    9fe0b7d0:	01d28833          	add	a6,t0,t4
    9fe0b7d4:	080a                	slli	a6,a6,0x2
    9fe0b7d6:	01f885b3          	add	a1,a7,t6
    9fe0b7da:	9856                	add	a6,a6,s5
    9fe0b7dc:	8646                	mv	a2,a7
    9fe0b7de:	869a                	mv	a3,t1
    9fe0b7e0:	879a                	mv	a5,t1
        ch[t5-1]=cc[t9-1]+cc[t11-1];
    9fe0b7e2:	0047a787          	flw	fa5,4(a5)
    9fe0b7e6:	ff46a707          	flw	fa4,-12(a3)
      for(i=2;i<ido;i+=2){
    9fe0b7ea:	0621                	addi	a2,a2,8
    9fe0b7ec:	07a1                	addi	a5,a5,8
        ch[t5-1]=cc[t9-1]+cc[t11-1];
    9fe0b7ee:	00e7f7d3          	fadd.s	fa5,fa5,fa4
      for(i=2;i<ido;i+=2){
    9fe0b7f2:	16e1                	addi	a3,a3,-8
    9fe0b7f4:	05a1                	addi	a1,a1,8
        ch[t5-1]=cc[t9-1]+cc[t11-1];
    9fe0b7f6:	fef62e27          	fsw	fa5,-4(a2)
        ch[t6-1]=cc[t9-1]-cc[t11-1];
    9fe0b7fa:	ffc6a707          	flw	fa4,-4(a3)
    9fe0b7fe:	ffc7a787          	flw	fa5,-4(a5)
    9fe0b802:	08e7f7d3          	fsub.s	fa5,fa5,fa4
    9fe0b806:	fef5ae27          	fsw	fa5,-4(a1)
        ch[t5]=cc[t9]-cc[t11];
    9fe0b80a:	0006a707          	flw	fa4,0(a3)
    9fe0b80e:	0007a787          	flw	fa5,0(a5)
    9fe0b812:	08e7f7d3          	fsub.s	fa5,fa5,fa4
    9fe0b816:	00f62027          	fsw	fa5,0(a2)
        ch[t6]=cc[t9]+cc[t11];
    9fe0b81a:	0007a787          	flw	fa5,0(a5)
    9fe0b81e:	0006a707          	flw	fa4,0(a3)
    9fe0b822:	00e7f7d3          	fadd.s	fa5,fa5,fa4
    9fe0b826:	00f5a027          	fsw	fa5,0(a1)
      for(i=2;i<ido;i+=2){
    9fe0b82a:	fb061ce3          	bne	a2,a6,9fe0b7e2 <dradbg+0x6fa>
    for(k=0;k<l1;k++){
    9fe0b82e:	2e05                	addiw	t3,t3,1
    9fe0b830:	932a                	add	t1,t1,a0
    9fe0b832:	98ba                	add	a7,a7,a4
    9fe0b834:	9eca                	add	t4,t4,s2
    9fe0b836:	f9c41be3          	bne	s0,t3,9fe0b7cc <dradbg+0x6e4>
  for(j=1;j<ipph;j++){
    9fe0b83a:	67e2                	ld	a5,24(sp)
    9fe0b83c:	2d85                	addiw	s11,s11,1
    9fe0b83e:	9be6                	add	s7,s7,s9
    9fe0b840:	97da                	add	a5,a5,s6
    9fe0b842:	ec3e                	sd	a5,24(sp)
    9fe0b844:	7782                	ld	a5,32(sp)
    9fe0b846:	9fbe                	add	t6,t6,a5
    9fe0b848:	f7bf1ae3          	bne	t5,s11,9fe0b7bc <dradbg+0x6d4>
    9fe0b84c:	b465                	j	9fe0b2f4 <dradbg+0x20c>
    9fe0b84e:	77ae                	ld	a5,232(sp)
    9fe0b850:	ffd9049b          	addiw	s1,s2,-3
    9fe0b854:	0014d49b          	srliw	s1,s1,0x1
    9fe0b858:	ffc78f13          	addi	t5,a5,-4
    9fe0b85c:	0486                	slli	s1,s1,0x1
  if(nbd>l1)goto L139;
    9fe0b85e:	53fd                	li	t2,-1
    9fe0b860:	4285                	li	t0,1
    9fe0b862:	00878993          	addi	s3,a5,8
      for(i=2;i<ido;i+=2){
    9fe0b866:	4f89                	li	t6,2
    for(k=0;k<l1;k++){
    9fe0b868:	06805463          	blez	s0,9fe0b8d0 <dradbg+0x7e8>
    9fe0b86c:	007485b3          	add	a1,s1,t2
    9fe0b870:	058a                	slli	a1,a1,0x2
    9fe0b872:	95ce                	add	a1,a1,s3
    9fe0b874:	8a46                	mv	s4,a7
    9fe0b876:	8e9a                	mv	t4,t1
    9fe0b878:	4e01                	li	t3,0
      for(i=2;i<ido;i+=2){
    9fe0b87a:	8652                	mv	a2,s4
    9fe0b87c:	86f6                	mv	a3,t4
    9fe0b87e:	87fa                	mv	a5,t5
    9fe0b880:	052fd363          	bge	t6,s2,9fe0b8c6 <dradbg+0x7de>
        c1[t3-1]=wa[idij-1]*ch[t3-1]-wa[idij]*ch[t3];
    9fe0b884:	0087a707          	flw	fa4,8(a5)
    9fe0b888:	0086a607          	flw	fa2,8(a3)
    9fe0b88c:	0047a787          	flw	fa5,4(a5)
    9fe0b890:	0046a687          	flw	fa3,4(a3)
    9fe0b894:	10c77753          	fmul.s	fa4,fa4,fa2
      for(i=2;i<ido;i+=2){
    9fe0b898:	0621                	addi	a2,a2,8
    9fe0b89a:	07a1                	addi	a5,a5,8
    9fe0b89c:	06a1                	addi	a3,a3,8
        c1[t3-1]=wa[idij-1]*ch[t3-1]-wa[idij]*ch[t3];
    9fe0b89e:	70d7f7c7          	fmsub.s	fa5,fa5,fa3,fa4
    9fe0b8a2:	fef62e27          	fsw	fa5,-4(a2)
        c1[t3]=wa[idij-1]*ch[t3]+wa[idij]*ch[t3-1];
    9fe0b8a6:	0007a707          	flw	fa4,0(a5)
    9fe0b8aa:	ffc6a607          	flw	fa2,-4(a3)
    9fe0b8ae:	ffc7a787          	flw	fa5,-4(a5)
    9fe0b8b2:	0006a687          	flw	fa3,0(a3)
    9fe0b8b6:	10c77753          	fmul.s	fa4,fa4,fa2
    9fe0b8ba:	70d7f7c3          	fmadd.s	fa5,fa5,fa3,fa4
    9fe0b8be:	00f62027          	fsw	fa5,0(a2)
      for(i=2;i<ido;i+=2){
    9fe0b8c2:	fcb791e3          	bne	a5,a1,9fe0b884 <dradbg+0x79c>
    for(k=0;k<l1;k++){
    9fe0b8c6:	2e05                	addiw	t3,t3,1
    9fe0b8c8:	9eba                	add	t4,t4,a4
    9fe0b8ca:	9a3a                	add	s4,s4,a4
    9fe0b8cc:	fbc417e3          	bne	s0,t3,9fe0b87a <dradbg+0x792>
  for(j=1;j<ip;j++){
    9fe0b8d0:	0012879b          	addiw	a5,t0,1
    9fe0b8d4:	932a                	add	t1,t1,a0
    9fe0b8d6:	98aa                	add	a7,a7,a0
    9fe0b8d8:	9f3a                	add	t5,t5,a4
    9fe0b8da:	93ca                	add	t2,t2,s2
    9fe0b8dc:	d8580be3          	beq	a6,t0,9fe0b672 <dradbg+0x58a>
    9fe0b8e0:	82be                	mv	t0,a5
    9fe0b8e2:	b759                	j	9fe0b868 <dradbg+0x780>

000000009fe0b8e4 <core_drft_forward>:
  if(na==0)return;

  for(i=0;i<n;i++)c[i]=ch[i];
}

void core_drft_forward(struct drft_lookup *l,float *data){
    9fe0b8e4:	7119                	addi	sp,sp,-128
    9fe0b8e6:	fc86                	sd	ra,120(sp)
    9fe0b8e8:	f8a2                	sd	s0,112(sp)
    9fe0b8ea:	f4a6                	sd	s1,104(sp)
    9fe0b8ec:	f0ca                	sd	s2,96(sp)
    9fe0b8ee:	ecce                	sd	s3,88(sp)
    9fe0b8f0:	e8d2                	sd	s4,80(sp)
    9fe0b8f2:	e4d6                	sd	s5,72(sp)
    9fe0b8f4:	e0da                	sd	s6,64(sp)
    9fe0b8f6:	fc5e                	sd	s7,56(sp)
    9fe0b8f8:	f862                	sd	s8,48(sp)
    9fe0b8fa:	f466                	sd	s9,40(sp)
    9fe0b8fc:	f06a                	sd	s10,32(sp)
    9fe0b8fe:	ec6e                	sd	s11,24(sp)
  if(l->n==1)return;
    9fe0b900:	4100                	lw	s0,0(a0)
    9fe0b902:	4785                	li	a5,1
    9fe0b904:	0ef40a63          	beq	s0,a5,9fe0b9f8 <core_drft_forward+0x114>
  drftf1(l->n,data,l->trigcache,l->trigcache+l->n,l->splitcache);
    9fe0b908:	01053c83          	ld	s9,16(a0)
    9fe0b90c:	00853b83          	ld	s7,8(a0)
    9fe0b910:	00241493          	slli	s1,s0,0x2
  nf=ifac[1];
    9fe0b914:	004ca783          	lw	a5,4(s9)
  drftf1(l->n,data,l->trigcache,l->trigcache+l->n,l->splitcache);
    9fe0b918:	94de                	add	s1,s1,s7
  for(k1=0;k1<nf;k1++){
    9fe0b91a:	0cf05f63          	blez	a5,9fe0b9f8 <core_drft_forward+0x114>
    9fe0b91e:	00178713          	addi	a4,a5,1
    9fe0b922:	070a                	slli	a4,a4,0x2
    9fe0b924:	37fd                	addiw	a5,a5,-1
    9fe0b926:	ffc70913          	addi	s2,a4,-4
    9fe0b92a:	02079693          	slli	a3,a5,0x20
    9fe0b92e:	9966                	add	s2,s2,s9
    9fe0b930:	01e6d793          	srli	a5,a3,0x1e
    9fe0b934:	8c2e                	mv	s8,a1
    9fe0b936:	9cba                	add	s9,s9,a4
    9fe0b938:	40f90933          	sub	s2,s2,a5
    9fe0b93c:	8d22                	mv	s10,s0
    9fe0b93e:	8da2                	mv	s11,s0
  na=1;
    9fe0b940:	4605                	li	a2,1
    na=1-na;
    9fe0b942:	4a05                	li	s4,1
    if(ip!=4)goto L102;
    9fe0b944:	4991                	li	s3,4
    if(ip!=2)goto L104;
    9fe0b946:	4a89                	li	s5,2
    9fe0b948:	a805                	j	9fe0b978 <core_drft_forward+0x94>
    9fe0b94a:	0d558663          	beq	a1,s5,9fe0ba16 <core_drft_forward+0x132>
    if(ido==1)na=1-na;
    9fe0b94e:	4805                	li	a6,1
    9fe0b950:	01051363          	bne	a0,a6,9fe0b956 <core_drft_forward+0x72>
    9fe0b954:	8b32                	mv	s6,a2
    dradfg(ido,ip,l1,idl1,ch,ch,ch,c,c,wa+iw-1);
    9fe0b956:	e43a                	sd	a4,8(sp)
    idl1=ido*l1;
    9fe0b958:	02d786bb          	mulw	a3,a5,a3
    if(na!=0)goto L109;
    9fe0b95c:	0e0b0463          	beqz	s6,9fe0ba44 <core_drft_forward+0x160>
    dradfg(ido,ip,l1,idl1,ch,ch,ch,c,c,wa+iw-1);
    9fe0b960:	866e                	mv	a2,s11
    9fe0b962:	e062                	sd	s8,0(sp)
    9fe0b964:	88e2                	mv	a7,s8
    9fe0b966:	885e                	mv	a6,s7
    9fe0b968:	87de                	mv	a5,s7
    9fe0b96a:	875e                	mv	a4,s7
    9fe0b96c:	e87fe0ef          	jal	ra,9fe0a7f2 <dradfg>
    na=0;
    9fe0b970:	4601                	li	a2,0
  for(k1=0;k1<nf;k1++){
    9fe0b972:	1cf1                	addi	s9,s9,-4
    9fe0b974:	052c8d63          	beq	s9,s2,9fe0b9ce <core_drft_forward+0xea>
    ido=n/l2;
    9fe0b978:	03b4453b          	divw	a0,s0,s11
    ip=ifac[kh+1];
    9fe0b97c:	000ca583          	lw	a1,0(s9)
    na=1-na;
    9fe0b980:	40ca0b3b          	subw	s6,s4,a2
    iw-=(ip-1)*ido;
    9fe0b984:	fff5831b          	addiw	t1,a1,-1
    l1=l2/ip;
    9fe0b988:	02bdcdbb          	divw	s11,s11,a1
    ido=n/l2;
    9fe0b98c:	86aa                	mv	a3,a0
    iw-=(ip-1)*ido;
    9fe0b98e:	02a3033b          	mulw	t1,t1,a0
    l1=l2/ip;
    9fe0b992:	87ee                	mv	a5,s11
    iw-=(ip-1)*ido;
    9fe0b994:	406d0d3b          	subw	s10,s10,t1
    dradfg(ido,ip,l1,idl1,ch,ch,ch,c,c,wa+iw-1);
    9fe0b998:	002d1713          	slli	a4,s10,0x2
    9fe0b99c:	1771                	addi	a4,a4,-4
    9fe0b99e:	9726                	add	a4,a4,s1
    if(ip!=4)goto L102;
    9fe0b9a0:	fb3595e3          	bne	a1,s3,9fe0b94a <core_drft_forward+0x66>
    ix2=iw+ido;
    9fe0b9a4:	01a507bb          	addw	a5,a0,s10
      dradf4(ido,l1,ch,c,wa+iw-1,wa+ix2-1,wa+ix3-1);
    9fe0b9a8:	00f5083b          	addw	a6,a0,a5
    9fe0b9ac:	080a                	slli	a6,a6,0x2
    9fe0b9ae:	078a                	slli	a5,a5,0x2
    9fe0b9b0:	17f1                	addi	a5,a5,-4
    9fe0b9b2:	1871                	addi	a6,a6,-4
    9fe0b9b4:	97a6                	add	a5,a5,s1
    9fe0b9b6:	9826                	add	a6,a6,s1
    if(na!=0)
    9fe0b9b8:	060b0863          	beqz	s6,9fe0ba28 <core_drft_forward+0x144>
      dradf4(ido,l1,ch,c,wa+iw-1,wa+ix2-1,wa+ix3-1);
    9fe0b9bc:	865e                	mv	a2,s7
    9fe0b9be:	86e2                	mv	a3,s8
    9fe0b9c0:	85ee                	mv	a1,s11
    9fe0b9c2:	ce4fe0ef          	jal	ra,9fe09ea6 <dradf4>
  for(k1=0;k1<nf;k1++){
    9fe0b9c6:	1cf1                	addi	s9,s9,-4
    9fe0b9c8:	865a                	mv	a2,s6
    9fe0b9ca:	fb2c97e3          	bne	s9,s2,9fe0b978 <core_drft_forward+0x94>
  if(na==1)return;
    9fe0b9ce:	4785                	li	a5,1
    9fe0b9d0:	02f60463          	beq	a2,a5,9fe0b9f8 <core_drft_forward+0x114>
  for(i=0;i<n;i++)c[i]=ch[i];
    9fe0b9d4:	02805263          	blez	s0,9fe0b9f8 <core_drft_forward+0x114>
    9fe0b9d8:	347d                	addiw	s0,s0,-1
    9fe0b9da:	02041793          	slli	a5,s0,0x20
    9fe0b9de:	01e7d413          	srli	s0,a5,0x1e
    9fe0b9e2:	004b8793          	addi	a5,s7,4
    9fe0b9e6:	943e                	add	s0,s0,a5
    9fe0b9e8:	000ba787          	flw	fa5,0(s7)
    9fe0b9ec:	0b91                	addi	s7,s7,4
    9fe0b9ee:	0c11                	addi	s8,s8,4
    9fe0b9f0:	fefc2e27          	fsw	fa5,-4(s8)
    9fe0b9f4:	ff741ae3          	bne	s0,s7,9fe0b9e8 <core_drft_forward+0x104>
}
    9fe0b9f8:	70e6                	ld	ra,120(sp)
    9fe0b9fa:	7446                	ld	s0,112(sp)
    9fe0b9fc:	74a6                	ld	s1,104(sp)
    9fe0b9fe:	7906                	ld	s2,96(sp)
    9fe0ba00:	69e6                	ld	s3,88(sp)
    9fe0ba02:	6a46                	ld	s4,80(sp)
    9fe0ba04:	6aa6                	ld	s5,72(sp)
    9fe0ba06:	6b06                	ld	s6,64(sp)
    9fe0ba08:	7be2                	ld	s7,56(sp)
    9fe0ba0a:	7c42                	ld	s8,48(sp)
    9fe0ba0c:	7ca2                	ld	s9,40(sp)
    9fe0ba0e:	7d02                	ld	s10,32(sp)
    9fe0ba10:	6de2                	ld	s11,24(sp)
    9fe0ba12:	6109                	addi	sp,sp,128
    9fe0ba14:	8082                	ret
    if(na!=0)goto L103;
    9fe0ba16:	020b0063          	beqz	s6,9fe0ba36 <core_drft_forward+0x152>
    dradf2(ido,l1,ch,c,wa+iw-1);
    9fe0ba1a:	865e                	mv	a2,s7
    9fe0ba1c:	86e2                	mv	a3,s8
    9fe0ba1e:	85ee                	mv	a1,s11
    9fe0ba20:	b12fe0ef          	jal	ra,9fe09d32 <dradf2>
    goto L110;
    9fe0ba24:	865a                	mv	a2,s6
    9fe0ba26:	b7b1                	j	9fe0b972 <core_drft_forward+0x8e>
      dradf4(ido,l1,c,ch,wa+iw-1,wa+ix2-1,wa+ix3-1);
    9fe0ba28:	8662                	mv	a2,s8
    9fe0ba2a:	86de                	mv	a3,s7
    9fe0ba2c:	85ee                	mv	a1,s11
    9fe0ba2e:	c78fe0ef          	jal	ra,9fe09ea6 <dradf4>
    9fe0ba32:	4601                	li	a2,0
    9fe0ba34:	bf3d                	j	9fe0b972 <core_drft_forward+0x8e>
    dradf2(ido,l1,c,ch,wa+iw-1);
    9fe0ba36:	8662                	mv	a2,s8
    9fe0ba38:	86de                	mv	a3,s7
    9fe0ba3a:	85ee                	mv	a1,s11
    9fe0ba3c:	af6fe0ef          	jal	ra,9fe09d32 <dradf2>
    na=1-na;
    9fe0ba40:	4601                	li	a2,0
    goto L110;
    9fe0ba42:	bf05                	j	9fe0b972 <core_drft_forward+0x8e>
    dradfg(ido,ip,l1,idl1,c,c,c,ch,ch,wa+iw-1);
    9fe0ba44:	866e                	mv	a2,s11
    9fe0ba46:	e05e                	sd	s7,0(sp)
    9fe0ba48:	88de                	mv	a7,s7
    9fe0ba4a:	8862                	mv	a6,s8
    9fe0ba4c:	87e2                	mv	a5,s8
    9fe0ba4e:	8762                	mv	a4,s8
    9fe0ba50:	da3fe0ef          	jal	ra,9fe0a7f2 <dradfg>
    na=1;
    9fe0ba54:	4605                	li	a2,1
    goto L110;
    9fe0ba56:	bf31                	j	9fe0b972 <core_drft_forward+0x8e>

000000009fe0ba58 <core_drft_backward>:

void core_drft_backward(struct drft_lookup *l,float *data){
    9fe0ba58:	7175                	addi	sp,sp,-144
    9fe0ba5a:	e506                	sd	ra,136(sp)
    9fe0ba5c:	e122                	sd	s0,128(sp)
    9fe0ba5e:	fca6                	sd	s1,120(sp)
    9fe0ba60:	f8ca                	sd	s2,112(sp)
    9fe0ba62:	f4ce                	sd	s3,104(sp)
    9fe0ba64:	f0d2                	sd	s4,96(sp)
    9fe0ba66:	ecd6                	sd	s5,88(sp)
    9fe0ba68:	e8da                	sd	s6,80(sp)
    9fe0ba6a:	e4de                	sd	s7,72(sp)
    9fe0ba6c:	e0e2                	sd	s8,64(sp)
    9fe0ba6e:	fc66                	sd	s9,56(sp)
    9fe0ba70:	f86a                	sd	s10,48(sp)
    9fe0ba72:	f46e                	sd	s11,40(sp)
  if (l->n==1)return;
    9fe0ba74:	4104                	lw	s1,0(a0)
    9fe0ba76:	4785                	li	a5,1
    9fe0ba78:	10f48063          	beq	s1,a5,9fe0bb78 <core_drft_backward+0x120>
  drftb1(l->n,data,l->trigcache,l->trigcache+l->n,l->splitcache);
    9fe0ba7c:	01053c83          	ld	s9,16(a0)
    9fe0ba80:	00853d03          	ld	s10,8(a0)
    9fe0ba84:	00249913          	slli	s2,s1,0x2
  nf=ifac[1];
    9fe0ba88:	004ca983          	lw	s3,4(s9)
  drftb1(l->n,data,l->trigcache,l->trigcache+l->n,l->splitcache);
    9fe0ba8c:	996a                	add	s2,s2,s10
  for(k1=0;k1<nf;k1++){
    9fe0ba8e:	0f305563          	blez	s3,9fe0bb78 <core_drft_backward+0x120>
    9fe0ba92:	39fd                	addiw	s3,s3,-1
    9fe0ba94:	02099793          	slli	a5,s3,0x20
    9fe0ba98:	01e7d993          	srli	s3,a5,0x1e
    9fe0ba9c:	00cc8793          	addi	a5,s9,12
    9fe0baa0:	8dae                	mv	s11,a1
    9fe0baa2:	0ca1                	addi	s9,s9,8
    9fe0baa4:	99be                	add	s3,s3,a5
  na=0;
    9fe0baa6:	4c01                	li	s8,0
  iw=1;
    9fe0baa8:	4b05                	li	s6,1
  l1=1;
    9fe0baaa:	4b85                	li	s7,1
    if(ip!=4)goto L103;
    9fe0baac:	4a11                	li	s4,4
    9fe0baae:	a0a1                	j	9fe0baf6 <core_drft_backward+0x9e>
    if(ip!=2)goto L106;
    9fe0bab0:	4789                	li	a5,2
    9fe0bab2:	0ef40263          	beq	s0,a5,9fe0bb96 <core_drft_backward+0x13e>
    if(ip!=3)goto L109;
    9fe0bab6:	478d                	li	a5,3
    9fe0bab8:	0ef40b63          	beq	s0,a5,9fe0bbae <core_drft_backward+0x156>
    idl1=ido*l1;
    9fe0babc:	02b506bb          	mulw	a3,a0,a1
    if(na!=0)
    9fe0bac0:	100c0363          	beqz	s8,9fe0bbc6 <core_drft_backward+0x16e>
      dradbg(ido,ip,l1,idl1,ch,ch,ch,c,c,wa+iw-1);
    9fe0bac4:	e43a                	sd	a4,8(sp)
    9fe0bac6:	e06e                	sd	s11,0(sp)
    9fe0bac8:	88ee                	mv	a7,s11
    9fe0baca:	886a                	mv	a6,s10
    9fe0bacc:	87ea                	mv	a5,s10
    9fe0bace:	876a                	mv	a4,s10
      dradbg(ido,ip,l1,idl1,c,c,c,ch,ch,wa+iw-1);
    9fe0bad0:	862e                	mv	a2,a1
    9fe0bad2:	85a2                	mv	a1,s0
    9fe0bad4:	ec2a                	sd	a0,24(sp)
    9fe0bad6:	e12ff0ef          	jal	ra,9fe0b0e8 <dradbg>
    9fe0bada:	6562                	ld	a0,24(sp)
    if(ido==1)na=1-na;
    9fe0badc:	4785                	li	a5,1
    9fe0bade:	00f51463          	bne	a0,a5,9fe0bae6 <core_drft_backward+0x8e>
    9fe0bae2:	41878c3b          	subw	s8,a5,s8
    iw+=(ip-1)*ido;
    9fe0bae6:	347d                	addiw	s0,s0,-1
    9fe0bae8:	0354043b          	mulw	s0,s0,s5
  for(k1=0;k1<nf;k1++){
    9fe0baec:	0c91                	addi	s9,s9,4
    iw+=(ip-1)*ido;
    9fe0baee:	01640b3b          	addw	s6,s0,s6
  for(k1=0;k1<nf;k1++){
    9fe0baf2:	053c8e63          	beq	s9,s3,9fe0bb4e <core_drft_backward+0xf6>
    ip=ifac[k1 + 2];
    9fe0baf6:	000ca403          	lw	s0,0(s9)
      dradbg(ido,ip,l1,idl1,ch,ch,ch,c,c,wa+iw-1);
    9fe0bafa:	002b1713          	slli	a4,s6,0x2
    9fe0bafe:	1771                	addi	a4,a4,-4
    l2=ip*l1;
    9fe0bb00:	037407bb          	mulw	a5,s0,s7
    9fe0bb04:	85de                	mv	a1,s7
      dradbg(ido,ip,l1,idl1,ch,ch,ch,c,c,wa+iw-1);
    9fe0bb06:	974a                	add	a4,a4,s2
    ido=n/l2;
    9fe0bb08:	02f4c53b          	divw	a0,s1,a5
    l2=ip*l1;
    9fe0bb0c:	00078b9b          	sext.w	s7,a5
    ido=n/l2;
    9fe0bb10:	8aaa                	mv	s5,a0
    if(ip!=4)goto L103;
    9fe0bb12:	f9441fe3          	bne	s0,s4,9fe0bab0 <core_drft_backward+0x58>
    ix2=iw+ido;
    9fe0bb16:	016506bb          	addw	a3,a0,s6
      dradb4(ido,l1,ch,c,wa+iw-1,wa+ix2-1,wa+ix3-1);
    9fe0bb1a:	00d5083b          	addw	a6,a0,a3
      dradb3(ido,l1,ch,c,wa+iw-1,wa+ix2-1);
    9fe0bb1e:	00269793          	slli	a5,a3,0x2
      dradb4(ido,l1,ch,c,wa+iw-1,wa+ix2-1,wa+ix3-1);
    9fe0bb22:	080a                	slli	a6,a6,0x2
      dradb3(ido,l1,ch,c,wa+iw-1,wa+ix2-1);
    9fe0bb24:	17f1                	addi	a5,a5,-4
      dradb4(ido,l1,ch,c,wa+iw-1,wa+ix2-1,wa+ix3-1);
    9fe0bb26:	1871                	addi	a6,a6,-4
      dradb3(ido,l1,ch,c,wa+iw-1,wa+ix2-1);
    9fe0bb28:	97ca                	add	a5,a5,s2
      dradb4(ido,l1,ch,c,wa+iw-1,wa+ix2-1,wa+ix3-1);
    9fe0bb2a:	984a                	add	a6,a6,s2
    if(na!=0)
    9fe0bb2c:	060c0c63          	beqz	s8,9fe0bba4 <core_drft_backward+0x14c>
      dradb4(ido,l1,ch,c,wa+iw-1,wa+ix2-1,wa+ix3-1);
    9fe0bb30:	86ee                	mv	a3,s11
    9fe0bb32:	866a                	mv	a2,s10
    9fe0bb34:	9bdfe0ef          	jal	ra,9fe0a4f0 <dradb4>
    iw+=(ip-1)*ido;
    9fe0bb38:	347d                	addiw	s0,s0,-1
    9fe0bb3a:	0354043b          	mulw	s0,s0,s5
    na=1-na;
    9fe0bb3e:	4785                	li	a5,1
  for(k1=0;k1<nf;k1++){
    9fe0bb40:	0c91                	addi	s9,s9,4
    na=1-na;
    9fe0bb42:	41878c3b          	subw	s8,a5,s8
    iw+=(ip-1)*ido;
    9fe0bb46:	01640b3b          	addw	s6,s0,s6
  for(k1=0;k1<nf;k1++){
    9fe0bb4a:	fb3c96e3          	bne	s9,s3,9fe0baf6 <core_drft_backward+0x9e>
  if(na==0)return;
    9fe0bb4e:	020c0563          	beqz	s8,9fe0bb78 <core_drft_backward+0x120>
  for(i=0;i<n;i++)c[i]=ch[i];
    9fe0bb52:	02905363          	blez	s1,9fe0bb78 <core_drft_backward+0x120>
    9fe0bb56:	34fd                	addiw	s1,s1,-1
    9fe0bb58:	02049793          	slli	a5,s1,0x20
    9fe0bb5c:	01e7d493          	srli	s1,a5,0x1e
    9fe0bb60:	004d0793          	addi	a5,s10,4
    9fe0bb64:	856a                	mv	a0,s10
    9fe0bb66:	94be                	add	s1,s1,a5
    9fe0bb68:	00052787          	flw	fa5,0(a0)
    9fe0bb6c:	0511                	addi	a0,a0,4
    9fe0bb6e:	0d91                	addi	s11,s11,4
    9fe0bb70:	fefdae27          	fsw	fa5,-4(s11)
    9fe0bb74:	fea49ae3          	bne	s1,a0,9fe0bb68 <core_drft_backward+0x110>
}
    9fe0bb78:	60aa                	ld	ra,136(sp)
    9fe0bb7a:	640a                	ld	s0,128(sp)
    9fe0bb7c:	74e6                	ld	s1,120(sp)
    9fe0bb7e:	7946                	ld	s2,112(sp)
    9fe0bb80:	79a6                	ld	s3,104(sp)
    9fe0bb82:	7a06                	ld	s4,96(sp)
    9fe0bb84:	6ae6                	ld	s5,88(sp)
    9fe0bb86:	6b46                	ld	s6,80(sp)
    9fe0bb88:	6ba6                	ld	s7,72(sp)
    9fe0bb8a:	6c06                	ld	s8,64(sp)
    9fe0bb8c:	7ce2                	ld	s9,56(sp)
    9fe0bb8e:	7d42                	ld	s10,48(sp)
    9fe0bb90:	7da2                	ld	s11,40(sp)
    9fe0bb92:	6149                	addi	sp,sp,144
    9fe0bb94:	8082                	ret
    if(na!=0)
    9fe0bb96:	020c0f63          	beqz	s8,9fe0bbd4 <core_drft_backward+0x17c>
      dradb2(ido,l1,ch,c,wa+iw-1);
    9fe0bb9a:	86ee                	mv	a3,s11
    9fe0bb9c:	866a                	mv	a2,s10
    9fe0bb9e:	e12fe0ef          	jal	ra,9fe0a1b0 <dradb2>
    9fe0bba2:	bf59                	j	9fe0bb38 <core_drft_backward+0xe0>
      dradb4(ido,l1,c,ch,wa+iw-1,wa+ix2-1,wa+ix3-1);
    9fe0bba4:	86ea                	mv	a3,s10
    9fe0bba6:	866e                	mv	a2,s11
    9fe0bba8:	949fe0ef          	jal	ra,9fe0a4f0 <dradb4>
    9fe0bbac:	b771                	j	9fe0bb38 <core_drft_backward+0xe0>
      dradb3(ido,l1,ch,c,wa+iw-1,wa+ix2-1);
    9fe0bbae:	016507bb          	addw	a5,a0,s6
    9fe0bbb2:	078a                	slli	a5,a5,0x2
    9fe0bbb4:	17f1                	addi	a5,a5,-4
    9fe0bbb6:	97ca                	add	a5,a5,s2
    if(na!=0)
    9fe0bbb8:	020c0363          	beqz	s8,9fe0bbde <core_drft_backward+0x186>
      dradb3(ido,l1,ch,c,wa+iw-1,wa+ix2-1);
    9fe0bbbc:	86ee                	mv	a3,s11
    9fe0bbbe:	866a                	mv	a2,s10
    9fe0bbc0:	f64fe0ef          	jal	ra,9fe0a324 <dradb3>
    9fe0bbc4:	bf95                	j	9fe0bb38 <core_drft_backward+0xe0>
      dradbg(ido,ip,l1,idl1,c,c,c,ch,ch,wa+iw-1);
    9fe0bbc6:	e43a                	sd	a4,8(sp)
    9fe0bbc8:	e06a                	sd	s10,0(sp)
    9fe0bbca:	88ea                	mv	a7,s10
    9fe0bbcc:	886e                	mv	a6,s11
    9fe0bbce:	87ee                	mv	a5,s11
    9fe0bbd0:	876e                	mv	a4,s11
    9fe0bbd2:	bdfd                	j	9fe0bad0 <core_drft_backward+0x78>
      dradb2(ido,l1,c,ch,wa+iw-1);
    9fe0bbd4:	86ea                	mv	a3,s10
    9fe0bbd6:	866e                	mv	a2,s11
    9fe0bbd8:	dd8fe0ef          	jal	ra,9fe0a1b0 <dradb2>
    9fe0bbdc:	bfb1                	j	9fe0bb38 <core_drft_backward+0xe0>
      dradb3(ido,l1,c,ch,wa+iw-1,wa+ix2-1);
    9fe0bbde:	86ea                	mv	a3,s10
    9fe0bbe0:	866e                	mv	a2,s11
    9fe0bbe2:	f42fe0ef          	jal	ra,9fe0a324 <dradb3>
    9fe0bbe6:	bf89                	j	9fe0bb38 <core_drft_backward+0xe0>

000000009fe0bbe8 <core_drft_init>:

void core_drft_init(struct drft_lookup *l,int n)
{
  l->n=n;
  l->trigcache=(float*)mem_alloc(3*n*sizeof(*l->trigcache));
    9fe0bbe8:	0015979b          	slliw	a5,a1,0x1
{
    9fe0bbec:	7115                	addi	sp,sp,-224
  l->trigcache=(float*)mem_alloc(3*n*sizeof(*l->trigcache));
    9fe0bbee:	9fad                	addw	a5,a5,a1
{
    9fe0bbf0:	ed86                	sd	ra,216(sp)
    9fe0bbf2:	e9a2                	sd	s0,208(sp)
    9fe0bbf4:	e5a6                	sd	s1,200(sp)
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe0bbf6:	0027941b          	slliw	s0,a5,0x2
    9fe0bbfa:	e1ca                	sd	s2,192(sp)
    9fe0bbfc:	fd4e                	sd	s3,184(sp)
    9fe0bbfe:	f952                	sd	s4,176(sp)
    9fe0bc00:	f556                	sd	s5,168(sp)
    9fe0bc02:	f15a                	sd	s6,160(sp)
    9fe0bc04:	ed5e                	sd	s7,152(sp)
    9fe0bc06:	e962                	sd	s8,144(sp)
    9fe0bc08:	e566                	sd	s9,136(sp)
    9fe0bc0a:	e16a                	sd	s10,128(sp)
    9fe0bc0c:	fcee                	sd	s11,120(sp)
    9fe0bc0e:	b4a2                	fsd	fs0,104(sp)
    9fe0bc10:	b0a6                	fsd	fs1,96(sp)
    9fe0bc12:	acca                	fsd	fs2,88(sp)
    9fe0bc14:	a8ce                	fsd	fs3,80(sp)
    9fe0bc16:	a4d2                	fsd	fs4,72(sp)
    9fe0bc18:	84aa                	mv	s1,a0
  l->n=n;
    9fe0bc1a:	c10c                	sw	a1,0(a0)
    9fe0bc1c:	8522                	mv	a0,s0
{
    9fe0bc1e:	892e                	mv	s2,a1
    9fe0bc20:	f82e                	sd	a1,48(sp)
    9fe0bc22:	155020ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe0bc26:	8622                	mv	a2,s0
    9fe0bc28:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe0bc2a:	842a                	mv	s0,a0
   memset(ptr, 0, size);
    9fe0bc2c:	350000ef          	jal	ra,9fe0bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe0bc30:	08000513          	li	a0,128
  l->trigcache=(float*)mem_alloc(3*n*sizeof(*l->trigcache));
    9fe0bc34:	e480                	sd	s0,8(s1)
    9fe0bc36:	141020ef          	jal	ra,9fe0e576 <pvPortMalloc>
   memset(ptr, 0, size);
    9fe0bc3a:	08000613          	li	a2,128
    9fe0bc3e:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    9fe0bc40:	842a                	mv	s0,a0
   memset(ptr, 0, size);
    9fe0bc42:	33a000ef          	jal	ra,9fe0bf7c <memset>
  if (n == 1) return;
    9fe0bc46:	4785                	li	a5,1
  l->splitcache=(int*)mem_alloc(32*sizeof(*l->splitcache));
    9fe0bc48:	e880                	sd	s0,16(s1)
  if (n == 1) return;
    9fe0bc4a:	16f90a63          	beq	s2,a5,9fe0bdbe <core_drft_init+0x1d6>
  fdrffti(n, l->trigcache, l->splitcache);
    9fe0bc4e:	6484                	ld	s1,8(s1)
  int nf=0;
    9fe0bc50:	00006297          	auipc	t0,0x6
    9fe0bc54:	30828293          	addi	t0,t0,776 # 9fe11f58 <ntryh.1>
  fdrffti(n, l->trigcache, l->splitcache);
    9fe0bc58:	8a4a                	mv	s4,s2
  int nf=0;
    9fe0bc5a:	4581                	li	a1,0
  int ntry=0,i,j=-1;
    9fe0bc5c:	5ffd                	li	t6,-1
    9fe0bc5e:	4501                	li	a0,0
  if (j < 4)
    9fe0bc60:	438d                	li	t2,3
  if(ntry!=2)goto L107;
    9fe0bc62:	4e89                	li	t4,2
  if(nf==1)goto L107;
    9fe0bc64:	4e05                	li	t3,1
  j++;
    9fe0bc66:	2f85                	addiw	t6,t6,1
  if (j < 4)
    9fe0bc68:	19f3c363          	blt	t2,t6,9fe0bdee <core_drft_init+0x206>
    ntry=ntryh[j];
    9fe0bc6c:	0002a503          	lw	a0,0(t0)
    9fe0bc70:	00259813          	slli	a6,a1,0x2
    9fe0bc74:	832e                	mv	t1,a1
    9fe0bc76:	9822                	add	a6,a6,s0
  nq=nl/ntry;
    9fe0bc78:	02aa673b          	remw	a4,s4,a0
    9fe0bc7c:	87d2                	mv	a5,s4
    9fe0bc7e:	8f2e                	mv	t5,a1
  nf++;
    9fe0bc80:	2585                	addiw	a1,a1,1
  nq=nl/ntry;
    9fe0bc82:	02aa4a3b          	divw	s4,s4,a0
  if (nr!=0) goto L101;
    9fe0bc86:	16071063          	bnez	a4,9fe0bde6 <core_drft_init+0x1fe>
  ifac[nf+1]=ntry;
    9fe0bc8a:	00a82423          	sw	a0,8(a6)
  if(ntry!=2)goto L107;
    9fe0bc8e:	03d51463          	bne	a0,t4,9fe0bcb6 <core_drft_init+0xce>
  if(nf==1)goto L107;
    9fe0bc92:	03c58263          	beq	a1,t3,9fe0bcb6 <core_drft_init+0xce>
    9fe0bc96:	00259793          	slli	a5,a1,0x2
    9fe0bc9a:	97a2                	add	a5,a5,s0
    9fe0bc9c:	4701                	li	a4,0
    9fe0bc9e:	0003089b          	sext.w	a7,t1
    ifac[ib+1]=ifac[ib];
    9fe0bca2:	4390                	lw	a2,0(a5)
  for (i=1;i<nf;i++){
    9fe0bca4:	0705                	addi	a4,a4,1
    9fe0bca6:	0007069b          	sext.w	a3,a4
    ifac[ib+1]=ifac[ib];
    9fe0bcaa:	c3d0                	sw	a2,4(a5)
  for (i=1;i<nf;i++){
    9fe0bcac:	17f1                	addi	a5,a5,-4
    9fe0bcae:	ff16cae3          	blt	a3,a7,9fe0bca2 <core_drft_init+0xba>
  ifac[2] = 2;
    9fe0bcb2:	01d42423          	sw	t4,8(s0)
  if(nl!=1)goto L104;
    9fe0bcb6:	0305                	addi	t1,t1,1
    9fe0bcb8:	0811                	addi	a6,a6,4
    9fe0bcba:	fbca1fe3          	bne	s4,t3,9fe0bc78 <core_drft_init+0x90>
  ifac[0]=n;
    9fe0bcbe:	77c2                	ld	a5,48(sp)
  ifac[1]=nf;
    9fe0bcc0:	c04c                	sw	a1,4(s0)
  ifac[0]=n;
    9fe0bcc2:	c01c                	sw	a5,0(s0)
  if(nfm1==0)return;
    9fe0bcc4:	0e0f0d63          	beqz	t5,9fe0bdbe <core_drft_init+0x1d6>
  argh=tpi/n;
    9fe0bcc8:	d007f7d3          	fcvt.s.w	fa5,a5
    9fe0bccc:	00006717          	auipc	a4,0x6
    9fe0bcd0:	75872a07          	flw	fs4,1880(a4) # 9fe12424 <__func__.1+0x26c>
  drfti1(n, wsave+n, ifac);
    9fe0bcd4:	00279713          	slli	a4,a5,0x2
  argh=tpi/n;
    9fe0bcd8:	18fa7a53          	fdiv.s	fs4,fs4,fa5
    9fe0bcdc:	ffff079b          	addiw	a5,t5,-1
  drfti1(n, wsave+n, ifac);
    9fe0bce0:	00e48d33          	add	s10,s1,a4
    9fe0bce4:	02079713          	slli	a4,a5,0x20
    9fe0bce8:	01e75793          	srli	a5,a4,0x1e
    9fe0bcec:	00c40713          	addi	a4,s0,12
    9fe0bcf0:	97ba                	add	a5,a5,a4
    9fe0bcf2:	00840693          	addi	a3,s0,8
    9fe0bcf6:	fc3e                	sd	a5,56(sp)
    9fe0bcf8:	008d0793          	addi	a5,s10,8
    9fe0bcfc:	e43e                	sd	a5,8(sp)
    9fe0bcfe:	e836                	sd	a3,16(sp)
  is=0;
    9fe0bd00:	ec02                	sd	zero,24(sp)
      for (ii=2;ii<ido;ii+=2){
    9fe0bd02:	4c89                	li	s9,2
    9fe0bd04:	00006797          	auipc	a5,0x6
    9fe0bd08:	50c7a987          	flw	fs3,1292(a5) # 9fe12210 <__func__.1+0x58>
    ip=ifac[k1+2];
    9fe0bd0c:	67c2                	ld	a5,16(sp)
    9fe0bd0e:	8c52                	mv	s8,s4
    ido=n/l2;
    9fe0bd10:	7742                	ld	a4,48(sp)
    ip=ifac[k1+2];
    9fe0bd12:	439c                	lw	a5,0(a5)
    l2=l1*ip;
    9fe0bd14:	03478a3b          	mulw	s4,a5,s4
    ipm=ip-1;
    9fe0bd18:	fff78b9b          	addiw	s7,a5,-1
    ido=n/l2;
    9fe0bd1c:	03474abb          	divw	s5,a4,s4
    9fe0bd20:	d256                	sw	s5,36(sp)
    for (j=0;j<ipm;j++){
    9fe0bd22:	09705863          	blez	s7,9fe0bdb2 <core_drft_init+0x1ca>
    9fe0bd26:	ffda8b1b          	addiw	s6,s5,-3
    9fe0bd2a:	6962                	ld	s2,24(sp)
    9fe0bd2c:	001b5b1b          	srliw	s6,s6,0x1
    9fe0bd30:	2781                	sext.w	a5,a5
    9fe0bd32:	f43e                	sd	a5,40(sp)
    9fe0bd34:	0b06                	slli	s6,s6,0x1
    9fe0bd36:	4981                	li	s3,0
    ld=0;
    9fe0bd38:	4481                	li	s1,0
      ld+=l1;
    9fe0bd3a:	018484bb          	addw	s1,s1,s8
      argld=(float)ld*argh;
    9fe0bd3e:	d004f953          	fcvt.s.w	fs2,s1
    9fe0bd42:	11497953          	fmul.s	fs2,fs2,fs4
      for (ii=2;ii<ido;ii+=2){
    9fe0bd46:	055cd863          	bge	s9,s5,9fe0bd96 <core_drft_init+0x1ae>
    9fe0bd4a:	00291793          	slli	a5,s2,0x2
    9fe0bd4e:	01a78db3          	add	s11,a5,s10
    9fe0bd52:	67a2                	ld	a5,8(sp)
    9fe0bd54:	01690433          	add	s0,s2,s6
      fi=0.f;
    9fe0bd58:	f00004d3          	fmv.w.x	fs1,zero
    9fe0bd5c:	040a                	slli	s0,s0,0x2
    9fe0bd5e:	943e                	add	s0,s0,a5
	fi+=1.f;
    9fe0bd60:	0134f4d3          	fadd.s	fs1,fs1,fs3
      for (ii=2;ii<ido;ii+=2){
    9fe0bd64:	0da1                	addi	s11,s11,8
	arg=fi*argld;
    9fe0bd66:	10997453          	fmul.s	fs0,fs2,fs1
	wa[i++]=(float)cos(arg);
    9fe0bd6a:	42040453          	fcvt.d.s	fs0,fs0
    9fe0bd6e:	22840553          	fmv.d	fa0,fs0
    9fe0bd72:	b61f40ef          	jal	ra,9fe008d2 <cos>
    9fe0bd76:	22a507d3          	fmv.d	fa5,fa0
	wa[i++]=(float)sin(arg);
    9fe0bd7a:	22840553          	fmv.d	fa0,fs0
	wa[i++]=(float)cos(arg);
    9fe0bd7e:	4017f7d3          	fcvt.s.d	fa5,fa5
    9fe0bd82:	fefdac27          	fsw	fa5,-8(s11)
	wa[i++]=(float)sin(arg);
    9fe0bd86:	de1f40ef          	jal	ra,9fe00b66 <sin>
    9fe0bd8a:	40157553          	fcvt.s.d	fa0,fa0
    9fe0bd8e:	feadae27          	fsw	fa0,-4(s11)
      for (ii=2;ii<ido;ii+=2){
    9fe0bd92:	fdb417e3          	bne	s0,s11,9fe0bd60 <core_drft_init+0x178>
    for (j=0;j<ipm;j++){
    9fe0bd96:	2985                	addiw	s3,s3,1
    9fe0bd98:	9956                	add	s2,s2,s5
    9fe0bd9a:	fb3b90e3          	bne	s7,s3,9fe0bd3a <core_drft_init+0x152>
      is+=ido;
    9fe0bd9e:	77a2                	ld	a5,40(sp)
    9fe0bda0:	66e2                	ld	a3,24(sp)
    9fe0bda2:	ffe7871b          	addiw	a4,a5,-2
    9fe0bda6:	5792                	lw	a5,36(sp)
    9fe0bda8:	02f7073b          	mulw	a4,a4,a5
    9fe0bdac:	9fb5                	addw	a5,a5,a3
    9fe0bdae:	9fb9                	addw	a5,a5,a4
    9fe0bdb0:	ec3e                	sd	a5,24(sp)
  for (k1=0;k1<nfm1;k1++){
    9fe0bdb2:	67c2                	ld	a5,16(sp)
    9fe0bdb4:	7762                	ld	a4,56(sp)
    9fe0bdb6:	0791                	addi	a5,a5,4
    9fe0bdb8:	e83e                	sd	a5,16(sp)
    9fe0bdba:	f4e799e3          	bne	a5,a4,9fe0bd0c <core_drft_init+0x124>
}
    9fe0bdbe:	60ee                	ld	ra,216(sp)
    9fe0bdc0:	644e                	ld	s0,208(sp)
    9fe0bdc2:	64ae                	ld	s1,200(sp)
    9fe0bdc4:	690e                	ld	s2,192(sp)
    9fe0bdc6:	79ea                	ld	s3,184(sp)
    9fe0bdc8:	7a4a                	ld	s4,176(sp)
    9fe0bdca:	7aaa                	ld	s5,168(sp)
    9fe0bdcc:	7b0a                	ld	s6,160(sp)
    9fe0bdce:	6bea                	ld	s7,152(sp)
    9fe0bdd0:	6c4a                	ld	s8,144(sp)
    9fe0bdd2:	6caa                	ld	s9,136(sp)
    9fe0bdd4:	6d0a                	ld	s10,128(sp)
    9fe0bdd6:	7de6                	ld	s11,120(sp)
    9fe0bdd8:	3426                	fld	fs0,104(sp)
    9fe0bdda:	3486                	fld	fs1,96(sp)
    9fe0bddc:	2966                	fld	fs2,88(sp)
    9fe0bdde:	29c6                	fld	fs3,80(sp)
    9fe0bde0:	2a26                	fld	fs4,72(sp)
    9fe0bde2:	612d                	addi	sp,sp,224
    9fe0bde4:	8082                	ret
    9fe0bde6:	0291                	addi	t0,t0,4
  if (nr!=0) goto L101;
    9fe0bde8:	85fa                	mv	a1,t5
    9fe0bdea:	8a3e                	mv	s4,a5
    9fe0bdec:	bdad                	j	9fe0bc66 <core_drft_init+0x7e>
    ntry+=2;
    9fe0bdee:	2509                	addiw	a0,a0,2
    9fe0bdf0:	b541                	j	9fe0bc70 <core_drft_init+0x88>

000000009fe0bdf2 <core_drft_clear>:

void core_drft_clear(struct drft_lookup *l)
{
  if(l)
    9fe0bdf2:	c505                	beqz	a0,9fe0be1a <core_drft_clear+0x28>
{
    9fe0bdf4:	1141                	addi	sp,sp,-16
    9fe0bdf6:	e022                	sd	s0,0(sp)
    9fe0bdf8:	e406                	sd	ra,8(sp)
    9fe0bdfa:	842a                	mv	s0,a0
  {
    if(l->trigcache)
    9fe0bdfc:	6508                	ld	a0,8(a0)
    9fe0bdfe:	c119                	beqz	a0,9fe0be04 <core_drft_clear+0x12>
   vPortFree(ptr);
    9fe0be00:	0dd020ef          	jal	ra,9fe0e6dc <vPortFree>
      mem_free(l->trigcache);
    if(l->splitcache)
    9fe0be04:	6808                	ld	a0,16(s0)
    9fe0be06:	c511                	beqz	a0,9fe0be12 <core_drft_clear+0x20>
      mem_free(l->splitcache);
  }
}
    9fe0be08:	6402                	ld	s0,0(sp)
    9fe0be0a:	60a2                	ld	ra,8(sp)
    9fe0be0c:	0141                	addi	sp,sp,16
    9fe0be0e:	0cf0206f          	j	9fe0e6dc <vPortFree>
    9fe0be12:	60a2                	ld	ra,8(sp)
    9fe0be14:	6402                	ld	s0,0(sp)
    9fe0be16:	0141                	addi	sp,sp,16
    9fe0be18:	8082                	ret
    9fe0be1a:	8082                	ret

000000009fe0be1c <b_log>:
 }
#endif

/* Function Definitions */
void b_log(float x[321])
{
    9fe0be1c:	1101                	addi	sp,sp,-32
    9fe0be1e:	e822                	sd	s0,16(sp)
    9fe0be20:	e426                	sd	s1,8(sp)
    9fe0be22:	ec06                	sd	ra,24(sp)
    9fe0be24:	842a                	mv	s0,a0
    9fe0be26:	50450493          	addi	s1,a0,1284
  int k;
  for (k = 0; k < 321; k++) {
#ifdef FAST_MATH_CALC
    x[k] = (float)fast_log(x[k]);
#else
    x[k] = (float)log(x[k]);
    9fe0be2a:	00042507          	flw	fa0,0(s0)
  for (k = 0; k < 321; k++) {
    9fe0be2e:	0411                	addi	s0,s0,4
    x[k] = (float)log(x[k]);
    9fe0be30:	42050553          	fcvt.d.s	fa0,fa0
    9fe0be34:	e27f40ef          	jal	ra,9fe00c5a <log>
    9fe0be38:	40157553          	fcvt.s.d	fa0,fa0
    9fe0be3c:	fea42e27          	fsw	fa0,-4(s0)
  for (k = 0; k < 321; k++) {
    9fe0be40:	fe9415e3          	bne	s0,s1,9fe0be2a <b_log+0xe>
#endif 
  }
}
    9fe0be44:	60e2                	ld	ra,24(sp)
    9fe0be46:	6442                	ld	s0,16(sp)
    9fe0be48:	64a2                	ld	s1,8(sp)
    9fe0be4a:	6105                	addi	sp,sp,32
    9fe0be4c:	8082                	ret

000000009fe0be4e <rt_hypotf>:

  return y;
}

float rt_hypotf(float u0, float u1)
{
    9fe0be4e:	1101                	addi	sp,sp,-32
    9fe0be50:	a422                	fsd	fs0,8(sp)
    9fe0be52:	20a50453          	fmv.s	fs0,fa0
  float b;
  
  #if 1
  a = u0;
  b = u1;
  y =  (float)sqrt(a * a + b * b);
    9fe0be56:	10b5f553          	fmul.s	fa0,fa1,fa1
{
    9fe0be5a:	a026                	fsd	fs1,0(sp)
    9fe0be5c:	ec06                	sd	ra,24(sp)
    9fe0be5e:	20b584d3          	fmv.s	fs1,fa1
  y =  (float)sqrt(a * a + b * b);
    9fe0be62:	50847543          	fmadd.s	fa0,fs0,fs0,fa0
    9fe0be66:	42050553          	fcvt.d.s	fa0,fa0
    9fe0be6a:	f89f40ef          	jal	ra,9fe00df2 <sqrt>
    9fe0be6e:	40157553          	fcvt.s.d	fa0,fa0
  if (y == 0.0F)    /* can avoid y to be zero if as denominator */
    9fe0be72:	f00007d3          	fmv.w.x	fa5,zero
    9fe0be76:	a0f527d3          	feq.s	a5,fa0,fa5
    9fe0be7a:	e791                	bnez	a5,9fe0be86 <rt_hypotf+0x38>
    y = a * 1.41421354F;
  }
  #endif

  return y;
}
    9fe0be7c:	60e2                	ld	ra,24(sp)
    9fe0be7e:	2422                	fld	fs0,8(sp)
    9fe0be80:	2482                	fld	fs1,0(sp)
    9fe0be82:	6105                	addi	sp,sp,32
    9fe0be84:	8082                	ret
      a = (float)fabs(u0);
    9fe0be86:	42040553          	fcvt.d.s	fa0,fs0
    9fe0be8a:	abff40ef          	jal	ra,9fe00948 <fabs>
    9fe0be8e:	22a50453          	fmv.d	fs0,fa0
      b = (float)fabs(u1);
    9fe0be92:	42048553          	fcvt.d.s	fa0,fs1
      a = (float)fabs(u0);
    9fe0be96:	40147453          	fcvt.s.d	fs0,fs0
      b = (float)fabs(u1);
    9fe0be9a:	aaff40ef          	jal	ra,9fe00948 <fabs>
    9fe0be9e:	401574d3          	fcvt.s.d	fs1,fa0
      if (a < b) {
    9fe0bea2:	a09417d3          	flt.s	a5,fs0,fs1
    9fe0bea6:	e3a1                	bnez	a5,9fe0bee6 <rt_hypotf+0x98>
      } else if (a > b) {
    9fe0bea8:	a08497d3          	flt.s	a5,fs1,fs0
    9fe0beac:	ef81                	bnez	a5,9fe0bec4 <rt_hypotf+0x76>
}
    9fe0beae:	60e2                	ld	ra,24(sp)
          y = a * 1.41421354F;
    9fe0beb0:	00006797          	auipc	a5,0x6
    9fe0beb4:	56c7a507          	flw	fa0,1388(a5) # 9fe1241c <__func__.1+0x264>
    9fe0beb8:	10a47553          	fmul.s	fa0,fs0,fa0
}
    9fe0bebc:	2482                	fld	fs1,0(sp)
    9fe0bebe:	2422                	fld	fs0,8(sp)
    9fe0bec0:	6105                	addi	sp,sp,32
    9fe0bec2:	8082                	ret
          b /= a;
    9fe0bec4:	1884f553          	fdiv.s	fa0,fs1,fs0
          y = a * (float)sqrt(b * b + 1.0F);
    9fe0bec8:	00006797          	auipc	a5,0x6
    9fe0becc:	3487a487          	flw	fs1,840(a5) # 9fe12210 <__func__.1+0x58>
    9fe0bed0:	48a57543          	fmadd.s	fa0,fa0,fa0,fs1
    9fe0bed4:	42050553          	fcvt.d.s	fa0,fa0
    9fe0bed8:	f1bf40ef          	jal	ra,9fe00df2 <sqrt>
    9fe0bedc:	40157553          	fcvt.s.d	fa0,fa0
    9fe0bee0:	10857553          	fmul.s	fa0,fa0,fs0
    9fe0bee4:	bf61                	j	9fe0be7c <rt_hypotf+0x2e>
          a /= b;
    9fe0bee6:	18947553          	fdiv.s	fa0,fs0,fs1
          y = b * (float)sqrt(a * a + 1.0F);
    9fe0beea:	00006797          	auipc	a5,0x6
    9fe0beee:	3267a407          	flw	fs0,806(a5) # 9fe12210 <__func__.1+0x58>
    9fe0bef2:	40a57543          	fmadd.s	fa0,fa0,fa0,fs0
    9fe0bef6:	42050553          	fcvt.d.s	fa0,fa0
    9fe0befa:	ef9f40ef          	jal	ra,9fe00df2 <sqrt>
}
    9fe0befe:	60e2                	ld	ra,24(sp)
          y = b * (float)sqrt(a * a + 1.0F);
    9fe0bf00:	40157553          	fcvt.s.d	fa0,fa0
}
    9fe0bf04:	2422                	fld	fs0,8(sp)
          y = b * (float)sqrt(a * a + 1.0F);
    9fe0bf06:	10957553          	fmul.s	fa0,fa0,fs1
}
    9fe0bf0a:	2482                	fld	fs1,0(sp)
    9fe0bf0c:	6105                	addi	sp,sp,32
    9fe0bf0e:	8082                	ret

000000009fe0bf10 <inv_dcache_range>:
	 __asm__ __volatile__(SYNC_S)

//void c900_cache_invalidate(phys_addr_t start, size_t size)
void inv_dcache_range(uintptr_t start, size_t size)
{
	CACHE_OP_RANGE(DCACHE_IPA_A0, start, size);
    9fe0bf10:	03f58793          	addi	a5,a1,63
    9fe0bf14:	97aa                	add	a5,a5,a0
    9fe0bf16:	fc07f793          	andi	a5,a5,-64
    9fe0bf1a:	fc057513          	andi	a0,a0,-64
    9fe0bf1e:	00f57863          	bgeu	a0,a5,9fe0bf2e <inv_dcache_range+0x1e>
    9fe0bf22:	02a5000b          	dcache.ipa	a0
    9fe0bf26:	04050513          	addi	a0,a0,64
    9fe0bf2a:	fef56ce3          	bltu	a0,a5,9fe0bf22 <inv_dcache_range+0x12>
    9fe0bf2e:	0190000b          	sync.s
}
    9fe0bf32:	8082                	ret

000000009fe0bf34 <clean_dcache_range>:

//void c900_cache_clean(phys_addr_t start, size_t size)
void clean_dcache_range(uintptr_t start, size_t size)
{
	CACHE_OP_RANGE(DCACHE_CPA_A0, start, size);
    9fe0bf34:	03f58793          	addi	a5,a1,63
    9fe0bf38:	97aa                	add	a5,a5,a0
    9fe0bf3a:	fc07f793          	andi	a5,a5,-64
    9fe0bf3e:	fc057513          	andi	a0,a0,-64
    9fe0bf42:	00f57863          	bgeu	a0,a5,9fe0bf52 <clean_dcache_range+0x1e>
    9fe0bf46:	0295000b          	dcache.cpa	a0
    9fe0bf4a:	04050513          	addi	a0,a0,64
    9fe0bf4e:	fef56ce3          	bltu	a0,a5,9fe0bf46 <clean_dcache_range+0x12>
    9fe0bf52:	0190000b          	sync.s
}
    9fe0bf56:	8082                	ret

000000009fe0bf58 <flush_dcache_range>:

//void c900_cache_flush(phys_addr_t start, size_t size)
void flush_dcache_range(uintptr_t start, size_t size)
{
	CACHE_OP_RANGE(DCACHE_CIPA_A0, start, size);
    9fe0bf58:	03f58793          	addi	a5,a1,63
    9fe0bf5c:	97aa                	add	a5,a5,a0
    9fe0bf5e:	fc07f793          	andi	a5,a5,-64
    9fe0bf62:	fc057513          	andi	a0,a0,-64
    9fe0bf66:	00f57863          	bgeu	a0,a5,9fe0bf76 <flush_dcache_range+0x1e>
    9fe0bf6a:	02b5000b          	dcache.cipa	a0
    9fe0bf6e:	04050513          	addi	a0,a0,64
    9fe0bf72:	fef56ce3          	bltu	a0,a5,9fe0bf6a <flush_dcache_range+0x12>
    9fe0bf76:	0190000b          	sync.s
}
    9fe0bf7a:	8082                	ret

000000009fe0bf7c <memset>:
void *memset(void *dest, int value, unsigned long size)
{
    char *pd = (char *) dest;
//	printf("memset size=%x\n", size);
    for(int i = 0 ; i < size; i++) {
        *pd++ = (char) value;
    9fe0bf7c:	0ff5f593          	andi	a1,a1,255
    9fe0bf80:	00c507b3          	add	a5,a0,a2
    for(int i = 0 ; i < size; i++) {
    9fe0bf84:	c611                	beqz	a2,9fe0bf90 <memset+0x14>
        *pd++ = (char) value;
    9fe0bf86:	0505                	addi	a0,a0,1
    9fe0bf88:	feb50fa3          	sb	a1,-1(a0)
    for(int i = 0 ; i < size; i++) {
    9fe0bf8c:	fef51de3          	bne	a0,a5,9fe0bf86 <memset+0xa>
    }
}
    9fe0bf90:	4501                	li	a0,0
    9fe0bf92:	8082                	ret

000000009fe0bf94 <printf>:

/* Choose max of 128 chars for now. */
#define PRINT_BUFFER_SIZE 128

int printf(const char *fmt, ...)
{
    9fe0bf94:	7111                	addi	sp,sp,-256
    9fe0bf96:	f526                	sd	s1,168(sp)
    9fe0bf98:	e5ae                	sd	a1,200(sp)
    9fe0bf9a:	84aa                	mv	s1,a0
	int count;
	int pos;
	long sec, usec;
	struct timeval tv;

	gettimeofday(&tv, NULL);
    9fe0bf9c:	4581                	li	a1,0
    9fe0bf9e:	0808                	addi	a0,sp,16
{
    9fe0bfa0:	fd06                	sd	ra,184(sp)
    9fe0bfa2:	f922                	sd	s0,176(sp)
    9fe0bfa4:	f9c2                	sd	a6,240(sp)
    9fe0bfa6:	fdc6                	sd	a7,248(sp)
    9fe0bfa8:	f5be                	sd	a5,232(sp)
    9fe0bfaa:	e9b2                	sd	a2,208(sp)
    9fe0bfac:	edb6                	sd	a3,216(sp)
    9fe0bfae:	f1ba                	sd	a4,224(sp)
	gettimeofday(&tv, NULL);
    9fe0bfb0:	2e0000ef          	jal	ra,9fe0c290 <gettimeofday>
	sec = tv.tv_sec;
	usec = tv.tv_usec;
	pos = snprintf(buf, sizeof(buf) - 1, "[%d.%6d]", sec, usec);
    9fe0bfb4:	6762                	ld	a4,24(sp)
    9fe0bfb6:	66c2                	ld	a3,16(sp)
    9fe0bfb8:	00006617          	auipc	a2,0x6
    9fe0bfbc:	fb060613          	addi	a2,a2,-80 # 9fe11f68 <ntryh.1+0x10>
    9fe0bfc0:	07f00593          	li	a1,127
    9fe0bfc4:	1008                	addi	a0,sp,32
    9fe0bfc6:	2aa000ef          	jal	ra,9fe0c270 <snprintf>

	va_start(args, fmt);
	vsnprintf(buf + pos, sizeof(buf) - 1 - pos, fmt, args);
    9fe0bfca:	101c                	addi	a5,sp,32
    9fe0bfcc:	07f00593          	li	a1,127
	va_start(args, fmt);
    9fe0bfd0:	01b4                	addi	a3,sp,200
	pos = snprintf(buf, sizeof(buf) - 1, "[%d.%6d]", sec, usec);
    9fe0bfd2:	842a                	mv	s0,a0
	vsnprintf(buf + pos, sizeof(buf) - 1 - pos, fmt, args);
    9fe0bfd4:	8626                	mv	a2,s1
    9fe0bfd6:	8d89                	sub	a1,a1,a0
    9fe0bfd8:	953e                	add	a0,a0,a5
	va_start(args, fmt);
    9fe0bfda:	e436                	sd	a3,8(sp)
	vsnprintf(buf + pos, sizeof(buf) - 1 - pos, fmt, args);
    9fe0bfdc:	01e000ef          	jal	ra,9fe0bffa <vsnprintf>
	va_end(args);

	/* Use putchar directly as 'puts()' adds a newline. */
	buf[PRINT_BUFFER_SIZE - 1] = '\0';
	count = uart_put_buff(buf);
    9fe0bfe0:	1008                	addi	a0,sp,32
	buf[PRINT_BUFFER_SIZE - 1] = '\0';
    9fe0bfe2:	08010fa3          	sb	zero,159(sp)
	count = uart_put_buff(buf);
    9fe0bfe6:	768000ef          	jal	ra,9fe0c74e <uart_put_buff>
	return (count + pos);
}
    9fe0bfea:	70ea                	ld	ra,184(sp)
    9fe0bfec:	9d21                	addw	a0,a0,s0
    9fe0bfee:	744a                	ld	s0,176(sp)
    9fe0bff0:	74aa                	ld	s1,168(sp)
    9fe0bff2:	6111                	addi	sp,sp,256
    9fe0bff4:	8082                	ret

000000009fe0bff6 <usleep>:
#include "arch_sleep.h"
#include "sleep.h"

void usleep(unsigned long useconds)
{
	arch_usleep(useconds);
    9fe0bff6:	0ea0406f          	j	9fe100e0 <arch_usleep>

000000009fe0bffa <vsnprintf>:
{
	bool format = false;
	bool longarg = false;
	size_t pos = 0;
	int shift_digit = 0;
	for (; *s; s++) {
    9fe0bffa:	00064703          	lbu	a4,0(a2)
{
    9fe0bffe:	832a                	mv	t1,a0
	for (; *s; s++) {
    9fe0c000:	24070a63          	beqz	a4,9fe0c254 <vsnprintf+0x25a>
{
    9fe0c004:	7139                	addi	sp,sp,-64
    9fe0c006:	fc22                	sd	s0,56(sp)
    9fe0c008:	f826                	sd	s1,48(sp)
    9fe0c00a:	f44a                	sd	s2,40(sp)
    9fe0c00c:	f04e                	sd	s3,32(sp)
    9fe0c00e:	ec52                	sd	s4,24(sp)
    9fe0c010:	e856                	sd	s5,16(sp)
    9fe0c012:	e45a                	sd	s6,8(sp)
	int shift_digit = 0;
    9fe0c014:	4501                	li	a0,0
	size_t pos = 0;
    9fe0c016:	4801                	li	a6,0
	bool longarg = false;
    9fe0c018:	4981                	li	s3,0
	bool format = false;
    9fe0c01a:	4881                	li	a7,0
			default:
				if(format)
					shift_digit = *s - '0';
				break;
			}
		} else if (*s == '%')
    9fe0c01c:	02500393          	li	t2,37
    9fe0c020:	42d5                	li	t0,21
    9fe0c022:	00006f17          	auipc	t5,0x6
    9fe0c026:	f52f0f13          	addi	t5,t5,-174 # 9fe11f74 <ntryh.1+0x1c>
				for (long nn = num; nn /= 10; digits++)
    9fe0c02a:	4e29                	li	t3,10
								out[pos + i] = '0';
    9fe0c02c:	03000413          	li	s0,48
						out[pos - 1] = '-';
    9fe0c030:	02d00913          	li	s2,45
						out[pos - 1] =
    9fe0c034:	4fa5                	li	t6,9
				for (int i = 2 * (longarg ? sizeof(long) :
    9fe0c036:	5ef1                	li	t4,-4
					out[pos - 1] = 'x';
    9fe0c038:	07800493          	li	s1,120
		if (format) {
    9fe0c03c:	16088363          	beqz	a7,9fe0c1a2 <vsnprintf+0x1a8>
			switch (*s) {
    9fe0c040:	f9d7079b          	addiw	a5,a4,-99
    9fe0c044:	0ff7f793          	andi	a5,a5,255
    9fe0c048:	00f2e763          	bltu	t0,a5,9fe0c056 <vsnprintf+0x5c>
    9fe0c04c:	078a                	slli	a5,a5,0x2
    9fe0c04e:	97fa                	add	a5,a5,t5
    9fe0c050:	439c                	lw	a5,0(a5)
    9fe0c052:	97fa                	add	a5,a5,t5
    9fe0c054:	8782                	jr	a5
					shift_digit = *s - '0';
    9fe0c056:	fd07051b          	addiw	a0,a4,-48
	for (; *s; s++) {
    9fe0c05a:	00164703          	lbu	a4,1(a2)
    9fe0c05e:	0605                	addi	a2,a2,1
    9fe0c060:	ff71                	bnez	a4,9fe0c03c <vsnprintf+0x42>
	}
	if (pos < n)
		out[pos] = 0;
	else if (n)
		out[n - 1] = 0;
	return pos;
    9fe0c062:	0008051b          	sext.w	a0,a6
	if (pos < n)
    9fe0c066:	14b86d63          	bltu	a6,a1,9fe0c1c0 <vsnprintf+0x1c6>
	else if (n)
    9fe0c06a:	c589                	beqz	a1,9fe0c074 <vsnprintf+0x7a>
		out[n - 1] = 0;
    9fe0c06c:	00b30833          	add	a6,t1,a1
    9fe0c070:	fe080fa3          	sb	zero,-1(a6)
}
    9fe0c074:	7462                	ld	s0,56(sp)
    9fe0c076:	74c2                	ld	s1,48(sp)
    9fe0c078:	7922                	ld	s2,40(sp)
    9fe0c07a:	7982                	ld	s3,32(sp)
    9fe0c07c:	6a62                	ld	s4,24(sp)
    9fe0c07e:	6ac2                	ld	s5,16(sp)
    9fe0c080:	6b22                	ld	s6,8(sp)
    9fe0c082:	6121                	addi	sp,sp,64
    9fe0c084:	8082                	ret
				long num = longarg ? va_arg(vl, long) :
    9fe0c086:	00868793          	addi	a5,a3,8
    9fe0c08a:	14099d63          	bnez	s3,9fe0c1e4 <vsnprintf+0x1ea>
    9fe0c08e:	0006aa83          	lw	s5,0(a3)
				for (int i = 2 * (longarg ? sizeof(long) :
    9fe0c092:	4b1d                	li	s6,7
						     va_arg(vl, int);
    9fe0c094:	86be                	mv	a3,a5
				     i >= 0; i--) {
    9fe0c096:	002b1713          	slli	a4,s6,0x2
				for (int i = 2 * (longarg ? sizeof(long) :
    9fe0c09a:	87c2                	mv	a5,a6
					if (++pos < n)
    9fe0c09c:	0785                	addi	a5,a5,1
    9fe0c09e:	02b7f063          	bgeu	a5,a1,9fe0c0be <vsnprintf+0xc4>
					int d = (num >> (4 * i)) & 0xF;
    9fe0c0a2:	40ead8b3          	sra	a7,s5,a4
							(d < 10 ? '0' + d :
    9fe0c0a6:	00f8fa13          	andi	s4,a7,15
						out[pos - 1] =
    9fe0c0aa:	057a0993          	addi	s3,s4,87
    9fe0c0ae:	014fc463          	blt	t6,s4,9fe0c0b6 <vsnprintf+0xbc>
    9fe0c0b2:	030a0993          	addi	s3,s4,48
    9fe0c0b6:	00f308b3          	add	a7,t1,a5
    9fe0c0ba:	ff388fa3          	sb	s3,-1(a7)
				for (int i = 2 * (longarg ? sizeof(long) :
    9fe0c0be:	3771                	addiw	a4,a4,-4
    9fe0c0c0:	fdd71ee3          	bne	a4,t4,9fe0c09c <vsnprintf+0xa2>
    9fe0c0c4:	0805                	addi	a6,a6,1
					if (++pos < n)
    9fe0c0c6:	985a                	add	a6,a6,s6
				longarg = false;
    9fe0c0c8:	4981                	li	s3,0
				format = false;
    9fe0c0ca:	4881                	li	a7,0
    9fe0c0cc:	b779                	j	9fe0c05a <vsnprintf+0x60>
				const char *s2 = va_arg(vl, const char *);
    9fe0c0ce:	0006b883          	ld	a7,0(a3)
    9fe0c0d2:	06a1                	addi	a3,a3,8
				while (*s2) {
    9fe0c0d4:	0008c703          	lbu	a4,0(a7)
    9fe0c0d8:	c305                	beqz	a4,9fe0c0f8 <vsnprintf+0xfe>
    9fe0c0da:	87c2                	mv	a5,a6
					if (++pos < n)
    9fe0c0dc:	0785                	addi	a5,a5,1
    9fe0c0de:	00b7f663          	bgeu	a5,a1,9fe0c0ea <vsnprintf+0xf0>
						out[pos - 1] = *s2;
    9fe0c0e2:	00f309b3          	add	s3,t1,a5
    9fe0c0e6:	fee98fa3          	sb	a4,-1(s3) # ffffffffffffefff <_end+0xffffffff6013f2ff>
				while (*s2) {
    9fe0c0ea:	41078733          	sub	a4,a5,a6
    9fe0c0ee:	9746                	add	a4,a4,a7
    9fe0c0f0:	00074703          	lbu	a4,0(a4)
    9fe0c0f4:	f765                	bnez	a4,9fe0c0dc <vsnprintf+0xe2>
    9fe0c0f6:	883e                	mv	a6,a5
				longarg = false;
    9fe0c0f8:	4981                	li	s3,0
				format = false;
    9fe0c0fa:	4881                	li	a7,0
    9fe0c0fc:	bfb9                	j	9fe0c05a <vsnprintf+0x60>
				if (++pos < n)
    9fe0c0fe:	00180793          	addi	a5,a6,1
    9fe0c102:	00b7f663          	bgeu	a5,a1,9fe0c10e <vsnprintf+0x114>
					out[pos - 1] = '0';
    9fe0c106:	01030733          	add	a4,t1,a6
    9fe0c10a:	00870023          	sb	s0,0(a4)
				if (++pos < n)
    9fe0c10e:	0809                	addi	a6,a6,2
				long num = longarg ? va_arg(vl, long) :
    9fe0c110:	00868713          	addi	a4,a3,8
				if (++pos < n)
    9fe0c114:	00b87563          	bgeu	a6,a1,9fe0c11e <vsnprintf+0x124>
					out[pos - 1] = 'x';
    9fe0c118:	979a                	add	a5,a5,t1
    9fe0c11a:	00978023          	sb	s1,0(a5)
				long num = longarg ? va_arg(vl, long) :
    9fe0c11e:	0006ba83          	ld	s5,0(a3)
				for (int i = 2 * (longarg ? sizeof(long) :
    9fe0c122:	4b3d                	li	s6,15
				long num = longarg ? va_arg(vl, long) :
    9fe0c124:	86ba                	mv	a3,a4
    9fe0c126:	bf85                	j	9fe0c096 <vsnprintf+0x9c>
    9fe0c128:	00868893          	addi	a7,a3,8
				long num = longarg ? va_arg(vl, long) :
    9fe0c12c:	08098e63          	beqz	s3,9fe0c1c8 <vsnprintf+0x1ce>
    9fe0c130:	6294                	ld	a3,0(a3)
				if (num < 0) {
    9fe0c132:	0806ce63          	bltz	a3,9fe0c1ce <vsnprintf+0x1d4>
				for (long nn = num; nn /= 10; digits++)
    9fe0c136:	03c6c7b3          	div	a5,a3,t3
				long digits = 1;
    9fe0c13a:	4705                	li	a4,1
				for (long nn = num; nn /= 10; digits++)
    9fe0c13c:	cbdd                	beqz	a5,9fe0c1f2 <vsnprintf+0x1f8>
    9fe0c13e:	03c7c7b3          	div	a5,a5,t3
    9fe0c142:	0705                	addi	a4,a4,1
    9fe0c144:	ffed                	bnez	a5,9fe0c13e <vsnprintf+0x144>
				if (shift_digit) {
    9fe0c146:	e55d                	bnez	a0,9fe0c1f4 <vsnprintf+0x1fa>
					for (int i = digits - 1; i >= 0; i--) {
    9fe0c148:	fff7051b          	addiw	a0,a4,-1
    9fe0c14c:	02054863          	bltz	a0,9fe0c17c <vsnprintf+0x182>
    9fe0c150:	00180a13          	addi	s4,a6,1
						if (pos + i + 1 < n)
    9fe0c154:	00aa07b3          	add	a5,s4,a0
    9fe0c158:	00b7fb63          	bgeu	a5,a1,9fe0c16e <vsnprintf+0x174>
							out[pos + i] = '0' + (num % 10);
    9fe0c15c:	03c6e7b3          	rem	a5,a3,t3
    9fe0c160:	00a809b3          	add	s3,a6,a0
    9fe0c164:	999a                	add	s3,s3,t1
    9fe0c166:	0307879b          	addiw	a5,a5,48
    9fe0c16a:	00f98023          	sb	a5,0(s3)
					for (int i = digits - 1; i >= 0; i--) {
    9fe0c16e:	157d                	addi	a0,a0,-1
    9fe0c170:	0005079b          	sext.w	a5,a0
						num /= 10;
    9fe0c174:	03c6c6b3          	div	a3,a3,t3
					for (int i = digits - 1; i >= 0; i--) {
    9fe0c178:	fc07dee3          	bgez	a5,9fe0c154 <vsnprintf+0x15a>
					pos += digits;
    9fe0c17c:	86c6                	mv	a3,a7
    9fe0c17e:	983a                	add	a6,a6,a4
    9fe0c180:	4501                	li	a0,0
				longarg = false;
    9fe0c182:	4981                	li	s3,0
				format = false;
    9fe0c184:	4881                	li	a7,0
    9fe0c186:	bdd1                	j	9fe0c05a <vsnprintf+0x60>
				if (++pos < n)
    9fe0c188:	00180793          	addi	a5,a6,1
    9fe0c18c:	f6b7f5e3          	bgeu	a5,a1,9fe0c0f6 <vsnprintf+0xfc>
					out[pos - 1] = (char)va_arg(vl, int);
    9fe0c190:	4298                	lw	a4,0(a3)
    9fe0c192:	981a                	add	a6,a6,t1
    9fe0c194:	06a1                	addi	a3,a3,8
    9fe0c196:	00e80023          	sb	a4,0(a6)
				longarg = false;
    9fe0c19a:	4981                	li	s3,0
					out[pos - 1] = (char)va_arg(vl, int);
    9fe0c19c:	883e                	mv	a6,a5
				format = false;
    9fe0c19e:	4881                	li	a7,0
    9fe0c1a0:	bd6d                	j	9fe0c05a <vsnprintf+0x60>
		} else if (*s == '%')
    9fe0c1a2:	00770b63          	beq	a4,t2,9fe0c1b8 <vsnprintf+0x1be>
		else if (++pos < n)
    9fe0c1a6:	00180793          	addi	a5,a6,1
    9fe0c1aa:	00b7f963          	bgeu	a5,a1,9fe0c1bc <vsnprintf+0x1c2>
			out[pos - 1] = *s;
    9fe0c1ae:	981a                	add	a6,a6,t1
    9fe0c1b0:	00e80023          	sb	a4,0(a6)
    9fe0c1b4:	883e                	mv	a6,a5
    9fe0c1b6:	b555                	j	9fe0c05a <vsnprintf+0x60>
			format = true;
    9fe0c1b8:	4885                	li	a7,1
    9fe0c1ba:	b545                	j	9fe0c05a <vsnprintf+0x60>
    9fe0c1bc:	883e                	mv	a6,a5
    9fe0c1be:	bd71                	j	9fe0c05a <vsnprintf+0x60>
		out[pos] = 0;
    9fe0c1c0:	981a                	add	a6,a6,t1
    9fe0c1c2:	00080023          	sb	zero,0(a6)
    9fe0c1c6:	b57d                	j	9fe0c074 <vsnprintf+0x7a>
				long num = longarg ? va_arg(vl, long) :
    9fe0c1c8:	4294                	lw	a3,0(a3)
				if (num < 0) {
    9fe0c1ca:	f606d6e3          	bgez	a3,9fe0c136 <vsnprintf+0x13c>
					if (++pos < n)
    9fe0c1ce:	00180793          	addi	a5,a6,1
					num = -num;
    9fe0c1d2:	40d006b3          	neg	a3,a3
					if (++pos < n)
    9fe0c1d6:	06b7fd63          	bgeu	a5,a1,9fe0c250 <vsnprintf+0x256>
						out[pos - 1] = '-';
    9fe0c1da:	981a                	add	a6,a6,t1
    9fe0c1dc:	01280023          	sb	s2,0(a6)
    9fe0c1e0:	883e                	mv	a6,a5
    9fe0c1e2:	bf91                	j	9fe0c136 <vsnprintf+0x13c>
				long num = longarg ? va_arg(vl, long) :
    9fe0c1e4:	0006ba83          	ld	s5,0(a3)
				for (int i = 2 * (longarg ? sizeof(long) :
    9fe0c1e8:	4b3d                	li	s6,15
				long num = longarg ? va_arg(vl, long) :
    9fe0c1ea:	86be                	mv	a3,a5
    9fe0c1ec:	b56d                	j	9fe0c096 <vsnprintf+0x9c>
		if (format) {
    9fe0c1ee:	89c6                	mv	s3,a7
    9fe0c1f0:	b5ad                	j	9fe0c05a <vsnprintf+0x60>
				if (shift_digit) {
    9fe0c1f2:	dd39                	beqz	a0,9fe0c150 <vsnprintf+0x156>
					for (int i = shift_digit - 1; i >= 0; i--) {
    9fe0c1f4:	fff5079b          	addiw	a5,a0,-1
    9fe0c1f8:	0407c663          	bltz	a5,9fe0c244 <vsnprintf+0x24a>
    9fe0c1fc:	00f809b3          	add	s3,a6,a5
    9fe0c200:	999a                	add	s3,s3,t1
    9fe0c202:	00180a13          	addi	s4,a6,1
							if (i >= shift_digit - digits) {
    9fe0c206:	40e50733          	sub	a4,a0,a4
    9fe0c20a:	a839                	j	9fe0c228 <vsnprintf+0x22e>
								out[pos + i] = '0' + (num % 10);
    9fe0c20c:	03c6eab3          	rem	s5,a3,t3
								num /= 10;
    9fe0c210:	03c6c6b3          	div	a3,a3,t3
								out[pos + i] = '0' + (num % 10);
    9fe0c214:	030a8a9b          	addiw	s5,s5,48
    9fe0c218:	01598023          	sb	s5,0(s3)
					for (int i = shift_digit - 1; i >= 0; i--) {
    9fe0c21c:	17fd                	addi	a5,a5,-1
    9fe0c21e:	00078a9b          	sext.w	s5,a5
    9fe0c222:	19fd                	addi	s3,s3,-1
    9fe0c224:	020ac063          	bltz	s5,9fe0c244 <vsnprintf+0x24a>
						if (pos + i + 1 < n) {
    9fe0c228:	00fa0ab3          	add	s5,s4,a5
    9fe0c22c:	febaf8e3          	bgeu	s5,a1,9fe0c21c <vsnprintf+0x222>
							if (i >= shift_digit - digits) {
    9fe0c230:	fce7dee3          	bge	a5,a4,9fe0c20c <vsnprintf+0x212>
					for (int i = shift_digit - 1; i >= 0; i--) {
    9fe0c234:	17fd                	addi	a5,a5,-1
								out[pos + i] = '0';
    9fe0c236:	00898023          	sb	s0,0(s3)
					for (int i = shift_digit - 1; i >= 0; i--) {
    9fe0c23a:	00078a9b          	sext.w	s5,a5
    9fe0c23e:	19fd                	addi	s3,s3,-1
    9fe0c240:	fe0ad4e3          	bgez	s5,9fe0c228 <vsnprintf+0x22e>
					pos += shift_digit;
    9fe0c244:	982a                	add	a6,a6,a0
					shift_digit = 0;
    9fe0c246:	86c6                	mv	a3,a7
    9fe0c248:	4501                	li	a0,0
				longarg = false;
    9fe0c24a:	4981                	li	s3,0
				format = false;
    9fe0c24c:	4881                	li	a7,0
    9fe0c24e:	b531                	j	9fe0c05a <vsnprintf+0x60>
    9fe0c250:	883e                	mv	a6,a5
    9fe0c252:	b5d5                	j	9fe0c136 <vsnprintf+0x13c>
	size_t pos = 0;
    9fe0c254:	4801                	li	a6,0
	for (; *s; s++) {
    9fe0c256:	4501                	li	a0,0
	if (pos < n)
    9fe0c258:	00b87663          	bgeu	a6,a1,9fe0c264 <vsnprintf+0x26a>
		out[pos] = 0;
    9fe0c25c:	981a                	add	a6,a6,t1
    9fe0c25e:	00080023          	sb	zero,0(a6)
    9fe0c262:	8082                	ret
	else if (n)
    9fe0c264:	c589                	beqz	a1,9fe0c26e <vsnprintf+0x274>
		out[n - 1] = 0;
    9fe0c266:	00b30833          	add	a6,t1,a1
    9fe0c26a:	fe080fa3          	sb	zero,-1(a6)
}
    9fe0c26e:	8082                	ret

000000009fe0c270 <snprintf>:

int snprintf(char *out, size_t n, const char *s, ...)
{
    9fe0c270:	715d                	addi	sp,sp,-80
	va_list vl;
	va_start(vl, s);
    9fe0c272:	02810313          	addi	t1,sp,40
{
    9fe0c276:	f436                	sd	a3,40(sp)
	int res = vsnprintf(out, n, s, vl);
    9fe0c278:	869a                	mv	a3,t1
{
    9fe0c27a:	ec06                	sd	ra,24(sp)
    9fe0c27c:	f83a                	sd	a4,48(sp)
    9fe0c27e:	fc3e                	sd	a5,56(sp)
    9fe0c280:	e0c2                	sd	a6,64(sp)
    9fe0c282:	e4c6                	sd	a7,72(sp)
	va_start(vl, s);
    9fe0c284:	e41a                	sd	t1,8(sp)
	int res = vsnprintf(out, n, s, vl);
    9fe0c286:	d75ff0ef          	jal	ra,9fe0bffa <vsnprintf>
	va_end(vl);
	return res;
}
    9fe0c28a:	60e2                	ld	ra,24(sp)
    9fe0c28c:	6161                	addi	sp,sp,80
    9fe0c28e:	8082                	ret

000000009fe0c290 <gettimeofday>:
#include "FreeRTOSConfig.h"
#include "arch_time.h"
#include <sys/time.h>

int gettimeofday(struct timeval *tv /*in*/, void *tz /*in*/)
{
    9fe0c290:	86aa                	mv	a3,a0

inline static unsigned long GetSysTime(void)
{
	unsigned long sys_tick = 0;

	asm volatile("rdtime %0": "=r"(sys_tick));
    9fe0c292:	c0102773          	rdtime	a4
	unsigned long tick;
	tick = GetSysTime();
	tv->tv_sec = tick / configSYS_CLOCK_HZ;
    9fe0c296:	017d87b7          	lui	a5,0x17d8
    9fe0c29a:	84078793          	addi	a5,a5,-1984 # 17d7840 <CVIMMAP_FREERTOS_RESERVED_ION_SIZE+0x1d7840>
    9fe0c29e:	02f757b3          	divu	a5,a4,a5
	tv->tv_usec = (tick / (configSYS_CLOCK_HZ / 1000000)) - tv->tv_sec * 1000000;
    9fe0c2a2:	4665                	li	a2,25
	/* not support tz */
	if (tz) {
    9fe0c2a4:	00b035b3          	snez	a1,a1
		return -1;
	}
	return 0;
}
    9fe0c2a8:	40b00533          	neg	a0,a1
	tv->tv_usec = (tick / (configSYS_CLOCK_HZ / 1000000)) - tv->tv_sec * 1000000;
    9fe0c2ac:	02c75733          	divu	a4,a4,a2
    9fe0c2b0:	000f4637          	lui	a2,0xf4
    9fe0c2b4:	24060613          	addi	a2,a2,576 # f4240 <CVIMMAP_ATF_SIZE+0x74240>
	tv->tv_sec = tick / configSYS_CLOCK_HZ;
    9fe0c2b8:	e29c                	sd	a5,0(a3)
	tv->tv_usec = (tick / (configSYS_CLOCK_HZ / 1000000)) - tv->tv_sec * 1000000;
    9fe0c2ba:	02c787b3          	mul	a5,a5,a2
    9fe0c2be:	40f707b3          	sub	a5,a4,a5
    9fe0c2c2:	e69c                	sd	a5,8(a3)
}
    9fe0c2c4:	8082                	ret

000000009fe0c2c6 <plic_ack_irq>:
	writel(value, (void *) addr);
}

static inline uint32_t mmio_read_32(uintptr_t addr)
{
	return readl((void *) addr);
    9fe0c2c6:	702007b7          	lui	a5,0x70200
    9fe0c2ca:	43c8                	lw	a0,4(a5)
    9fe0c2cc:	2501                	sext.w	a0,a0
    9fe0c2ce:	0820000f          	fence	i,r
	mmio_write_32((PLIC_ENABLE1 + (mask / 32) * 4), value);
}
static int plic_ack_irq()
{
	return mmio_read_32(PLIC_CLAIM);
}
    9fe0c2d2:	8082                	ret

000000009fe0c2d4 <plic_eoi_irq>:
	writel(value, (void *) addr);
    9fe0c2d4:	0140000f          	fence	w,o
    9fe0c2d8:	702007b7          	lui	a5,0x70200
    9fe0c2dc:	c3c8                	sw	a0,4(a5)
static void plic_eoi_irq(int irq_num)
{
//	printf("plic_eoi_irq %d irq=%d mip = %x\n", __LINE__, irq_num, read_csr(mip));
	mmio_write_32(PLIC_CLAIM, irq_num);
}
    9fe0c2de:	8082                	ret

000000009fe0c2e0 <plic_set_priority_irq>:
    9fe0c2e0:	0140000f          	fence	w,o

static void plic_set_priority_irq(int irq_num, int priority)
{
	//printf("plic_set_priority_irq addr(%x)=%d\n",PLIC_PRIORITY0 + irq_num*4,priority);
	mmio_write_32((PLIC_PRIORITY0 + irq_num*4), priority);
    9fe0c2e4:	1c0007b7          	lui	a5,0x1c000
    9fe0c2e8:	9d3d                	addw	a0,a0,a5
    9fe0c2ea:	0025151b          	slliw	a0,a0,0x2
    9fe0c2ee:	c10c                	sw	a1,0(a0)
}
    9fe0c2f0:	8082                	ret

000000009fe0c2f2 <plic_set_threshold>:
    9fe0c2f2:	0140000f          	fence	w,o
    9fe0c2f6:	702007b7          	lui	a5,0x70200
    9fe0c2fa:	c388                	sw	a0,0(a5)

static void plic_set_threshold(uint32_t threshold)
{
	mmio_write_32((PLIC_THRESHOLD), threshold);
}
    9fe0c2fc:	8082                	ret

000000009fe0c2fe <plic_unmask_irq>:
	if(irq_num < 16) {
    9fe0c2fe:	47bd                	li	a5,15
	uint32_t mask = (irq_num);
    9fe0c300:	0005059b          	sext.w	a1,a0
	if(irq_num < 16) {
    9fe0c304:	02a7da63          	bge	a5,a0,9fe0c338 <plic_unmask_irq+0x3a>
	value = mmio_read_32(PLIC_ENABLE1 + 4 * (mask / 32));
    9fe0c308:	1c001637          	lui	a2,0x1c001
    9fe0c30c:	0055d79b          	srliw	a5,a1,0x5
    9fe0c310:	8006061b          	addiw	a2,a2,-2048
    9fe0c314:	9fb1                	addw	a5,a5,a2
    9fe0c316:	0027979b          	slliw	a5,a5,0x2
    9fe0c31a:	1782                	slli	a5,a5,0x20
    9fe0c31c:	9381                	srli	a5,a5,0x20
	return readl((void *) addr);
    9fe0c31e:	4398                	lw	a4,0(a5)
    9fe0c320:	2701                	sext.w	a4,a4
    9fe0c322:	0820000f          	fence	i,r
	value |= (0x1 << (mask % 32));
    9fe0c326:	4685                	li	a3,1
    9fe0c328:	00b696bb          	sllw	a3,a3,a1
    9fe0c32c:	8f55                	or	a4,a4,a3
    9fe0c32e:	2701                	sext.w	a4,a4
	writel(value, (void *) addr);
    9fe0c330:	0140000f          	fence	w,o
    9fe0c334:	c398                	sw	a4,0(a5)
}
    9fe0c336:	8082                	ret
		printf("unmask irq_num is %d\n",irq_num);
    9fe0c338:	85aa                	mv	a1,a0
    9fe0c33a:	00006517          	auipc	a0,0x6
    9fe0c33e:	c9650513          	addi	a0,a0,-874 # 9fe11fd0 <ntryh.1+0x78>
    9fe0c342:	c53ff06f          	j	9fe0bf94 <printf>

000000009fe0c346 <GetCommInfo>:
{
    9fe0c346:	1101                	addi	sp,sp,-32
    9fe0c348:	e426                	sd	s1,8(sp)
	memcpy((char *) &transfer_config, (char *) MAILBOX_REG_BUFF, sizeof(struct transfer_config_t));
    9fe0c34a:	019005b7          	lui	a1,0x1900
    9fe0c34e:	00011497          	auipc	s1,0x11
    9fe0c352:	0f248493          	addi	s1,s1,242 # 9fe1d440 <transfer_config>
    9fe0c356:	04000613          	li	a2,64
    9fe0c35a:	40058593          	addi	a1,a1,1024 # 1900400 <CVIMMAP_FREERTOS_RESERVED_ION_SIZE+0x300400>
    9fe0c35e:	8526                	mv	a0,s1
{
    9fe0c360:	ec06                	sd	ra,24(sp)
    9fe0c362:	e822                	sd	s0,16(sp)
	memcpy((char *) &transfer_config, (char *) MAILBOX_REG_BUFF, sizeof(struct transfer_config_t));
    9fe0c364:	d9df30ef          	jal	ra,9fe00100 <memcpy>
	for (int i = 0; i < transfer_config.conf_size; i++, ptr++) {
    9fe0c368:	40d4                	lw	a3,4(s1)
    9fe0c36a:	cec1                	beqz	a3,9fe0c402 <GetCommInfo+0xbc>
    9fe0c36c:	1682                	slli	a3,a3,0x20
    9fe0c36e:	9281                	srli	a3,a3,0x20
    9fe0c370:	96a6                	add	a3,a3,s1
	unsigned char *ptr = &transfer_config;
    9fe0c372:	87a6                	mv	a5,s1
	unsigned short checksum = 0;
    9fe0c374:	4401                	li	s0,0
		checksum += *ptr;
    9fe0c376:	0007c703          	lbu	a4,0(a5) # 70200000 <CVIMMAP_DRAM_SIZE+0x50200000>
	for (int i = 0; i < transfer_config.conf_size; i++, ptr++) {
    9fe0c37a:	0785                	addi	a5,a5,1
		checksum += *ptr;
    9fe0c37c:	9c39                	addw	s0,s0,a4
    9fe0c37e:	1442                	slli	s0,s0,0x30
    9fe0c380:	9041                	srli	s0,s0,0x30
	for (int i = 0; i < transfer_config.conf_size; i++, ptr++) {
    9fe0c382:	fef69ae3          	bne	a3,a5,9fe0c376 <GetCommInfo+0x30>
	if (checksum != transfer_config.checksum) {
    9fe0c386:	0244d583          	lhu	a1,36(s1)
    9fe0c38a:	0004061b          	sext.w	a2,s0
    9fe0c38e:	04858763          	beq	a1,s0,9fe0c3dc <GetCommInfo+0x96>
		printf("checksum fail (%x, %x)\n", transfer_config.checksum, checksum);
    9fe0c392:	00006517          	auipc	a0,0x6
    9fe0c396:	c5650513          	addi	a0,a0,-938 # 9fe11fe8 <ntryh.1+0x90>
    9fe0c39a:	bfbff0ef          	jal	ra,9fe0bf94 <printf>
		printf("use default confi setting\n");
    9fe0c39e:	00006517          	auipc	a0,0x6
    9fe0c3a2:	c6250513          	addi	a0,a0,-926 # 9fe12000 <ntryh.1+0xa8>
    9fe0c3a6:	befff0ef          	jal	ra,9fe0bf94 <printf>
		transfer_config.conf_magic = RTOS_MAGIC_HEADER;
    9fe0c3aa:	00006797          	auipc	a5,0x6
    9fe0c3ae:	07e7b783          	ld	a5,126(a5) # 9fe12428 <__func__.1+0x270>
    9fe0c3b2:	e09c                	sd	a5,0(s1)
		transfer_config.isp_buffer_addr = ISP_MEM_BASE_ADDR;
    9fe0c3b4:	00006797          	auipc	a5,0x6
    9fe0c3b8:	07c7b783          	ld	a5,124(a5) # 9fe12430 <__func__.1+0x278>
    9fe0c3bc:	e49c                	sd	a5,8(s1)
		transfer_config.encode_img_addr = H26X_BITSTREAM_ADDR;
    9fe0c3be:	00006797          	auipc	a5,0x6
    9fe0c3c2:	07a7b783          	ld	a5,122(a5) # 9fe12438 <__func__.1+0x280>
    9fe0c3c6:	e89c                	sd	a5,16(s1)
		transfer_config.encode_buf_addr = H26X_ENC_BUFF_ADDR;
    9fe0c3c8:	0107d7b7          	lui	a5,0x107d
    9fe0c3cc:	079e                	slli	a5,a5,0x7
    9fe0c3ce:	ec9c                	sd	a5,24(s1)
		transfer_config.dump_print_enable = 0;
    9fe0c3d0:	6785                	lui	a5,0x1
    9fe0c3d2:	c0078793          	addi	a5,a5,-1024 # c00 <_EL1_STACK_SIZE+0x400>
    9fe0c3d6:	d09c                	sw	a5,32(s1)
		transfer_config.checksum = checksum;
    9fe0c3d8:	02849223          	sh	s0,36(s1)
	dump_uart_init();
    9fe0c3dc:	1fe000ef          	jal	ra,9fe0c5da <dump_uart_init>
	transfer_config.mcu_status = MCU_STATUS_RTOS_T1_INIT;
    9fe0c3e0:	6785                	lui	a5,0x1
}
    9fe0c3e2:	6442                	ld	s0,16(sp)
	transfer_config.mcu_status = MCU_STATUS_RTOS_T1_INIT;
    9fe0c3e4:	80478793          	addi	a5,a5,-2044 # 804 <_EL1_STACK_SIZE+0x4>
}
    9fe0c3e8:	60e2                	ld	ra,24(sp)
	transfer_config.mcu_status = MCU_STATUS_RTOS_T1_INIT;
    9fe0c3ea:	02f49323          	sh	a5,38(s1)
}
    9fe0c3ee:	64a2                	ld	s1,8(sp)
	flush_dcache_range(&transfer_config, sizeof (struct transfer_config_t));
    9fe0c3f0:	04000593          	li	a1,64
    9fe0c3f4:	00011517          	auipc	a0,0x11
    9fe0c3f8:	04c50513          	addi	a0,a0,76 # 9fe1d440 <transfer_config>
}
    9fe0c3fc:	6105                	addi	sp,sp,32
	flush_dcache_range(&transfer_config, sizeof (struct transfer_config_t));
    9fe0c3fe:	b5bff06f          	j	9fe0bf58 <flush_dcache_range>
	unsigned short checksum = 0;
    9fe0c402:	4401                	li	s0,0
    9fe0c404:	b749                	j	9fe0c386 <GetCommInfo+0x40>

000000009fe0c406 <post_system_init>:
{
    9fe0c406:	1141                	addi	sp,sp,-16
	printf("Post system init done\n");
    9fe0c408:	00006517          	auipc	a0,0x6
    9fe0c40c:	c1850513          	addi	a0,a0,-1000 # 9fe12020 <ntryh.1+0xc8>
{
    9fe0c410:	e406                	sd	ra,8(sp)
	printf("Post system init done\n");
    9fe0c412:	b83ff0ef          	jal	ra,9fe0bf94 <printf>
}
    9fe0c416:	60a2                	ld	ra,8(sp)
    9fe0c418:	0141                	addi	sp,sp,16
	GetCommInfo();
    9fe0c41a:	f2dff06f          	j	9fe0c346 <GetCommInfo>

000000009fe0c41e <irq_init>:
	.irq_eoi        = plic_eoi_irq,
	.irq_set_threshold = plic_set_threshold,
};

void irq_init(void)
{
    9fe0c41e:	1141                	addi	sp,sp,-16
    9fe0c420:	e406                	sd	ra,8(sp)
	int i;
	// clear interrupt enable
	write_csr(mie, 0);
    9fe0c422:	30405073          	csrwi	mie,0
	// clear interrupt pending
	write_csr(mip, 0);
    9fe0c426:	34405073          	csrwi	mip,0
    9fe0c42a:	700007b7          	lui	a5,0x70000

	// Clean the setting of all IRQ
	for (i = 0; i < IRQ_NUM_MAX / 4; i = i + 4) {
    9fe0c42e:	02078713          	addi	a4,a5,32 # 70000020 <CVIMMAP_DRAM_SIZE+0x50000020>
    9fe0c432:	0140000f          	fence	w,o
    9fe0c436:	0007a023          	sw	zero,0(a5)
    9fe0c43a:	0791                	addi	a5,a5,4
    9fe0c43c:	fee79be3          	bne	a5,a4,9fe0c432 <irq_init+0x14>
    9fe0c440:	700017b7          	lui	a5,0x70001
    9fe0c444:	6605                	lui	a2,0x1
		mmio_write_32(((uintptr_t) PLIC_PRIORITY0 + i), 0);
	}

	for (i = 0; i <= IRQ_NUM_MAX / 32; i++) {
    9fe0c446:	01478693          	addi	a3,a5,20 # 70001014 <CVIMMAP_DRAM_SIZE+0x50001014>
    9fe0c44a:	0140000f          	fence	w,o
    9fe0c44e:	0007a023          	sw	zero,0(a5)
    9fe0c452:	0140000f          	fence	w,o
    9fe0c456:	00c78733          	add	a4,a5,a2
    9fe0c45a:	00072023          	sw	zero,0(a4)
    9fe0c45e:	0791                	addi	a5,a5,4
    9fe0c460:	fed795e3          	bne	a5,a3,9fe0c44a <irq_init+0x2c>
		mmio_write_32((PLIC_PENDING1  + i * 4), 0);
		mmio_write_32((PLIC_ENABLE1  + i * 4), 0);
	}

	memset(g_irq_action, 0, sizeof(struct irq_action) * IRQ_NUM_MAX);
    9fe0c464:	40060613          	addi	a2,a2,1024 # 1400 <_EL1_STACK_SIZE+0xc00>
    9fe0c468:	4581                	li	a1,0
    9fe0c46a:	00010517          	auipc	a0,0x10
    9fe0c46e:	bd650513          	addi	a0,a0,-1066 # 9fe1c040 <g_irq_action>
    9fe0c472:	b0bff0ef          	jal	ra,9fe0bf7c <memset>
	sirq_chip.irq_set_threshold(0);
    9fe0c476:	4501                	li	a0,0
    9fe0c478:	e7bff0ef          	jal	ra,9fe0c2f2 <plic_set_threshold>

    set_csr(mstatus, MSTATUS_MIE);
    9fe0c47c:	300467f3          	csrrsi	a5,mstatus,8

	// MIP_MTIE & MIP_MTIE will be enabled in port.c
    //set_csr(mie, MIP_MEIE);
    //set_csr(mie, MIP_MTIE);
}
    9fe0c480:	60a2                	ld	ra,8(sp)
    9fe0c482:	0141                	addi	sp,sp,16
    9fe0c484:	8082                	ret

000000009fe0c486 <pre_system_init>:
{
    9fe0c486:	1141                	addi	sp,sp,-16
    9fe0c488:	e406                	sd	ra,8(sp)
	pinmux_init();
    9fe0c48a:	0f0000ef          	jal	ra,9fe0c57a <pinmux_init>
	uart_init();
    9fe0c48e:	0ee000ef          	jal	ra,9fe0c57c <uart_init>
	irq_init();
    9fe0c492:	f8dff0ef          	jal	ra,9fe0c41e <irq_init>
}
    9fe0c496:	60a2                	ld	ra,8(sp)
	printf("Pre system init done\n");
    9fe0c498:	00006517          	auipc	a0,0x6
    9fe0c49c:	ba050513          	addi	a0,a0,-1120 # 9fe12038 <ntryh.1+0xe0>
}
    9fe0c4a0:	0141                	addi	sp,sp,16
	printf("Pre system init done\n");
    9fe0c4a2:	af3ff06f          	j	9fe0bf94 <printf>

000000009fe0c4a6 <request_irq>:

int request_irq(int irqn, irq_handler_t handler, unsigned long flags,
        const char *name, void *priv)
{
    9fe0c4a6:	7139                	addi	sp,sp,-64
    9fe0c4a8:	f04a                	sd	s2,32(sp)
	//printf("request_irq irqn=%d\n handler=%lx  name = %s\n",irqn,(long) handler,name);
	g_irq_action[irqn].handler = handler;
    9fe0c4aa:	00251913          	slli	s2,a0,0x2
{
    9fe0c4ae:	f822                	sd	s0,48(sp)
    9fe0c4b0:	842a                	mv	s0,a0
	g_irq_action[irqn].handler = handler;
    9fe0c4b2:	954a                	add	a0,a0,s2
{
    9fe0c4b4:	f426                	sd	s1,40(sp)
	g_irq_action[irqn].handler = handler;
    9fe0c4b6:	050e                	slli	a0,a0,0x3
    9fe0c4b8:	00010497          	auipc	s1,0x10
    9fe0c4bc:	b8848493          	addi	s1,s1,-1144 # 9fe1c040 <g_irq_action>
{
    9fe0c4c0:	ec4e                	sd	s3,24(sp)
    9fe0c4c2:	e852                	sd	s4,16(sp)
    9fe0c4c4:	e456                	sd	s5,8(sp)
    9fe0c4c6:	fc06                	sd	ra,56(sp)
	g_irq_action[irqn].handler = handler;
    9fe0c4c8:	00a48ab3          	add	s5,s1,a0
    9fe0c4cc:	00bab023          	sd	a1,0(s5)
{
    9fe0c4d0:	8a32                	mv	s4,a2
    9fe0c4d2:	89ba                	mv	s3,a4
	if (name) {
    9fe0c4d4:	ca89                	beqz	a3,9fe0c4e6 <request_irq+0x40>
		memcpy(g_irq_action[irqn].name, name, sizeof(g_irq_action[irqn].name));
    9fe0c4d6:	0561                	addi	a0,a0,24
    9fe0c4d8:	4641                	li	a2,16
    9fe0c4da:	85b6                	mv	a1,a3
    9fe0c4dc:	9526                	add	a0,a0,s1
    9fe0c4de:	c23f30ef          	jal	ra,9fe00100 <memcpy>
		g_irq_action[irqn].name[sizeof(g_irq_action[irqn].name) - 1] = 0;
    9fe0c4e2:	020a83a3          	sb	zero,39(s5)
	}
	g_irq_action[irqn].irqn = irqn ; //- gic_data.hwirq_base;
    9fe0c4e6:	008907b3          	add	a5,s2,s0
    9fe0c4ea:	078e                	slli	a5,a5,0x3
    9fe0c4ec:	97a6                	add	a5,a5,s1
	g_irq_action[irqn].flags = flags;
	g_irq_action[irqn].priv = priv;
	// set highest priority
	sirq_chip.irq_set_priority( irqn, 7);
    9fe0c4ee:	8522                	mv	a0,s0
	g_irq_action[irqn].irqn = irqn ; //- gic_data.hwirq_base;
    9fe0c4f0:	c7c0                	sw	s0,12(a5)
	g_irq_action[irqn].flags = flags;
    9fe0c4f2:	0147a423          	sw	s4,8(a5)
	g_irq_action[irqn].priv = priv;
    9fe0c4f6:	0137b823          	sd	s3,16(a5)
	sirq_chip.irq_set_priority( irqn, 7);
    9fe0c4fa:	459d                	li	a1,7
    9fe0c4fc:	de5ff0ef          	jal	ra,9fe0c2e0 <plic_set_priority_irq>
	// unmask irq
	sirq_chip.irq_unmask( irqn);
    9fe0c500:	8522                	mv	a0,s0
    9fe0c502:	dfdff0ef          	jal	ra,9fe0c2fe <plic_unmask_irq>

	return 0;
}
    9fe0c506:	70e2                	ld	ra,56(sp)
    9fe0c508:	7442                	ld	s0,48(sp)
    9fe0c50a:	74a2                	ld	s1,40(sp)
    9fe0c50c:	7902                	ld	s2,32(sp)
    9fe0c50e:	69e2                	ld	s3,24(sp)
    9fe0c510:	6a42                	ld	s4,16(sp)
    9fe0c512:	6aa2                	ld	s5,8(sp)
    9fe0c514:	4501                	li	a0,0
    9fe0c516:	6121                	addi	sp,sp,64
    9fe0c518:	8082                	ret

000000009fe0c51a <do_irq>:

void do_irq(void)
{
    9fe0c51a:	1101                	addi	sp,sp,-32
    9fe0c51c:	e426                	sd	s1,8(sp)
    9fe0c51e:	e04a                	sd	s2,0(sp)
    9fe0c520:	ec06                	sd	ra,24(sp)
    9fe0c522:	e822                	sd	s0,16(sp)
    9fe0c524:	00010497          	auipc	s1,0x10
    9fe0c528:	b1c48493          	addi	s1,s1,-1252 # 9fe1c040 <g_irq_action>
		irqn = sirq_chip.irq_ack();
		if(g_irq_action[irqn].handler && irqn) {
			//printf("do_irq irqn=%d\n",irqn);
			g_irq_action[irqn].handler(g_irq_action[irqn].irqn, g_irq_action[irqn].priv);
		} else if(irqn)
			printf("g_irq_action[%i] NULL",irqn);
    9fe0c52c:	00006917          	auipc	s2,0x6
    9fe0c530:	b2490913          	addi	s2,s2,-1244 # 9fe12050 <ntryh.1+0xf8>
		irqn = sirq_chip.irq_ack();
    9fe0c534:	d93ff0ef          	jal	ra,9fe0c2c6 <plic_ack_irq>
		if(g_irq_action[irqn].handler && irqn) {
    9fe0c538:	00251793          	slli	a5,a0,0x2
    9fe0c53c:	97aa                	add	a5,a5,a0
    9fe0c53e:	078e                	slli	a5,a5,0x3
    9fe0c540:	97a6                	add	a5,a5,s1
    9fe0c542:	6398                	ld	a4,0(a5)
		irqn = sirq_chip.irq_ack();
    9fe0c544:	842a                	mv	s0,a0
		if(g_irq_action[irqn].handler && irqn) {
    9fe0c546:	cf09                	beqz	a4,9fe0c560 <do_irq+0x46>
    9fe0c548:	e50d                	bnez	a0,9fe0c572 <do_irq+0x58>
			break;
		// clear plic pending
		sirq_chip.irq_eoi(irqn);
	}while(1);
	// clear external interrupt pending
	clear_csr(mip, MIP_MEIE);
    9fe0c54a:	6785                	lui	a5,0x1
    9fe0c54c:	8007879b          	addiw	a5,a5,-2048
    9fe0c550:	3447b7f3          	csrrc	a5,mip,a5
}
    9fe0c554:	60e2                	ld	ra,24(sp)
    9fe0c556:	6442                	ld	s0,16(sp)
    9fe0c558:	64a2                	ld	s1,8(sp)
    9fe0c55a:	6902                	ld	s2,0(sp)
    9fe0c55c:	6105                	addi	sp,sp,32
    9fe0c55e:	8082                	ret
			printf("g_irq_action[%i] NULL",irqn);
    9fe0c560:	85aa                	mv	a1,a0
    9fe0c562:	854a                	mv	a0,s2
		} else if(irqn)
    9fe0c564:	d07d                	beqz	s0,9fe0c54a <do_irq+0x30>
			printf("g_irq_action[%i] NULL",irqn);
    9fe0c566:	a2fff0ef          	jal	ra,9fe0bf94 <printf>
		sirq_chip.irq_eoi(irqn);
    9fe0c56a:	8522                	mv	a0,s0
    9fe0c56c:	d69ff0ef          	jal	ra,9fe0c2d4 <plic_eoi_irq>
		irqn = sirq_chip.irq_ack();
    9fe0c570:	b7d1                	j	9fe0c534 <do_irq+0x1a>
			g_irq_action[irqn].handler(g_irq_action[irqn].irqn, g_irq_action[irqn].priv);
    9fe0c572:	6b8c                	ld	a1,16(a5)
    9fe0c574:	47c8                	lw	a0,12(a5)
    9fe0c576:	9702                	jalr	a4
    9fe0c578:	bfcd                	j	9fe0c56a <do_irq+0x50>

000000009fe0c57a <pinmux_init>:
// #elif defined(BOARD_WEVB_006A)

// #elif defined(BOARD_WEVB_007A)

// #endif
}
    9fe0c57a:	8082                	ret

000000009fe0c57c <uart_init>:
	int uart_clock = 25 * 1000 * 1000;

	/* set uart to pinmux_uart1 */
	//pinmux_config(PINMUX_UART0);

	hal_uart_init(UART0, baudrate, uart_clock);
    9fe0c57c:	017d8637          	lui	a2,0x17d8
    9fe0c580:	65f1                	lui	a1,0x1c
    9fe0c582:	84060613          	addi	a2,a2,-1984 # 17d7840 <CVIMMAP_FREERTOS_RESERVED_ION_SIZE+0x1d7840>
    9fe0c586:	20058593          	addi	a1,a1,512 # 1c200 <_EL1_STACK_SIZE+0x1ba00>
    9fe0c58a:	4501                	li	a0,0
    9fe0c58c:	6f70106f          	j	9fe0e482 <hal_uart_init>

000000009fe0c590 <uart_puts>:
	return ch;
}

void uart_puts(char *str)
{
	if (!str)
    9fe0c590:	c521                	beqz	a0,9fe0c5d8 <uart_puts+0x48>
{
    9fe0c592:	1101                	addi	sp,sp,-32
    9fe0c594:	e426                	sd	s1,8(sp)
    9fe0c596:	ec06                	sd	ra,24(sp)
    9fe0c598:	e822                	sd	s0,16(sp)
    9fe0c59a:	e04a                	sd	s2,0(sp)
		return;

	while (*str) {
    9fe0c59c:	00054403          	lbu	s0,0(a0)
    9fe0c5a0:	84aa                	mv	s1,a0
    9fe0c5a2:	c40d                	beqz	s0,9fe0c5cc <uart_puts+0x3c>
	if (ch == '\n') {
    9fe0c5a4:	4929                	li	s2,10
    9fe0c5a6:	a039                	j	9fe0c5b4 <uart_puts+0x24>
	hal_uart_putc(ch);
    9fe0c5a8:	8522                	mv	a0,s0
    9fe0c5aa:	767010ef          	jal	ra,9fe0e510 <hal_uart_putc>
	while (*str) {
    9fe0c5ae:	0004c403          	lbu	s0,0(s1)
    9fe0c5b2:	cc09                	beqz	s0,9fe0c5cc <uart_puts+0x3c>
		uart_putc(*str++);
    9fe0c5b4:	0485                	addi	s1,s1,1
	if (ch == '\n') {
    9fe0c5b6:	ff2419e3          	bne	s0,s2,9fe0c5a8 <uart_puts+0x18>
		hal_uart_putc('\r');
    9fe0c5ba:	4535                	li	a0,13
    9fe0c5bc:	755010ef          	jal	ra,9fe0e510 <hal_uart_putc>
	hal_uart_putc(ch);
    9fe0c5c0:	8522                	mv	a0,s0
    9fe0c5c2:	74f010ef          	jal	ra,9fe0e510 <hal_uart_putc>
	while (*str) {
    9fe0c5c6:	0004c403          	lbu	s0,0(s1)
    9fe0c5ca:	f46d                	bnez	s0,9fe0c5b4 <uart_puts+0x24>
	}
}
    9fe0c5cc:	60e2                	ld	ra,24(sp)
    9fe0c5ce:	6442                	ld	s0,16(sp)
    9fe0c5d0:	64a2                	ld	s1,8(sp)
    9fe0c5d2:	6902                	ld	s2,0(sp)
    9fe0c5d4:	6105                	addi	sp,sp,32
    9fe0c5d6:	8082                	ret
    9fe0c5d8:	8082                	ret

000000009fe0c5da <dump_uart_init>:
}

DEFINE_CVI_SPINLOCK(printf_lock, SPIN_UART);

struct dump_uart_s *dump_uart_init(void)
{
    9fe0c5da:	7179                	addi	sp,sp,-48
    9fe0c5dc:	ec26                	sd	s1,24(sp)
	char * ptr;
	static int init_enable = 0;
	int dump_size;

	if (!init_enable) {
    9fe0c5de:	00013497          	auipc	s1,0x13
    9fe0c5e2:	60a48493          	addi	s1,s1,1546 # 9fe1fbe8 <init_enable.0>
    9fe0c5e6:	4090                	lw	a2,0(s1)
{
    9fe0c5e8:	f022                	sd	s0,32(sp)
    9fe0c5ea:	f406                	sd	ra,40(sp)
    9fe0c5ec:	e84a                	sd	s2,16(sp)
    9fe0c5ee:	e44e                	sd	s3,8(sp)
		if (transfer_config.dump_print_size_idx >= DUMP_PRINT_SZ_IDX_LIMIT ||
    9fe0c5f0:	00011417          	auipc	s0,0x11
    9fe0c5f4:	e5040413          	addi	s0,s0,-432 # 9fe1d440 <transfer_config>
	if (!init_enable) {
    9fe0c5f8:	ea3d                	bnez	a2,9fe0c66e <dump_uart_init+0x94>
		if (transfer_config.dump_print_size_idx >= DUMP_PRINT_SZ_IDX_LIMIT ||
    9fe0c5fa:	02144703          	lbu	a4,33(s0)
    9fe0c5fe:	4695                	li	a3,5
    9fe0c600:	ff47079b          	addiw	a5,a4,-12
    9fe0c604:	0ff7f793          	andi	a5,a5,255
    9fe0c608:	04f6ee63          	bltu	a3,a5,9fe0c664 <dump_uart_init+0x8a>
			transfer_config.dump_print_size_idx < DUMP_PRINT_SZ_IDX_4K)
			dump_size = 1 << DUMP_PRINT_SZ_IDX_4K;
		else
			dump_size = 1 << transfer_config.dump_print_size_idx;
    9fe0c60c:	4505                	li	a0,1
    9fe0c60e:	00e5193b          	sllw	s2,a0,a4

	    ptr = (char *) malloc(dump_size + 0x40);
    9fe0c612:	0409051b          	addiw	a0,s2,64
    9fe0c616:	761010ef          	jal	ra,9fe0e576 <pvPortMalloc>
		if (ptr == 0)
    9fe0c61a:	cd15                	beqz	a0,9fe0c656 <dump_uart_init+0x7c>
			return 0;

		dump_uart = ((((unsigned long)ptr) + 0x3F) & ~0x3F);
    9fe0c61c:	03f50513          	addi	a0,a0,63
	    dump_uart->dump_uart_pos = 0;
		dump_uart->dump_uart_overflow = 0;
		dump_uart->dump_uart_max_size = dump_size - sizeof(struct dump_uart_s);
		dump_uart->dump_uart_ptr = ((unsigned int) dump_uart) + sizeof(struct dump_uart_s);
    9fe0c620:	57fd                	li	a5,-1
		dump_uart = ((((unsigned long)ptr) + 0x3F) & ~0x3F);
    9fe0c622:	fc057513          	andi	a0,a0,-64
		dump_uart->dump_uart_ptr = ((unsigned int) dump_uart) + sizeof(struct dump_uart_s);
    9fe0c626:	9381                	srli	a5,a5,0x20
		dump_uart = ((((unsigned long)ptr) + 0x3F) & ~0x3F);
    9fe0c628:	00013997          	auipc	s3,0x13
    9fe0c62c:	5b898993          	addi	s3,s3,1464 # 9fe1fbe0 <dump_uart>
		dump_uart->dump_uart_ptr = ((unsigned int) dump_uart) + sizeof(struct dump_uart_s);
    9fe0c630:	8fe9                	and	a5,a5,a0
    9fe0c632:	07c9                	addi	a5,a5,18
		dump_uart = ((((unsigned long)ptr) + 0x3F) & ~0x3F);
    9fe0c634:	00a9b023          	sd	a0,0(s3)
		dump_uart->dump_uart_max_size = dump_size - sizeof(struct dump_uart_s);
    9fe0c638:	3939                	addiw	s2,s2,-18
		dump_uart->dump_uart_ptr = ((unsigned int) dump_uart) + sizeof(struct dump_uart_s);
    9fe0c63a:	e11c                	sd	a5,0(a0)
	    dump_uart->dump_uart_pos = 0;
    9fe0c63c:	00052623          	sw	zero,12(a0)
		init_enable = 1;
    9fe0c640:	4785                	li	a5,1
		dump_uart->dump_uart_overflow = 0;
    9fe0c642:	000508a3          	sb	zero,17(a0)
		dump_uart->dump_uart_max_size = dump_size - sizeof(struct dump_uart_s);
    9fe0c646:	01252423          	sw	s2,8(a0)
		init_enable = 1;
    9fe0c64a:	c09c                	sw	a5,0(s1)
	} else
		printf("transfer_config.dump_print_enable = %d, enable =%d\n", transfer_config.dump_print_enable, init_enable);

	if (transfer_config.dump_print_enable) {
    9fe0c64c:	02044783          	lbu	a5,32(s0)
    9fe0c650:	ef95                	bnez	a5,9fe0c68c <dump_uart_init+0xb2>
		printf("dump_print_enable & log will not print\n");
		dump_uart_enable();
	}
	return dump_uart;
    9fe0c652:	0009b503          	ld	a0,0(s3)
}
    9fe0c656:	70a2                	ld	ra,40(sp)
    9fe0c658:	7402                	ld	s0,32(sp)
    9fe0c65a:	64e2                	ld	s1,24(sp)
    9fe0c65c:	6942                	ld	s2,16(sp)
    9fe0c65e:	69a2                	ld	s3,8(sp)
    9fe0c660:	6145                	addi	sp,sp,48
    9fe0c662:	8082                	ret
    9fe0c664:	6505                	lui	a0,0x1
    9fe0c666:	04050513          	addi	a0,a0,64 # 1040 <_EL1_STACK_SIZE+0x840>
			dump_size = 1 << DUMP_PRINT_SZ_IDX_4K;
    9fe0c66a:	6905                	lui	s2,0x1
    9fe0c66c:	b76d                	j	9fe0c616 <dump_uart_init+0x3c>
		printf("transfer_config.dump_print_enable = %d, enable =%d\n", transfer_config.dump_print_enable, init_enable);
    9fe0c66e:	02044583          	lbu	a1,32(s0)
    9fe0c672:	00006517          	auipc	a0,0x6
    9fe0c676:	9f650513          	addi	a0,a0,-1546 # 9fe12068 <ntryh.1+0x110>
    9fe0c67a:	00013997          	auipc	s3,0x13
    9fe0c67e:	56698993          	addi	s3,s3,1382 # 9fe1fbe0 <dump_uart>
    9fe0c682:	913ff0ef          	jal	ra,9fe0bf94 <printf>
	if (transfer_config.dump_print_enable) {
    9fe0c686:	02044783          	lbu	a5,32(s0)
    9fe0c68a:	d7e1                	beqz	a5,9fe0c652 <dump_uart_init+0x78>
		printf("dump_print_enable & log will not print\n");
    9fe0c68c:	00006517          	auipc	a0,0x6
    9fe0c690:	a1450513          	addi	a0,a0,-1516 # 9fe120a0 <ntryh.1+0x148>
    9fe0c694:	901ff0ef          	jal	ra,9fe0bf94 <printf>

void dump_uart_enable(void)
{
	dump_uart->dump_uart_enable = 1;
    9fe0c698:	0009b503          	ld	a0,0(s3)
	uart_putc_enable = 0;
    9fe0c69c:	00007797          	auipc	a5,0x7
    9fe0c6a0:	ae07a423          	sw	zero,-1304(a5) # 9fe13184 <uart_putc_enable>
	dump_uart->dump_uart_enable = 1;
    9fe0c6a4:	4785                	li	a5,1
    9fe0c6a6:	00f50823          	sb	a5,16(a0)
}
    9fe0c6aa:	70a2                	ld	ra,40(sp)
    9fe0c6ac:	7402                	ld	s0,32(sp)
    9fe0c6ae:	64e2                	ld	s1,24(sp)
    9fe0c6b0:	6942                	ld	s2,16(sp)
    9fe0c6b2:	69a2                	ld	s3,8(sp)
    9fe0c6b4:	6145                	addi	sp,sp,48
    9fe0c6b6:	8082                	ret

000000009fe0c6b8 <dump_uart_enable>:
	dump_uart->dump_uart_enable = 1;
    9fe0c6b8:	00013797          	auipc	a5,0x13
    9fe0c6bc:	5287b783          	ld	a5,1320(a5) # 9fe1fbe0 <dump_uart>
    9fe0c6c0:	4705                	li	a4,1
    9fe0c6c2:	00e78823          	sb	a4,16(a5)
	uart_putc_enable = 0;
    9fe0c6c6:	00007797          	auipc	a5,0x7
    9fe0c6ca:	aa07af23          	sw	zero,-1346(a5) # 9fe13184 <uart_putc_enable>
}
    9fe0c6ce:	8082                	ret

000000009fe0c6d0 <dump_uart_disable>:

void dump_uart_disable(void)
{
	dump_uart->dump_uart_enable = 0;
    9fe0c6d0:	00013797          	auipc	a5,0x13
    9fe0c6d4:	5107b783          	ld	a5,1296(a5) # 9fe1fbe0 <dump_uart>
    9fe0c6d8:	00078823          	sb	zero,16(a5)
	uart_putc_enable = 1;
    9fe0c6dc:	4785                	li	a5,1
    9fe0c6de:	00007717          	auipc	a4,0x7
    9fe0c6e2:	aaf72323          	sw	a5,-1370(a4) # 9fe13184 <uart_putc_enable>
}
    9fe0c6e6:	8082                	ret

000000009fe0c6e8 <dump_uart_msg>:
struct dump_uart_s *dump_uart_msg(void)
{
	int flags;
	int dump_size;

	if (transfer_config.dump_print_size_idx >= DUMP_PRINT_SZ_IDX_LIMIT ||
    9fe0c6e8:	00011717          	auipc	a4,0x11
    9fe0c6ec:	d7974703          	lbu	a4,-647(a4) # 9fe1d461 <transfer_config+0x21>
{
    9fe0c6f0:	1101                	addi	sp,sp,-32
	if (transfer_config.dump_print_size_idx >= DUMP_PRINT_SZ_IDX_LIMIT ||
    9fe0c6f2:	ff47079b          	addiw	a5,a4,-12
{
    9fe0c6f6:	e426                	sd	s1,8(sp)
    9fe0c6f8:	ec06                	sd	ra,24(sp)
    9fe0c6fa:	e822                	sd	s0,16(sp)
    9fe0c6fc:	e04a                	sd	s2,0(sp)
	if (transfer_config.dump_print_size_idx >= DUMP_PRINT_SZ_IDX_LIMIT ||
    9fe0c6fe:	0ff7f793          	andi	a5,a5,255
    9fe0c702:	4695                	li	a3,5
    9fe0c704:	6485                	lui	s1,0x1
    9fe0c706:	00f6e563          	bltu	a3,a5,9fe0c710 <dump_uart_msg+0x28>
		transfer_config.dump_print_size_idx < DUMP_PRINT_SZ_IDX_4K)
		dump_size = 1 << DUMP_PRINT_SZ_IDX_4K;
	else
		dump_size = 1 << transfer_config.dump_print_size_idx;
    9fe0c70a:	4485                	li	s1,1
    9fe0c70c:	00e494bb          	sllw	s1,s1,a4


	drv_spin_lock_irqsave(&printf_lock, flags);
    9fe0c710:	00013517          	auipc	a0,0x13
    9fe0c714:	4e050513          	addi	a0,a0,1248 # 9fe1fbf0 <printf_lock>
    9fe0c718:	4fc000ef          	jal	ra,9fe0cc14 <_hw_raw_spin_lock_irqsave>
	flush_dcache_range(dump_uart, dump_size);
    9fe0c71c:	00013917          	auipc	s2,0x13
    9fe0c720:	4c490913          	addi	s2,s2,1220 # 9fe1fbe0 <dump_uart>
	drv_spin_lock_irqsave(&printf_lock, flags);
    9fe0c724:	842a                	mv	s0,a0
	flush_dcache_range(dump_uart, dump_size);
    9fe0c726:	00093503          	ld	a0,0(s2)
    9fe0c72a:	85a6                	mv	a1,s1
    9fe0c72c:	82dff0ef          	jal	ra,9fe0bf58 <flush_dcache_range>
	drv_spin_unlock_irqrestore(&printf_lock, flags);
    9fe0c730:	85a2                	mv	a1,s0
    9fe0c732:	00013517          	auipc	a0,0x13
    9fe0c736:	4be50513          	addi	a0,a0,1214 # 9fe1fbf0 <printf_lock>
    9fe0c73a:	540000ef          	jal	ra,9fe0cc7a <_hw_raw_spin_unlock_irqrestore>
	return dump_uart;
}
    9fe0c73e:	60e2                	ld	ra,24(sp)
    9fe0c740:	6442                	ld	s0,16(sp)
    9fe0c742:	00093503          	ld	a0,0(s2)
    9fe0c746:	64a2                	ld	s1,8(sp)
    9fe0c748:	6902                	ld	s2,0(sp)
    9fe0c74a:	6105                	addi	sp,sp,32
    9fe0c74c:	8082                	ret

000000009fe0c74e <uart_put_buff>:

int uart_put_buff(char *buf)
{
    9fe0c74e:	7179                	addi	sp,sp,-48
    9fe0c750:	e84a                	sd	s2,16(sp)
    9fe0c752:	892a                	mv	s2,a0
	int flags;
	int count = 0;
	char *ptr;

	drv_spin_lock_irqsave(&printf_lock, flags);
    9fe0c754:	00013517          	auipc	a0,0x13
    9fe0c758:	49c50513          	addi	a0,a0,1180 # 9fe1fbf0 <printf_lock>
{
    9fe0c75c:	f022                	sd	s0,32(sp)
    9fe0c75e:	f406                	sd	ra,40(sp)
    9fe0c760:	ec26                	sd	s1,24(sp)
    9fe0c762:	e44e                	sd	s3,8(sp)
    9fe0c764:	e052                	sd	s4,0(sp)
	drv_spin_lock_irqsave(&printf_lock, flags);
    9fe0c766:	4ae000ef          	jal	ra,9fe0cc14 <_hw_raw_spin_lock_irqsave>

	if (uart_putc_enable) {
    9fe0c76a:	00007797          	auipc	a5,0x7
    9fe0c76e:	a1a7a783          	lw	a5,-1510(a5) # 9fe13184 <uart_putc_enable>
	drv_spin_lock_irqsave(&printf_lock, flags);
    9fe0c772:	842a                	mv	s0,a0
	if (uart_putc_enable) {
    9fe0c774:	30079463          	bnez	a5,9fe0ca7c <uart_put_buff+0x32e>
				break;
	        }
		}
	} else {

		ptr = (char *)dump_uart->dump_uart_ptr;
    9fe0c778:	00013897          	auipc	a7,0x13
    9fe0c77c:	46888893          	addi	a7,a7,1128 # 9fe1fbe0 <dump_uart>
    9fe0c780:	0008b783          	ld	a5,0(a7)
    9fe0c784:	0017ce83          	lbu	t4,1(a5)
    9fe0c788:	0007c683          	lbu	a3,0(a5)
    9fe0c78c:	0027ce03          	lbu	t3,2(a5)
		ptr[dump_uart->dump_uart_pos++] = 'R';
    9fe0c790:	00d7c503          	lbu	a0,13(a5)
		ptr = (char *)dump_uart->dump_uart_ptr;
    9fe0c794:	0037c303          	lbu	t1,3(a5)
		ptr[dump_uart->dump_uart_pos++] = 'R';
    9fe0c798:	00c7cf03          	lbu	t5,12(a5)
    9fe0c79c:	00e7c583          	lbu	a1,14(a5)
		ptr = (char *)dump_uart->dump_uart_ptr;
    9fe0c7a0:	0047c603          	lbu	a2,4(a5)
    9fe0c7a4:	0ea2                	slli	t4,t4,0x8
		ptr[dump_uart->dump_uart_pos++] = 'R';
    9fe0c7a6:	00f7c703          	lbu	a4,15(a5)
		ptr = (char *)dump_uart->dump_uart_ptr;
    9fe0c7aa:	0057c803          	lbu	a6,5(a5)
    9fe0c7ae:	00deeeb3          	or	t4,t4,a3
    9fe0c7b2:	0e42                	slli	t3,t3,0x10
    9fe0c7b4:	0067c683          	lbu	a3,6(a5)
    9fe0c7b8:	01de6e33          	or	t3,t3,t4
    9fe0c7bc:	0362                	slli	t1,t1,0x18
		ptr[dump_uart->dump_uart_pos++] = 'R';
    9fe0c7be:	0522                	slli	a0,a0,0x8
		ptr = (char *)dump_uart->dump_uart_ptr;
    9fe0c7c0:	0077ce83          	lbu	t4,7(a5)
		ptr[dump_uart->dump_uart_pos++] = 'R';
    9fe0c7c4:	01e56533          	or	a0,a0,t5
		ptr = (char *)dump_uart->dump_uart_ptr;
    9fe0c7c8:	01c36333          	or	t1,t1,t3
    9fe0c7cc:	1602                	slli	a2,a2,0x20
		ptr[dump_uart->dump_uart_pos++] = 'R';
    9fe0c7ce:	05c2                	slli	a1,a1,0x10
    9fe0c7d0:	8dc9                	or	a1,a1,a0
		ptr = (char *)dump_uart->dump_uart_ptr;
    9fe0c7d2:	00666633          	or	a2,a2,t1
    9fe0c7d6:	1822                	slli	a6,a6,0x28
		ptr[dump_uart->dump_uart_pos++] = 'R';
    9fe0c7d8:	0762                	slli	a4,a4,0x18
    9fe0c7da:	8f4d                	or	a4,a4,a1
		ptr = (char *)dump_uart->dump_uart_ptr;
    9fe0c7dc:	00c86833          	or	a6,a6,a2
    9fe0c7e0:	16c2                	slli	a3,a3,0x30
		ptr[dump_uart->dump_uart_pos++] = 'R';
    9fe0c7e2:	0017061b          	addiw	a2,a4,1
		ptr = (char *)dump_uart->dump_uart_ptr;
    9fe0c7e6:	0106e6b3          	or	a3,a3,a6
    9fe0c7ea:	038e9813          	slli	a6,t4,0x38
    9fe0c7ee:	00d86833          	or	a6,a6,a3
		ptr[dump_uart->dump_uart_pos++] = 'R';
    9fe0c7f2:	0086551b          	srliw	a0,a2,0x8
    9fe0c7f6:	0106559b          	srliw	a1,a2,0x10
    9fe0c7fa:	0186569b          	srliw	a3,a2,0x18
    9fe0c7fe:	00a786a3          	sb	a0,13(a5)
    9fe0c802:	00c78623          	sb	a2,12(a5)
    9fe0c806:	00b78723          	sb	a1,14(a5)
    9fe0c80a:	00d787a3          	sb	a3,15(a5)
    9fe0c80e:	9742                	add	a4,a4,a6
    9fe0c810:	05200793          	li	a5,82
    9fe0c814:	00f70023          	sb	a5,0(a4)
		ptr[dump_uart->dump_uart_pos++] = 'T';
    9fe0c818:	0008b703          	ld	a4,0(a7)
    9fe0c81c:	00d74603          	lbu	a2,13(a4)
    9fe0c820:	00c74583          	lbu	a1,12(a4)
    9fe0c824:	00e74683          	lbu	a3,14(a4)
    9fe0c828:	00f74783          	lbu	a5,15(a4)
    9fe0c82c:	0622                	slli	a2,a2,0x8
    9fe0c82e:	8e4d                	or	a2,a2,a1
    9fe0c830:	06c2                	slli	a3,a3,0x10
    9fe0c832:	8ed1                	or	a3,a3,a2
    9fe0c834:	07e2                	slli	a5,a5,0x18
    9fe0c836:	8fd5                	or	a5,a5,a3
    9fe0c838:	0017869b          	addiw	a3,a5,1
    9fe0c83c:	0086d51b          	srliw	a0,a3,0x8
    9fe0c840:	0106d59b          	srliw	a1,a3,0x10
    9fe0c844:	0186d61b          	srliw	a2,a3,0x18
    9fe0c848:	00d70623          	sb	a3,12(a4)
    9fe0c84c:	00a706a3          	sb	a0,13(a4)
    9fe0c850:	00b70723          	sb	a1,14(a4)
    9fe0c854:	00c707a3          	sb	a2,15(a4)
    9fe0c858:	97c2                	add	a5,a5,a6
    9fe0c85a:	05400713          	li	a4,84
    9fe0c85e:	00e78023          	sb	a4,0(a5)
		ptr[dump_uart->dump_uart_pos++] = 'D';
    9fe0c862:	0008b703          	ld	a4,0(a7)
    9fe0c866:	00d74603          	lbu	a2,13(a4)
    9fe0c86a:	00c74583          	lbu	a1,12(a4)
    9fe0c86e:	00e74683          	lbu	a3,14(a4)
    9fe0c872:	00f74783          	lbu	a5,15(a4)
    9fe0c876:	0622                	slli	a2,a2,0x8
    9fe0c878:	8e4d                	or	a2,a2,a1
    9fe0c87a:	06c2                	slli	a3,a3,0x10
    9fe0c87c:	8ed1                	or	a3,a3,a2
    9fe0c87e:	07e2                	slli	a5,a5,0x18
    9fe0c880:	8fd5                	or	a5,a5,a3
    9fe0c882:	0017869b          	addiw	a3,a5,1
    9fe0c886:	0086d51b          	srliw	a0,a3,0x8
    9fe0c88a:	0106d59b          	srliw	a1,a3,0x10
    9fe0c88e:	0186d61b          	srliw	a2,a3,0x18
    9fe0c892:	00d70623          	sb	a3,12(a4)
    9fe0c896:	00a706a3          	sb	a0,13(a4)
    9fe0c89a:	00b70723          	sb	a1,14(a4)
    9fe0c89e:	00c707a3          	sb	a2,15(a4)
    9fe0c8a2:	97c2                	add	a5,a5,a6
    9fe0c8a4:	04400713          	li	a4,68
    9fe0c8a8:	00e78023          	sb	a4,0(a5)
		ptr[dump_uart->dump_uart_pos++] = ':';
    9fe0c8ac:	0008b703          	ld	a4,0(a7)
    9fe0c8b0:	00d74603          	lbu	a2,13(a4)
    9fe0c8b4:	00c74583          	lbu	a1,12(a4)
    9fe0c8b8:	00e74683          	lbu	a3,14(a4)
    9fe0c8bc:	00f74783          	lbu	a5,15(a4)
    9fe0c8c0:	0622                	slli	a2,a2,0x8
    9fe0c8c2:	8e4d                	or	a2,a2,a1
    9fe0c8c4:	06c2                	slli	a3,a3,0x10
    9fe0c8c6:	8ed1                	or	a3,a3,a2
    9fe0c8c8:	07e2                	slli	a5,a5,0x18
    9fe0c8ca:	8fd5                	or	a5,a5,a3
    9fe0c8cc:	0017869b          	addiw	a3,a5,1
    9fe0c8d0:	0086d51b          	srliw	a0,a3,0x8
    9fe0c8d4:	0106d59b          	srliw	a1,a3,0x10
    9fe0c8d8:	0186d61b          	srliw	a2,a3,0x18
    9fe0c8dc:	00d70623          	sb	a3,12(a4)
    9fe0c8e0:	00a706a3          	sb	a0,13(a4)
    9fe0c8e4:	00b70723          	sb	a1,14(a4)
    9fe0c8e8:	00c707a3          	sb	a2,15(a4)
    9fe0c8ec:	97c2                	add	a5,a5,a6
    9fe0c8ee:	03a00713          	li	a4,58
    9fe0c8f2:	00e78023          	sb	a4,0(a5)
		ptr[dump_uart->dump_uart_pos++] = ' ';
    9fe0c8f6:	0008b703          	ld	a4,0(a7)
    9fe0c8fa:	00d74603          	lbu	a2,13(a4)
    9fe0c8fe:	00c74583          	lbu	a1,12(a4)
    9fe0c902:	00e74683          	lbu	a3,14(a4)
    9fe0c906:	00f74783          	lbu	a5,15(a4)
    9fe0c90a:	0622                	slli	a2,a2,0x8
    9fe0c90c:	8e4d                	or	a2,a2,a1
    9fe0c90e:	06c2                	slli	a3,a3,0x10
    9fe0c910:	8ed1                	or	a3,a3,a2
    9fe0c912:	07e2                	slli	a5,a5,0x18
    9fe0c914:	8fd5                	or	a5,a5,a3
    9fe0c916:	0017869b          	addiw	a3,a5,1
    9fe0c91a:	0106d59b          	srliw	a1,a3,0x10
    9fe0c91e:	0086d51b          	srliw	a0,a3,0x8
    9fe0c922:	0186d61b          	srliw	a2,a3,0x18
    9fe0c926:	00d70623          	sb	a3,12(a4)
    9fe0c92a:	00a706a3          	sb	a0,13(a4)
    9fe0c92e:	00b70723          	sb	a1,14(a4)
    9fe0c932:	00c707a3          	sb	a2,15(a4)
    9fe0c936:	97c2                	add	a5,a5,a6
    9fe0c938:	02000713          	li	a4,32
    9fe0c93c:	00e78023          	sb	a4,0(a5)

		while (buf[count]) {
    9fe0c940:	00094583          	lbu	a1,0(s2)
    9fe0c944:	18058c63          	beqz	a1,9fe0cadc <uart_put_buff+0x38e>
			if (buf[count] == '\n') {
				ptr[dump_uart->dump_uart_pos++] = '\r';
    9fe0c948:	0008b783          	ld	a5,0(a7)
    9fe0c94c:	4305                	li	t1,1
    9fe0c94e:	854a                	mv	a0,s2
			if (buf[count] == '\n') {
    9fe0c950:	4e29                	li	t3,10
				ptr[dump_uart->dump_uart_pos++] = '\r';
    9fe0c952:	4f35                	li	t5,13
    9fe0c954:	4123033b          	subw	t1,t1,s2
			}
			ptr[dump_uart->dump_uart_pos++] = buf[count];
			count++;
			if (dump_uart->dump_uart_pos >= dump_uart->dump_uart_max_size) {
				dump_uart->dump_uart_overflow = 1;
    9fe0c958:	4e85                	li	t4,1
				ptr[dump_uart->dump_uart_pos++] = '\r';
    9fe0c95a:	00d7c603          	lbu	a2,13(a5)
    9fe0c95e:	00c7cf83          	lbu	t6,12(a5)
    9fe0c962:	00e7c683          	lbu	a3,14(a5)
    9fe0c966:	00f7c703          	lbu	a4,15(a5)
    9fe0c96a:	0622                	slli	a2,a2,0x8
    9fe0c96c:	01f66633          	or	a2,a2,t6
    9fe0c970:	06c2                	slli	a3,a3,0x10
    9fe0c972:	8ed1                	or	a3,a3,a2
    9fe0c974:	0762                	slli	a4,a4,0x18
    9fe0c976:	8f55                	or	a4,a4,a3
    9fe0c978:	0017061b          	addiw	a2,a4,1
    9fe0c97c:	0006069b          	sext.w	a3,a2
    9fe0c980:	9742                	add	a4,a4,a6
			if (buf[count] == '\n') {
    9fe0c982:	05c59563          	bne	a1,t3,9fe0c9cc <uart_put_buff+0x27e>
				ptr[dump_uart->dump_uart_pos++] = '\r';
    9fe0c986:	0106559b          	srliw	a1,a2,0x10
    9fe0c98a:	0186569b          	srliw	a3,a2,0x18
    9fe0c98e:	00865f9b          	srliw	t6,a2,0x8
    9fe0c992:	00c78623          	sb	a2,12(a5)
    9fe0c996:	00b78723          	sb	a1,14(a5)
    9fe0c99a:	00d787a3          	sb	a3,15(a5)
    9fe0c99e:	01f786a3          	sb	t6,13(a5)
    9fe0c9a2:	01e70023          	sb	t5,0(a4)
			ptr[dump_uart->dump_uart_pos++] = buf[count];
    9fe0c9a6:	0008b783          	ld	a5,0(a7)
    9fe0c9aa:	00d7c603          	lbu	a2,13(a5)
    9fe0c9ae:	00c7c583          	lbu	a1,12(a5)
    9fe0c9b2:	00e7c683          	lbu	a3,14(a5)
    9fe0c9b6:	00f7c703          	lbu	a4,15(a5)
    9fe0c9ba:	0622                	slli	a2,a2,0x8
    9fe0c9bc:	8e4d                	or	a2,a2,a1
    9fe0c9be:	06c2                	slli	a3,a3,0x10
    9fe0c9c0:	8ed1                	or	a3,a3,a2
    9fe0c9c2:	0762                	slli	a4,a4,0x18
    9fe0c9c4:	8f55                	or	a4,a4,a3
    9fe0c9c6:	0017069b          	addiw	a3,a4,1
    9fe0c9ca:	9742                	add	a4,a4,a6
    9fe0c9cc:	0086df9b          	srliw	t6,a3,0x8
    9fe0c9d0:	0106d59b          	srliw	a1,a3,0x10
    9fe0c9d4:	0186d61b          	srliw	a2,a3,0x18
    9fe0c9d8:	00d78623          	sb	a3,12(a5)
    9fe0c9dc:	01f786a3          	sb	t6,13(a5)
    9fe0c9e0:	00c787a3          	sb	a2,15(a5)
    9fe0c9e4:	00b78723          	sb	a1,14(a5)
    9fe0c9e8:	00054783          	lbu	a5,0(a0)
    9fe0c9ec:	00a304bb          	addw	s1,t1,a0
    9fe0c9f0:	0505                	addi	a0,a0,1
    9fe0c9f2:	00f70023          	sb	a5,0(a4)
			if (dump_uart->dump_uart_pos >= dump_uart->dump_uart_max_size) {
    9fe0c9f6:	0008b783          	ld	a5,0(a7)
    9fe0c9fa:	00d7c283          	lbu	t0,13(a5)
    9fe0c9fe:	0097cf83          	lbu	t6,9(a5)
    9fe0ca02:	00c7c083          	lbu	ra,12(a5)
    9fe0ca06:	00e7c583          	lbu	a1,14(a5)
    9fe0ca0a:	0087c383          	lbu	t2,8(a5)
    9fe0ca0e:	00a7c603          	lbu	a2,10(a5)
    9fe0ca12:	00f7c683          	lbu	a3,15(a5)
    9fe0ca16:	00b7c703          	lbu	a4,11(a5)
    9fe0ca1a:	02a2                	slli	t0,t0,0x8
    9fe0ca1c:	0fa2                	slli	t6,t6,0x8
    9fe0ca1e:	0012e2b3          	or	t0,t0,ra
    9fe0ca22:	05c2                	slli	a1,a1,0x10
    9fe0ca24:	007fefb3          	or	t6,t6,t2
    9fe0ca28:	0642                	slli	a2,a2,0x10
    9fe0ca2a:	0055e5b3          	or	a1,a1,t0
    9fe0ca2e:	06e2                	slli	a3,a3,0x18
    9fe0ca30:	01f66633          	or	a2,a2,t6
    9fe0ca34:	0762                	slli	a4,a4,0x18
    9fe0ca36:	8ecd                	or	a3,a3,a1
    9fe0ca38:	8f51                	or	a4,a4,a2
    9fe0ca3a:	2681                	sext.w	a3,a3
    9fe0ca3c:	2701                	sext.w	a4,a4
    9fe0ca3e:	00e6ec63          	bltu	a3,a4,9fe0ca56 <uart_put_buff+0x308>
				dump_uart->dump_uart_overflow = 1;
    9fe0ca42:	01d788a3          	sb	t4,17(a5)
				dump_uart->dump_uart_pos = 0;
    9fe0ca46:	00078623          	sb	zero,12(a5)
    9fe0ca4a:	000786a3          	sb	zero,13(a5)
    9fe0ca4e:	00078723          	sb	zero,14(a5)
    9fe0ca52:	000787a3          	sb	zero,15(a5)
		while (buf[count]) {
    9fe0ca56:	00054583          	lbu	a1,0(a0)
    9fe0ca5a:	f181                	bnez	a1,9fe0c95a <uart_put_buff+0x20c>
			}
		}
	}
	drv_spin_unlock_irqrestore(&printf_lock, flags);
    9fe0ca5c:	85a2                	mv	a1,s0
    9fe0ca5e:	00013517          	auipc	a0,0x13
    9fe0ca62:	19250513          	addi	a0,a0,402 # 9fe1fbf0 <printf_lock>
    9fe0ca66:	214000ef          	jal	ra,9fe0cc7a <_hw_raw_spin_unlock_irqrestore>
	return count;
}
    9fe0ca6a:	70a2                	ld	ra,40(sp)
    9fe0ca6c:	7402                	ld	s0,32(sp)
    9fe0ca6e:	6942                	ld	s2,16(sp)
    9fe0ca70:	69a2                	ld	s3,8(sp)
    9fe0ca72:	6a02                	ld	s4,0(sp)
    9fe0ca74:	8526                	mv	a0,s1
    9fe0ca76:	64e2                	ld	s1,24(sp)
    9fe0ca78:	6145                	addi	sp,sp,48
    9fe0ca7a:	8082                	ret
	while (*str) {
    9fe0ca7c:	05200493          	li	s1,82
		uart_putc(*str++);
    9fe0ca80:	00005997          	auipc	s3,0x5
    9fe0ca84:	64998993          	addi	s3,s3,1609 # 9fe120c9 <ntryh.1+0x171>
	if (ch == '\n') {
    9fe0ca88:	4a29                	li	s4,10
	hal_uart_putc(ch);
    9fe0ca8a:	8526                	mv	a0,s1
    9fe0ca8c:	285010ef          	jal	ra,9fe0e510 <hal_uart_putc>
	while (*str) {
    9fe0ca90:	0009c483          	lbu	s1,0(s3)
		uart_putc(*str++);
    9fe0ca94:	0985                	addi	s3,s3,1
	while (*str) {
    9fe0ca96:	cc89                	beqz	s1,9fe0cab0 <uart_put_buff+0x362>
	if (ch == '\n') {
    9fe0ca98:	ff4499e3          	bne	s1,s4,9fe0ca8a <uart_put_buff+0x33c>
		hal_uart_putc('\r');
    9fe0ca9c:	4535                	li	a0,13
    9fe0ca9e:	273010ef          	jal	ra,9fe0e510 <hal_uart_putc>
	hal_uart_putc(ch);
    9fe0caa2:	8526                	mv	a0,s1
    9fe0caa4:	26d010ef          	jal	ra,9fe0e510 <hal_uart_putc>
	while (*str) {
    9fe0caa8:	0009c483          	lbu	s1,0(s3)
		uart_putc(*str++);
    9fe0caac:	0985                	addi	s3,s3,1
	while (*str) {
    9fe0caae:	f4ed                	bnez	s1,9fe0ca98 <uart_put_buff+0x34a>
		while (buf[count]) {
    9fe0cab0:	00094503          	lbu	a0,0(s2)
	if (ch == '\n') {
    9fe0cab4:	49a9                	li	s3,10
    9fe0cab6:	0905                	addi	s2,s2,1
		while (buf[count]) {
    9fe0cab8:	e901                	bnez	a0,9fe0cac8 <uart_put_buff+0x37a>
    9fe0caba:	a00d                	j	9fe0cadc <uart_put_buff+0x38e>
	hal_uart_putc(ch);
    9fe0cabc:	255010ef          	jal	ra,9fe0e510 <hal_uart_putc>
		while (buf[count]) {
    9fe0cac0:	fff94503          	lbu	a0,-1(s2)
				count++;
    9fe0cac4:	2485                	addiw	s1,s1,1
		while (buf[count]) {
    9fe0cac6:	d959                	beqz	a0,9fe0ca5c <uart_put_buff+0x30e>
    9fe0cac8:	0905                	addi	s2,s2,1
	if (ch == '\n') {
    9fe0caca:	ff3519e3          	bne	a0,s3,9fe0cabc <uart_put_buff+0x36e>
		hal_uart_putc('\r');
    9fe0cace:	4535                	li	a0,13
    9fe0cad0:	241010ef          	jal	ra,9fe0e510 <hal_uart_putc>
	hal_uart_putc(ch);
    9fe0cad4:	4529                	li	a0,10
    9fe0cad6:	23b010ef          	jal	ra,9fe0e510 <hal_uart_putc>
	return ch;
    9fe0cada:	b749                	j	9fe0ca5c <uart_put_buff+0x30e>
	int count = 0;
    9fe0cadc:	4481                	li	s1,0
    9fe0cade:	bfbd                	j	9fe0ca5c <uart_put_buff+0x30e>

000000009fe0cae0 <cvi_spinlock_init>:
#include "semphr.h"
SemaphoreHandle_t reg_write_lock = NULL;
static unsigned char lockCount = 0;

void cvi_spinlock_init()
{
    9fe0cae0:	1141                	addi	sp,sp,-16
	reg_write_lock = xSemaphoreCreateBinary();
    9fe0cae2:	460d                	li	a2,3
    9fe0cae4:	4581                	li	a1,0
    9fe0cae6:	4505                	li	a0,1
{
    9fe0cae8:	e022                	sd	s0,0(sp)
    9fe0caea:	e406                	sd	ra,8(sp)
	reg_write_lock = xSemaphoreCreateBinary();
    9fe0caec:	00013417          	auipc	s0,0x13
    9fe0caf0:	10c40413          	addi	s0,s0,268 # 9fe1fbf8 <reg_write_lock>
    9fe0caf4:	6d9010ef          	jal	ra,9fe0e9cc <xQueueGenericCreate>
    9fe0caf8:	e008                	sd	a0,0(s0)
	if(reg_write_lock == NULL)
    9fe0cafa:	c51d                	beqz	a0,9fe0cb28 <cvi_spinlock_init+0x48>
		printf("xSemaphoreCreateBinary failed!\n");

	lockCount = 0;
	xSemaphoreGive(reg_write_lock);
    9fe0cafc:	4581                	li	a1,0
    9fe0cafe:	4681                	li	a3,0
    9fe0cb00:	4601                	li	a2,0
	lockCount = 0;
    9fe0cb02:	00013797          	auipc	a5,0x13
    9fe0cb06:	0e078923          	sb	zero,242(a5) # 9fe1fbf4 <lockCount>
	xSemaphoreGive(reg_write_lock);
    9fe0cb0a:	72f010ef          	jal	ra,9fe0ea38 <xQueueGenericSend>
	printf("[%s] succeess\n" , __func__);
}
    9fe0cb0e:	6402                	ld	s0,0(sp)
    9fe0cb10:	60a2                	ld	ra,8(sp)
	printf("[%s] succeess\n" , __func__);
    9fe0cb12:	00005597          	auipc	a1,0x5
    9fe0cb16:	66e58593          	addi	a1,a1,1646 # 9fe12180 <__func__.0>
    9fe0cb1a:	00005517          	auipc	a0,0x5
    9fe0cb1e:	5d650513          	addi	a0,a0,1494 # 9fe120f0 <ntryh.1+0x198>
}
    9fe0cb22:	0141                	addi	sp,sp,16
	printf("[%s] succeess\n" , __func__);
    9fe0cb24:	c70ff06f          	j	9fe0bf94 <printf>
		printf("xSemaphoreCreateBinary failed!\n");
    9fe0cb28:	00005517          	auipc	a0,0x5
    9fe0cb2c:	5a850513          	addi	a0,a0,1448 # 9fe120d0 <ntryh.1+0x178>
    9fe0cb30:	c64ff0ef          	jal	ra,9fe0bf94 <printf>
	xSemaphoreGive(reg_write_lock);
    9fe0cb34:	6008                	ld	a0,0(s0)
    9fe0cb36:	b7d9                	j	9fe0cafc <cvi_spinlock_init+0x1c>

000000009fe0cb38 <hw_spin_lock>:
	return MAILBOX_LOCK_SUCCESS;
#endif
}

int hw_spin_lock(hw_raw_spinlock_t *lock)
{
    9fe0cb38:	1101                	addi	sp,sp,-32
    9fe0cb3a:	e822                	sd	s0,16(sp)
    9fe0cb3c:	ec06                	sd	ra,24(sp)
    9fe0cb3e:	e426                	sd	s1,8(sp)
    9fe0cb40:	e04a                	sd	s2,0(sp)
	u64 i;
	u64 loops = 1000000;
	if (lock->hw_field >= SPIN_LINUX_RTOS)
    9fe0cb42:	00255703          	lhu	a4,2(a0)
    9fe0cb46:	478d                	li	a5,3
{
    9fe0cb48:	842a                	mv	s0,a0
	if (lock->hw_field >= SPIN_LINUX_RTOS)
    9fe0cb4a:	06e7eb63          	bltu	a5,a4,9fe0cbc0 <hw_spin_lock+0x88>
    9fe0cb4e:	c01027f3          	rdtime	a5
		xSemaphoreGiveFromISR(reg_write_lock , NULL);
	}
	else {
		unsigned long systime = GetSysTime();
		/* lock ID can not be 0, so set it to 1 at least */
		if ((systime & 0xFFFF) == 0)
    9fe0cb52:	03079713          	slli	a4,a5,0x30
    9fe0cb56:	9341                	srli	a4,a4,0x30
    9fe0cb58:	c335                	beqz	a4,9fe0cbbc <hw_spin_lock+0x84>
			systime = 1;
		lock->locks = (unsigned short) (systime & 0xFFFF);
    9fe0cb5a:	00f41023          	sh	a5,0(s0)
		if ((systime & 0xFFFF) == 0)
    9fe0cb5e:	000f44b7          	lui	s1,0xf4
    9fe0cb62:	24048493          	addi	s1,s1,576 # f4240 <CVIMMAP_ATF_SIZE+0x74240>
    9fe0cb66:	00006917          	auipc	s2,0x6
    9fe0cb6a:	62290913          	addi	s2,s2,1570 # 9fe13188 <reg_base>
    9fe0cb6e:	a021                	j	9fe0cb76 <hw_spin_lock+0x3e>
	}
	for (i = 0; i < loops; i++) {
		if (hw_spin_trylock(lock) == MAILBOX_LOCK_SUCCESS)
			return MAILBOX_LOCK_SUCCESS;
		udelay(1);
    9fe0cb70:	c86ff0ef          	jal	ra,9fe0bff6 <usleep>
	for (i = 0; i < loops; i++) {
    9fe0cb74:	c0d9                	beqz	s1,9fe0cbfa <hw_spin_lock+0xc2>
	writew(lock->locks, reg_base + sizeof(int) * lock->hw_field);
    9fe0cb76:	0140000f          	fence	w,o
    9fe0cb7a:	00245703          	lhu	a4,2(s0)
    9fe0cb7e:	00093683          	ld	a3,0(s2)
    9fe0cb82:	00045783          	lhu	a5,0(s0)
    9fe0cb86:	070a                	slli	a4,a4,0x2
    9fe0cb88:	9736                	add	a4,a4,a3
    9fe0cb8a:	00f71023          	sh	a5,0(a4)
	if (readw(reg_base + sizeof(int) * lock->hw_field) == lock->locks)
    9fe0cb8e:	00245783          	lhu	a5,2(s0)
    9fe0cb92:	078a                	slli	a5,a5,0x2
    9fe0cb94:	97b6                	add	a5,a5,a3
    9fe0cb96:	0007d783          	lhu	a5,0(a5)
    9fe0cb9a:	17c2                	slli	a5,a5,0x30
    9fe0cb9c:	93c1                	srli	a5,a5,0x30
    9fe0cb9e:	0820000f          	fence	i,r
    9fe0cba2:	00045703          	lhu	a4,0(s0)
		udelay(1);
    9fe0cba6:	4505                	li	a0,1
	for (i = 0; i < loops; i++) {
    9fe0cba8:	14fd                	addi	s1,s1,-1
	if (readw(reg_base + sizeof(int) * lock->hw_field) == lock->locks)
    9fe0cbaa:	fcf713e3          	bne	a4,a5,9fe0cb70 <hw_spin_lock+0x38>
	uart_puts("__spin_lock_debug fail\n");
#else
	pr_err("__spin_lock_debug fail\n");
#endif
	return MAILBOX_LOCK_FAILED;
}
    9fe0cbae:	60e2                	ld	ra,24(sp)
    9fe0cbb0:	6442                	ld	s0,16(sp)
    9fe0cbb2:	64a2                	ld	s1,8(sp)
    9fe0cbb4:	6902                	ld	s2,0(sp)
			return MAILBOX_LOCK_SUCCESS;
    9fe0cbb6:	4505                	li	a0,1
}
    9fe0cbb8:	6105                	addi	sp,sp,32
    9fe0cbba:	8082                	ret
		if ((systime & 0xFFFF) == 0)
    9fe0cbbc:	4785                	li	a5,1
    9fe0cbbe:	bf71                	j	9fe0cb5a <hw_spin_lock+0x22>
		xSemaphoreTakeFromISR(reg_write_lock , NULL);
    9fe0cbc0:	00013497          	auipc	s1,0x13
    9fe0cbc4:	03848493          	addi	s1,s1,56 # 9fe1fbf8 <reg_write_lock>
    9fe0cbc8:	6088                	ld	a0,0(s1)
    9fe0cbca:	4581                	li	a1,0
    9fe0cbcc:	4601                	li	a2,0
    9fe0cbce:	19c020ef          	jal	ra,9fe0ed6a <xQueueReceiveFromISR>
		lock->locks = (lockCount << 8) | 0x2;
    9fe0cbd2:	00013697          	auipc	a3,0x13
    9fe0cbd6:	02268693          	addi	a3,a3,34 # 9fe1fbf4 <lockCount>
    9fe0cbda:	0006c783          	lbu	a5,0(a3)
		xSemaphoreGiveFromISR(reg_write_lock , NULL);
    9fe0cbde:	4581                	li	a1,0
		lock->locks = (lockCount << 8) | 0x2;
    9fe0cbe0:	0087971b          	slliw	a4,a5,0x8
    9fe0cbe4:	00276713          	ori	a4,a4,2
    9fe0cbe8:	00e41023          	sh	a4,0(s0)
		xSemaphoreGiveFromISR(reg_write_lock , NULL);
    9fe0cbec:	6088                	ld	a0,0(s1)
		lockCount++;
    9fe0cbee:	2785                	addiw	a5,a5,1
    9fe0cbf0:	00f68023          	sb	a5,0(a3)
		xSemaphoreGiveFromISR(reg_write_lock , NULL);
    9fe0cbf4:	7e9010ef          	jal	ra,9fe0ebdc <xQueueGiveFromISR>
    9fe0cbf8:	b79d                	j	9fe0cb5e <hw_spin_lock+0x26>
	uart_puts("__spin_lock_debug fail\n");
    9fe0cbfa:	00005517          	auipc	a0,0x5
    9fe0cbfe:	50650513          	addi	a0,a0,1286 # 9fe12100 <ntryh.1+0x1a8>
    9fe0cc02:	98fff0ef          	jal	ra,9fe0c590 <uart_puts>
}
    9fe0cc06:	60e2                	ld	ra,24(sp)
    9fe0cc08:	6442                	ld	s0,16(sp)
    9fe0cc0a:	64a2                	ld	s1,8(sp)
    9fe0cc0c:	6902                	ld	s2,0(sp)
	return MAILBOX_LOCK_FAILED;
    9fe0cc0e:	557d                	li	a0,-1
}
    9fe0cc10:	6105                	addi	sp,sp,32
    9fe0cc12:	8082                	ret

000000009fe0cc14 <_hw_raw_spin_lock_irqsave>:

int _hw_raw_spin_lock_irqsave(hw_raw_spinlock_t *lock)
{
    9fe0cc14:	1101                	addi	sp,sp,-32
    9fe0cc16:	e04a                	sd	s2,0(sp)
    9fe0cc18:	ec06                	sd	ra,24(sp)
    9fe0cc1a:	e822                	sd	s0,16(sp)
    9fe0cc1c:	e426                	sd	s1,8(sp)
    9fe0cc1e:	892a                	mv	s2,a0
 */
__ALWAYS_STATIC_INLINE uint64_t __get_MSTATUS(void)
{
    uint64_t result;

    __ASM volatile("csrr %0, mstatus" : "=r"(result));
    9fe0cc20:	30002473          	csrr	s0,mstatus
	int flag = 0;

#ifdef FREERTOS_BSP
	// save and disable irq
	flag = (__get_MSTATUS() & 8);
    9fe0cc24:	8821                	andi	s0,s0,8
    __ASM volatile("csrc mstatus, 8");
    9fe0cc26:	30047073          	csrci	mstatus,8
	__disable_irq();
#endif

	// lock
	if(hw_spin_lock(lock) == MAILBOX_LOCK_FAILED)
    9fe0cc2a:	f0fff0ef          	jal	ra,9fe0cb38 <hw_spin_lock>
    9fe0cc2e:	57fd                	li	a5,-1
    9fe0cc30:	00f50963          	beq	a0,a5,9fe0cc42 <_hw_raw_spin_lock_irqsave+0x2e>
		uart_puts("spin lock fail! reg_val=0x%x, lock->locks=0x%x\n",
				readw(reg_base + sizeof(int) * lock->hw_field), lock->locks);
		return MAILBOX_LOCK_FAILED;
	}
	return flag;
}
    9fe0cc34:	60e2                	ld	ra,24(sp)
    9fe0cc36:	8522                	mv	a0,s0
    9fe0cc38:	6442                	ld	s0,16(sp)
    9fe0cc3a:	64a2                	ld	s1,8(sp)
    9fe0cc3c:	6902                	ld	s2,0(sp)
    9fe0cc3e:	6105                	addi	sp,sp,32
    9fe0cc40:	8082                	ret
    9fe0cc42:	84aa                	mv	s1,a0
		if (flag) {
    9fe0cc44:	c019                	beqz	s0,9fe0cc4a <_hw_raw_spin_lock_irqsave+0x36>
    __ASM volatile("csrs mstatus, 8");
    9fe0cc46:	30046073          	csrsi	mstatus,8
				readw(reg_base + sizeof(int) * lock->hw_field), lock->locks);
    9fe0cc4a:	00295783          	lhu	a5,2(s2)
    9fe0cc4e:	00006717          	auipc	a4,0x6
    9fe0cc52:	53a73703          	ld	a4,1338(a4) # 9fe13188 <reg_base>
    9fe0cc56:	078a                	slli	a5,a5,0x2
    9fe0cc58:	97ba                	add	a5,a5,a4
    9fe0cc5a:	0007d583          	lhu	a1,0(a5)
    9fe0cc5e:	15c2                	slli	a1,a1,0x30
    9fe0cc60:	91c1                	srli	a1,a1,0x30
    9fe0cc62:	0820000f          	fence	i,r
		uart_puts("spin lock fail! reg_val=0x%x, lock->locks=0x%x\n",
    9fe0cc66:	00095603          	lhu	a2,0(s2)
    9fe0cc6a:	00005517          	auipc	a0,0x5
    9fe0cc6e:	4ae50513          	addi	a0,a0,1198 # 9fe12118 <ntryh.1+0x1c0>
		return MAILBOX_LOCK_FAILED;
    9fe0cc72:	8426                	mv	s0,s1
		uart_puts("spin lock fail! reg_val=0x%x, lock->locks=0x%x\n",
    9fe0cc74:	91dff0ef          	jal	ra,9fe0c590 <uart_puts>
		return MAILBOX_LOCK_FAILED;
    9fe0cc78:	bf75                	j	9fe0cc34 <_hw_raw_spin_lock_irqsave+0x20>

000000009fe0cc7a <_hw_raw_spin_unlock_irqrestore>:
void _hw_raw_spin_unlock_irqrestore(hw_raw_spinlock_t *lock, int flag)
{

#ifndef RISCV_QEMU
	// unlock
	if (readw(reg_base + sizeof(int) * lock->hw_field) == lock->locks) {
    9fe0cc7a:	00255783          	lhu	a5,2(a0)
    9fe0cc7e:	00006717          	auipc	a4,0x6
    9fe0cc82:	50a70713          	addi	a4,a4,1290 # 9fe13188 <reg_base>
    9fe0cc86:	6314                	ld	a3,0(a4)
    9fe0cc88:	078a                	slli	a5,a5,0x2
    9fe0cc8a:	97b6                	add	a5,a5,a3
    9fe0cc8c:	0007d783          	lhu	a5,0(a5)
    9fe0cc90:	17c2                	slli	a5,a5,0x30
    9fe0cc92:	93c1                	srli	a5,a5,0x30
    9fe0cc94:	0820000f          	fence	i,r
    9fe0cc98:	00055683          	lhu	a3,0(a0)
    9fe0cc9c:	02f69263          	bne	a3,a5,9fe0ccc0 <_hw_raw_spin_unlock_irqrestore+0x46>
		writew(lock->locks, reg_base + sizeof(int) * lock->hw_field);
    9fe0cca0:	0140000f          	fence	w,o
    9fe0cca4:	00255783          	lhu	a5,2(a0)
    9fe0cca8:	6314                	ld	a3,0(a4)
    9fe0ccaa:	00055703          	lhu	a4,0(a0)
    9fe0ccae:	078a                	slli	a5,a5,0x2
    9fe0ccb0:	97b6                	add	a5,a5,a3
    9fe0ccb2:	00e79023          	sh	a4,0(a5)

		#ifdef FREERTOS_BSP
		// restore irq
		if (flag) {
    9fe0ccb6:	c581                	beqz	a1,9fe0ccbe <_hw_raw_spin_unlock_irqrestore+0x44>
    9fe0ccb8:	30046073          	csrsi	mstatus,8
}
    9fe0ccbc:	8082                	ret
	if (flag) {
		__enable_irq();
	}

#endif
}
    9fe0ccbe:	8082                	ret
				readw(reg_base + sizeof(int) * lock->hw_field), lock->locks);
    9fe0ccc0:	00255783          	lhu	a5,2(a0)
    9fe0ccc4:	6318                	ld	a4,0(a4)
    9fe0ccc6:	078a                	slli	a5,a5,0x2
    9fe0ccc8:	97ba                	add	a5,a5,a4
    9fe0ccca:	0007d583          	lhu	a1,0(a5)
    9fe0ccce:	15c2                	slli	a1,a1,0x30
    9fe0ccd0:	91c1                	srli	a1,a1,0x30
    9fe0ccd2:	0820000f          	fence	i,r
		uart_puts("spin unlock fail! reg_val=0x%x, lock->locks=0x%x\n",
    9fe0ccd6:	00055603          	lhu	a2,0(a0)
    9fe0ccda:	00005517          	auipc	a0,0x5
    9fe0ccde:	46e50513          	addi	a0,a0,1134 # 9fe12148 <ntryh.1+0x1f0>
    9fe0cce2:	8afff06f          	j	9fe0c590 <uart_puts>

000000009fe0cce6 <CVI_OSDC_EstCmprCanvasSize>:
#include <cvi_osdc.h>

uint32_t CVI_OSDC_EstCmprCanvasSize(OSDC_Canvas_Attr_S *canvas, OSDC_DRAW_OBJ_S *objs, uint32_t obj_num)
{
	return CVI_OSDC_est_cmpr_canvas_size(canvas, objs, obj_num);
    9fe0cce6:	7ef0006f          	j	9fe0dcd4 <CVI_OSDC_est_cmpr_canvas_size>

000000009fe0ccea <CVI_OSDC_DrawCmprCanvas>:
}

int CVI_OSDC_DrawCmprCanvas(OSDC_Canvas_Attr_S *canvas, OSDC_DRAW_OBJ_S *objs, uint32_t obj_num,
				uint8_t *obuf, uint32_t buf_size, uint32_t *p_osize)
{
	return CVI_OSDC_draw_cmpr_canvas(canvas, objs, obj_num, obuf, buf_size, p_osize);
    9fe0ccea:	00a0106f          	j	9fe0dcf4 <CVI_OSDC_draw_cmpr_canvas>

000000009fe0ccee <CVI_OSDC_SetRectObjAttr>:
}

void CVI_OSDC_SetRectObjAttr(OSDC_Canvas_Attr_S *canvas, OSDC_DRAW_OBJ_S *obj, uint32_t color_code,
				int pt_x, int pt_y, int width, int height, bool is_filled, int thickness)
{
    9fe0ccee:	4302                	lw	t1,0(sp)
	CVI_OSDC_set_rect_obj_attr(canvas, obj, color_code, pt_x, pt_y, width, height, is_filled, thickness);
    9fe0ccf0:	e01a                	sd	t1,0(sp)
    9fe0ccf2:	0060106f          	j	9fe0dcf8 <CVI_OSDC_set_rect_obj_attr>

000000009fe0ccf6 <CVI_OSDC_SetBitmapObjAttr>:
}

void CVI_OSDC_SetBitmapObjAttr(OSDC_Canvas_Attr_S *canvas, OSDC_DRAW_OBJ_S *obj_attr, uint8_t *buf,
				int pt_x, int pt_y, int width, int height, bool is_cmpr)
{
	CVI_OSDC_set_bitmap_obj_attr(canvas, obj_attr, buf,  pt_x, pt_y, width, height, is_cmpr);
    9fe0ccf6:	06e0106f          	j	9fe0dd64 <CVI_OSDC_set_bitmap_obj_attr>

000000009fe0ccfa <CVI_OSDC_SetLineObjAttr>:
}

void CVI_OSDC_SetLineObjAttr(OSDC_Canvas_Attr_S *canvas, OSDC_DRAW_OBJ_S *obj, uint32_t color_code,
				int pt_x0, int pt_y0, int pt_x1, int pt_y1, int thickness)
{
	CVI_OSDC_set_line_obj_attr(canvas, obj, color_code, pt_x0, pt_y0, pt_x1, pt_y1, thickness);
    9fe0ccfa:	0b60106f          	j	9fe0ddb0 <CVI_OSDC_set_line_obj_attr>

000000009fe0ccfe <recycle_obj_slices>:

	return num + 1;
}

int recycle_obj_slices(dlist_t *slc_list_head, int end_idx, int x)
{
    9fe0ccfe:	7139                	addi	sp,sp,-64
    9fe0cd00:	f822                	sd	s0,48(sp)
    9fe0cd02:	f04a                	sd	s2,32(sp)
    9fe0cd04:	ec4e                	sd	s3,24(sp)
    9fe0cd06:	e852                	sd	s4,16(sp)
    9fe0cd08:	fc06                	sd	ra,56(sp)
    9fe0cd0a:	f426                	sd	s1,40(sp)
    9fe0cd0c:	e456                	sd	s5,8(sp)
	dlist_t *temp;
	SLICE_LIST *slc;
	int recycle_cnt = 0;
	int chk_cnt = 0;

	dlist_for_each_entry_safe(slc_list_head, temp, slc, SLICE_LIST, item) {
    9fe0cd0e:	651c                	ld	a5,8(a0)
{
    9fe0cd10:	892a                	mv	s2,a0
    9fe0cd12:	89ae                	mv	s3,a1
    9fe0cd14:	8a32                	mv	s4,a2
	dlist_for_each_entry_safe(slc_list_head, temp, slc, SLICE_LIST, item) {
    9fe0cd16:	ff078513          	addi	a0,a5,-16
    9fe0cd1a:	4401                	li	s0,0
    9fe0cd1c:	c391                	beqz	a5,9fe0cd20 <recycle_obj_slices+0x22>
    9fe0cd1e:	6780                	ld	s0,8(a5)
    9fe0cd20:	04f90963          	beq	s2,a5,9fe0cd72 <recycle_obj_slices+0x74>
		OBJ_SLICE *slice = &slc->slice;

		if (x >= slc->slice.x1) {
    9fe0cd24:	415c                	lw	a5,4(a0)
	dlist_for_each_entry_safe(slc_list_head, temp, slc, SLICE_LIST, item) {
    9fe0cd26:	4481                	li	s1,0
    9fe0cd28:	4a81                	li	s5,0
			dlist_del(&slc->item);
			free(slice);
			recycle_cnt++;
		}
		chk_cnt++;
    9fe0cd2a:	2485                	addiw	s1,s1,1
		if (x >= slc->slice.x1) {
    9fe0cd2c:	02fa5063          	bge	s4,a5,9fe0cd4c <recycle_obj_slices+0x4e>
		if (chk_cnt > end_idx)
    9fe0cd30:	0299c763          	blt	s3,s1,9fe0cd5e <recycle_obj_slices+0x60>
	dlist_for_each_entry_safe(slc_list_head, temp, slc, SLICE_LIST, item) {
    9fe0cd34:	4781                	li	a5,0
    9fe0cd36:	ff040513          	addi	a0,s0,-16
    9fe0cd3a:	c011                	beqz	s0,9fe0cd3e <recycle_obj_slices+0x40>
    9fe0cd3c:	641c                	ld	a5,8(s0)
    9fe0cd3e:	02890063          	beq	s2,s0,9fe0cd5e <recycle_obj_slices+0x60>
    9fe0cd42:	843e                	mv	s0,a5
		if (x >= slc->slice.x1) {
    9fe0cd44:	415c                	lw	a5,4(a0)
		chk_cnt++;
    9fe0cd46:	2485                	addiw	s1,s1,1
		if (x >= slc->slice.x1) {
    9fe0cd48:	fefa44e3          	blt	s4,a5,9fe0cd30 <recycle_obj_slices+0x32>
	__dlist_add(node, queue->prev, queue);
}

static inline void dlist_del(dlist_t *node)
{
	dlist_t *prev = node->prev;
    9fe0cd4c:	6918                	ld	a4,16(a0)
	dlist_t *next = node->next;
    9fe0cd4e:	6d1c                	ld	a5,24(a0)
			recycle_cnt++;
    9fe0cd50:	2a85                	addiw	s5,s5,1

	prev->next = next;
    9fe0cd52:	e71c                	sd	a5,8(a4)
	next->prev = prev;
    9fe0cd54:	e398                	sd	a4,0(a5)
			free(slice);
    9fe0cd56:	187010ef          	jal	ra,9fe0e6dc <vPortFree>
		if (chk_cnt > end_idx)
    9fe0cd5a:	fc99dde3          	bge	s3,s1,9fe0cd34 <recycle_obj_slices+0x36>
			break;
	}

	return recycle_cnt;
}
    9fe0cd5e:	70e2                	ld	ra,56(sp)
    9fe0cd60:	7442                	ld	s0,48(sp)
    9fe0cd62:	74a2                	ld	s1,40(sp)
    9fe0cd64:	7902                	ld	s2,32(sp)
    9fe0cd66:	69e2                	ld	s3,24(sp)
    9fe0cd68:	6a42                	ld	s4,16(sp)
    9fe0cd6a:	8556                	mv	a0,s5
    9fe0cd6c:	6aa2                	ld	s5,8(sp)
    9fe0cd6e:	6121                	addi	sp,sp,64
    9fe0cd70:	8082                	ret
	dlist_for_each_entry_safe(slc_list_head, temp, slc, SLICE_LIST, item) {
    9fe0cd72:	4a81                	li	s5,0
    9fe0cd74:	b7ed                	j	9fe0cd5e <recycle_obj_slices+0x60>

000000009fe0cd76 <recycle_draw_obj>:

void recycle_draw_obj(DRAW_OBJ *obj_vec, uint32_t *obj_num, int y)
{
	for (uint32_t i = 0; i < *obj_num; ++i) {
    9fe0cd76:	419c                	lw	a5,0(a1)
    9fe0cd78:	cbb5                	beqz	a5,9fe0cdec <recycle_draw_obj+0x76>
{
    9fe0cd7a:	7179                	addi	sp,sp,-48
    9fe0cd7c:	f022                	sd	s0,32(sp)
    9fe0cd7e:	ec26                	sd	s1,24(sp)
    9fe0cd80:	e84a                	sd	s2,16(sp)
    9fe0cd82:	e44e                	sd	s3,8(sp)
    9fe0cd84:	e052                	sd	s4,0(sp)
    9fe0cd86:	f406                	sd	ra,40(sp)
    9fe0cd88:	84ae                	mv	s1,a1
    9fe0cd8a:	892a                	mv	s2,a0
    9fe0cd8c:	89b2                	mv	s3,a2
    9fe0cd8e:	4401                	li	s0,0
    9fe0cd90:	4a05                	li	s4,1
		DRAW_OBJ obj = obj_vec[i];
    9fe0cd92:	02041713          	slli	a4,s0,0x20
    9fe0cd96:	01a75513          	srli	a0,a4,0x1a
    9fe0cd9a:	954a                	add	a0,a0,s2

		if (y > obj._max_y) {
    9fe0cd9c:	5d18                	lw	a4,56(a0)
    9fe0cd9e:	01374e63          	blt	a4,s3,9fe0cdba <recycle_draw_obj+0x44>
	for (uint32_t i = 0; i < *obj_num; ++i) {
    9fe0cda2:	409c                	lw	a5,0(s1)
    9fe0cda4:	2405                	addiw	s0,s0,1
    9fe0cda6:	fef466e3          	bltu	s0,a5,9fe0cd92 <recycle_draw_obj+0x1c>
				memmove(&obj_vec[i], &obj_vec[i + 1], sizeof(DRAW_OBJ) * (*obj_num - 1 - i));
			--i;
			--*obj_num;
		}
	}
}
    9fe0cdaa:	70a2                	ld	ra,40(sp)
    9fe0cdac:	7402                	ld	s0,32(sp)
    9fe0cdae:	64e2                	ld	s1,24(sp)
    9fe0cdb0:	6942                	ld	s2,16(sp)
    9fe0cdb2:	69a2                	ld	s3,8(sp)
    9fe0cdb4:	6a02                	ld	s4,0(sp)
    9fe0cdb6:	6145                	addi	sp,sp,48
    9fe0cdb8:	8082                	ret
				memmove(&obj_vec[i], &obj_vec[i + 1], sizeof(DRAW_OBJ) * (*obj_num - 1 - i));
    9fe0cdba:	0014059b          	addiw	a1,s0,1
    9fe0cdbe:	fff7861b          	addiw	a2,a5,-1
    9fe0cdc2:	9e01                	subw	a2,a2,s0
    9fe0cdc4:	02059713          	slli	a4,a1,0x20
    9fe0cdc8:	01a75593          	srli	a1,a4,0x1a
    9fe0cdcc:	02061713          	slli	a4,a2,0x20
    9fe0cdd0:	01a75613          	srli	a2,a4,0x1a
    9fe0cdd4:	95ca                	add	a1,a1,s2
			if (*obj_num > 1)
    9fe0cdd6:	00fa7463          	bgeu	s4,a5,9fe0cdde <recycle_draw_obj+0x68>
				memmove(&obj_vec[i], &obj_vec[i + 1], sizeof(DRAW_OBJ) * (*obj_num - 1 - i));
    9fe0cdda:	f41f50ef          	jal	ra,9fe02d1a <memmove>
			--*obj_num;
    9fe0cdde:	4098                	lw	a4,0(s1)
    9fe0cde0:	fff7079b          	addiw	a5,a4,-1
    9fe0cde4:	c09c                	sw	a5,0(s1)
	for (uint32_t i = 0; i < *obj_num; ++i) {
    9fe0cde6:	faf466e3          	bltu	s0,a5,9fe0cd92 <recycle_draw_obj+0x1c>
    9fe0cdea:	b7c1                	j	9fe0cdaa <recycle_draw_obj+0x34>
    9fe0cdec:	8082                	ret

000000009fe0cdee <obj_project_on_line>:

int obj_project_on_line(DRAW_OBJ *obj_vec, uint32_t obj_num, dlist_t *slc_list_head,
			uint32_t *slc_num, int y, int *next_y, int canvas_width)
{
    9fe0cdee:	7115                	addi	sp,sp,-224
    9fe0cdf0:	f556                	sd	s5,168(sp)
    9fe0cdf2:	ed86                	sd	ra,216(sp)
    9fe0cdf4:	e9a2                	sd	s0,208(sp)
    9fe0cdf6:	e5a6                	sd	s1,200(sp)
    9fe0cdf8:	e1ca                	sd	s2,192(sp)
    9fe0cdfa:	fd4e                	sd	s3,184(sp)
    9fe0cdfc:	f952                	sd	s4,176(sp)
    9fe0cdfe:	f15a                	sd	s6,160(sp)
    9fe0ce00:	ed5e                	sd	s7,152(sp)
    9fe0ce02:	e962                	sd	s8,144(sp)
    9fe0ce04:	e566                	sd	s9,136(sp)
    9fe0ce06:	e16a                	sd	s10,128(sp)
    9fe0ce08:	fcee                	sd	s11,120(sp)
    9fe0ce0a:	b4a2                	fsd	fs0,104(sp)
    9fe0ce0c:	b0a6                	fsd	fs1,96(sp)
    9fe0ce0e:	acca                	fsd	fs2,88(sp)
    9fe0ce10:	8ab6                	mv	s5,a3
	SLICE_LIST *slc, *slc1;
	DRAW_OBJ obj_attr;

	for (int obj_i = 0; obj_i < (int)obj_num; obj_i++) {
    9fe0ce12:	08b05b63          	blez	a1,9fe0cea8 <obj_project_on_line+0xba>
		memcpy(&obj_attr, &obj_vec[obj_i], sizeof(DRAW_OBJ));
		if (is_in_range(y, obj_attr._min_y, obj_attr._max_y) == false) {
			*next_y = MIN(*next_y, MAX(obj_attr._min_y, y + 1));
    9fe0ce16:	00170b9b          	addiw	s7,a4,1
    9fe0ce1a:	84be                	mv	s1,a5
    9fe0ce1c:	8a2e                	mv	s4,a1
    9fe0ce1e:	89b2                	mv	s3,a2
    9fe0ce20:	893a                	mv	s2,a4
    9fe0ce22:	8d2a                	mv	s10,a0
    9fe0ce24:	4d81                	li	s11,0
    9fe0ce26:	8b5e                	mv	s6,s7
				   obj_attr.bitmap.rect.width;
			slc->slice.obj_id = obj_i;
			*next_y = MIN(*next_y, obj_attr._max_y);
			dlist_add_tail(&slc->item, slc_list_head);
			*slc_num = *slc_num + 1;
		} else if (obj_attr.type == STROKE_RECT) {
    9fe0ce28:	4c85                	li	s9,1
						(obj_attr.line.ts_h / (obj_attr.line._by[1] -
						obj_attr.line._by[0]));

				pt_x1 = pt_x0 - width;
			} else if (is_in_range(y, (int)round(obj_attr.line._by[1]),
					   (int)round(obj_attr.line._ey[0] + 1.))) {
    9fe0ce2a:	00005797          	auipc	a5,0x5
    9fe0ce2e:	4a67b907          	fld	fs2,1190(a5) # 9fe122d0 <__func__.1+0x118>
				float width = (obj_attr.line._ey[1] - y) *
						(obj_attr.line.ts_h / (obj_attr.line._ey[1] - obj_attr.line._ey[0]));

				pt_x1 = pt_x0 + width;
			}
			slc->slice.x0 = clip((int)round(MIN(pt_x0, pt_x1)), 0, canvas_width-1);
    9fe0ce32:	fff80c1b          	addiw	s8,a6,-1
		memcpy(&obj_attr, &obj_vec[obj_i], sizeof(DRAW_OBJ));
    9fe0ce36:	04000613          	li	a2,64
    9fe0ce3a:	85ea                	mv	a1,s10
    9fe0ce3c:	0808                	addi	a0,sp,16
    9fe0ce3e:	ac2f30ef          	jal	ra,9fe00100 <memcpy>
		if (is_in_range(y, obj_attr._min_y, obj_attr._max_y) == false) {
    9fe0ce42:	47b6                	lw	a5,76(sp)
	return (x >= begin && x < end);
    9fe0ce44:	0cf94e63          	blt	s2,a5,9fe0cf20 <obj_project_on_line+0x132>
    9fe0ce48:	4726                	lw	a4,72(sp)
    9fe0ce4a:	0ce95b63          	bge	s2,a4,9fe0cf20 <obj_project_on_line+0x132>
		slc = (SLICE_LIST *)malloc(1 * sizeof(SLICE_LIST));
    9fe0ce4e:	02000513          	li	a0,32
    9fe0ce52:	724010ef          	jal	ra,9fe0e576 <pvPortMalloc>
    9fe0ce56:	842a                	mv	s0,a0
		if (slc == NULL) {
    9fe0ce58:	2a050663          	beqz	a0,9fe0d104 <obj_project_on_line+0x316>
		if (obj_attr.type == RECT) {
    9fe0ce5c:	4742                	lw	a4,16(sp)
    9fe0ce5e:	e365                	bnez	a4,9fe0cf3e <obj_project_on_line+0x150>
			slc->slice.x0 = obj_attr.rect.x;
    9fe0ce60:	4652                	lw	a2,20(sp)
			dlist_add_tail(&slc->item, slc_list_head);
    9fe0ce62:	01040713          	addi	a4,s0,16
			slc->slice.x0 = obj_attr.rect.x;
    9fe0ce66:	c010                	sw	a2,0(s0)
			slc->slice.x1 = obj_attr.rect.x + obj_attr.rect.width;
    9fe0ce68:	47f2                	lw	a5,28(sp)
			slc->slice.obj_id = obj_i;
    9fe0ce6a:	01b41423          	sh	s11,8(s0)
			slc->slice.x1 = obj_attr.rect.x + obj_attr.rect.width;
    9fe0ce6e:	9fb1                	addw	a5,a5,a2
    9fe0ce70:	c05c                	sw	a5,4(s0)
	__dlist_add(node, queue->prev, queue);
    9fe0ce72:	0009b783          	ld	a5,0(s3)
	node->next = next;
    9fe0ce76:	01343c23          	sd	s3,24(s0)
	node->prev = prev;
    9fe0ce7a:	e81c                	sd	a5,16(s0)
	prev->next = node;
    9fe0ce7c:	e798                	sd	a4,8(a5)
	next->prev = node;
    9fe0ce7e:	00e9b023          	sd	a4,0(s3)
			*slc_num = *slc_num + 1;
    9fe0ce82:	000aa783          	lw	a5,0(s5)
			*next_y = MIN(*next_y, obj_attr._max_y);
    9fe0ce86:	4726                	lw	a4,72(sp)
			*slc_num = *slc_num + 1;
    9fe0ce88:	2785                	addiw	a5,a5,1
    9fe0ce8a:	00faa023          	sw	a5,0(s5)
			*next_y = MIN(*next_y, obj_attr._max_y);
    9fe0ce8e:	409c                	lw	a5,0(s1)
    9fe0ce90:	0007059b          	sext.w	a1,a4
    9fe0ce94:	0007861b          	sext.w	a2,a5
    9fe0ce98:	08b64263          	blt	a2,a1,9fe0cf1c <obj_project_on_line+0x12e>
				*next_y = MIN(*next_y,
    9fe0ce9c:	c098                	sw	a4,0(s1)
	for (int obj_i = 0; obj_i < (int)obj_num; obj_i++) {
    9fe0ce9e:	2d85                	addiw	s11,s11,1
    9fe0cea0:	040d0d13          	addi	s10,s10,64
    9fe0cea4:	f94d99e3          	bne	s11,s4,9fe0ce36 <obj_project_on_line+0x48>
			*next_y = y + 1;
		} else {
			free(slc);
		}
	}
	return *slc_num;
    9fe0cea8:	000aa503          	lw	a0,0(s5)
}
    9fe0ceac:	60ee                	ld	ra,216(sp)
    9fe0ceae:	644e                	ld	s0,208(sp)
    9fe0ceb0:	64ae                	ld	s1,200(sp)
    9fe0ceb2:	690e                	ld	s2,192(sp)
    9fe0ceb4:	79ea                	ld	s3,184(sp)
    9fe0ceb6:	7a4a                	ld	s4,176(sp)
    9fe0ceb8:	7aaa                	ld	s5,168(sp)
    9fe0ceba:	7b0a                	ld	s6,160(sp)
    9fe0cebc:	6bea                	ld	s7,152(sp)
    9fe0cebe:	6c4a                	ld	s8,144(sp)
    9fe0cec0:	6caa                	ld	s9,136(sp)
    9fe0cec2:	6d0a                	ld	s10,128(sp)
    9fe0cec4:	7de6                	ld	s11,120(sp)
    9fe0cec6:	3426                	fld	fs0,104(sp)
    9fe0cec8:	3486                	fld	fs1,96(sp)
    9fe0ceca:	2966                	fld	fs2,88(sp)
    9fe0cecc:	612d                	addi	sp,sp,224
    9fe0cece:	8082                	ret
			int y1 = obj_attr.rect.y + obj_attr.rect.thickness;
    9fe0ced0:	4762                	lw	a4,24(sp)
    9fe0ced2:	5612                	lw	a2,36(sp)
    9fe0ced4:	00c707bb          	addw	a5,a4,a2
	return (x >= begin && x < end);
    9fe0ced8:	0cf95163          	bge	s2,a5,9fe0cf9a <obj_project_on_line+0x1ac>
				slc->slice.x0 = obj_attr.rect.x;
    9fe0cedc:	45d2                	lw	a1,20(sp)
				dlist_add_tail(&slc->item, slc_list_head);
    9fe0cede:	01040613          	addi	a2,s0,16
				slc->slice.x0 = obj_attr.rect.x;
    9fe0cee2:	c00c                	sw	a1,0(s0)
					obj_attr.rect.x + obj_attr.rect.width;
    9fe0cee4:	4772                	lw	a4,28(sp)
				slc->slice.obj_id = obj_i;
    9fe0cee6:	01b41423          	sh	s11,8(s0)
					obj_attr.rect.x + obj_attr.rect.width;
    9fe0ceea:	9f2d                	addw	a4,a4,a1
				slc->slice.x1 =
    9fe0ceec:	c058                	sw	a4,4(s0)
	__dlist_add(node, queue->prev, queue);
    9fe0ceee:	0009b703          	ld	a4,0(s3)
	node->next = next;
    9fe0cef2:	01343c23          	sd	s3,24(s0)
	node->prev = prev;
    9fe0cef6:	e818                	sd	a4,16(s0)
	prev->next = node;
    9fe0cef8:	e710                	sd	a2,8(a4)
	next->prev = node;
    9fe0cefa:	00c9b023          	sd	a2,0(s3)
				*slc_num = *slc_num + 1;
    9fe0cefe:	000aa703          	lw	a4,0(s5)
    9fe0cf02:	2705                	addiw	a4,a4,1
    9fe0cf04:	00eaa023          	sw	a4,0(s5)
				*next_y = MIN(*next_y,
    9fe0cf08:	0127d563          	bge	a5,s2,9fe0cf12 <obj_project_on_line+0x124>
    9fe0cf0c:	4762                	lw	a4,24(sp)
    9fe0cf0e:	5782                	lw	a5,32(sp)
    9fe0cf10:	9fb9                	addw	a5,a5,a4
    9fe0cf12:	4098                	lw	a4,0(s1)
    9fe0cf14:	0007061b          	sext.w	a2,a4
    9fe0cf18:	f8c7d2e3          	bge	a5,a2,9fe0ce9c <obj_project_on_line+0xae>
    9fe0cf1c:	873e                	mv	a4,a5
    9fe0cf1e:	bfbd                	j	9fe0ce9c <obj_project_on_line+0xae>
			*next_y = MIN(*next_y, MAX(obj_attr._min_y, y + 1));
    9fe0cf20:	885a                	mv	a6,s6
    9fe0cf22:	00fbd363          	bge	s7,a5,9fe0cf28 <obj_project_on_line+0x13a>
    9fe0cf26:	883e                	mv	a6,a5
    9fe0cf28:	409c                	lw	a5,0(s1)
    9fe0cf2a:	0008061b          	sext.w	a2,a6
    9fe0cf2e:	0007871b          	sext.w	a4,a5
    9fe0cf32:	00c75363          	bge	a4,a2,9fe0cf38 <obj_project_on_line+0x14a>
    9fe0cf36:	883e                	mv	a6,a5
    9fe0cf38:	0104a023          	sw	a6,0(s1)
			continue;
    9fe0cf3c:	b78d                	j	9fe0ce9e <obj_project_on_line+0xb0>
		} else if (obj_attr.type == BIT_MAP ||
    9fe0cf3e:	ffe7079b          	addiw	a5,a4,-2
    9fe0cf42:	9bf5                	andi	a5,a5,-3
    9fe0cf44:	2781                	sext.w	a5,a5
    9fe0cf46:	cb89                	beqz	a5,9fe0cf58 <obj_project_on_line+0x16a>
		} else if (obj_attr.type == STROKE_RECT) {
    9fe0cf48:	f99704e3          	beq	a4,s9,9fe0ced0 <obj_project_on_line+0xe2>
		} else if (obj_attr.type == LINE) {
    9fe0cf4c:	478d                	li	a5,3
    9fe0cf4e:	0ef70563          	beq	a4,a5,9fe0d038 <obj_project_on_line+0x24a>
			free(slc);
    9fe0cf52:	78a010ef          	jal	ra,9fe0e6dc <vPortFree>
    9fe0cf56:	b7a1                	j	9fe0ce9e <obj_project_on_line+0xb0>
			slc->slice.x0 = obj_attr.bitmap.rect.x;
    9fe0cf58:	4752                	lw	a4,20(sp)
    9fe0cf5a:	c018                	sw	a4,0(s0)
			slc->slice.x1 = obj_attr.bitmap.rect.x +
    9fe0cf5c:	47f2                	lw	a5,28(sp)
			slc->slice.obj_id = obj_i;
    9fe0cf5e:	01b41423          	sh	s11,8(s0)
			slc->slice.x1 = obj_attr.bitmap.rect.x +
    9fe0cf62:	9fb9                	addw	a5,a5,a4
    9fe0cf64:	c05c                	sw	a5,4(s0)
			*next_y = MIN(*next_y, obj_attr._max_y);
    9fe0cf66:	4098                	lw	a4,0(s1)
    9fe0cf68:	47a6                	lw	a5,72(sp)
    9fe0cf6a:	0007061b          	sext.w	a2,a4
    9fe0cf6e:	0007859b          	sext.w	a1,a5
    9fe0cf72:	00b65363          	bge	a2,a1,9fe0cf78 <obj_project_on_line+0x18a>
    9fe0cf76:	87ba                	mv	a5,a4
    9fe0cf78:	c09c                	sw	a5,0(s1)
	__dlist_add(node, queue->prev, queue);
    9fe0cf7a:	0009b703          	ld	a4,0(s3)
			dlist_add_tail(&slc->item, slc_list_head);
    9fe0cf7e:	01040793          	addi	a5,s0,16
	node->next = next;
    9fe0cf82:	01343c23          	sd	s3,24(s0)
	node->prev = prev;
    9fe0cf86:	e818                	sd	a4,16(s0)
	prev->next = node;
    9fe0cf88:	e71c                	sd	a5,8(a4)
	next->prev = node;
    9fe0cf8a:	00f9b023          	sd	a5,0(s3)
			*slc_num = *slc_num + 1;
    9fe0cf8e:	000aa783          	lw	a5,0(s5)
    9fe0cf92:	2785                	addiw	a5,a5,1
    9fe0cf94:	00faa023          	sw	a5,0(s5)
    9fe0cf98:	b719                	j	9fe0ce9e <obj_project_on_line+0xb0>
			int y2 = obj_attr.rect.y + obj_attr.rect.height -
    9fe0cf9a:	5582                	lw	a1,32(sp)
    9fe0cf9c:	9f2d                	addw	a4,a4,a1
    9fe0cf9e:	40c705bb          	subw	a1,a4,a2
	return (x >= begin && x < end);
    9fe0cfa2:	f2b95de3          	bge	s2,a1,9fe0cedc <obj_project_on_line+0xee>
				slc1 = (SLICE_LIST *)malloc(1 * sizeof(SLICE_LIST));
    9fe0cfa6:	02000513          	li	a0,32
    9fe0cfaa:	e42e                	sd	a1,8(sp)
    9fe0cfac:	c22e                	sw	a1,4(sp)
    9fe0cfae:	5c8010ef          	jal	ra,9fe0e576 <pvPortMalloc>
				if (slc1 == NULL) {
    9fe0cfb2:	4712                	lw	a4,4(sp)
    9fe0cfb4:	65a2                	ld	a1,8(sp)
    9fe0cfb6:	1c050f63          	beqz	a0,9fe0d194 <obj_project_on_line+0x3a6>
				slc->slice.x0 = obj_attr.rect.x;
    9fe0cfba:	4352                	lw	t1,20(sp)
    9fe0cfbc:	030d9613          	slli	a2,s11,0x30
    9fe0cfc0:	9241                	srli	a2,a2,0x30
    9fe0cfc2:	00642023          	sw	t1,0(s0)
				slc->slice.x1 = obj_attr.rect.x + obj_attr.rect.thickness;
    9fe0cfc6:	5792                	lw	a5,36(sp)
				dlist_add_tail(&slc->item, slc_list_head);
    9fe0cfc8:	01040893          	addi	a7,s0,16
				dlist_add_tail(&slc1->item, slc_list_head);
    9fe0cfcc:	01050813          	addi	a6,a0,16
				slc->slice.x1 = obj_attr.rect.x + obj_attr.rect.thickness;
    9fe0cfd0:	006787bb          	addw	a5,a5,t1
    9fe0cfd4:	c05c                	sw	a5,4(s0)
					obj_attr.rect.x + obj_attr.rect.width;
    9fe0cfd6:	4372                	lw	t1,28(sp)
    9fe0cfd8:	47d2                	lw	a5,20(sp)
    9fe0cfda:	006787bb          	addw	a5,a5,t1
				slc1->slice.x1 =
    9fe0cfde:	c15c                	sw	a5,4(a0)
				slc1->slice.x0 = slc1->slice.x1 - obj_attr.rect.thickness;
    9fe0cfe0:	5312                	lw	t1,36(sp)
    9fe0cfe2:	406787bb          	subw	a5,a5,t1
    9fe0cfe6:	c11c                	sw	a5,0(a0)
				slc->slice.obj_id = obj_i;
    9fe0cfe8:	00c41423          	sh	a2,8(s0)
				slc1->slice.obj_id = obj_i;
    9fe0cfec:	00c51423          	sh	a2,8(a0)
	__dlist_add(node, queue->prev, queue);
    9fe0cff0:	0009b783          	ld	a5,0(s3)
	node->next = next;
    9fe0cff4:	01343c23          	sd	s3,24(s0)
	node->prev = prev;
    9fe0cff8:	e81c                	sd	a5,16(s0)
	prev->next = node;
    9fe0cffa:	0117b423          	sd	a7,8(a5)
	next->prev = node;
    9fe0cffe:	0119b023          	sd	a7,0(s3)
				*slc_num = *slc_num + 1;
    9fe0d002:	000aa783          	lw	a5,0(s5)
    9fe0d006:	2785                	addiw	a5,a5,1
    9fe0d008:	00faa023          	sw	a5,0(s5)
	__dlist_add(node, queue->prev, queue);
    9fe0d00c:	0009b783          	ld	a5,0(s3)
	node->next = next;
    9fe0d010:	01353c23          	sd	s3,24(a0)
	node->prev = prev;
    9fe0d014:	e91c                	sd	a5,16(a0)
	prev->next = node;
    9fe0d016:	0107b423          	sd	a6,8(a5)
	next->prev = node;
    9fe0d01a:	0109b023          	sd	a6,0(s3)
				*slc_num = *slc_num + 1;
    9fe0d01e:	000aa783          	lw	a5,0(s5)
    9fe0d022:	2785                	addiw	a5,a5,1
    9fe0d024:	00faa023          	sw	a5,0(s5)
				*next_y = MIN(*next_y, y2);
    9fe0d028:	409c                	lw	a5,0(s1)
    9fe0d02a:	0007861b          	sext.w	a2,a5
    9fe0d02e:	00c5d363          	bge	a1,a2,9fe0d034 <obj_project_on_line+0x246>
    9fe0d032:	87ba                	mv	a5,a4
    9fe0d034:	c09c                	sw	a5,0(s1)
    9fe0d036:	b5a5                	j	9fe0ce9e <obj_project_on_line+0xb0>
			if (is_in_range(y, (int)round(obj_attr.line._by[0]),
    9fe0d038:	02012507          	flw	fa0,32(sp)
    9fe0d03c:	42050553          	fcvt.d.s	fa0,fa0
    9fe0d040:	a61f30ef          	jal	ra,9fe00aa0 <round>
    9fe0d044:	22a50453          	fmv.d	fs0,fa0
					(int)round(obj_attr.line._by[1]))) {
    9fe0d048:	02412507          	flw	fa0,36(sp)
    9fe0d04c:	42050553          	fcvt.d.s	fa0,fa0
    9fe0d050:	a51f30ef          	jal	ra,9fe00aa0 <round>
			if (is_in_range(y, (int)round(obj_attr.line._by[0]),
    9fe0d054:	c20417d3          	fcvt.w.d	a5,fs0,rtz
	return (x >= begin && x < end);
    9fe0d058:	2781                	sext.w	a5,a5
    9fe0d05a:	0af94763          	blt	s2,a5,9fe0d108 <obj_project_on_line+0x31a>
			if (is_in_range(y, (int)round(obj_attr.line._by[0]),
    9fe0d05e:	c20517d3          	fcvt.w.d	a5,fa0,rtz
						(obj_attr.line.ts_h / (obj_attr.line._by[1] -
    9fe0d062:	02412507          	flw	fa0,36(sp)
	return (x >= begin && x < end);
    9fe0d066:	2781                	sext.w	a5,a5
    9fe0d068:	0af95263          	bge	s2,a5,9fe0d10c <obj_project_on_line+0x31e>
				float delta_x0 = obj_attr.line._mx * (y - obj_attr.line._by[0]);
    9fe0d06c:	02012787          	flw	fa5,32(sp)
    9fe0d070:	d0097453          	fcvt.s.w	fs0,s2
				pt_x0 = obj_attr.line._bx[0] + delta_x0;
    9fe0d074:	01412487          	flw	fs1,20(sp)
						(obj_attr.line.ts_h / (obj_attr.line._by[1] -
    9fe0d078:	08f57553          	fsub.s	fa0,fa0,fa5
				float delta_x0 = obj_attr.line._mx * (y - obj_attr.line._by[0]);
    9fe0d07c:	08f47453          	fsub.s	fs0,fs0,fa5
						(obj_attr.line.ts_h / (obj_attr.line._by[1] -
    9fe0d080:	03812787          	flw	fa5,56(sp)
    9fe0d084:	18a7f553          	fdiv.s	fa0,fa5,fa0
				pt_x0 = obj_attr.line._bx[0] + delta_x0;
    9fe0d088:	01812787          	flw	fa5,24(sp)
    9fe0d08c:	7884f4c3          	fmadd.s	fs1,fs1,fs0,fa5
				pt_x1 = pt_x0 - width;
    9fe0d090:	48a4744b          	fnmsub.s	fs0,fs0,fa0,fs1
			slc->slice.x0 = clip((int)round(MIN(pt_x0, pt_x1)), 0, canvas_width-1);
    9fe0d094:	a08497d3          	flt.s	a5,fs1,fs0
    9fe0d098:	20948553          	fmv.s	fa0,fs1
    9fe0d09c:	e399                	bnez	a5,9fe0d0a2 <obj_project_on_line+0x2b4>
    9fe0d09e:	20840553          	fmv.s	fa0,fs0
    9fe0d0a2:	42050553          	fcvt.d.s	fa0,fa0
    9fe0d0a6:	9fbf30ef          	jal	ra,9fe00aa0 <round>
    9fe0d0aa:	c2051553          	fcvt.w.d	a0,fa0,rtz
    9fe0d0ae:	8662                	mv	a2,s8
    9fe0d0b0:	4581                	li	a1,0
    9fe0d0b2:	2501                	sext.w	a0,a0
    9fe0d0b4:	507000ef          	jal	ra,9fe0ddba <clip>
			slc->slice.x1 = clip((int)round(MAX(pt_x0, pt_x1)), 0, canvas_width-1);
    9fe0d0b8:	a09417d3          	flt.s	a5,fs0,fs1
			slc->slice.x0 = clip((int)round(MIN(pt_x0, pt_x1)), 0, canvas_width-1);
    9fe0d0bc:	c008                	sw	a0,0(s0)
			slc->slice.x1 = clip((int)round(MAX(pt_x0, pt_x1)), 0, canvas_width-1);
    9fe0d0be:	e399                	bnez	a5,9fe0d0c4 <obj_project_on_line+0x2d6>
    9fe0d0c0:	208404d3          	fmv.s	fs1,fs0
    9fe0d0c4:	42048553          	fcvt.d.s	fa0,fs1
    9fe0d0c8:	9d9f30ef          	jal	ra,9fe00aa0 <round>
    9fe0d0cc:	c2051553          	fcvt.w.d	a0,fa0,rtz
    9fe0d0d0:	8662                	mv	a2,s8
    9fe0d0d2:	4581                	li	a1,0
    9fe0d0d4:	2501                	sext.w	a0,a0
    9fe0d0d6:	4e5000ef          	jal	ra,9fe0ddba <clip>
    9fe0d0da:	c048                	sw	a0,4(s0)
			slc->slice.obj_id = obj_i;
    9fe0d0dc:	01b41423          	sh	s11,8(s0)
	__dlist_add(node, queue->prev, queue);
    9fe0d0e0:	0009b703          	ld	a4,0(s3)
			dlist_add_tail(&slc->item, slc_list_head);
    9fe0d0e4:	01040793          	addi	a5,s0,16
	node->next = next;
    9fe0d0e8:	01343c23          	sd	s3,24(s0)
	node->prev = prev;
    9fe0d0ec:	e818                	sd	a4,16(s0)
	prev->next = node;
    9fe0d0ee:	e71c                	sd	a5,8(a4)
	next->prev = node;
    9fe0d0f0:	00f9b023          	sd	a5,0(s3)
			*slc_num = *slc_num + 1;
    9fe0d0f4:	000aa783          	lw	a5,0(s5)
    9fe0d0f8:	2785                	addiw	a5,a5,1
    9fe0d0fa:	00faa023          	sw	a5,0(s5)
			*next_y = y + 1;
    9fe0d0fe:	0164a023          	sw	s6,0(s1)
    9fe0d102:	bb71                	j	9fe0ce9e <obj_project_on_line+0xb0>
			return -1;
    9fe0d104:	557d                	li	a0,-1
    9fe0d106:	b35d                	j	9fe0ceac <obj_project_on_line+0xbe>
						(obj_attr.line.ts_h / (obj_attr.line._by[1] -
    9fe0d108:	02412507          	flw	fa0,36(sp)
			} else if (is_in_range(y, (int)round(obj_attr.line._by[1]),
    9fe0d10c:	42050553          	fcvt.d.s	fa0,fa0
    9fe0d110:	991f30ef          	jal	ra,9fe00aa0 <round>
					   (int)round(obj_attr.line._ey[0] + 1.))) {
    9fe0d114:	03012787          	flw	fa5,48(sp)
			} else if (is_in_range(y, (int)round(obj_attr.line._by[1]),
    9fe0d118:	22a50453          	fmv.d	fs0,fa0
					   (int)round(obj_attr.line._ey[0] + 1.))) {
    9fe0d11c:	420787d3          	fcvt.d.s	fa5,fa5
    9fe0d120:	0327f553          	fadd.d	fa0,fa5,fs2
    9fe0d124:	97df30ef          	jal	ra,9fe00aa0 <round>
			} else if (is_in_range(y, (int)round(obj_attr.line._by[1]),
    9fe0d128:	c20417d3          	fcvt.w.d	a5,fs0,rtz
	return (x >= begin && x < end);
    9fe0d12c:	2781                	sext.w	a5,a5
    9fe0d12e:	02f95d63          	bge	s2,a5,9fe0d168 <obj_project_on_line+0x37a>
				float delta_x0 = obj_attr.line._mx * (y - obj_attr.line._by[0]);
    9fe0d132:	01412487          	flw	fs1,20(sp)
				float delta_x0 = obj_attr.line._mx * (y - obj_attr.line._by[0]);
    9fe0d136:	d0097453          	fcvt.s.w	fs0,s2
				pt_x1 = pt_x0 - obj_attr.line.ts_h;
    9fe0d13a:	03812707          	flw	fa4,56(sp)
				float width = (obj_attr.line._ey[1] - y) *
    9fe0d13e:	03412787          	flw	fa5,52(sp)
						(obj_attr.line.ts_h / (obj_attr.line._ey[1] - obj_attr.line._ey[0]));
    9fe0d142:	03012687          	flw	fa3,48(sp)
    9fe0d146:	08d7f653          	fsub.s	fa2,fa5,fa3
				float delta_x0 = obj_attr.line._mx * (y - obj_attr.line._by[1]);
    9fe0d14a:	02412687          	flw	fa3,36(sp)
				float width = (obj_attr.line._ey[1] - y) *
    9fe0d14e:	0887f7d3          	fsub.s	fa5,fa5,fs0
				float delta_x0 = obj_attr.line._mx * (y - obj_attr.line._by[1]);
    9fe0d152:	08d476d3          	fsub.s	fa3,fs0,fa3
						(obj_attr.line.ts_h / (obj_attr.line._ey[1] - obj_attr.line._ey[0]));
    9fe0d156:	18c77453          	fdiv.s	fs0,fa4,fa2
				pt_x0 = obj_attr.line._bx[1] + delta_x0;
    9fe0d15a:	01c12707          	flw	fa4,28(sp)
    9fe0d15e:	7096f4c3          	fmadd.s	fs1,fa3,fs1,fa4
				pt_x1 = pt_x0 + width;
    9fe0d162:	4887f443          	fmadd.s	fs0,fa5,fs0,fs1
    9fe0d166:	b73d                	j	9fe0d094 <obj_project_on_line+0x2a6>
			} else if (is_in_range(y, (int)round(obj_attr.line._by[1]),
    9fe0d168:	c20517d3          	fcvt.w.d	a5,fa0,rtz
				float delta_x0 = obj_attr.line._mx * (y - obj_attr.line._by[0]);
    9fe0d16c:	01412487          	flw	fs1,20(sp)
				float delta_x0 = obj_attr.line._mx * (y - obj_attr.line._by[0]);
    9fe0d170:	d0097453          	fcvt.s.w	fs0,s2
	return (x >= begin && x < end);
    9fe0d174:	2781                	sext.w	a5,a5
				pt_x1 = pt_x0 - obj_attr.line.ts_h;
    9fe0d176:	03812707          	flw	fa4,56(sp)
	return (x >= begin && x < end);
    9fe0d17a:	fcf952e3          	bge	s2,a5,9fe0d13e <obj_project_on_line+0x350>
				float delta_x0 = obj_attr.line._mx * (y - obj_attr.line._by[0]);
    9fe0d17e:	02012787          	flw	fa5,32(sp)
				pt_x0 = obj_attr.line._bx[0] + delta_x0;
    9fe0d182:	01812687          	flw	fa3,24(sp)
				float delta_x0 = obj_attr.line._mx * (y - obj_attr.line._by[0]);
    9fe0d186:	08f477d3          	fsub.s	fa5,fs0,fa5
				pt_x0 = obj_attr.line._bx[0] + delta_x0;
    9fe0d18a:	6897f4c3          	fmadd.s	fs1,fa5,fs1,fa3
				pt_x1 = pt_x0 - obj_attr.line.ts_h;
    9fe0d18e:	08e4f453          	fsub.s	fs0,fs1,fa4
    9fe0d192:	b709                	j	9fe0d094 <obj_project_on_line+0x2a6>
					free(slc);
    9fe0d194:	8522                	mv	a0,s0
    9fe0d196:	546010ef          	jal	ra,9fe0e6dc <vPortFree>
					return -1;
    9fe0d19a:	557d                	li	a0,-1
    9fe0d19c:	bb01                	j	9fe0ceac <obj_project_on_line+0xbe>

000000009fe0d19e <draw_cmpr_init>:

void draw_cmpr_init(Cmpr_Canvas_Ctrl *ctrl, uint8_t *obuf, int buf_size,
			Canvas_Attr *canvas)
{
    9fe0d19e:	7139                	addi	sp,sp,-64
    9fe0d1a0:	f822                	sd	s0,48(sp)
    9fe0d1a2:	f426                	sd	s1,40(sp)
    9fe0d1a4:	f04a                	sd	s2,32(sp)
    9fe0d1a6:	ec4e                	sd	s3,24(sp)
    9fe0d1a8:	fc06                	sd	ra,56(sp)
    9fe0d1aa:	e852                	sd	s4,16(sp)
    9fe0d1ac:	e456                	sd	s5,8(sp)
    9fe0d1ae:	892e                	mv	s2,a1
    9fe0d1b0:	842a                	mv	s0,a0
    9fe0d1b2:	89b2                	mv	s3,a2
    9fe0d1b4:	84b6                	mv	s1,a3
	bool trial_enc = (obuf == NULL) || (buf_size == 0);
    9fe0d1b6:	c1c9                	beqz	a1,9fe0d238 <draw_cmpr_init+0x9a>
    9fe0d1b8:	00163a13          	seqz	s4,a2
    9fe0d1bc:	8ad2                	mv	s5,s4
	OSDCmpr_Ctrl *osdCmpr_ctrl = &ctrl->osdCmpr_ctrl;

	memset(osdCmpr_ctrl, 0, sizeof(OSDCmpr_Ctrl));
    9fe0d1be:	04800613          	li	a2,72
    9fe0d1c2:	4581                	li	a1,0
    9fe0d1c4:	8522                	mv	a0,s0
    9fe0d1c6:	db7fe0ef          	jal	ra,9fe0bf7c <memset>
	osdCmpr_ctrl->reg_image_width = canvas->width;
    9fe0d1ca:	4098                	lw	a4,0(s1)
	osdCmpr_ctrl->reg_image_height = canvas->height;
	osdCmpr_ctrl->reg_palette_mode_en = OSDEC_PAL_BD > 0;
	osdCmpr_ctrl->reg_palette_idx_bd = OSDEC_PAL_BD;
	osdCmpr_ctrl->reg_run_len_bd = OSDEC_RL_BD;
    9fe0d1cc:	478d                	li	a5,3
    9fe0d1ce:	1782                	slli	a5,a5,0x20
	osdCmpr_ctrl->reg_image_width = canvas->width;
    9fe0d1d0:	c018                	sw	a4,0(s0)
	osdCmpr_ctrl->reg_image_height = canvas->height;
    9fe0d1d2:	40d8                	lw	a4,4(s1)
	osdCmpr_ctrl->reg_run_len_bd = OSDEC_RL_BD;
    9fe0d1d4:	0799                	addi	a5,a5,6
    9fe0d1d6:	ec1c                	sd	a5,24(s0)
	osdCmpr_ctrl->reg_image_height = canvas->height;
    9fe0d1d8:	c058                	sw	a4,4(s0)
	osdCmpr_ctrl->reg_palette_mode_en = OSDEC_PAL_BD > 0;
    9fe0d1da:	4705                	li	a4,1
    9fe0d1dc:	00e40a23          	sb	a4,20(s0)
	osdCmpr_ctrl->reg_osd_format = canvas->format;
    9fe0d1e0:	4488                	lw	a0,8(s1)
    9fe0d1e2:	d008                	sw	a0,32(s0)
	osdCmpr_ctrl->pel_sz = osd_cmpr_get_pixel_sz(canvas->format);
    9fe0d1e4:	28a010ef          	jal	ra,9fe0e46e <osd_cmpr_get_pixel_sz>
    9fe0d1e8:	d048                	sw	a0,36(s0)
	canvas->bg_color_code = 0x0;
    9fe0d1ea:	0004a623          	sw	zero,12(s1)
	osd_cmpr_frame_init(&ctrl->osdCmpr_ctrl);
    9fe0d1ee:	8522                	mv	a0,s0
    9fe0d1f0:	21a010ef          	jal	ra,9fe0e40a <osd_cmpr_frame_init>
	int hdr_sz;

	if (trial_enc) {
    9fe0d1f4:	4601                	li	a2,0
    9fe0d1f6:	020a8563          	beqz	s5,9fe0d220 <draw_cmpr_init+0x82>
		hdr_sz = 0;
	} else {
		osd_cmpr_enc_header(obuf, osdCmpr_ctrl);
		hdr_sz = osd_cmpr_get_header_sz();
	}
	init_stream(&ctrl->bitstream, &obuf[hdr_sz], buf_size - hdr_sz, trial_enc);
    9fe0d1fa:	86d2                	mv	a3,s4
    9fe0d1fc:	85ca                	mv	a1,s2
    9fe0d1fe:	04840513          	addi	a0,s0,72
    9fe0d202:	3d5000ef          	jal	ra,9fe0ddd6 <init_stream>
	ctrl->md = NUM_OF_MODE; // must be invalid type to bypass the first run
    9fe0d206:	4791                	li	a5,4
    9fe0d208:	d43c                	sw	a5,104(s0)
	ctrl->rl_cnt = -1;
    9fe0d20a:	57fd                	li	a5,-1
    9fe0d20c:	d07c                	sw	a5,100(s0)
}
    9fe0d20e:	70e2                	ld	ra,56(sp)
    9fe0d210:	7442                	ld	s0,48(sp)
    9fe0d212:	74a2                	ld	s1,40(sp)
    9fe0d214:	7902                	ld	s2,32(sp)
    9fe0d216:	69e2                	ld	s3,24(sp)
    9fe0d218:	6a42                	ld	s4,16(sp)
    9fe0d21a:	6aa2                	ld	s5,8(sp)
    9fe0d21c:	6121                	addi	sp,sp,64
    9fe0d21e:	8082                	ret
		osd_cmpr_enc_header(obuf, osdCmpr_ctrl);
    9fe0d220:	854a                	mv	a0,s2
    9fe0d222:	85a2                	mv	a1,s0
    9fe0d224:	7a7000ef          	jal	ra,9fe0e1ca <osd_cmpr_enc_header>
		hdr_sz = osd_cmpr_get_header_sz();
    9fe0d228:	256010ef          	jal	ra,9fe0e47e <osd_cmpr_get_header_sz>
    9fe0d22c:	0005061b          	sext.w	a2,a0
	init_stream(&ctrl->bitstream, &obuf[hdr_sz], buf_size - hdr_sz, trial_enc);
    9fe0d230:	9932                	add	s2,s2,a2
    9fe0d232:	40c9863b          	subw	a2,s3,a2
    9fe0d236:	b7d1                	j	9fe0d1fa <draw_cmpr_init+0x5c>
    9fe0d238:	4a05                	li	s4,1
	bool trial_enc = (obuf == NULL) || (buf_size == 0);
    9fe0d23a:	4a85                	li	s5,1
    9fe0d23c:	b749                	j	9fe0d1be <draw_cmpr_init+0x20>

000000009fe0d23e <draw_cmpr_pixel>:
				 &ctrl->osdCmpr_ctrl, &ctrl->bitstream);
}

void draw_cmpr_pixel(uint8_t *color_code_ptr, uint16_t length, bool is_first_pel,
			 Cmpr_Canvas_Ctrl *ctrl)
{
    9fe0d23e:	711d                	addi	sp,sp,-96
    9fe0d240:	ec86                	sd	ra,88(sp)
    9fe0d242:	e8a2                	sd	s0,80(sp)
    9fe0d244:	e4a6                	sd	s1,72(sp)
    9fe0d246:	e0ca                	sd	s2,64(sp)
    9fe0d248:	fc4e                	sd	s3,56(sp)
    9fe0d24a:	f852                	sd	s4,48(sp)
    9fe0d24c:	f456                	sd	s5,40(sp)
    9fe0d24e:	87ae                	mv	a5,a1
	RGBA cur_c =
		get_color(color_code_ptr, ctrl->osdCmpr_ctrl.reg_osd_format);
    9fe0d250:	528c                	lw	a1,32(a3)
{
    9fe0d252:	8436                	mv	s0,a3
    9fe0d254:	84b2                	mv	s1,a2

	osd_cmpr_enc_const_pixel(cur_c, &ctrl->last_color, &ctrl->rl_cnt, &ctrl->md,
    9fe0d256:	06468913          	addi	s2,a3,100
{
    9fe0d25a:	00f11f23          	sh	a5,30(sp)
	osd_cmpr_enc_const_pixel(cur_c, &ctrl->last_color, &ctrl->rl_cnt, &ctrl->md,
    9fe0d25e:	06840993          	addi	s3,s0,104
		get_color(color_code_ptr, ctrl->osdCmpr_ctrl.reg_osd_format);
    9fe0d262:	41b000ef          	jal	ra,9fe0de7c <get_color>
	osd_cmpr_enc_const_pixel(cur_c, &ctrl->last_color, &ctrl->rl_cnt, &ctrl->md,
    9fe0d266:	06c40a13          	addi	s4,s0,108
    9fe0d26a:	04840a93          	addi	s5,s0,72
    9fe0d26e:	8826                	mv	a6,s1
    9fe0d270:	01e10793          	addi	a5,sp,30
    9fe0d274:	e456                	sd	s5,8(sp)
    9fe0d276:	e022                	sd	s0,0(sp)
    9fe0d278:	04000893          	li	a7,64
    9fe0d27c:	8752                	mv	a4,s4
    9fe0d27e:	86ce                	mv	a3,s3
    9fe0d280:	864a                	mv	a2,s2
    9fe0d282:	06040593          	addi	a1,s0,96
		get_color(color_code_ptr, ctrl->osdCmpr_ctrl.reg_osd_format);
    9fe0d286:	84aa                	mv	s1,a0
	osd_cmpr_enc_const_pixel(cur_c, &ctrl->last_color, &ctrl->rl_cnt, &ctrl->md,
    9fe0d288:	0a6010ef          	jal	ra,9fe0e32e <osd_cmpr_enc_const_pixel>
				 &ctrl->code, &length, is_first_pel, OSDEC_MAX_RL,
				 &ctrl->osdCmpr_ctrl, &ctrl->bitstream);
	while (length > 0) {
    9fe0d28c:	01e15783          	lhu	a5,30(sp)
    9fe0d290:	c385                	beqz	a5,9fe0d2b0 <draw_cmpr_pixel+0x72>
		osd_cmpr_enc_followed_run(cur_c, &ctrl->rl_cnt, &ctrl->md,
    9fe0d292:	04000793          	li	a5,64
    9fe0d296:	88d6                	mv	a7,s5
    9fe0d298:	8822                	mv	a6,s0
    9fe0d29a:	01e10713          	addi	a4,sp,30
    9fe0d29e:	86d2                	mv	a3,s4
    9fe0d2a0:	864e                	mv	a2,s3
    9fe0d2a2:	85ca                	mv	a1,s2
    9fe0d2a4:	8526                	mv	a0,s1
    9fe0d2a6:	7f9000ef          	jal	ra,9fe0e29e <osd_cmpr_enc_followed_run>
	while (length > 0) {
    9fe0d2aa:	01e15783          	lhu	a5,30(sp)
    9fe0d2ae:	f3f5                	bnez	a5,9fe0d292 <draw_cmpr_pixel+0x54>
					  &ctrl->code, &length, OSDEC_MAX_RL,
					  &ctrl->osdCmpr_ctrl, &ctrl->bitstream);
	}
}
    9fe0d2b0:	60e6                	ld	ra,88(sp)
    9fe0d2b2:	6446                	ld	s0,80(sp)
    9fe0d2b4:	64a6                	ld	s1,72(sp)
    9fe0d2b6:	6906                	ld	s2,64(sp)
    9fe0d2b8:	79e2                	ld	s3,56(sp)
    9fe0d2ba:	7a42                	ld	s4,48(sp)
    9fe0d2bc:	7aa2                	ld	s5,40(sp)
    9fe0d2be:	6125                	addi	sp,sp,96
    9fe0d2c0:	8082                	ret

000000009fe0d2c2 <draw_cmpr_canvas_line>:

void draw_cmpr_canvas_line(Cmpr_Canvas_Ctrl *ctrl, DRAW_OBJ *obj_vec,
			   int y, int pixel_sz, dlist_t *seg_list_head)
{
    9fe0d2c2:	7119                	addi	sp,sp,-128
    9fe0d2c4:	f4a6                	sd	s1,104(sp)
    9fe0d2c6:	f0ca                	sd	s2,96(sp)
    9fe0d2c8:	e0da                	sd	s6,64(sp)
    9fe0d2ca:	fc5e                	sd	s7,56(sp)
    9fe0d2cc:	f06a                	sd	s10,32(sp)
    9fe0d2ce:	ec6e                	sd	s11,24(sp)
    9fe0d2d0:	fc86                	sd	ra,120(sp)
    9fe0d2d2:	f8a2                	sd	s0,112(sp)
    9fe0d2d4:	ecce                	sd	s3,88(sp)
    9fe0d2d6:	e8d2                	sd	s4,80(sp)
    9fe0d2d8:	e4d6                	sd	s5,72(sp)
    9fe0d2da:	f862                	sd	s8,48(sp)
    9fe0d2dc:	f466                	sd	s9,40(sp)
	dlist_t *temp;
	SEGMENT_LIST *seg;
	int i = 0;

	dlist_for_each_entry_safe(seg_list_head, temp, seg, SEGMENT_LIST, item) {
    9fe0d2de:	671c                	ld	a5,8(a4)
{
    9fe0d2e0:	e42e                	sd	a1,8(sp)
    9fe0d2e2:	8b3a                	mv	s6,a4
    9fe0d2e4:	84aa                	mv	s1,a0
    9fe0d2e6:	8bb2                	mv	s7,a2
    9fe0d2e8:	8d36                	mv	s10,a3
	dlist_for_each_entry_safe(seg_list_head, temp, seg, SEGMENT_LIST, item) {
    9fe0d2ea:	fd878d93          	addi	s11,a5,-40
    9fe0d2ee:	4901                	li	s2,0
    9fe0d2f0:	c399                	beqz	a5,9fe0d2f6 <draw_cmpr_canvas_line+0x34>
    9fe0d2f2:	0087b903          	ld	s2,8(a5)
    9fe0d2f6:	4981                	li	s3,0
				while (pel_cnt < segment->width) {
					rep_cnt = MIN(src_ptr[0] + 1,  segment->width - pel_cnt);
					uint8_t *cur_ptr = &src_ptr[1];

					draw_cmpr_pixel(cur_ptr, rep_cnt, y == 0 && i == 0 && pel_cnt == 0, ctrl);
					src_ptr += (1 + pixel_sz);
    9fe0d2f8:	001d0a1b          	addiw	s4,s10,1
	dlist_for_each_entry_safe(seg_list_head, temp, seg, SEGMENT_LIST, item) {
    9fe0d2fc:	16fb0663          	beq	s6,a5,9fe0d468 <draw_cmpr_canvas_line+0x1a6>
		if (segment->is_const) {
    9fe0d300:	000dc783          	lbu	a5,0(s11)
			if (segment->width > 0) {
    9fe0d304:	002dd583          	lhu	a1,2(s11)
		if (segment->is_const) {
    9fe0d308:	c39d                	beqz	a5,9fe0d32e <draw_cmpr_canvas_line+0x6c>
			if (segment->width > 0) {
    9fe0d30a:	14059563          	bnez	a1,9fe0d454 <draw_cmpr_canvas_line+0x192>
					draw_cmpr_pixel(cur_ptr, rep_cnt, y == 0 && i == 0 && pel_i == 0, ctrl);
				}
				segment->color.buf += (segment->stride * pixel_sz);
			}
		}
		i++;
    9fe0d30e:	2985                	addiw	s3,s3,1
	dlist_for_each_entry_safe(seg_list_head, temp, seg, SEGMENT_LIST, item) {
    9fe0d310:	fd890d93          	addi	s11,s2,-40
    9fe0d314:	4781                	li	a5,0
    9fe0d316:	00090463          	beqz	s2,9fe0d31e <draw_cmpr_canvas_line+0x5c>
    9fe0d31a:	00893783          	ld	a5,8(s2)
    9fe0d31e:	152b0563          	beq	s6,s2,9fe0d468 <draw_cmpr_canvas_line+0x1a6>
    9fe0d322:	893e                	mv	s2,a5
		if (segment->is_const) {
    9fe0d324:	000dc783          	lbu	a5,0(s11)
			if (segment->width > 0) {
    9fe0d328:	002dd583          	lhu	a1,2(s11)
		if (segment->is_const) {
    9fe0d32c:	fff9                	bnez	a5,9fe0d30a <draw_cmpr_canvas_line+0x48>
			if (segment->is_cmpr) {
    9fe0d32e:	001dc703          	lbu	a4,1(s11)
			uint8_t *src_ptr = segment->color.buf;
    9fe0d332:	010db403          	ld	s0,16(s11)
				for (int pel_i = 0; pel_i < segment->width; pel_i += rep_cnt) {
    9fe0d336:	0005879b          	sext.w	a5,a1
			if (segment->is_cmpr) {
    9fe0d33a:	e355                	bnez	a4,9fe0d3de <draw_cmpr_canvas_line+0x11c>
				draw_cmpr_pixel((uint8_t *)&segment->color.code,
    9fe0d33c:	013beab3          	or	s5,s7,s3
				for (int pel_i = 0; pel_i < segment->width; pel_i += rep_cnt) {
    9fe0d340:	4301                	li	t1,0
    9fe0d342:	c7c1                	beqz	a5,9fe0d3ca <draw_cmpr_canvas_line+0x108>
					uint8_t *cur_ptr = &src_ptr[pel_i * pixel_sz];
    9fe0d344:	026d053b          	mulw	a0,s10,t1
					rep_cnt = count_repeat_pixel(cur_ptr, pixel_sz, segment->width - pel_i);
    9fe0d348:	406785bb          	subw	a1,a5,t1
	int num = pixel_num - 1;
    9fe0d34c:	fff5861b          	addiw	a2,a1,-1
					uint8_t *cur_ptr = &src_ptr[pel_i * pixel_sz];
    9fe0d350:	9522                	add	a0,a0,s0
	for (int byte_i = 0; byte_i < pixel_sz; byte_i++) {
    9fe0d352:	07a05863          	blez	s10,9fe0d3c2 <draw_cmpr_canvas_line+0x100>
    9fe0d356:	4801                	li	a6,0
    9fe0d358:	01a508b3          	add	a7,a0,s10
		uint8_t ref = src[byte_i];
    9fe0d35c:	010507b3          	add	a5,a0,a6
    9fe0d360:	0007c583          	lbu	a1,0(a5)
		uint8_t *cur_ptr = &src[byte_i + pixel_sz];
    9fe0d364:	010887b3          	add	a5,a7,a6
		for (int cnt = 0; cnt < num; cnt++) {
    9fe0d368:	ce01                	beqz	a2,9fe0d380 <draw_cmpr_canvas_line+0xbe>
    9fe0d36a:	4701                	li	a4,0
    9fe0d36c:	a021                	j	9fe0d374 <draw_cmpr_canvas_line+0xb2>
    9fe0d36e:	2705                	addiw	a4,a4,1
    9fe0d370:	00c70863          	beq	a4,a2,9fe0d380 <draw_cmpr_canvas_line+0xbe>
			if (ref != (*cur_ptr)) {
    9fe0d374:	0007c683          	lbu	a3,0(a5)
			cur_ptr += pixel_sz;
    9fe0d378:	97ea                	add	a5,a5,s10
			if (ref != (*cur_ptr)) {
    9fe0d37a:	feb68ae3          	beq	a3,a1,9fe0d36e <draw_cmpr_canvas_line+0xac>
    9fe0d37e:	863a                	mv	a2,a4
	for (int byte_i = 0; byte_i < pixel_sz; byte_i++) {
    9fe0d380:	0805                	addi	a6,a6,1
    9fe0d382:	0008079b          	sext.w	a5,a6
    9fe0d386:	fda7cbe3          	blt	a5,s10,9fe0d35c <draw_cmpr_canvas_line+0x9a>
	return num + 1;
    9fe0d38a:	0016059b          	addiw	a1,a2,1
				for (int pel_i = 0; pel_i < segment->width; pel_i += rep_cnt) {
    9fe0d38e:	00658cbb          	addw	s9,a1,t1
					draw_cmpr_pixel(cur_ptr, rep_cnt, y == 0 && i == 0 && pel_i == 0, ctrl);
    9fe0d392:	01536633          	or	a2,t1,s5
    9fe0d396:	2601                	sext.w	a2,a2
    9fe0d398:	15c2                	slli	a1,a1,0x30
    9fe0d39a:	86a6                	mv	a3,s1
    9fe0d39c:	00163613          	seqz	a2,a2
    9fe0d3a0:	91c1                	srli	a1,a1,0x30
    9fe0d3a2:	e9dff0ef          	jal	ra,9fe0d23e <draw_cmpr_pixel>
				for (int pel_i = 0; pel_i < segment->width; pel_i += rep_cnt) {
    9fe0d3a6:	002dd783          	lhu	a5,2(s11)
    9fe0d3aa:	00fcde63          	bge	s9,a5,9fe0d3c6 <draw_cmpr_canvas_line+0x104>
    9fe0d3ae:	8366                	mv	t1,s9
					uint8_t *cur_ptr = &src_ptr[pel_i * pixel_sz];
    9fe0d3b0:	026d053b          	mulw	a0,s10,t1
					rep_cnt = count_repeat_pixel(cur_ptr, pixel_sz, segment->width - pel_i);
    9fe0d3b4:	406785bb          	subw	a1,a5,t1
	int num = pixel_num - 1;
    9fe0d3b8:	fff5861b          	addiw	a2,a1,-1
					uint8_t *cur_ptr = &src_ptr[pel_i * pixel_sz];
    9fe0d3bc:	9522                	add	a0,a0,s0
	for (int byte_i = 0; byte_i < pixel_sz; byte_i++) {
    9fe0d3be:	f9a04ce3          	bgtz	s10,9fe0d356 <draw_cmpr_canvas_line+0x94>
    9fe0d3c2:	8cbe                	mv	s9,a5
    9fe0d3c4:	b7f9                	j	9fe0d392 <draw_cmpr_canvas_line+0xd0>
				segment->color.buf += (segment->stride * pixel_sz);
    9fe0d3c6:	010db403          	ld	s0,16(s11)
    9fe0d3ca:	008da783          	lw	a5,8(s11)
    9fe0d3ce:	03a787bb          	mulw	a5,a5,s10
    9fe0d3d2:	1782                	slli	a5,a5,0x20
    9fe0d3d4:	9381                	srli	a5,a5,0x20
    9fe0d3d6:	943e                	add	s0,s0,a5
    9fe0d3d8:	008db823          	sd	s0,16(s11)
    9fe0d3dc:	bf0d                	j	9fe0d30e <draw_cmpr_canvas_line+0x4c>
				while (pel_cnt < segment->width) {
    9fe0d3de:	c7a1                	beqz	a5,9fe0d426 <draw_cmpr_canvas_line+0x164>
    9fe0d3e0:	00140c13          	addi	s8,s0,1
				draw_cmpr_pixel((uint8_t *)&segment->color.code,
    9fe0d3e4:	013beab3          	or	s5,s7,s3
				int pel_cnt = 0;
    9fe0d3e8:	4401                	li	s0,0
					rep_cnt = MIN(src_ptr[0] + 1,  segment->width - pel_cnt);
    9fe0d3ea:	fffc4c83          	lbu	s9,-1(s8)
					draw_cmpr_pixel(cur_ptr, rep_cnt, y == 0 && i == 0 && pel_cnt == 0, ctrl);
    9fe0d3ee:	01546633          	or	a2,s0,s5
					rep_cnt = MIN(src_ptr[0] + 1,  segment->width - pel_cnt);
    9fe0d3f2:	408785bb          	subw	a1,a5,s0
    9fe0d3f6:	2c85                	addiw	s9,s9,1
    9fe0d3f8:	000c881b          	sext.w	a6,s9
					draw_cmpr_pixel(cur_ptr, rep_cnt, y == 0 && i == 0 && pel_cnt == 0, ctrl);
    9fe0d3fc:	8562                	mv	a0,s8
    9fe0d3fe:	86a6                	mv	a3,s1
    9fe0d400:	00163613          	seqz	a2,a2
					rep_cnt = MIN(src_ptr[0] + 1,  segment->width - pel_cnt);
    9fe0d404:	0105d363          	bge	a1,a6,9fe0d40a <draw_cmpr_canvas_line+0x148>
    9fe0d408:	8cae                	mv	s9,a1
					draw_cmpr_pixel(cur_ptr, rep_cnt, y == 0 && i == 0 && pel_cnt == 0, ctrl);
    9fe0d40a:	030c9593          	slli	a1,s9,0x30
    9fe0d40e:	91c1                	srli	a1,a1,0x30
    9fe0d410:	e2fff0ef          	jal	ra,9fe0d23e <draw_cmpr_pixel>
				while (pel_cnt < segment->width) {
    9fe0d414:	002dd783          	lhu	a5,2(s11)
					pel_cnt += rep_cnt;
    9fe0d418:	008c843b          	addw	s0,s9,s0
				while (pel_cnt < segment->width) {
    9fe0d41c:	9c52                	add	s8,s8,s4
    9fe0d41e:	fcf446e3          	blt	s0,a5,9fe0d3ea <draw_cmpr_canvas_line+0x128>
				segment->color.buf += *(segment->bs_len);
    9fe0d422:	010db403          	ld	s0,16(s11)
    9fe0d426:	008db683          	ld	a3,8(s11)
				obj_vec[segment->id].bitmap.bs_offset += *(segment->bs_len);
    9fe0d42a:	018dd783          	lhu	a5,24(s11)
    9fe0d42e:	6622                	ld	a2,8(sp)
				segment->color.buf += *(segment->bs_len);
    9fe0d430:	0006d703          	lhu	a4,0(a3)
				obj_vec[segment->id].bitmap.bs_offset += *(segment->bs_len);
    9fe0d434:	079a                	slli	a5,a5,0x6
    9fe0d436:	97b2                	add	a5,a5,a2
				segment->color.buf += *(segment->bs_len);
    9fe0d438:	943a                	add	s0,s0,a4
    9fe0d43a:	008db823          	sd	s0,16(s11)
				obj_vec[segment->id].bitmap.bs_offset += *(segment->bs_len);
    9fe0d43e:	4f98                	lw	a4,24(a5)
    9fe0d440:	0006d683          	lhu	a3,0(a3)
    9fe0d444:	9f35                	addw	a4,a4,a3
    9fe0d446:	cf98                	sw	a4,24(a5)
				segment->bs_len++;
    9fe0d448:	008db783          	ld	a5,8(s11)
    9fe0d44c:	0789                	addi	a5,a5,2
    9fe0d44e:	00fdb423          	sd	a5,8(s11)
    9fe0d452:	bd75                	j	9fe0d30e <draw_cmpr_canvas_line+0x4c>
				draw_cmpr_pixel((uint8_t *)&segment->color.code,
    9fe0d454:	013be633          	or	a2,s7,s3
    9fe0d458:	86a6                	mv	a3,s1
    9fe0d45a:	00163613          	seqz	a2,a2
    9fe0d45e:	010d8513          	addi	a0,s11,16
    9fe0d462:	dddff0ef          	jal	ra,9fe0d23e <draw_cmpr_pixel>
    9fe0d466:	b565                	j	9fe0d30e <draw_cmpr_canvas_line+0x4c>
	}
}
    9fe0d468:	70e6                	ld	ra,120(sp)
    9fe0d46a:	7446                	ld	s0,112(sp)
    9fe0d46c:	74a6                	ld	s1,104(sp)
    9fe0d46e:	7906                	ld	s2,96(sp)
    9fe0d470:	69e6                	ld	s3,88(sp)
    9fe0d472:	6a46                	ld	s4,80(sp)
    9fe0d474:	6aa6                	ld	s5,72(sp)
    9fe0d476:	6b06                	ld	s6,64(sp)
    9fe0d478:	7be2                	ld	s7,56(sp)
    9fe0d47a:	7c42                	ld	s8,48(sp)
    9fe0d47c:	7ca2                	ld	s9,40(sp)
    9fe0d47e:	7d02                	ld	s10,32(sp)
    9fe0d480:	6de2                	ld	s11,24(sp)
    9fe0d482:	6109                	addi	sp,sp,128
    9fe0d484:	8082                	ret

000000009fe0d486 <plot_segments_on_line>:
	static bool slc_init;
	uint32_t slc_num = 0;
	SLICE_LIST *slice_vec, *slice_cur, *slice_next;
	dlist_t *temp;

	if (!slc_init) {
    9fe0d486:	00012e17          	auipc	t3,0x12
    9fe0d48a:	77be0e13          	addi	t3,t3,1915 # 9fe1fc01 <slc_init.1>
    9fe0d48e:	000e4e83          	lbu	t4,0(t3)
{
    9fe0d492:	7135                	addi	sp,sp,-160
    9fe0d494:	e526                	sd	s1,136(sp)
    9fe0d496:	fcce                	sd	s3,120(sp)
    9fe0d498:	f4d6                	sd	s5,104(sp)
    9fe0d49a:	e8e2                	sd	s8,80(sp)
    9fe0d49c:	ed06                	sd	ra,152(sp)
    9fe0d49e:	e922                	sd	s0,144(sp)
    9fe0d4a0:	e14a                	sd	s2,128(sp)
    9fe0d4a2:	f8d2                	sd	s4,112(sp)
    9fe0d4a4:	f0da                	sd	s6,96(sp)
    9fe0d4a6:	ecde                	sd	s7,88(sp)
    9fe0d4a8:	e4e6                	sd	s9,72(sp)
    9fe0d4aa:	e0ea                	sd	s10,64(sp)
    9fe0d4ac:	fc6e                	sd	s11,56(sp)
	uint32_t slc_num = 0;
    9fe0d4ae:	d602                	sw	zero,44(sp)
{
    9fe0d4b0:	e836                	sd	a3,16(sp)
    9fe0d4b2:	ec3a                	sd	a4,24(sp)
    9fe0d4b4:	8aaa                	mv	s5,a0
    9fe0d4b6:	84b2                	mv	s1,a2
    9fe0d4b8:	8c42                	mv	s8,a6
    9fe0d4ba:	89c6                	mv	s3,a7
	if (!slc_init) {
    9fe0d4bc:	000e9b63          	bnez	t4,9fe0d4d2 <plot_segments_on_line+0x4c>
	node->next = node->prev = node;
}

static inline void INIT_CVI_DLIST_HEAD(dlist_t *list)
{
	list->next = list;
    9fe0d4c0:	00010717          	auipc	a4,0x10
    9fe0d4c4:	fd070713          	addi	a4,a4,-48 # 9fe1d490 <slc_list_head>
    9fe0d4c8:	e718                	sd	a4,8(a4)
	list->prev = list;
    9fe0d4ca:	e318                	sd	a4,0(a4)
		INIT_CVI_DLIST_HEAD(&slc_list_head);
		slc_init = true;
    9fe0d4cc:	4705                	li	a4,1
    9fe0d4ce:	00ee0023          	sb	a4,0(t3)
	}
	if (obj_project_on_line(obj_vec, obj_num, &slc_list_head, &slc_num, y, next_y, width) == 0) {
    9fe0d4d2:	6742                	ld	a4,16(sp)
    9fe0d4d4:	8826                	mv	a6,s1
    9fe0d4d6:	1074                	addi	a3,sp,44
    9fe0d4d8:	00010617          	auipc	a2,0x10
    9fe0d4dc:	fb860613          	addi	a2,a2,-72 # 9fe1d490 <slc_list_head>
    9fe0d4e0:	8556                	mv	a0,s5
    9fe0d4e2:	90dff0ef          	jal	ra,9fe0cdee <obj_project_on_line>
    9fe0d4e6:	24050563          	beqz	a0,9fe0d730 <plot_segments_on_line+0x2aa>
		return;
	}
	int step;
	int next_slice_idx = -1;

	for (int x = 0; x < width; x += step) {
    9fe0d4ea:	4b81                	li	s7,0
	int next_slice_idx = -1;
    9fe0d4ec:	5dfd                	li	s11,-1
					seg->segment.bs_len = &((uint16_t *)obj->color.buf)[incr_y];
					seg->segment.id = slice_cur->slice.obj_id;
				}
			}
			// slices required recycle only when current segment is not background
			int recycle_cnt = recycle_obj_slices(&slc_list_head, obj_idx,  x + step);
    9fe0d4ee:	00010d17          	auipc	s10,0x10
    9fe0d4f2:	fa2d0d13          	addi	s10,s10,-94 # 9fe1d490 <slc_list_head>
		seg->segment.is_const = true;
    9fe0d4f6:	4a05                	li	s4,1
	for (int x = 0; x < width; x += step) {
    9fe0d4f8:	0c905b63          	blez	s1,9fe0d5ce <plot_segments_on_line+0x148>
		int hp_slice_i = slc_num - 1;
    9fe0d4fc:	57b2                	lw	a5,44(sp)
    9fe0d4fe:	37fd                	addiw	a5,a5,-1
		if (next_slice_idx >= 0) {
    9fe0d500:	0e0dc663          	bltz	s11,9fe0d5ec <plot_segments_on_line+0x166>
			x1 = slice_next->slice.x1;
    9fe0d504:	00492c83          	lw	s9,4(s2)
		if (hp_slice_i > obj_idx) {
    9fe0d508:	1afdca63          	blt	s11,a5,9fe0d6bc <plot_segments_on_line+0x236>
		SEGMENT_LIST *seg = (SEGMENT_LIST *)malloc(1 * sizeof(SEGMENT_LIST));
    9fe0d50c:	03800513          	li	a0,56
    9fe0d510:	066010ef          	jal	ra,9fe0e576 <pvPortMalloc>
    9fe0d514:	842a                	mv	s0,a0
		step = end_x - x;
    9fe0d516:	417c87bb          	subw	a5,s9,s7
		if (!seg) {
    9fe0d51a:	c955                	beqz	a0,9fe0d5ce <plot_segments_on_line+0x148>
		seg->segment.is_const = true;
    9fe0d51c:	01441023          	sh	s4,0(s0)
		seg->segment.width = step;
    9fe0d520:	00f41123          	sh	a5,2(s0)
		seg->segment.stride = 0;
    9fe0d524:	00042423          	sw	zero,8(s0)
		seg->segment.color.code = bg_color_code;
    9fe0d528:	01342823          	sw	s3,16(s0)
		seg->segment.id = 0;
    9fe0d52c:	00041c23          	sh	zero,24(s0)
    9fe0d530:	587d                	li	a6,-1
			dlist_for_each_entry_safe(&slc_list_head, temp, slice_cur, SLICE_LIST, item) {
    9fe0d532:	008d3703          	ld	a4,8(s10)
    9fe0d536:	4781                	li	a5,0
    9fe0d538:	ff070613          	addi	a2,a4,-16
    9fe0d53c:	c311                	beqz	a4,9fe0d540 <plot_segments_on_line+0xba>
    9fe0d53e:	671c                	ld	a5,8(a4)
    9fe0d540:	03a70d63          	beq	a4,s10,9fe0d57a <plot_segments_on_line+0xf4>
				if (ii == obj_idx) {
    9fe0d544:	020d8b63          	beqz	s11,9fe0d57a <plot_segments_on_line+0xf4>
    9fe0d548:	4681                	li	a3,0
				ii++;
    9fe0d54a:	0016871b          	addiw	a4,a3,1
			dlist_for_each_entry_safe(&slc_list_head, temp, slice_cur, SLICE_LIST, item) {
    9fe0d54e:	ff078613          	addi	a2,a5,-16
    9fe0d552:	cf89                	beqz	a5,9fe0d56c <plot_segments_on_line+0xe6>
    9fe0d554:	6794                	ld	a3,8(a5)
    9fe0d556:	03a78263          	beq	a5,s10,9fe0d57a <plot_segments_on_line+0xf4>
    9fe0d55a:	87b6                	mv	a5,a3
				if (ii == obj_idx) {
    9fe0d55c:	01b70f63          	beq	a4,s11,9fe0d57a <plot_segments_on_line+0xf4>
    9fe0d560:	86ba                	mv	a3,a4
				ii++;
    9fe0d562:	0016871b          	addiw	a4,a3,1
			dlist_for_each_entry_safe(&slc_list_head, temp, slice_cur, SLICE_LIST, item) {
    9fe0d566:	ff078613          	addi	a2,a5,-16
    9fe0d56a:	f7ed                	bnez	a5,9fe0d554 <plot_segments_on_line+0xce>
				if (ii == obj_idx) {
    9fe0d56c:	21b70163          	beq	a4,s11,9fe0d76e <plot_segments_on_line+0x2e8>
				ii++;
    9fe0d570:	0026871b          	addiw	a4,a3,2
			dlist_for_each_entry_safe(&slc_list_head, temp, slice_cur, SLICE_LIST, item) {
    9fe0d574:	5641                	li	a2,-16
				if (ii == obj_idx) {
    9fe0d576:	ffb715e3          	bne	a4,s11,9fe0d560 <plot_segments_on_line+0xda>
			DRAW_OBJ *obj = &obj_vec[slice_cur->slice.obj_id];
    9fe0d57a:	00865783          	lhu	a5,8(a2)
    9fe0d57e:	079a                	slli	a5,a5,0x6
    9fe0d580:	97d6                	add	a5,a5,s5
			seg->segment.is_const = (obj->type == BIT_MAP || obj->type == CMPR_BIT_MAP) ? false : true;
    9fe0d582:	4398                	lw	a4,0(a5)
    9fe0d584:	3779                	addiw	a4,a4,-2
    9fe0d586:	9b75                	andi	a4,a4,-3
    9fe0d588:	2701                	sext.w	a4,a4
    9fe0d58a:	cb65                	beqz	a4,9fe0d67a <plot_segments_on_line+0x1f4>
				seg->segment.color.code = obj->color.code;
    9fe0d58c:	5b9c                	lw	a5,48(a5)
    9fe0d58e:	c81c                	sw	a5,16(s0)
			int recycle_cnt = recycle_obj_slices(&slc_list_head, obj_idx,  x + step);
    9fe0d590:	85ee                	mv	a1,s11
    9fe0d592:	8666                	mv	a2,s9
    9fe0d594:	856a                	mv	a0,s10
    9fe0d596:	e442                	sd	a6,8(sp)
    9fe0d598:	f66ff0ef          	jal	ra,9fe0ccfe <recycle_obj_slices>
			// correct next slice index due to recycled slices
			next_slice_idx -= recycle_cnt;
			slc_num -= recycle_cnt;
    9fe0d59c:	57b2                	lw	a5,44(sp)
			next_slice_idx -= recycle_cnt;
    9fe0d59e:	6822                	ld	a6,8(sp)
    9fe0d5a0:	8be6                	mv	s7,s9
    9fe0d5a2:	40a80dbb          	subw	s11,a6,a0
			slc_num -= recycle_cnt;
    9fe0d5a6:	40a7853b          	subw	a0,a5,a0
    9fe0d5aa:	d62a                	sw	a0,44(sp)
			if (next_slice_idx >= 0) {
    9fe0d5ac:	120dd263          	bgez	s11,9fe0d6d0 <plot_segments_on_line+0x24a>
					}
					i++;
				}
			}
		}
		seg->num++;
    9fe0d5b0:	501c                	lw	a5,32(s0)
		dlist_add_tail(&seg->item, seg_list_head);
    9fe0d5b2:	02840713          	addi	a4,s0,40
		seg->num++;
    9fe0d5b6:	2785                	addiw	a5,a5,1
    9fe0d5b8:	d01c                	sw	a5,32(s0)
	__dlist_add(node, queue->prev, queue);
    9fe0d5ba:	000c3783          	ld	a5,0(s8)
	node->next = next;
    9fe0d5be:	03843823          	sd	s8,48(s0)
	node->prev = prev;
    9fe0d5c2:	f41c                	sd	a5,40(s0)
	prev->next = node;
    9fe0d5c4:	e798                	sd	a4,8(a5)
	next->prev = node;
    9fe0d5c6:	00ec3023          	sd	a4,0(s8)
	for (int x = 0; x < width; x += step) {
    9fe0d5ca:	f29cc9e3          	blt	s9,s1,9fe0d4fc <plot_segments_on_line+0x76>
	} // end of draw a part of a slice
}
    9fe0d5ce:	60ea                	ld	ra,152(sp)
    9fe0d5d0:	644a                	ld	s0,144(sp)
    9fe0d5d2:	64aa                	ld	s1,136(sp)
    9fe0d5d4:	690a                	ld	s2,128(sp)
    9fe0d5d6:	79e6                	ld	s3,120(sp)
    9fe0d5d8:	7a46                	ld	s4,112(sp)
    9fe0d5da:	7aa6                	ld	s5,104(sp)
    9fe0d5dc:	7b06                	ld	s6,96(sp)
    9fe0d5de:	6be6                	ld	s7,88(sp)
    9fe0d5e0:	6c46                	ld	s8,80(sp)
    9fe0d5e2:	6ca6                	ld	s9,72(sp)
    9fe0d5e4:	6d06                	ld	s10,64(sp)
    9fe0d5e6:	7de2                	ld	s11,56(sp)
    9fe0d5e8:	610d                	addi	sp,sp,160
    9fe0d5ea:	8082                	ret
			dlist_for_each_entry_reverse(slice_vec, &slc_list_head, item, SLICE_LIST) {
    9fe0d5ec:	000d3683          	ld	a3,0(s10)
    9fe0d5f0:	ff068713          	addi	a4,a3,-16
    9fe0d5f4:	16dd0f63          	beq	s10,a3,9fe0d772 <plot_segments_on_line+0x2ec>
		int hp_slice_i = slc_num - 1;
    9fe0d5f8:	8b3e                	mv	s6,a5
			dlist_for_each_entry_reverse(slice_vec, &slc_list_head, item, SLICE_LIST) {
    9fe0d5fa:	863a                	mv	a2,a4
				if (is_in_range(x, slice_vec->slice.x0, slice_vec->slice.x1)) {
    9fe0d5fc:	420c                	lw	a1,0(a2)
    9fe0d5fe:	00462c83          	lw	s9,4(a2)
	return (x >= begin && x < end);
    9fe0d602:	02bbcd63          	blt	s7,a1,9fe0d63c <plot_segments_on_line+0x1b6>
    9fe0d606:	039bdb63          	bge	s7,s9,9fe0d63c <plot_segments_on_line+0x1b6>
		next_slice_idx = -1;
    9fe0d60a:	5dfd                	li	s11,-1
		if (hp_slice_i > obj_idx) {
    9fe0d60c:	04fb4463          	blt	s6,a5,9fe0d654 <plot_segments_on_line+0x1ce>
		SEGMENT_LIST *seg = (SEGMENT_LIST *)malloc(1 * sizeof(SEGMENT_LIST));
    9fe0d610:	03800513          	li	a0,56
    9fe0d614:	763000ef          	jal	ra,9fe0e576 <pvPortMalloc>
    9fe0d618:	842a                	mv	s0,a0
		step = end_x - x;
    9fe0d61a:	417c87bb          	subw	a5,s9,s7
		if (!seg) {
    9fe0d61e:	d945                	beqz	a0,9fe0d5ce <plot_segments_on_line+0x148>
		seg->segment.is_const = true;
    9fe0d620:	01451023          	sh	s4,0(a0)
		seg->segment.width = step;
    9fe0d624:	00f51123          	sh	a5,2(a0)
		seg->segment.stride = 0;
    9fe0d628:	00052423          	sw	zero,8(a0)
		seg->segment.color.code = bg_color_code;
    9fe0d62c:	01352823          	sw	s3,16(a0)
		seg->segment.id = 0;
    9fe0d630:	00051c23          	sh	zero,24(a0)
		if (obj_idx >= 0) {
    9fe0d634:	160b5263          	bgez	s6,9fe0d798 <plot_segments_on_line+0x312>
				dlist_for_each_entry_safe(&slc_list_head, temp, slice_vec, SLICE_LIST, item) {
    9fe0d638:	8be6                	mv	s7,s9
    9fe0d63a:	bf9d                	j	9fe0d5b0 <plot_segments_on_line+0x12a>
			dlist_for_each_entry_reverse(slice_vec, &slc_list_head, item, SLICE_LIST) {
    9fe0d63c:	6a0c                	ld	a1,16(a2)
				idx--;
    9fe0d63e:	3b7d                	addiw	s6,s6,-1
			dlist_for_each_entry_reverse(slice_vec, &slc_list_head, item, SLICE_LIST) {
    9fe0d640:	ff058613          	addi	a2,a1,-16
    9fe0d644:	fabd1ce3          	bne	s10,a1,9fe0d5fc <plot_segments_on_line+0x176>
		int obj_idx = -1; // "-1": background
    9fe0d648:	5b7d                	li	s6,-1
    9fe0d64a:	8ca6                	mv	s9,s1
    9fe0d64c:	85de                	mv	a1,s7
		next_slice_idx = -1;
    9fe0d64e:	5dfd                	li	s11,-1
		if (hp_slice_i > obj_idx) {
    9fe0d650:	fcfb50e3          	bge	s6,a5,9fe0d610 <plot_segments_on_line+0x18a>
			dlist_for_each_entry_reverse(slice_vec, &slc_list_head, item, SLICE_LIST) {
    9fe0d654:	5dfd                	li	s11,-1
    9fe0d656:	a031                	j	9fe0d662 <plot_segments_on_line+0x1dc>
    9fe0d658:	6b10                	ld	a2,16(a4)
    9fe0d65a:	ff060713          	addi	a4,a2,-16
    9fe0d65e:	fba609e3          	beq	a2,s10,9fe0d610 <plot_segments_on_line+0x18a>
				if (is_in_range(slice_vec->slice.x0, x0, end_x)) {
    9fe0d662:	4310                	lw	a2,0(a4)
	return (x >= begin && x < end);
    9fe0d664:	00b64763          	blt	a2,a1,9fe0d672 <plot_segments_on_line+0x1ec>
    9fe0d668:	01965563          	bge	a2,s9,9fe0d672 <plot_segments_on_line+0x1ec>
    9fe0d66c:	8dbe                	mv	s11,a5
    9fe0d66e:	893a                	mv	s2,a4
    9fe0d670:	8cb2                	mv	s9,a2
				if (--hp_slice_i <= obj_idx)
    9fe0d672:	37fd                	addiw	a5,a5,-1
    9fe0d674:	fefb42e3          	blt	s6,a5,9fe0d658 <plot_segments_on_line+0x1d2>
    9fe0d678:	bf61                	j	9fe0d610 <plot_segments_on_line+0x18a>
			seg->segment.is_const = (obj->type == BIT_MAP || obj->type == CMPR_BIT_MAP) ? false : true;
    9fe0d67a:	00040023          	sb	zero,0(s0)
					(obj->type == BIT_MAP) ? false : true;
    9fe0d67e:	4394                	lw	a3,0(a5)
				int incr_y = y - obj->bitmap.rect.y;
    9fe0d680:	65c2                	ld	a1,16(sp)
				if (!seg->segment.is_cmpr) {
    9fe0d682:	4509                	li	a0,2
					(obj->type == BIT_MAP) ? false : true;
    9fe0d684:	ffe68713          	addi	a4,a3,-2
    9fe0d688:	00e03733          	snez	a4,a4
    9fe0d68c:	00e400a3          	sb	a4,1(s0)
				int incr_y = y - obj->bitmap.rect.y;
    9fe0d690:	4798                	lw	a4,8(a5)
    9fe0d692:	9d99                	subw	a1,a1,a4
    9fe0d694:	872e                	mv	a4,a1
				if (!seg->segment.is_cmpr) {
    9fe0d696:	06a69f63          	bne	a3,a0,9fe0d714 <plot_segments_on_line+0x28e>
					seg->segment.stride = obj->bitmap.stride;
    9fe0d69a:	4f94                	lw	a3,24(a5)
					seg->segment.color.buf = obj->color.buf + ((incr_y * seg->segment.stride) +
    9fe0d69c:	02d7073b          	mulw	a4,a4,a3
					seg->segment.stride = obj->bitmap.stride;
    9fe0d6a0:	c414                	sw	a3,8(s0)
						(x - slice_cur->slice.x0)) * pixel_sz;
    9fe0d6a2:	4214                	lw	a3,0(a2)
					seg->segment.color.buf = obj->color.buf + ((incr_y * seg->segment.stride) +
    9fe0d6a4:	7b90                	ld	a2,48(a5)
						(x - slice_cur->slice.x0)) * pixel_sz;
    9fe0d6a6:	40db87bb          	subw	a5,s7,a3
					seg->segment.color.buf = obj->color.buf + ((incr_y * seg->segment.stride) +
    9fe0d6aa:	9f3d                	addw	a4,a4,a5
						(x - slice_cur->slice.x0)) * pixel_sz;
    9fe0d6ac:	67e2                	ld	a5,24(sp)
    9fe0d6ae:	02f707bb          	mulw	a5,a4,a5
    9fe0d6b2:	1782                	slli	a5,a5,0x20
    9fe0d6b4:	9381                	srli	a5,a5,0x20
					seg->segment.color.buf = obj->color.buf + ((incr_y * seg->segment.stride) +
    9fe0d6b6:	97b2                	add	a5,a5,a2
    9fe0d6b8:	e81c                	sd	a5,16(s0)
    9fe0d6ba:	bdd9                	j	9fe0d590 <plot_segments_on_line+0x10a>
			dlist_for_each_entry_reverse(slice_vec, &slc_list_head, item, SLICE_LIST) {
    9fe0d6bc:	000d3683          	ld	a3,0(s10)
			x0 = slice_next->slice.x0;
    9fe0d6c0:	00092583          	lw	a1,0(s2)
			dlist_for_each_entry_reverse(slice_vec, &slc_list_head, item, SLICE_LIST) {
    9fe0d6c4:	ff068713          	addi	a4,a3,-16
    9fe0d6c8:	e4dd02e3          	beq	s10,a3,9fe0d50c <plot_segments_on_line+0x86>
    9fe0d6cc:	8b6e                	mv	s6,s11
    9fe0d6ce:	b759                	j	9fe0d654 <plot_segments_on_line+0x1ce>
				dlist_for_each_entry_safe(&slc_list_head, temp, slice_vec, SLICE_LIST, item) {
    9fe0d6d0:	008d3783          	ld	a5,8(s10)
    9fe0d6d4:	4701                	li	a4,0
    9fe0d6d6:	c391                	beqz	a5,9fe0d6da <plot_segments_on_line+0x254>
    9fe0d6d8:	6798                	ld	a4,8(a5)
    9fe0d6da:	ff078693          	addi	a3,a5,-16
    9fe0d6de:	f5a78de3          	beq	a5,s10,9fe0d638 <plot_segments_on_line+0x1b2>
					if (i == next_slice_idx) {
    9fe0d6e2:	4781                	li	a5,0
    9fe0d6e4:	0a0d8763          	beqz	s11,9fe0d792 <plot_segments_on_line+0x30c>
					i++;
    9fe0d6e8:	2785                	addiw	a5,a5,1
				dlist_for_each_entry_safe(&slc_list_head, temp, slice_vec, SLICE_LIST, item) {
    9fe0d6ea:	cf09                	beqz	a4,9fe0d704 <plot_segments_on_line+0x27e>
    9fe0d6ec:	6714                	ld	a3,8(a4)
    9fe0d6ee:	f5a705e3          	beq	a4,s10,9fe0d638 <plot_segments_on_line+0x1b2>
					if (i == next_slice_idx) {
    9fe0d6f2:	00fd8d63          	beq	s11,a5,9fe0d70c <plot_segments_on_line+0x286>
				dlist_for_each_entry_safe(&slc_list_head, temp, slice_vec, SLICE_LIST, item) {
    9fe0d6f6:	8736                	mv	a4,a3
					i++;
    9fe0d6f8:	2785                	addiw	a5,a5,1
				dlist_for_each_entry_safe(&slc_list_head, temp, slice_vec, SLICE_LIST, item) {
    9fe0d6fa:	fb6d                	bnez	a4,9fe0d6ec <plot_segments_on_line+0x266>
    9fe0d6fc:	a021                	j	9fe0d704 <plot_segments_on_line+0x27e>
					if (i == next_slice_idx) {
    9fe0d6fe:	00dd8763          	beq	s11,a3,9fe0d70c <plot_segments_on_line+0x286>
					i++;
    9fe0d702:	2789                	addiw	a5,a5,2
    9fe0d704:	0017869b          	addiw	a3,a5,1
					if (i == next_slice_idx) {
    9fe0d708:	ffb79be3          	bne	a5,s11,9fe0d6fe <plot_segments_on_line+0x278>
				dlist_for_each_entry_safe(&slc_list_head, temp, slice_vec, SLICE_LIST, item) {
    9fe0d70c:	ff070913          	addi	s2,a4,-16
    9fe0d710:	8be6                	mv	s7,s9
    9fe0d712:	bd79                	j	9fe0d5b0 <plot_segments_on_line+0x12a>
						&obj->color.buf[obj->bitmap.bs_offset];
    9fe0d714:	0187e683          	lwu	a3,24(a5)
    9fe0d718:	7b98                	ld	a4,48(a5)
					seg->segment.bs_len = &((uint16_t *)obj->color.buf)[incr_y];
    9fe0d71a:	0586                	slli	a1,a1,0x1
						&obj->color.buf[obj->bitmap.bs_offset];
    9fe0d71c:	9736                	add	a4,a4,a3
					seg->segment.color.buf =
    9fe0d71e:	e818                	sd	a4,16(s0)
					seg->segment.bs_len = &((uint16_t *)obj->color.buf)[incr_y];
    9fe0d720:	7b9c                	ld	a5,48(a5)
    9fe0d722:	95be                	add	a1,a1,a5
    9fe0d724:	e40c                	sd	a1,8(s0)
					seg->segment.id = slice_cur->slice.obj_id;
    9fe0d726:	00865783          	lhu	a5,8(a2)
    9fe0d72a:	00f41c23          	sh	a5,24(s0)
    9fe0d72e:	b58d                	j	9fe0d590 <plot_segments_on_line+0x10a>
		SEGMENT_LIST *bg_seg = (SEGMENT_LIST *)malloc(1 * sizeof(SEGMENT_LIST));
    9fe0d730:	03800513          	li	a0,56
    9fe0d734:	643000ef          	jal	ra,9fe0e576 <pvPortMalloc>
		if (!bg_seg) {
    9fe0d738:	e8050be3          	beqz	a0,9fe0d5ce <plot_segments_on_line+0x148>
		bg_seg->num++;
    9fe0d73c:	511c                	lw	a5,32(a0)
		bg_seg->segment.is_const = true;
    9fe0d73e:	4705                	li	a4,1
    9fe0d740:	00e51023          	sh	a4,0(a0)
		bg_seg->num++;
    9fe0d744:	2785                	addiw	a5,a5,1
		bg_seg->segment.width = (uint16_t)width;
    9fe0d746:	00951123          	sh	s1,2(a0)
		seg->num++;
    9fe0d74a:	d11c                	sw	a5,32(a0)
		seg->segment.stride = 0;
    9fe0d74c:	00052423          	sw	zero,8(a0)
		seg->segment.color.code = bg_color_code;
    9fe0d750:	01352823          	sw	s3,16(a0)
		seg->segment.id = 0;
    9fe0d754:	00051c23          	sh	zero,24(a0)
	__dlist_add(node, queue->prev, queue);
    9fe0d758:	000c3703          	ld	a4,0(s8)
		dlist_add_tail(&seg->item, seg_list_head);
    9fe0d75c:	02850793          	addi	a5,a0,40
	node->next = next;
    9fe0d760:	03853823          	sd	s8,48(a0)
	node->prev = prev;
    9fe0d764:	f518                	sd	a4,40(a0)
	prev->next = node;
    9fe0d766:	e71c                	sd	a5,8(a4)
	next->prev = node;
    9fe0d768:	00fc3023          	sd	a5,0(s8)
	for (int x = 0; x < width; x += step) {
    9fe0d76c:	b58d                	j	9fe0d5ce <plot_segments_on_line+0x148>
			dlist_for_each_entry_safe(&slc_list_head, temp, slice_cur, SLICE_LIST, item) {
    9fe0d76e:	5641                	li	a2,-16
    9fe0d770:	b529                	j	9fe0d57a <plot_segments_on_line+0xf4>
		SEGMENT_LIST *seg = (SEGMENT_LIST *)malloc(1 * sizeof(SEGMENT_LIST));
    9fe0d772:	03800513          	li	a0,56
    9fe0d776:	601000ef          	jal	ra,9fe0e576 <pvPortMalloc>
		step = end_x - x;
    9fe0d77a:	4174883b          	subw	a6,s1,s7
		if (!seg) {
    9fe0d77e:	e40508e3          	beqz	a0,9fe0d5ce <plot_segments_on_line+0x148>
		seg->num++;
    9fe0d782:	511c                	lw	a5,32(a0)
		seg->segment.is_const = true;
    9fe0d784:	4705                	li	a4,1
    9fe0d786:	00e51023          	sh	a4,0(a0)
		seg->num++;
    9fe0d78a:	2785                	addiw	a5,a5,1
		seg->segment.width = step;
    9fe0d78c:	01051123          	sh	a6,2(a0)
    9fe0d790:	bf6d                	j	9fe0d74a <plot_segments_on_line+0x2c4>
				dlist_for_each_entry_safe(&slc_list_head, temp, slice_vec, SLICE_LIST, item) {
    9fe0d792:	8936                	mv	s2,a3
    9fe0d794:	8be6                	mv	s7,s9
    9fe0d796:	bd29                	j	9fe0d5b0 <plot_segments_on_line+0x12a>
    9fe0d798:	886e                	mv	a6,s11
    9fe0d79a:	8dda                	mv	s11,s6
    9fe0d79c:	bb59                	j	9fe0d532 <plot_segments_on_line+0xac>

000000009fe0d79e <draw_cmpr_canvas>:

dlist_t seg_list_head;
// ---------------------- cmpr_canvas main API ----------------------
int draw_cmpr_canvas(Canvas_Attr *canvas, DRAW_OBJ *objs, uint32_t obj_num,
			 uint8_t *obuf, int buf_size, uint32_t *p_osize)
{
    9fe0d79e:	716d                	addi	sp,sp,-272
    9fe0d7a0:	fda6                	sd	s1,248(sp)
    9fe0d7a2:	f9ca                	sd	s2,240(sp)
    9fe0d7a4:	f5ce                	sd	s3,232(sp)
    9fe0d7a6:	e5de                	sd	s7,200(sp)
    9fe0d7a8:	fd66                	sd	s9,184(sp)
    9fe0d7aa:	e606                	sd	ra,264(sp)
    9fe0d7ac:	e222                	sd	s0,256(sp)
    9fe0d7ae:	f1d2                	sd	s4,224(sp)
    9fe0d7b0:	edd6                	sd	s5,216(sp)
    9fe0d7b2:	e9da                	sd	s6,208(sp)
    9fe0d7b4:	e1e2                	sd	s8,192(sp)
    9fe0d7b6:	f96a                	sd	s10,176(sp)
    9fe0d7b8:	f56e                	sd	s11,168(sp)
    9fe0d7ba:	ce32                	sw	a2,28(sp)
    9fe0d7bc:	8baa                	mv	s7,a0
    9fe0d7be:	84b6                	mv	s1,a3
    9fe0d7c0:	89ba                	mv	s3,a4
    9fe0d7c2:	8cbe                	mv	s9,a5
    9fe0d7c4:	4901                	li	s2,0
	Cmpr_Canvas_Ctrl ctrl;
	static bool seg_init;
	SEGMENT_LIST *seg;
	SLICE_LIST *slc;

	if (obj_num > 0) {
    9fe0d7c6:	16061163          	bnez	a2,9fe0d928 <draw_cmpr_canvas+0x18a>
			return -1;
		}
		memcpy(obj_vec, objs, obj_num * sizeof(DRAW_OBJ));
	}

	if (!seg_init) {
    9fe0d7ca:	00012797          	auipc	a5,0x12
    9fe0d7ce:	43678793          	addi	a5,a5,1078 # 9fe1fc00 <seg_init.0>
    9fe0d7d2:	0007c703          	lbu	a4,0(a5)
    9fe0d7d6:	12070f63          	beqz	a4,9fe0d914 <draw_cmpr_canvas+0x176>
		seg_init = true;
		INIT_CVI_DLIST_HEAD(&seg_list_head);
	}

	draw_cmpr_init(&ctrl, obuf, buf_size, canvas);
    9fe0d7da:	03010a93          	addi	s5,sp,48
    9fe0d7de:	86de                	mv	a3,s7
    9fe0d7e0:	864e                	mv	a2,s3
    9fe0d7e2:	85a6                	mv	a1,s1
    9fe0d7e4:	8556                	mv	a0,s5
    9fe0d7e6:	9b9ff0ef          	jal	ra,9fe0d19e <draw_cmpr_init>
	size_t pixel_sz = osd_cmpr_get_pixel_sz(canvas->format);
    9fe0d7ea:	008ba503          	lw	a0,8(s7)
    9fe0d7ee:	481000ef          	jal	ra,9fe0e46e <osd_cmpr_get_pixel_sz>
	int y_step = 0;

	for (int y = 0; y < canvas->height; y += y_step) {
    9fe0d7f2:	004ba303          	lw	t1,4(s7)
    9fe0d7f6:	14605963          	blez	t1,9fe0d948 <draw_cmpr_canvas+0x1aa>
    9fe0d7fa:	00010417          	auipc	s0,0x10
    9fe0d7fe:	c8640413          	addi	s0,s0,-890 # 9fe1d480 <seg_list_head>
		int next_y = canvas->height;

		plot_segments_on_line(obj_vec, obj_num, canvas->width, y, pixel_sz,
    9fe0d802:	0005099b          	sext.w	s3,a0
	for (int y = 0; y < canvas->height; y += y_step) {
    9fe0d806:	4b01                	li	s6,0
    9fe0d808:	02c10c13          	addi	s8,sp,44
    9fe0d80c:	00010497          	auipc	s1,0x10
    9fe0d810:	c8448493          	addi	s1,s1,-892 # 9fe1d490 <slc_list_head>
		plot_segments_on_line(obj_vec, obj_num, canvas->width, y, pixel_sz,
    9fe0d814:	8a22                	mv	s4,s0
    9fe0d816:	00cba883          	lw	a7,12(s7)
    9fe0d81a:	000ba603          	lw	a2,0(s7)
    9fe0d81e:	45f2                	lw	a1,28(sp)
    9fe0d820:	86da                	mv	a3,s6
    9fe0d822:	87e2                	mv	a5,s8
    9fe0d824:	874e                	mv	a4,s3
    9fe0d826:	8852                	mv	a6,s4
    9fe0d828:	854a                	mv	a0,s2
		int next_y = canvas->height;
    9fe0d82a:	d61a                	sw	t1,44(sp)
		plot_segments_on_line(obj_vec, obj_num, canvas->width, y, pixel_sz,
    9fe0d82c:	c5bff0ef          	jal	ra,9fe0d486 <plot_segments_on_line>
					  &next_y, &seg_list_head, canvas->bg_color_code);

		y_step = next_y - y;
    9fe0d830:	87da                	mv	a5,s6
    9fe0d832:	5b32                	lw	s6,44(sp)
    9fe0d834:	00078d1b          	sext.w	s10,a5
    9fe0d838:	40fb073b          	subw	a4,s6,a5
		for (int line_i = 0; line_i < y_step; line_i++) {
    9fe0d83c:	00f70dbb          	addw	s11,a4,a5
    9fe0d840:	00e05c63          	blez	a4,9fe0d858 <draw_cmpr_canvas+0xba>
			draw_cmpr_canvas_line(&ctrl, obj_vec, y + line_i, pixel_sz, &seg_list_head);
    9fe0d844:	866a                	mv	a2,s10
    9fe0d846:	8752                	mv	a4,s4
		for (int line_i = 0; line_i < y_step; line_i++) {
    9fe0d848:	2d05                	addiw	s10,s10,1
			draw_cmpr_canvas_line(&ctrl, obj_vec, y + line_i, pixel_sz, &seg_list_head);
    9fe0d84a:	86ce                	mv	a3,s3
    9fe0d84c:	85ca                	mv	a1,s2
    9fe0d84e:	8556                	mv	a0,s5
    9fe0d850:	a73ff0ef          	jal	ra,9fe0d2c2 <draw_cmpr_canvas_line>
		for (int line_i = 0; line_i < y_step; line_i++) {
    9fe0d854:	ffad98e3          	bne	s11,s10,9fe0d844 <draw_cmpr_canvas+0xa6>
		}
		recycle_draw_obj(obj_vec, &obj_num, y + y_step - 1);
    9fe0d858:	854a                	mv	a0,s2
    9fe0d85a:	fffb061b          	addiw	a2,s6,-1
    9fe0d85e:	086c                	addi	a1,sp,28
    9fe0d860:	d16ff0ef          	jal	ra,9fe0cd76 <recycle_draw_obj>
}

static inline int dlist_empty(const dlist_t *head)
{
	return head->next == head;
    9fe0d864:	6408                	ld	a0,8(s0)

		while (!dlist_empty(&seg_list_head)) {
    9fe0d866:	02850763          	beq	a0,s0,9fe0d894 <draw_cmpr_canvas+0xf6>
	dlist_t *prev = node->prev;
    9fe0d86a:	6118                	ld	a4,0(a0)
	dlist_t *next = node->next;
    9fe0d86c:	651c                	ld	a5,8(a0)
			seg = dlist_first_entry(&seg_list_head, SEGMENT_LIST, item);
    9fe0d86e:	fd850513          	addi	a0,a0,-40
	prev->next = next;
    9fe0d872:	e71c                	sd	a5,8(a4)
	next->prev = prev;
    9fe0d874:	e398                	sd	a4,0(a5)
			dlist_del(&seg->item);
			free(seg);
    9fe0d876:	667000ef          	jal	ra,9fe0e6dc <vPortFree>
	return head->next == head;
    9fe0d87a:	6408                	ld	a0,8(s0)
		while (!dlist_empty(&seg_list_head)) {
    9fe0d87c:	fe8517e3          	bne	a0,s0,9fe0d86a <draw_cmpr_canvas+0xcc>
    9fe0d880:	6488                	ld	a0,8(s1)
		}
		while (!dlist_empty(&slc_list_head)) {
    9fe0d882:	00950c63          	beq	a0,s1,9fe0d89a <draw_cmpr_canvas+0xfc>
	dlist_t *prev = node->prev;
    9fe0d886:	6118                	ld	a4,0(a0)
	dlist_t *next = node->next;
    9fe0d888:	651c                	ld	a5,8(a0)
			slc = dlist_first_entry(&slc_list_head, SLICE_LIST, item);
    9fe0d88a:	1541                	addi	a0,a0,-16
	prev->next = next;
    9fe0d88c:	e71c                	sd	a5,8(a4)
	next->prev = prev;
    9fe0d88e:	e398                	sd	a4,0(a5)
			dlist_del(&slc->item);
			free(slc);
    9fe0d890:	64d000ef          	jal	ra,9fe0e6dc <vPortFree>
	return head->next == head;
    9fe0d894:	6488                	ld	a0,8(s1)
		while (!dlist_empty(&slc_list_head)) {
    9fe0d896:	fe9518e3          	bne	a0,s1,9fe0d886 <draw_cmpr_canvas+0xe8>
	for (int y = 0; y < canvas->height; y += y_step) {
    9fe0d89a:	004ba303          	lw	t1,4(s7)
    9fe0d89e:	f66b4ce3          	blt	s6,t1,9fe0d816 <draw_cmpr_canvas+0x78>
	osd_cmpr_enc_const_pixel(dummy_c, &ctrl->last_color, &ctrl->rl_cnt, &ctrl->md,
    9fe0d8a2:	07810313          	addi	t1,sp,120
    9fe0d8a6:	04000893          	li	a7,64
    9fe0d8aa:	4805                	li	a6,1
    9fe0d8ac:	87e2                	mv	a5,s8
    9fe0d8ae:	0978                	addi	a4,sp,156
    9fe0d8b0:	0934                	addi	a3,sp,152
    9fe0d8b2:	0950                	addi	a2,sp,148
    9fe0d8b4:	090c                	addi	a1,sp,144
    9fe0d8b6:	e41a                	sd	t1,8(sp)
    9fe0d8b8:	4501                	li	a0,0
    9fe0d8ba:	e056                	sd	s5,0(sp)
	uint16_t dummy = 0;
    9fe0d8bc:	02011623          	sh	zero,44(sp)
	osd_cmpr_enc_const_pixel(dummy_c, &ctrl->last_color, &ctrl->rl_cnt, &ctrl->md,
    9fe0d8c0:	26f000ef          	jal	ra,9fe0e32e <osd_cmpr_enc_const_pixel>
		}
	}
	draw_cmpr_finish(&ctrl);
	uint32_t stream_sz = (ctrl.bitstream.bit_pos + 7) >> 3; // in byte
    9fe0d8c4:	440a                	lw	s0,128(sp)

	//add 16 bytes per DE's suggestion
	*p_osize = (((stream_sz + osd_cmpr_get_header_sz() + 15) >> 4) + 1) << 4; // 16byte align
    9fe0d8c6:	3b9000ef          	jal	ra,9fe0e47e <osd_cmpr_get_header_sz>
	uint32_t stream_sz = (ctrl.bitstream.bit_pos + 7) >> 3; // in byte
    9fe0d8ca:	241d                	addiw	s0,s0,7
    9fe0d8cc:	4034541b          	sraiw	s0,s0,0x3
	*p_osize = (((stream_sz + osd_cmpr_get_header_sz() + 15) >> 4) + 1) << 4; // 16byte align
    9fe0d8d0:	1402                	slli	s0,s0,0x20
    9fe0d8d2:	9001                	srli	s0,s0,0x20
    9fe0d8d4:	043d                	addi	s0,s0,15
    9fe0d8d6:	00a407b3          	add	a5,s0,a0
    9fe0d8da:	8391                	srli	a5,a5,0x4
    9fe0d8dc:	2785                	addiw	a5,a5,1
    9fe0d8de:	0047979b          	slliw	a5,a5,0x4

	free(obj_vec);
    9fe0d8e2:	854a                	mv	a0,s2
	*p_osize = (((stream_sz + osd_cmpr_get_header_sz() + 15) >> 4) + 1) << 4; // 16byte align
    9fe0d8e4:	00fca023          	sw	a5,0(s9)
	free(obj_vec);
    9fe0d8e8:	5f5000ef          	jal	ra,9fe0e6dc <vPortFree>
	if (ctrl.osdCmpr_ctrl.palette_cache.color != NULL) {
    9fe0d8ec:	6566                	ld	a0,88(sp)
    9fe0d8ee:	c119                	beqz	a0,9fe0d8f4 <draw_cmpr_canvas+0x156>
		free(ctrl.osdCmpr_ctrl.palette_cache.color);
    9fe0d8f0:	5ed000ef          	jal	ra,9fe0e6dc <vPortFree>
	}

	return ctrl.bitstream.status;
    9fe0d8f4:	452a                	lw	a0,136(sp)
}
    9fe0d8f6:	60b2                	ld	ra,264(sp)
    9fe0d8f8:	6412                	ld	s0,256(sp)
    9fe0d8fa:	74ee                	ld	s1,248(sp)
    9fe0d8fc:	794e                	ld	s2,240(sp)
    9fe0d8fe:	79ae                	ld	s3,232(sp)
    9fe0d900:	7a0e                	ld	s4,224(sp)
    9fe0d902:	6aee                	ld	s5,216(sp)
    9fe0d904:	6b4e                	ld	s6,208(sp)
    9fe0d906:	6bae                	ld	s7,200(sp)
    9fe0d908:	6c0e                	ld	s8,192(sp)
    9fe0d90a:	7cea                	ld	s9,184(sp)
    9fe0d90c:	7d4a                	ld	s10,176(sp)
    9fe0d90e:	7daa                	ld	s11,168(sp)
    9fe0d910:	6151                	addi	sp,sp,272
    9fe0d912:	8082                	ret
	list->next = list;
    9fe0d914:	00010417          	auipc	s0,0x10
    9fe0d918:	b6c40413          	addi	s0,s0,-1172 # 9fe1d480 <seg_list_head>
		seg_init = true;
    9fe0d91c:	4705                	li	a4,1
    9fe0d91e:	00e78023          	sb	a4,0(a5)
    9fe0d922:	e400                	sd	s0,8(s0)
	list->prev = list;
    9fe0d924:	e000                	sd	s0,0(s0)
}
    9fe0d926:	bd55                	j	9fe0d7da <draw_cmpr_canvas+0x3c>
		obj_vec = (DRAW_OBJ *)malloc(obj_num * sizeof(DRAW_OBJ));
    9fe0d928:	02061793          	slli	a5,a2,0x20
    9fe0d92c:	01a7d513          	srli	a0,a5,0x1a
    9fe0d930:	e82e                	sd	a1,16(sp)
    9fe0d932:	445000ef          	jal	ra,9fe0e576 <pvPortMalloc>
    9fe0d936:	892a                	mv	s2,a0
		if (obj_vec == NULL) {
    9fe0d938:	c919                	beqz	a0,9fe0d94e <draw_cmpr_canvas+0x1b0>
		memcpy(obj_vec, objs, obj_num * sizeof(DRAW_OBJ));
    9fe0d93a:	01c16603          	lwu	a2,28(sp)
    9fe0d93e:	65c2                	ld	a1,16(sp)
    9fe0d940:	061a                	slli	a2,a2,0x6
    9fe0d942:	fbef20ef          	jal	ra,9fe00100 <memcpy>
    9fe0d946:	b551                	j	9fe0d7ca <draw_cmpr_canvas+0x2c>
    9fe0d948:	02c10c13          	addi	s8,sp,44
    9fe0d94c:	bf99                	j	9fe0d8a2 <draw_cmpr_canvas+0x104>
			return -1;
    9fe0d94e:	557d                	li	a0,-1
    9fe0d950:	b75d                	j	9fe0d8f6 <draw_cmpr_canvas+0x158>

000000009fe0d952 <set_rect_position>:
	return ((bs_sz + BUF_GUARD_SIZE) >> 4) << 4;
}

void set_rect_position(RECT_ATTR *rect, Canvas_Attr *canvas, int pt_x, int pt_y,
			   int width, int height)
{
    9fe0d952:	7179                	addi	sp,sp,-48
    9fe0d954:	f406                	sd	ra,40(sp)
    9fe0d956:	f022                	sd	s0,32(sp)
    9fe0d958:	ec26                	sd	s1,24(sp)
    9fe0d95a:	e84a                	sd	s2,16(sp)
    9fe0d95c:	e44e                	sd	s3,8(sp)
    9fe0d95e:	e052                	sd	s4,0(sp)
    9fe0d960:	84ae                	mv	s1,a1
	rect->x = clip(pt_x, 0, canvas->width - 1);
    9fe0d962:	418c                	lw	a1,0(a1)
{
    9fe0d964:	8832                	mv	a6,a2
    9fe0d966:	842a                	mv	s0,a0
	rect->x = clip(pt_x, 0, canvas->width - 1);
    9fe0d968:	fff5861b          	addiw	a2,a1,-1
    9fe0d96c:	8542                	mv	a0,a6
    9fe0d96e:	4581                	li	a1,0
{
    9fe0d970:	8a36                	mv	s4,a3
    9fe0d972:	89ba                	mv	s3,a4
    9fe0d974:	893e                	mv	s2,a5
	rect->x = clip(pt_x, 0, canvas->width - 1);
    9fe0d976:	444000ef          	jal	ra,9fe0ddba <clip>
    9fe0d97a:	c008                	sw	a0,0(s0)
	rect->y = clip(pt_y, 0, canvas->height - 1);
    9fe0d97c:	40d0                	lw	a2,4(s1)
    9fe0d97e:	4581                	li	a1,0
    9fe0d980:	8552                	mv	a0,s4
    9fe0d982:	367d                	addiw	a2,a2,-1
    9fe0d984:	436000ef          	jal	ra,9fe0ddba <clip>
    9fe0d988:	c048                	sw	a0,4(s0)
	rect->width = clip(width, 0, canvas->width - rect->x);
    9fe0d98a:	401c                	lw	a5,0(s0)
    9fe0d98c:	4090                	lw	a2,0(s1)
    9fe0d98e:	4581                	li	a1,0
    9fe0d990:	854e                	mv	a0,s3
    9fe0d992:	9e1d                	subw	a2,a2,a5
    9fe0d994:	426000ef          	jal	ra,9fe0ddba <clip>
    9fe0d998:	c408                	sw	a0,8(s0)
	rect->height = clip(height, 0, canvas->height - rect->y);
    9fe0d99a:	40d0                	lw	a2,4(s1)
    9fe0d99c:	405c                	lw	a5,4(s0)
    9fe0d99e:	854a                	mv	a0,s2
    9fe0d9a0:	4581                	li	a1,0
    9fe0d9a2:	9e1d                	subw	a2,a2,a5
    9fe0d9a4:	416000ef          	jal	ra,9fe0ddba <clip>
    9fe0d9a8:	c448                	sw	a0,12(s0)
}
    9fe0d9aa:	70a2                	ld	ra,40(sp)
    9fe0d9ac:	7402                	ld	s0,32(sp)
    9fe0d9ae:	64e2                	ld	s1,24(sp)
    9fe0d9b0:	6942                	ld	s2,16(sp)
    9fe0d9b2:	69a2                	ld	s3,8(sp)
    9fe0d9b4:	6a02                	ld	s4,0(sp)
    9fe0d9b6:	6145                	addi	sp,sp,48
    9fe0d9b8:	8082                	ret

000000009fe0d9ba <set_line_obj_attr>:
}

void set_line_obj_attr(DRAW_OBJ *obj_attr, Canvas_Attr *canvas,
			   uint32_t color_code, int pt_x0, int pt_y0, int pt_x1,
			   int pt_y1, int thickness)
{
    9fe0d9ba:	7135                	addi	sp,sp,-160
    9fe0d9bc:	ed06                	sd	ra,152(sp)
    9fe0d9be:	e922                	sd	s0,144(sp)
    9fe0d9c0:	e526                	sd	s1,136(sp)
    9fe0d9c2:	e14a                	sd	s2,128(sp)
    9fe0d9c4:	fcce                	sd	s3,120(sp)
    9fe0d9c6:	f8d2                	sd	s4,112(sp)
    9fe0d9c8:	f4d6                	sd	s5,104(sp)
    9fe0d9ca:	f0da                	sd	s6,96(sp)
    9fe0d9cc:	ecde                	sd	s7,88(sp)
    9fe0d9ce:	e8e2                	sd	s8,80(sp)
    9fe0d9d0:	e4e6                	sd	s9,72(sp)
    9fe0d9d2:	bc22                	fsd	fs0,56(sp)
    9fe0d9d4:	b826                	fsd	fs1,48(sp)
    9fe0d9d6:	b44a                	fsd	fs2,40(sp)
    9fe0d9d8:	b04e                	fsd	fs3,32(sp)
    9fe0d9da:	ac52                	fsd	fs4,24(sp)
    9fe0d9dc:	a856                	fsd	fs5,16(sp)
    9fe0d9de:	a45a                	fsd	fs6,8(sp)
    9fe0d9e0:	a05e                	fsd	fs7,0(sp)
	obj_attr->color.code = color_code;
    9fe0d9e2:	d910                	sw	a2,48(a0)
{
    9fe0d9e4:	8bb2                	mv	s7,a2
	pt_x0 = clip(pt_x0, 0, canvas->width);
    9fe0d9e6:	4190                	lw	a2,0(a1)
{
    9fe0d9e8:	84ae                	mv	s1,a1
    9fe0d9ea:	842a                	mv	s0,a0
	pt_x0 = clip(pt_x0, 0, canvas->width);
    9fe0d9ec:	4581                	li	a1,0
    9fe0d9ee:	8536                	mv	a0,a3
{
    9fe0d9f0:	893a                	mv	s2,a4
    9fe0d9f2:	8abe                	mv	s5,a5
    9fe0d9f4:	8a42                	mv	s4,a6
    9fe0d9f6:	8b46                	mv	s6,a7
	pt_x0 = clip(pt_x0, 0, canvas->width);
    9fe0d9f8:	3c2000ef          	jal	ra,9fe0ddba <clip>
	pt_x1 = clip(pt_x1, 0, canvas->width);
    9fe0d9fc:	4090                	lw	a2,0(s1)
    9fe0d9fe:	4581                	li	a1,0
	pt_x0 = clip(pt_x0, 0, canvas->width);
    9fe0da00:	89aa                	mv	s3,a0
	pt_x1 = clip(pt_x1, 0, canvas->width);
    9fe0da02:	8556                	mv	a0,s5
    9fe0da04:	3b6000ef          	jal	ra,9fe0ddba <clip>
	pt_y0 = clip(pt_y0, 0, canvas->height);
    9fe0da08:	40d0                	lw	a2,4(s1)
    9fe0da0a:	4581                	li	a1,0
	pt_x1 = clip(pt_x1, 0, canvas->width);
    9fe0da0c:	8aaa                	mv	s5,a0
	pt_y0 = clip(pt_y0, 0, canvas->height);
    9fe0da0e:	854a                	mv	a0,s2
    9fe0da10:	3aa000ef          	jal	ra,9fe0ddba <clip>
	pt_y1 = clip(pt_y1, 0, canvas->height);
    9fe0da14:	40d0                	lw	a2,4(s1)
    9fe0da16:	4581                	li	a1,0
	pt_y0 = clip(pt_y0, 0, canvas->height);
    9fe0da18:	892a                	mv	s2,a0
	pt_y1 = clip(pt_y1, 0, canvas->height);
    9fe0da1a:	8552                	mv	a0,s4
    9fe0da1c:	39e000ef          	jal	ra,9fe0ddba <clip>
    9fe0da20:	8a2a                	mv	s4,a0
	thickness = clip(thickness, MIN_THICKNESS, MAX_THICKNESS);
    9fe0da22:	02000613          	li	a2,32
    9fe0da26:	855a                	mv	a0,s6
    9fe0da28:	4585                	li	a1,1
    9fe0da2a:	390000ef          	jal	ra,9fe0ddba <clip>
    9fe0da2e:	8b2a                	mv	s6,a0
	if (pt_x0 == pt_x1 ||
    9fe0da30:	23598c63          	beq	s3,s5,9fe0dc68 <set_line_obj_attr+0x2ae>
    9fe0da34:	1d490163          	beq	s2,s4,9fe0dbf6 <set_line_obj_attr+0x23c>
				 ((pt_y0 == pt_y1) ? 0 : MAX(pt_y0, pt_y1) - MIN(pt_y0, pt_y1));

		set_rect_obj_attr(obj_attr, canvas, color_code, x, y, width, height, true, thickness);
	} else {
		obj_attr->color.code = color_code;
		obj_attr->type = LINE;
    9fe0da38:	478d                	li	a5,3
		obj_attr->color.code = color_code;
    9fe0da3a:	03742823          	sw	s7,48(s0)
		obj_attr->type = LINE;
    9fe0da3e:	c01c                	sw	a5,0(s0)
		int x[2], y[2];
		bool is_y_incr = (pt_y1 > pt_y0);

		x[0] = (is_y_incr) ? pt_x0 : pt_x1;
    9fe0da40:	00090c9b          	sext.w	s9,s2
    9fe0da44:	012a5463          	bge	s4,s2,9fe0da4c <set_line_obj_attr+0x92>
    9fe0da48:	000a0c9b          	sext.w	s9,s4
    9fe0da4c:	01495563          	bge	s2,s4,9fe0da56 <set_line_obj_attr+0x9c>
    9fe0da50:	87ce                	mv	a5,s3
    9fe0da52:	89d6                	mv	s3,s5
    9fe0da54:	8abe                	mv	s5,a5
		y[0] = (is_y_incr) ? pt_y0 : pt_y1;
		x[1] = (is_y_incr) ? pt_x1 : pt_x0;
		y[1] = (is_y_incr) ? pt_y1 : pt_y0;
    9fe0da56:	86ca                	mv	a3,s2
    9fe0da58:	01495363          	bge	s2,s4,9fe0da5e <set_line_obj_attr+0xa4>
    9fe0da5c:	86d2                	mv	a3,s4
		int dx = x[1] - x[0];
		int dy = y[1] - y[0];
    9fe0da5e:	4196863b          	subw	a2,a3,s9
		int dx = x[1] - x[0];
    9fe0da62:	41598bbb          	subw	s7,s3,s5

		obj_attr->line._mx = (dy != 0) ? dx / ((float)dy) : FLT_MAX;
    9fe0da66:	d00bf453          	fcvt.s.w	fs0,s7
    9fe0da6a:	d0067bd3          	fcvt.s.w	fs7,a2
		int dy = y[1] - y[0];
    9fe0da6e:	8732                	mv	a4,a2
		int dx = x[1] - x[0];
    9fe0da70:	87de                	mv	a5,s7
    9fe0da72:	00068c1b          	sext.w	s8,a3
		obj_attr->line._mx = (dy != 0) ? dx / ((float)dy) : FLT_MAX;
    9fe0da76:	22060463          	beqz	a2,9fe0dc9e <set_line_obj_attr+0x2e4>
    9fe0da7a:	197477d3          	fdiv.s	fa5,fs0,fs7
		float thick_offset = 0.5 * thickness / pow(dx * dx + dy * dy, 0.5);
    9fe0da7e:	02e7073b          	mulw	a4,a4,a4
    9fe0da82:	00004697          	auipc	a3,0x4
    9fe0da86:	7d66b487          	fld	fs1,2006(a3) # 9fe12258 <__func__.1+0xa0>
    9fe0da8a:	229485d3          	fmv.d	fa1,fs1
		obj_attr->line._mx = (dy != 0) ? dx / ((float)dy) : FLT_MAX;
    9fe0da8e:	00f42227          	fsw	fa5,4(s0)
		float thick_offset = 0.5 * thickness / pow(dx * dx + dy * dy, 0.5);
    9fe0da92:	00840913          	addi	s2,s0,8
    9fe0da96:	01040a13          	addi	s4,s0,16
    9fe0da9a:	02f787bb          	mulw	a5,a5,a5
    9fe0da9e:	9fb9                	addw	a5,a5,a4
    9fe0daa0:	d2078553          	fcvt.d.w	fa0,a5
    9fe0daa4:	a1ef30ef          	jal	ra,9fe00cc2 <pow>
    9fe0daa8:	d20b07d3          	fcvt.d.w	fa5,s6
		float thick_offset_x = thick_offset * dx;
		float thick_offset_y = thick_offset * dy;

		for (int side_i = 0; side_i < 2; side_i++) {
			obj_attr->line._bx[side_i] =
				clip(x[0] + ((dx >= 0) ? thick_offset_y : (-thick_offset_y)),
    9fe0daac:	d00af9d3          	fcvt.s.w	fs3,s5
    9fe0dab0:	d00cfa53          	fcvt.s.w	fs4,s9
		float thick_offset = 0.5 * thickness / pow(dx * dx + dy * dy, 0.5);
    9fe0dab4:	1297f7d3          	fmul.d	fa5,fa5,fs1
    9fe0dab8:	d009fad3          	fcvt.s.w	fs5,s3
    9fe0dabc:	d00c7b53          	fcvt.s.w	fs6,s8
    9fe0dac0:	1aa7f7d3          	fdiv.d	fa5,fa5,fa0
    9fe0dac4:	4017f7d3          	fcvt.s.d	fa5,fa5
		float thick_offset_x = thick_offset * dx;
    9fe0dac8:	10f47453          	fmul.s	fs0,fs0,fa5
		float thick_offset_y = thick_offset * dy;
    9fe0dacc:	10fbfbd3          	fmul.s	fs7,fs7,fa5
					 (float)0., (float)canvas->width);
    9fe0dad0:	409c                	lw	a5,0(s1)
    9fe0dad2:	217b8953          	fmv.s	fs2,fs7
    9fe0dad6:	208404d3          	fmv.s	fs1,fs0
    9fe0dada:	d007f7d3          	fcvt.s.w	fa5,a5
				clip(x[0] + ((dx >= 0) ? thick_offset_y : (-thick_offset_y)),
    9fe0dade:	217b9bd3          	fneg.s	fs7,fs7
				clip(x[1] + ((dx >= 0) ? thick_offset_y : (-thick_offset_y)),
					 (float)0., (float)canvas->width);
			obj_attr->line._ey[side_i] =
				clip(y[1] + ((dx >= 0) ? (-thick_offset_x) : thick_offset_x),
					 (float)0., (float)canvas->height);
			thick_offset_x = -thick_offset_x;
    9fe0dae2:	20841453          	fneg.s	fs0,fs0
				clip(x[0] + ((dx >= 0) ? thick_offset_y : (-thick_offset_y)),
    9fe0dae6:	c0079653          	fcvt.w.s	a2,fa5,rtz
    9fe0daea:	4581                	li	a1,0
    9fe0daec:	2601                	sext.w	a2,a2
    9fe0daee:	1a0bc363          	bltz	s7,9fe0dc94 <set_line_obj_attr+0x2da>
    9fe0daf2:	0129f7d3          	fadd.s	fa5,fs3,fs2
				clip(y[0] + ((dx >= 0) ? (-thick_offset_x) : thick_offset_x),
    9fe0daf6:	208404d3          	fmv.s	fs1,fs0
				clip(x[0] + ((dx >= 0) ? thick_offset_y : (-thick_offset_y)),
    9fe0dafa:	c0079553          	fcvt.w.s	a0,fa5,rtz
		for (int side_i = 0; side_i < 2; side_i++) {
    9fe0dafe:	0911                	addi	s2,s2,4
				clip(x[0] + ((dx >= 0) ? thick_offset_y : (-thick_offset_y)),
    9fe0db00:	2501                	sext.w	a0,a0
    9fe0db02:	2b8000ef          	jal	ra,9fe0ddba <clip>
			obj_attr->line._bx[side_i] =
    9fe0db06:	d00577d3          	fcvt.s.w	fa5,a0
				clip(y[0] + ((dx >= 0) ? (-thick_offset_x) : thick_offset_x),
    9fe0db0a:	4581                	li	a1,0
			obj_attr->line._bx[side_i] =
    9fe0db0c:	fef92e27          	fsw	fa5,-4(s2)
					 (float)0., (float)canvas->height);
    9fe0db10:	40dc                	lw	a5,4(s1)
				clip(y[0] + ((dx >= 0) ? (-thick_offset_x) : thick_offset_x),
    9fe0db12:	0144f7d3          	fadd.s	fa5,fs1,fs4
					 (float)0., (float)canvas->height);
    9fe0db16:	d007f753          	fcvt.s.w	fa4,a5
				clip(y[0] + ((dx >= 0) ? (-thick_offset_x) : thick_offset_x),
    9fe0db1a:	c0079553          	fcvt.w.s	a0,fa5,rtz
    9fe0db1e:	c0071653          	fcvt.w.s	a2,fa4,rtz
    9fe0db22:	2501                	sext.w	a0,a0
    9fe0db24:	2601                	sext.w	a2,a2
    9fe0db26:	294000ef          	jal	ra,9fe0ddba <clip>
			obj_attr->line._by[side_i] =
    9fe0db2a:	d00577d3          	fcvt.s.w	fa5,a0
				clip(x[1] + ((dx >= 0) ? thick_offset_y : (-thick_offset_y)),
    9fe0db2e:	012af953          	fadd.s	fs2,fs5,fs2
    9fe0db32:	4581                	li	a1,0
			obj_attr->line._by[side_i] =
    9fe0db34:	00f92227          	fsw	fa5,4(s2)
					 (float)0., (float)canvas->width);
    9fe0db38:	409c                	lw	a5,0(s1)
				clip(x[1] + ((dx >= 0) ? thick_offset_y : (-thick_offset_y)),
    9fe0db3a:	c0091553          	fcvt.w.s	a0,fs2,rtz
					 (float)0., (float)canvas->width);
    9fe0db3e:	d007f7d3          	fcvt.s.w	fa5,a5
				clip(x[1] + ((dx >= 0) ? thick_offset_y : (-thick_offset_y)),
    9fe0db42:	2501                	sext.w	a0,a0
    9fe0db44:	c0079653          	fcvt.w.s	a2,fa5,rtz
    9fe0db48:	2601                	sext.w	a2,a2
    9fe0db4a:	270000ef          	jal	ra,9fe0ddba <clip>
			obj_attr->line._ex[side_i] =
    9fe0db4e:	d00577d3          	fcvt.s.w	fa5,a0
				clip(y[1] + ((dx >= 0) ? (-thick_offset_x) : thick_offset_x),
    9fe0db52:	009b74d3          	fadd.s	fs1,fs6,fs1
    9fe0db56:	4581                	li	a1,0
			obj_attr->line._ex[side_i] =
    9fe0db58:	00f92627          	fsw	fa5,12(s2)
					 (float)0., (float)canvas->height);
    9fe0db5c:	40dc                	lw	a5,4(s1)
				clip(y[1] + ((dx >= 0) ? (-thick_offset_x) : thick_offset_x),
    9fe0db5e:	c0049553          	fcvt.w.s	a0,fs1,rtz
					 (float)0., (float)canvas->height);
    9fe0db62:	d007f7d3          	fcvt.s.w	fa5,a5
				clip(y[1] + ((dx >= 0) ? (-thick_offset_x) : thick_offset_x),
    9fe0db66:	2501                	sext.w	a0,a0
    9fe0db68:	c0079653          	fcvt.w.s	a2,fa5,rtz
    9fe0db6c:	2601                	sext.w	a2,a2
    9fe0db6e:	24c000ef          	jal	ra,9fe0ddba <clip>
			obj_attr->line._ey[side_i] =
    9fe0db72:	d00577d3          	fcvt.s.w	fa5,a0
    9fe0db76:	00f92a27          	fsw	fa5,20(s2)
		for (int side_i = 0; side_i < 2; side_i++) {
    9fe0db7a:	f52a1be3          	bne	s4,s2,9fe0dad0 <set_line_obj_attr+0x116>
			thick_offset_y = -thick_offset_y;
		}
		obj_attr->line.ts_h =
			(obj_attr->line._bx[0] +
			obj_attr->line._mx * (obj_attr->line._by[1] - obj_attr->line._by[0])) -
    9fe0db7e:	01442707          	flw	fa4,20(s0)
    9fe0db82:	01042507          	flw	fa0,16(s0)
			(obj_attr->line._bx[0] +
    9fe0db86:	00442787          	flw	fa5,4(s0)
    9fe0db8a:	00842607          	flw	fa2,8(s0)
			obj_attr->line._mx * (obj_attr->line._by[1] - obj_attr->line._by[0])) -
    9fe0db8e:	08a775d3          	fsub.s	fa1,fa4,fa0
    9fe0db92:	00c42687          	flw	fa3,12(s0)
			obj_attr->line._bx[1];
		obj_attr->_min_y =
			(int)round(MIN(obj_attr->line._by[0], obj_attr->line._by[1]));
    9fe0db96:	a0e517d3          	flt.s	a5,fa0,fa4
			(obj_attr->line._bx[0] +
    9fe0db9a:	60b7f7c3          	fmadd.s	fa5,fa5,fa1,fa2
			obj_attr->line._mx * (obj_attr->line._by[1] - obj_attr->line._by[0])) -
    9fe0db9e:	08d7f7d3          	fsub.s	fa5,fa5,fa3
		obj_attr->line.ts_h =
    9fe0dba2:	02f42427          	fsw	fa5,40(s0)
			(int)round(MIN(obj_attr->line._by[0], obj_attr->line._by[1]));
    9fe0dba6:	e399                	bnez	a5,9fe0dbac <set_line_obj_attr+0x1f2>
    9fe0dba8:	20e70553          	fmv.s	fa0,fa4
    9fe0dbac:	42050553          	fcvt.d.s	fa0,fa0
    9fe0dbb0:	ef1f20ef          	jal	ra,9fe00aa0 <round>
		obj_attr->_max_y =
			(int)round(MAX(obj_attr->line._ey[1], obj_attr->line._ey[1]));
    9fe0dbb4:	02442787          	flw	fa5,36(s0)
			(int)round(MIN(obj_attr->line._by[0], obj_attr->line._by[1]));
    9fe0dbb8:	c20517d3          	fcvt.w.d	a5,fa0,rtz
			(int)round(MAX(obj_attr->line._ey[1], obj_attr->line._ey[1]));
    9fe0dbbc:	42078553          	fcvt.d.s	fa0,fa5
			(int)round(MIN(obj_attr->line._by[0], obj_attr->line._by[1]));
    9fe0dbc0:	dc5c                	sw	a5,60(s0)
			(int)round(MAX(obj_attr->line._ey[1], obj_attr->line._ey[1]));
    9fe0dbc2:	edff20ef          	jal	ra,9fe00aa0 <round>
    9fe0dbc6:	c20517d3          	fcvt.w.d	a5,fa0,rtz
    9fe0dbca:	dc1c                	sw	a5,56(s0)
	}
}
    9fe0dbcc:	60ea                	ld	ra,152(sp)
    9fe0dbce:	644a                	ld	s0,144(sp)
    9fe0dbd0:	64aa                	ld	s1,136(sp)
    9fe0dbd2:	690a                	ld	s2,128(sp)
    9fe0dbd4:	79e6                	ld	s3,120(sp)
    9fe0dbd6:	7a46                	ld	s4,112(sp)
    9fe0dbd8:	7aa6                	ld	s5,104(sp)
    9fe0dbda:	7b06                	ld	s6,96(sp)
    9fe0dbdc:	6be6                	ld	s7,88(sp)
    9fe0dbde:	6c46                	ld	s8,80(sp)
    9fe0dbe0:	6ca6                	ld	s9,72(sp)
    9fe0dbe2:	3462                	fld	fs0,56(sp)
    9fe0dbe4:	34c2                	fld	fs1,48(sp)
    9fe0dbe6:	3922                	fld	fs2,40(sp)
    9fe0dbe8:	3982                	fld	fs3,32(sp)
    9fe0dbea:	2a62                	fld	fs4,24(sp)
    9fe0dbec:	2ac2                	fld	fs5,16(sp)
    9fe0dbee:	2b22                	fld	fs6,8(sp)
    9fe0dbf0:	2b82                	fld	fs7,0(sp)
    9fe0dbf2:	610d                	addi	sp,sp,160
    9fe0dbf4:	8082                	ret
		int x = MIN(pt_x0, pt_x1) - (thickness >> 1);
    9fe0dbf6:	864e                	mv	a2,s3
    9fe0dbf8:	0d3ac263          	blt	s5,s3,9fe0dcbc <set_line_obj_attr+0x302>
    9fe0dbfc:	401b569b          	sraiw	a3,s6,0x1
    9fe0dc00:	0006079b          	sext.w	a5,a2
				((pt_x0 == pt_x1) ? 0 : MAX(pt_x0, pt_x1) - MIN(pt_x0, pt_x1));
    9fe0dc04:	874e                	mv	a4,s3
		int x = MIN(pt_x0, pt_x1) - (thickness >> 1);
    9fe0dc06:	9e15                	subw	a2,a2,a3
		int y = MIN(pt_y0, pt_y1) - (thickness >> 1);
    9fe0dc08:	40d906bb          	subw	a3,s2,a3
				((pt_x0 == pt_x1) ? 0 : MAX(pt_x0, pt_x1) - MIN(pt_x0, pt_x1));
    9fe0dc0c:	0b59c663          	blt	s3,s5,9fe0dcb8 <set_line_obj_attr+0x2fe>
    9fe0dc10:	9f1d                	subw	a4,a4,a5
		int width = thickness +
    9fe0dc12:	0167073b          	addw	a4,a4,s6
    9fe0dc16:	87da                	mv	a5,s6
	set_rect_position(&obj_attr->rect, canvas, pt_x, pt_y, width, height);
    9fe0dc18:	85a6                	mv	a1,s1
    9fe0dc1a:	00440513          	addi	a0,s0,4
	obj_attr->type = (is_filled) ? RECT : STROKE_RECT;
    9fe0dc1e:	00042023          	sw	zero,0(s0)
	obj_attr->color.code = color_code;
    9fe0dc22:	03742823          	sw	s7,48(s0)
	set_rect_position(&obj_attr->rect, canvas, pt_x, pt_y, width, height);
    9fe0dc26:	d2dff0ef          	jal	ra,9fe0d952 <set_rect_position>
	thickness = clip(thickness, MIN_THICKNESS, MAX_THICKNESS);
    9fe0dc2a:	02000613          	li	a2,32
    9fe0dc2e:	4585                	li	a1,1
    9fe0dc30:	855a                	mv	a0,s6
    9fe0dc32:	188000ef          	jal	ra,9fe0ddba <clip>
	int min_allow_thickness = MAX((MIN(obj_attr->rect.height, obj_attr->rect.width) >> 1) - 1, 0);
    9fe0dc36:	445c                	lw	a5,12(s0)
    9fe0dc38:	4818                	lw	a4,16(s0)
    9fe0dc3a:	0007869b          	sext.w	a3,a5
    9fe0dc3e:	00d75363          	bge	a4,a3,9fe0dc44 <set_line_obj_attr+0x28a>
    9fe0dc42:	87ba                	mv	a5,a4
    9fe0dc44:	4017d69b          	sraiw	a3,a5,0x1
    9fe0dc48:	87b6                	mv	a5,a3
    9fe0dc4a:	00d04363          	bgtz	a3,9fe0dc50 <set_line_obj_attr+0x296>
    9fe0dc4e:	4785                	li	a5,1
    9fe0dc50:	fff7869b          	addiw	a3,a5,-1
    9fe0dc54:	87b6                	mv	a5,a3
	obj_attr->rect.thickness = MIN(min_allow_thickness, thickness);
    9fe0dc56:	00d55363          	bge	a0,a3,9fe0dc5c <set_line_obj_attr+0x2a2>
    9fe0dc5a:	87aa                	mv	a5,a0
	obj_attr->_max_y = obj_attr->rect.y + obj_attr->rect.height;
    9fe0dc5c:	4414                	lw	a3,8(s0)
	obj_attr->rect.thickness = MIN(min_allow_thickness, thickness);
    9fe0dc5e:	c85c                	sw	a5,20(s0)
	obj_attr->_max_y = obj_attr->rect.y + obj_attr->rect.height;
    9fe0dc60:	9f35                	addw	a4,a4,a3
    9fe0dc62:	dc18                	sw	a4,56(s0)
	obj_attr->_min_y = obj_attr->rect.y;
    9fe0dc64:	dc54                	sw	a3,60(s0)
}
    9fe0dc66:	b79d                	j	9fe0dbcc <set_line_obj_attr+0x212>
		int x = MIN(pt_x0, pt_x1) - (thickness >> 1);
    9fe0dc68:	4015571b          	sraiw	a4,a0,0x1
    9fe0dc6c:	40e9863b          	subw	a2,s3,a4
		int y = MIN(pt_y0, pt_y1) - (thickness >> 1);
    9fe0dc70:	86ca                	mv	a3,s2
    9fe0dc72:	052a4163          	blt	s4,s2,9fe0dcb4 <set_line_obj_attr+0x2fa>
    9fe0dc76:	0006859b          	sext.w	a1,a3
    9fe0dc7a:	87da                	mv	a5,s6
    9fe0dc7c:	9e99                	subw	a3,a3,a4
		int width = thickness +
    9fe0dc7e:	875a                	mv	a4,s6
				 ((pt_y0 == pt_y1) ? 0 : MAX(pt_y0, pt_y1) - MIN(pt_y0, pt_y1));
    9fe0dc80:	f9490ce3          	beq	s2,s4,9fe0dc18 <set_line_obj_attr+0x25e>
    9fe0dc84:	87ca                	mv	a5,s2
    9fe0dc86:	03494163          	blt	s2,s4,9fe0dca8 <set_line_obj_attr+0x2ee>
    9fe0dc8a:	9f8d                	subw	a5,a5,a1
		int height = thickness +
    9fe0dc8c:	016787bb          	addw	a5,a5,s6
		int width = thickness +
    9fe0dc90:	875a                	mv	a4,s6
    9fe0dc92:	b759                	j	9fe0dc18 <set_line_obj_attr+0x25e>
				clip(x[0] + ((dx >= 0) ? thick_offset_y : (-thick_offset_y)),
    9fe0dc94:	0929f7d3          	fsub.s	fa5,fs3,fs2
    9fe0dc98:	217b8953          	fmv.s	fs2,fs7
    9fe0dc9c:	bdb9                	j	9fe0dafa <set_line_obj_attr+0x140>
		obj_attr->line._mx = (dy != 0) ? dx / ((float)dy) : FLT_MAX;
    9fe0dc9e:	00004697          	auipc	a3,0x4
    9fe0dca2:	7a26a787          	flw	fa5,1954(a3) # 9fe12440 <__func__.1+0x288>
    9fe0dca6:	bbe1                	j	9fe0da7e <set_line_obj_attr+0xc4>
				 ((pt_y0 == pt_y1) ? 0 : MAX(pt_y0, pt_y1) - MIN(pt_y0, pt_y1));
    9fe0dca8:	87d2                	mv	a5,s4
    9fe0dcaa:	9f8d                	subw	a5,a5,a1
		int height = thickness +
    9fe0dcac:	016787bb          	addw	a5,a5,s6
		int width = thickness +
    9fe0dcb0:	875a                	mv	a4,s6
    9fe0dcb2:	b79d                	j	9fe0dc18 <set_line_obj_attr+0x25e>
		int y = MIN(pt_y0, pt_y1) - (thickness >> 1);
    9fe0dcb4:	86d2                	mv	a3,s4
    9fe0dcb6:	b7c1                	j	9fe0dc76 <set_line_obj_attr+0x2bc>
				((pt_x0 == pt_x1) ? 0 : MAX(pt_x0, pt_x1) - MIN(pt_x0, pt_x1));
    9fe0dcb8:	8756                	mv	a4,s5
    9fe0dcba:	bf99                	j	9fe0dc10 <set_line_obj_attr+0x256>
		int x = MIN(pt_x0, pt_x1) - (thickness >> 1);
    9fe0dcbc:	8656                	mv	a2,s5
    9fe0dcbe:	401b569b          	sraiw	a3,s6,0x1
    9fe0dcc2:	0006079b          	sext.w	a5,a2
				((pt_x0 == pt_x1) ? 0 : MAX(pt_x0, pt_x1) - MIN(pt_x0, pt_x1));
    9fe0dcc6:	874e                	mv	a4,s3
		int x = MIN(pt_x0, pt_x1) - (thickness >> 1);
    9fe0dcc8:	9e15                	subw	a2,a2,a3
		int y = MIN(pt_y0, pt_y1) - (thickness >> 1);
    9fe0dcca:	40d906bb          	subw	a3,s2,a3
				((pt_x0 == pt_x1) ? 0 : MAX(pt_x0, pt_x1) - MIN(pt_x0, pt_x1));
    9fe0dcce:	f559d1e3          	bge	s3,s5,9fe0dc10 <set_line_obj_attr+0x256>
    9fe0dcd2:	b7dd                	j	9fe0dcb8 <set_line_obj_attr+0x2fe>

000000009fe0dcd4 <CVI_OSDC_est_cmpr_canvas_size>:

//==============================================================================================
//CVI interface
uint32_t CVI_OSDC_est_cmpr_canvas_size(Canvas_Attr *canvas, DRAW_OBJ *objs, uint32_t obj_num)
{
    9fe0dcd4:	1101                	addi	sp,sp,-32
	draw_cmpr_canvas(canvas, objs, obj_num, dummy, 0, &bs_sz);
    9fe0dcd6:	007c                	addi	a5,sp,12
    9fe0dcd8:	4701                	li	a4,0
    9fe0dcda:	4681                	li	a3,0
{
    9fe0dcdc:	ec06                	sd	ra,24(sp)
	uint32_t bs_sz = 0;
    9fe0dcde:	c602                	sw	zero,12(sp)
	draw_cmpr_canvas(canvas, objs, obj_num, dummy, 0, &bs_sz);
    9fe0dce0:	abfff0ef          	jal	ra,9fe0d79e <draw_cmpr_canvas>
	return ((bs_sz + BUF_GUARD_SIZE) >> 4) << 4;
    9fe0dce4:	47b2                	lw	a5,12(sp)
	return est_cmpr_canvas_size(canvas, objs, obj_num);
}
    9fe0dce6:	60e2                	ld	ra,24(sp)
	return ((bs_sz + BUF_GUARD_SIZE) >> 4) << 4;
    9fe0dce8:	6505                	lui	a0,0x1
    9fe0dcea:	9d3d                	addw	a0,a0,a5
    9fe0dcec:	9941                	andi	a0,a0,-16
}
    9fe0dcee:	2501                	sext.w	a0,a0
    9fe0dcf0:	6105                	addi	sp,sp,32
    9fe0dcf2:	8082                	ret

000000009fe0dcf4 <CVI_OSDC_draw_cmpr_canvas>:

int CVI_OSDC_draw_cmpr_canvas(Canvas_Attr *canvas, DRAW_OBJ *objs, uint32_t obj_num,
				uint8_t *obuf, uint32_t buf_size, uint32_t *p_osize)
{
	return draw_cmpr_canvas(canvas, objs, obj_num, obuf, buf_size, p_osize);
    9fe0dcf4:	aabff06f          	j	9fe0d79e <draw_cmpr_canvas>

000000009fe0dcf8 <CVI_OSDC_set_rect_obj_attr>:
}

void CVI_OSDC_set_rect_obj_attr(Canvas_Attr *canvas, DRAW_OBJ *obj, uint32_t color_code, int pt_x, int pt_y, int width,
				int height, bool is_filled, int thickness)
{
    9fe0dcf8:	1141                	addi	sp,sp,-16
    9fe0dcfa:	e406                	sd	ra,8(sp)
    9fe0dcfc:	e022                	sd	s0,0(sp)
    9fe0dcfe:	8332                	mv	t1,a2
    9fe0dd00:	842e                	mv	s0,a1
	obj_attr->type = (is_filled) ? RECT : STROKE_RECT;
    9fe0dd02:	0018c893          	xori	a7,a7,1
{
    9fe0dd06:	85aa                	mv	a1,a0
    9fe0dd08:	8636                	mv	a2,a3
	set_rect_position(&obj_attr->rect, canvas, pt_x, pt_y, width, height);
    9fe0dd0a:	00440513          	addi	a0,s0,4
{
    9fe0dd0e:	86ba                	mv	a3,a4
	obj_attr->type = (is_filled) ? RECT : STROKE_RECT;
    9fe0dd10:	01142023          	sw	a7,0(s0)
{
    9fe0dd14:	873e                	mv	a4,a5
	obj_attr->color.code = color_code;
    9fe0dd16:	02642823          	sw	t1,48(s0)
	set_rect_position(&obj_attr->rect, canvas, pt_x, pt_y, width, height);
    9fe0dd1a:	87c2                	mv	a5,a6
    9fe0dd1c:	c37ff0ef          	jal	ra,9fe0d952 <set_rect_position>
	thickness = clip(thickness, MIN_THICKNESS, MAX_THICKNESS);
    9fe0dd20:	4542                	lw	a0,16(sp)
    9fe0dd22:	02000613          	li	a2,32
    9fe0dd26:	4585                	li	a1,1
    9fe0dd28:	092000ef          	jal	ra,9fe0ddba <clip>
	int min_allow_thickness = MAX((MIN(obj_attr->rect.height, obj_attr->rect.width) >> 1) - 1, 0);
    9fe0dd2c:	445c                	lw	a5,12(s0)
    9fe0dd2e:	4818                	lw	a4,16(s0)
    9fe0dd30:	0007869b          	sext.w	a3,a5
    9fe0dd34:	00d75363          	bge	a4,a3,9fe0dd3a <CVI_OSDC_set_rect_obj_attr+0x42>
    9fe0dd38:	87ba                	mv	a5,a4
    9fe0dd3a:	4017d69b          	sraiw	a3,a5,0x1
    9fe0dd3e:	87b6                	mv	a5,a3
    9fe0dd40:	00d04363          	bgtz	a3,9fe0dd46 <CVI_OSDC_set_rect_obj_attr+0x4e>
    9fe0dd44:	4785                	li	a5,1
    9fe0dd46:	fff7869b          	addiw	a3,a5,-1
    9fe0dd4a:	87b6                	mv	a5,a3
	obj_attr->rect.thickness = MIN(min_allow_thickness, thickness);
    9fe0dd4c:	00d55363          	bge	a0,a3,9fe0dd52 <CVI_OSDC_set_rect_obj_attr+0x5a>
    9fe0dd50:	87aa                	mv	a5,a0
	obj_attr->_max_y = obj_attr->rect.y + obj_attr->rect.height;
    9fe0dd52:	4414                	lw	a3,8(s0)
	obj_attr->rect.thickness = MIN(min_allow_thickness, thickness);
    9fe0dd54:	c85c                	sw	a5,20(s0)
	obj_attr->_max_y = obj_attr->rect.y + obj_attr->rect.height;
    9fe0dd56:	9f35                	addw	a4,a4,a3
    9fe0dd58:	dc18                	sw	a4,56(s0)
	obj_attr->_min_y = obj_attr->rect.y;
    9fe0dd5a:	dc54                	sw	a3,60(s0)
	set_rect_obj_attr(obj, canvas, color_code, pt_x, pt_y, width, height, is_filled, thickness);

}
    9fe0dd5c:	60a2                	ld	ra,8(sp)
    9fe0dd5e:	6402                	ld	s0,0(sp)
    9fe0dd60:	0141                	addi	sp,sp,16
    9fe0dd62:	8082                	ret

000000009fe0dd64 <CVI_OSDC_set_bitmap_obj_attr>:

void CVI_OSDC_set_bitmap_obj_attr(Canvas_Attr *canvas, DRAW_OBJ *obj_attr, uint8_t *buf,
				int pt_x, int pt_y, int width, int height, bool is_cmpr)
{
    9fe0dd64:	1101                	addi	sp,sp,-32
    9fe0dd66:	e822                	sd	s0,16(sp)
    9fe0dd68:	e426                	sd	s1,8(sp)
    9fe0dd6a:	ec06                	sd	ra,24(sp)
    9fe0dd6c:	842e                	mv	s0,a1
    9fe0dd6e:	84b2                	mv	s1,a2
    9fe0dd70:	85aa                	mv	a1,a0
    9fe0dd72:	8636                	mv	a2,a3
    9fe0dd74:	86ba                	mv	a3,a4
    9fe0dd76:	873e                	mv	a4,a5
    9fe0dd78:	87c2                	mv	a5,a6
	if (is_cmpr) {
    9fe0dd7a:	02088763          	beqz	a7,9fe0dda8 <CVI_OSDC_set_bitmap_obj_attr+0x44>
						<< 1; // 2B metadata for each line
    9fe0dd7e:	0018151b          	slliw	a0,a6,0x1
		obj_attr->type = CMPR_BIT_MAP;
    9fe0dd82:	4811                	li	a6,4
    9fe0dd84:	01042023          	sw	a6,0(s0)
		obj_attr->bitmap.bs_offset = height
    9fe0dd88:	cc08                	sw	a0,24(s0)
	set_rect_position(&obj_attr->bitmap.rect, canvas, pt_x, pt_y, width,  height);
    9fe0dd8a:	00440513          	addi	a0,s0,4
    9fe0dd8e:	bc5ff0ef          	jal	ra,9fe0d952 <set_rect_position>
	obj_attr->_max_y = obj_attr->bitmap.rect.y + obj_attr->bitmap.rect.height;
    9fe0dd92:	4418                	lw	a4,8(s0)
    9fe0dd94:	481c                	lw	a5,16(s0)
	obj_attr->color.buf = buf;
    9fe0dd96:	f804                	sd	s1,48(s0)
	obj_attr->_min_y = obj_attr->bitmap.rect.y;
    9fe0dd98:	dc58                	sw	a4,60(s0)
	obj_attr->_max_y = obj_attr->bitmap.rect.y + obj_attr->bitmap.rect.height;
    9fe0dd9a:	9fb9                	addw	a5,a5,a4
    9fe0dd9c:	dc1c                	sw	a5,56(s0)
	set_bitmap_obj_attr(obj_attr, canvas, buf,  pt_x, pt_y, width, height, is_cmpr);
}
    9fe0dd9e:	60e2                	ld	ra,24(sp)
    9fe0dda0:	6442                	ld	s0,16(sp)
    9fe0dda2:	64a2                	ld	s1,8(sp)
    9fe0dda4:	6105                	addi	sp,sp,32
    9fe0dda6:	8082                	ret
		obj_attr->type = BIT_MAP;
    9fe0dda8:	4509                	li	a0,2
    9fe0ddaa:	c008                	sw	a0,0(s0)
		obj_attr->bitmap.stride = width;
    9fe0ddac:	cc18                	sw	a4,24(s0)
    9fe0ddae:	bff1                	j	9fe0dd8a <CVI_OSDC_set_bitmap_obj_attr+0x26>

000000009fe0ddb0 <CVI_OSDC_set_line_obj_attr>:

void CVI_OSDC_set_line_obj_attr(Canvas_Attr *canvas, DRAW_OBJ *obj, uint32_t color_code,
				int pt_x0, int pt_y0, int pt_x1, int pt_y1, int thickness)
{
    9fe0ddb0:	832a                	mv	t1,a0
	set_line_obj_attr(obj, canvas, color_code, pt_x0, pt_y0, pt_x1, pt_y1, thickness);
    9fe0ddb2:	852e                	mv	a0,a1
    9fe0ddb4:	859a                	mv	a1,t1
    9fe0ddb6:	c05ff06f          	j	9fe0d9ba <set_line_obj_attr>

000000009fe0ddba <clip>:
{
	return (buf[byte_idx] >> bit_idx) & 0x1;
}

int clip(int data, int min, int max)
{
    9fe0ddba:	87aa                	mv	a5,a0
    9fe0ddbc:	8532                	mv	a0,a2
	return (data > max) ? max : (data < min) ? min : data;
    9fe0ddbe:	00f64763          	blt	a2,a5,9fe0ddcc <clip+0x12>
    9fe0ddc2:	863e                	mv	a2,a5
    9fe0ddc4:	00b7c563          	blt	a5,a1,9fe0ddce <clip+0x14>
    9fe0ddc8:	0006051b          	sext.w	a0,a2
}
    9fe0ddcc:	8082                	ret
	return (data > max) ? max : (data < min) ? min : data;
    9fe0ddce:	862e                	mv	a2,a1
    9fe0ddd0:	0006051b          	sext.w	a0,a2
    9fe0ddd4:	bfe5                	j	9fe0ddcc <clip+0x12>

000000009fe0ddd6 <init_stream>:

// -- streaming operation handler --
void init_stream(StreamBuffer *bs, const uint8_t *buf, int buf_size,
		 bool read_only)
{
    9fe0ddd6:	87aa                	mv	a5,a0
	bs->bit_pos = 0;
	bs->stream = (uint8_t *)buf;
	bs->buf_size = buf_size;
	bs->status = 1;
    9fe0ddd8:	4705                	li	a4,1
	bs->bit_pos = 0;
    9fe0ddda:	0007a423          	sw	zero,8(a5)
	bs->stream = (uint8_t *)buf;
    9fe0ddde:	e38c                	sd	a1,0(a5)
	bs->buf_size = buf_size;
    9fe0dde0:	c7d0                	sw	a2,12(a5)
	bs->status = 1;
    9fe0dde2:	cb98                	sw	a4,16(a5)
{
    9fe0dde4:	852e                	mv	a0,a1
	if (!read_only)
    9fe0dde6:	c291                	beqz	a3,9fe0ddea <init_stream+0x14>
		memset((uint8_t *)buf, 0, sizeof(uint8_t) * buf_size);
}
    9fe0dde8:	8082                	ret
		memset((uint8_t *)buf, 0, sizeof(uint8_t) * buf_size);
    9fe0ddea:	4581                	li	a1,0
    9fe0ddec:	990fe06f          	j	9fe0bf7c <memset>

000000009fe0ddf0 <write_stream>:
	(*dest_ptr_ex) = (*dest_ptr_ex) | src_data_ex;
}

void write_stream(StreamBuffer *bs, uint8_t *src, int bit_len)
{
	int next_bit_pos = bs->bit_pos + bit_len;
    9fe0ddf0:	451c                	lw	a5,8(a0)

	if (next_bit_pos < (bs->buf_size << 3)) {
    9fe0ddf2:	4558                	lw	a4,12(a0)
	int next_bit_pos = bs->bit_pos + bit_len;
    9fe0ddf4:	00c786bb          	addw	a3,a5,a2
	if (next_bit_pos < (bs->buf_size << 3)) {
    9fe0ddf8:	0037171b          	slliw	a4,a4,0x3
	int next_bit_pos = bs->bit_pos + bit_len;
    9fe0ddfc:	8336                	mv	t1,a3
	if (next_bit_pos < (bs->buf_size << 3)) {
    9fe0ddfe:	06e6d863          	bge	a3,a4,9fe0de6e <write_stream+0x7e>
		while (bit_len >= 8) {
    9fe0de02:	471d                	li	a4,7
    9fe0de04:	06c75a63          	bge	a4,a2,9fe0de78 <write_stream+0x88>
    9fe0de08:	ff86081b          	addiw	a6,a2,-8
    9fe0de0c:	00385e1b          	srliw	t3,a6,0x3
    9fe0de10:	001e089b          	addiw	a7,t3,1
    9fe0de14:	98ae                	add	a7,a7,a1
	uint16_t *dest_ptr_ex = (uint16_t *)&stream[dest_byte_i];
    9fe0de16:	6114                	ld	a3,0(a0)
    9fe0de18:	4037d613          	srai	a2,a5,0x3
	uint16_t src_data_ex = (*src) << dest_bit_i;
    9fe0de1c:	0005c703          	lbu	a4,0(a1)
	uint16_t *dest_ptr_ex = (uint16_t *)&stream[dest_byte_i];
    9fe0de20:	96b2                	add	a3,a3,a2
	(*dest_ptr_ex) = (*dest_ptr_ex) | src_data_ex;
    9fe0de22:	0006d603          	lhu	a2,0(a3)
	int dest_bit_i = bit_pos & 7;
    9fe0de26:	8b9d                	andi	a5,a5,7
	uint16_t src_data_ex = (*src) << dest_bit_i;
    9fe0de28:	00f717bb          	sllw	a5,a4,a5
	(*dest_ptr_ex) = (*dest_ptr_ex) | src_data_ex;
    9fe0de2c:	8fd1                	or	a5,a5,a2
    9fe0de2e:	00f69023          	sh	a5,0(a3)
			write_multibits(bs->stream, src, bs->bit_pos, 8);
			bs->bit_pos += 8;
    9fe0de32:	451c                	lw	a5,8(a0)
			bit_len -= 8;
			src++;
    9fe0de34:	0585                	addi	a1,a1,1
			bs->bit_pos += 8;
    9fe0de36:	27a1                	addiw	a5,a5,8
    9fe0de38:	c51c                	sw	a5,8(a0)
		while (bit_len >= 8) {
    9fe0de3a:	fcb89ee3          	bne	a7,a1,9fe0de16 <write_stream+0x26>
			bit_len -= 8;
    9fe0de3e:	003e161b          	slliw	a2,t3,0x3
    9fe0de42:	40c8063b          	subw	a2,a6,a2
		};
		if (bit_len > 0) {
    9fe0de46:	02c05663          	blez	a2,9fe0de72 <write_stream+0x82>
			write_multibits(bs->stream, src, bs->bit_pos, bit_len);
    9fe0de4a:	4514                	lw	a3,8(a0)
	uint16_t *dest_ptr_ex = (uint16_t *)&stream[dest_byte_i];
    9fe0de4c:	6118                	ld	a4,0(a0)
	uint16_t src_data_ex = (*src) << dest_bit_i;
    9fe0de4e:	0008c783          	lbu	a5,0(a7)
	uint16_t *dest_ptr_ex = (uint16_t *)&stream[dest_byte_i];
    9fe0de52:	4036d613          	srai	a2,a3,0x3
    9fe0de56:	9732                	add	a4,a4,a2
	(*dest_ptr_ex) = (*dest_ptr_ex) | src_data_ex;
    9fe0de58:	00075603          	lhu	a2,0(a4)
	int dest_bit_i = bit_pos & 7;
    9fe0de5c:	8a9d                	andi	a3,a3,7
	uint16_t src_data_ex = (*src) << dest_bit_i;
    9fe0de5e:	00d797bb          	sllw	a5,a5,a3
	(*dest_ptr_ex) = (*dest_ptr_ex) | src_data_ex;
    9fe0de62:	8fd1                	or	a5,a5,a2
    9fe0de64:	00f71023          	sh	a5,0(a4)
		}
	} else {
		bs->status = -1;
	}
	bs->bit_pos = next_bit_pos;
    9fe0de68:	00652423          	sw	t1,8(a0) # 1008 <_EL1_STACK_SIZE+0x808>
}
    9fe0de6c:	8082                	ret
		bs->status = -1;
    9fe0de6e:	57fd                	li	a5,-1
    9fe0de70:	c91c                	sw	a5,16(a0)
	bs->bit_pos = next_bit_pos;
    9fe0de72:	00652423          	sw	t1,8(a0)
}
    9fe0de76:	8082                	ret
		while (bit_len >= 8) {
    9fe0de78:	88ae                	mv	a7,a1
    9fe0de7a:	b7f1                	j	9fe0de46 <write_stream+0x56>

000000009fe0de7c <get_color>:
	}
}

// tranform multiple pixel format into generic ARGB8888
RGBA get_color(uint8_t *ptr, OSD_FORMAT format)
{
    9fe0de7c:	87aa                	mv	a5,a0
	RGBA out_c;

	out_c.code = 0;
    9fe0de7e:	4501                	li	a0,0
	if (format == OSD_ARGB8888) {
    9fe0de80:	e199                	bnez	a1,9fe0de86 <get_color+0xa>
		RGBA in_c = *((RGBA *)ptr);

		CPY_C(in_c, out_c)
    9fe0de82:	4388                	lw	a0,0(a5)
    9fe0de84:	8082                	ret
	} else if (format == OSD_ARGB1555) {
    9fe0de86:	4715                	li	a4,5
    9fe0de88:	00e58a63          	beq	a1,a4,9fe0de9c <get_color+0x20>
		ARGB1555 in_c = *((ARGB1555 *)ptr);

		CPY_C(in_c, out_c)
	} else if (format == OSD_ARGB4444) {
    9fe0de8c:	4711                	li	a4,4
    9fe0de8e:	04e58763          	beq	a1,a4,9fe0dedc <get_color+0x60>
		ARGB4444 in_c = *((ARGB4444 *)ptr);

		CPY_C(in_c, out_c)
	} else if (format == OSD_LUT8 || format == OSD_LUT4) {
    9fe0de92:	99f5                	andi	a1,a1,-3
    9fe0de94:	4721                	li	a4,8
    9fe0de96:	02e58e63          	beq	a1,a4,9fe0ded2 <get_color+0x56>
		out_c.a = *ptr;
	}

	return out_c;
}
    9fe0de9a:	8082                	ret
		ARGB1555 in_c = *((ARGB1555 *)ptr);
    9fe0de9c:	0007d703          	lhu	a4,0(a5)
    9fe0dea0:	0007d683          	lhu	a3,0(a5)
    9fe0dea4:	00a7551b          	srliw	a0,a4,0xa
    9fe0dea8:	0057579b          	srliw	a5,a4,0x5
		CPY_C(in_c, out_c)
    9fe0deac:	897d                	andi	a0,a0,31
		ARGB1555 in_c = *((ARGB1555 *)ptr);
    9fe0deae:	8afd                	andi	a3,a3,31
    9fe0deb0:	8bfd                	andi	a5,a5,31
		CPY_C(in_c, out_c)
    9fe0deb2:	0105151b          	slliw	a0,a0,0x10
    9fe0deb6:	0087979b          	slliw	a5,a5,0x8
    9fe0deba:	8d55                	or	a0,a0,a3
		CPY_C(in_c, out_c)
    9fe0debc:	8d5d                	or	a0,a0,a5
    9fe0debe:	010007b7          	lui	a5,0x1000
    9fe0dec2:	17fd                	addi	a5,a5,-1
		ARGB1555 in_c = *((ARGB1555 *)ptr);
    9fe0dec4:	00f7571b          	srliw	a4,a4,0xf
		CPY_C(in_c, out_c)
    9fe0dec8:	0187171b          	slliw	a4,a4,0x18
    9fe0decc:	8d7d                	and	a0,a0,a5
    9fe0dece:	8d59                	or	a0,a0,a4
    9fe0ded0:	8082                	ret
		out_c.a = *ptr;
    9fe0ded2:	0007c503          	lbu	a0,0(a5) # 1000000 <CVIMMAP_FSBL_UNZIP_SIZE>
    9fe0ded6:	0185151b          	slliw	a0,a0,0x18
}
    9fe0deda:	8082                	ret
		ARGB4444 in_c = *((ARGB4444 *)ptr);
    9fe0dedc:	0007d703          	lhu	a4,0(a5)
    9fe0dee0:	0007d683          	lhu	a3,0(a5)
    9fe0dee4:	0087551b          	srliw	a0,a4,0x8
    9fe0dee8:	0047579b          	srliw	a5,a4,0x4
		CPY_C(in_c, out_c)
    9fe0deec:	893d                	andi	a0,a0,15
		ARGB4444 in_c = *((ARGB4444 *)ptr);
    9fe0deee:	8abd                	andi	a3,a3,15
    9fe0def0:	8bbd                	andi	a5,a5,15
		CPY_C(in_c, out_c)
    9fe0def2:	0105151b          	slliw	a0,a0,0x10
    9fe0def6:	0087979b          	slliw	a5,a5,0x8
    9fe0defa:	8d55                	or	a0,a0,a3
    9fe0defc:	8d5d                	or	a0,a0,a5
    9fe0defe:	010007b7          	lui	a5,0x1000
    9fe0df02:	17fd                	addi	a5,a5,-1
		ARGB4444 in_c = *((ARGB4444 *)ptr);
    9fe0df04:	00c7571b          	srliw	a4,a4,0xc
		CPY_C(in_c, out_c)
    9fe0df08:	0187171b          	slliw	a4,a4,0x18
    9fe0df0c:	8d7d                	and	a0,a0,a5
    9fe0df0e:	8d59                	or	a0,a0,a4
    9fe0df10:	8082                	ret

000000009fe0df12 <palette_cache_init>:
}

// ------ palette_cache ------
void palette_cache_init(PaletteRGBA *cache, int cache_sz)
{
	int c_incr = 256 / cache_sz;
    9fe0df12:	10000e13          	li	t3,256
    9fe0df16:	02be4e3b          	divw	t3,t3,a1
	uint8_t c = 0;

	for (int idx = 0; idx < cache_sz; idx++) {
    9fe0df1a:	06b05363          	blez	a1,9fe0df80 <palette_cache_init+0x6e>
    9fe0df1e:	00259313          	slli	t1,a1,0x2
	uint8_t c = 0;
    9fe0df22:	4781                	li	a5,0
	for (int idx = 0; idx < cache_sz; idx++) {
    9fe0df24:	4581                	li	a1,0
		uint32_t code = (c << 24) | (c << 16) | (c << 8) | c;
		RGBA color = get_color((uint8_t *)&code, OSD_ARGB8888);

		cache->color[idx] = color;
		cache->num++;
		c = clip(c + c_incr, 0, 255);
    9fe0df26:	0ff00e93          	li	t4,255
		uint32_t code = (c << 24) | (c << 16) | (c << 8) | c;
    9fe0df2a:	0107969b          	slliw	a3,a5,0x10
    9fe0df2e:	0187971b          	slliw	a4,a5,0x18
    9fe0df32:	8f55                	or	a4,a4,a3
    9fe0df34:	0087961b          	slliw	a2,a5,0x8
		cache->color[idx] = color;
    9fe0df38:	6114                	ld	a3,0(a0)
		uint32_t code = (c << 24) | (c << 16) | (c << 8) | c;
    9fe0df3a:	8f5d                	or	a4,a4,a5
    9fe0df3c:	8f51                	or	a4,a4,a2
    9fe0df3e:	0007061b          	sext.w	a2,a4
		cache->color[idx] = color;
    9fe0df42:	96ae                	add	a3,a3,a1
    9fe0df44:	00865893          	srli	a7,a2,0x8
    9fe0df48:	01065813          	srli	a6,a2,0x10
    9fe0df4c:	8261                	srli	a2,a2,0x18
    9fe0df4e:	00e68023          	sb	a4,0(a3)
    9fe0df52:	011680a3          	sb	a7,1(a3)
    9fe0df56:	01068123          	sb	a6,2(a3)
    9fe0df5a:	00c681a3          	sb	a2,3(a3)
		cache->num++;
    9fe0df5e:	4518                	lw	a4,8(a0)
		c = clip(c + c_incr, 0, 255);
    9fe0df60:	01c786bb          	addw	a3,a5,t3
    9fe0df64:	87b6                	mv	a5,a3
		cache->num++;
    9fe0df66:	2705                	addiw	a4,a4,1
    9fe0df68:	c518                	sw	a4,8(a0)
	for (int idx = 0; idx < cache_sz; idx++) {
    9fe0df6a:	0591                	addi	a1,a1,4
	return (data > max) ? max : (data < min) ? min : data;
    9fe0df6c:	0006cb63          	bltz	a3,9fe0df82 <palette_cache_init+0x70>
		c = clip(c + c_incr, 0, 255);
    9fe0df70:	00ded463          	bge	t4,a3,9fe0df78 <palette_cache_init+0x66>
    9fe0df74:	0ff00793          	li	a5,255
    9fe0df78:	0ff7f793          	andi	a5,a5,255
	for (int idx = 0; idx < cache_sz; idx++) {
    9fe0df7c:	fab317e3          	bne	t1,a1,9fe0df2a <palette_cache_init+0x18>
	}
}
    9fe0df80:	8082                	ret
	return (data > max) ? max : (data < min) ? min : data;
    9fe0df82:	4781                	li	a5,0
    9fe0df84:	4681                	li	a3,0
    9fe0df86:	b7ed                	j	9fe0df70 <palette_cache_init+0x5e>

000000009fe0df88 <palette_cache_lookup_color>:

int palette_cache_lookup_color(PaletteRGBA *cache, RGBA color)
{
	for (int idx = 0; idx < cache->num; idx++) {
    9fe0df88:	4514                	lw	a3,8(a0)
		if (is_equal_color(cache->color[idx], color)) { // hit
    9fe0df8a:	611c                	ld	a5,0(a0)
{
    9fe0df8c:	88aa                	mv	a7,a0
	for (int idx = 0; idx < cache->num; idx++) {
    9fe0df8e:	0005831b          	sext.w	t1,a1
    9fe0df92:	04d05863          	blez	a3,9fe0dfe2 <palette_cache_lookup_color+0x5a>
    9fe0df96:	873e                	mv	a4,a5
    9fe0df98:	4501                	li	a0,0
    9fe0df9a:	a021                	j	9fe0dfa2 <palette_cache_lookup_color+0x1a>
    9fe0df9c:	2505                	addiw	a0,a0,1
    9fe0df9e:	04d50263          	beq	a0,a3,9fe0dfe2 <palette_cache_lookup_color+0x5a>
		if (is_equal_color(cache->color[idx], color)) { // hit
    9fe0dfa2:	4310                	lw	a2,0(a4)
	for (int idx = 0; idx < cache->num; idx++) {
    9fe0dfa4:	0711                	addi	a4,a4,4
		if (is_equal_color(cache->color[idx], color)) { // hit
    9fe0dfa6:	0006081b          	sext.w	a6,a2
    9fe0dfaa:	fe6819e3          	bne	a6,t1,9fe0df9c <palette_cache_lookup_color+0x14>
	return -1;
}

void palette_cache_lru_update(PaletteRGBA *cache, int index)
{
	if (index == 0)
    9fe0dfae:	c52d                	beqz	a0,9fe0e018 <palette_cache_lookup_color+0x90>
		return;
	RGBA reg_color = cache->color[index];

	for (int idx = index; idx > 0; idx--) {
    9fe0dfb0:	fff5081b          	addiw	a6,a0,-1
    9fe0dfb4:	1802                	slli	a6,a6,0x20
    9fe0dfb6:	02085813          	srli	a6,a6,0x20
    9fe0dfba:	41050833          	sub	a6,a0,a6
    9fe0dfbe:	00251713          	slli	a4,a0,0x2
    9fe0dfc2:	080a                	slli	a6,a6,0x2
    9fe0dfc4:	a011                	j	9fe0dfc8 <palette_cache_lookup_color+0x40>
		cache->color[idx] = cache->color[idx - 1];
    9fe0dfc6:	8736                	mv	a4,a3
    9fe0dfc8:	ffc70693          	addi	a3,a4,-4
    9fe0dfcc:	00d785b3          	add	a1,a5,a3
    9fe0dfd0:	418c                	lw	a1,0(a1)
    9fe0dfd2:	97ba                	add	a5,a5,a4
    9fe0dfd4:	c38c                	sw	a1,0(a5)
    9fe0dfd6:	0008b783          	ld	a5,0(a7)
	for (int idx = index; idx > 0; idx--) {
    9fe0dfda:	fee816e3          	bne	a6,a4,9fe0dfc6 <palette_cache_lookup_color+0x3e>
	}
	cache->color[0] = reg_color;
    9fe0dfde:	c390                	sw	a2,0(a5)
    9fe0dfe0:	8082                	ret
}

void palette_cache_push_color(PaletteRGBA *cache, RGBA color)
{
	for (int idx = cache->num - 1; idx > 0; idx--) {
    9fe0dfe2:	fff6861b          	addiw	a2,a3,-1
    9fe0dfe6:	02c05763          	blez	a2,9fe0e014 <palette_cache_lookup_color+0x8c>
    9fe0dfea:	ffe6871b          	addiw	a4,a3,-2
    9fe0dfee:	1702                	slli	a4,a4,0x20
    9fe0dff0:	9301                	srli	a4,a4,0x20
    9fe0dff2:	40e68733          	sub	a4,a3,a4
    9fe0dff6:	070a                	slli	a4,a4,0x2
    9fe0dff8:	060a                	slli	a2,a2,0x2
    9fe0dffa:	1761                	addi	a4,a4,-8
		cache->color[idx] = cache->color[idx - 1];
    9fe0dffc:	ffc60693          	addi	a3,a2,-4
    9fe0e000:	00d78533          	add	a0,a5,a3
    9fe0e004:	4108                	lw	a0,0(a0)
    9fe0e006:	97b2                	add	a5,a5,a2
    9fe0e008:	8636                	mv	a2,a3
    9fe0e00a:	c388                	sw	a0,0(a5)
    9fe0e00c:	0008b783          	ld	a5,0(a7)
	for (int idx = cache->num - 1; idx > 0; idx--) {
    9fe0e010:	fed716e3          	bne	a4,a3,9fe0dffc <palette_cache_lookup_color+0x74>
	}
	cache->color[0] = color;
    9fe0e014:	c38c                	sw	a1,0(a5)
	return -1;
    9fe0e016:	557d                	li	a0,-1
}
    9fe0e018:	8082                	ret

000000009fe0e01a <enc_literal>:
}

// ------ syntax enc/dec ------
void enc_literal(StreamBuffer *bs, RGBA color, OSD_FORMAT format)
{
    9fe0e01a:	7179                	addi	sp,sp,-48
    9fe0e01c:	f406                	sd	ra,40(sp)
    9fe0e01e:	c42e                	sw	a1,8(sp)
	if (format == OSD_ARGB8888) {
    9fe0e020:	c205                	beqz	a2,9fe0e040 <enc_literal+0x26>
		write_stream(bs, (uint8_t *)(&color), sizeof(RGBA) << 3);
	} else if (format == OSD_ARGB1555) {
    9fe0e022:	4715                	li	a4,5
    9fe0e024:	06e60b63          	beq	a2,a4,9fe0e09a <enc_literal+0x80>
		ARGB1555 out_c;

		CPY_C(color, out_c)
		write_stream(bs, (uint8_t *)(&out_c.code), sizeof(out_c.code) << 3);
	} else if (format == OSD_ARGB4444) {
    9fe0e028:	4711                	li	a4,4
    9fe0e02a:	02e60363          	beq	a2,a4,9fe0e050 <enc_literal+0x36>
		ARGB4444 out_c;

		CPY_C(color, out_c)
		write_stream(bs, (uint8_t *)(&out_c.code), sizeof(out_c.code) << 3);
	} else if (format == OSD_LUT8) {
    9fe0e02e:	4721                	li	a4,8
    9fe0e030:	04e60e63          	beq	a2,a4,9fe0e08c <enc_literal+0x72>
		write_stream(bs, (uint8_t *)(&color.a), 8);
	} else if (format == OSD_LUT4) {
    9fe0e034:	4729                	li	a4,10
    9fe0e036:	04e60a63          	beq	a2,a4,9fe0e08a <enc_literal+0x70>
		write_stream(bs, (uint8_t *)(&color.a), 4);
	}
}
    9fe0e03a:	70a2                	ld	ra,40(sp)
    9fe0e03c:	6145                	addi	sp,sp,48
    9fe0e03e:	8082                	ret
		write_stream(bs, (uint8_t *)(&color), sizeof(RGBA) << 3);
    9fe0e040:	002c                	addi	a1,sp,8
    9fe0e042:	02000613          	li	a2,32
    9fe0e046:	dabff0ef          	jal	ra,9fe0ddf0 <write_stream>
}
    9fe0e04a:	70a2                	ld	ra,40(sp)
    9fe0e04c:	6145                	addi	sp,sp,48
    9fe0e04e:	8082                	ret
		CPY_C(color, out_c)
    9fe0e050:	00914683          	lbu	a3,9(sp)
    9fe0e054:	00814783          	lbu	a5,8(sp)
    9fe0e058:	00a14703          	lbu	a4,10(sp)
    9fe0e05c:	00b14603          	lbu	a2,11(sp)
    9fe0e060:	8abd                	andi	a3,a3,15
    9fe0e062:	0046969b          	slliw	a3,a3,0x4
    9fe0e066:	8bbd                	andi	a5,a5,15
    9fe0e068:	8b3d                	andi	a4,a4,15
    9fe0e06a:	0087171b          	slliw	a4,a4,0x8
    9fe0e06e:	8fd5                	or	a5,a5,a3
    9fe0e070:	8fd9                	or	a5,a5,a4
    9fe0e072:	00c6171b          	slliw	a4,a2,0xc
    9fe0e076:	8fd9                	or	a5,a5,a4
		write_stream(bs, (uint8_t *)(&out_c.code), sizeof(out_c.code) << 3);
    9fe0e078:	082c                	addi	a1,sp,24
    9fe0e07a:	4641                	li	a2,16
		CPY_C(color, out_c)
    9fe0e07c:	00f11c23          	sh	a5,24(sp)
		write_stream(bs, (uint8_t *)(&out_c.code), sizeof(out_c.code) << 3);
    9fe0e080:	d71ff0ef          	jal	ra,9fe0ddf0 <write_stream>
}
    9fe0e084:	70a2                	ld	ra,40(sp)
    9fe0e086:	6145                	addi	sp,sp,48
    9fe0e088:	8082                	ret
		write_stream(bs, (uint8_t *)(&color.a), 4);
    9fe0e08a:	4611                	li	a2,4
    9fe0e08c:	00b10593          	addi	a1,sp,11
    9fe0e090:	d61ff0ef          	jal	ra,9fe0ddf0 <write_stream>
}
    9fe0e094:	70a2                	ld	ra,40(sp)
    9fe0e096:	6145                	addi	sp,sp,48
    9fe0e098:	8082                	ret
		CPY_C(color, out_c)
    9fe0e09a:	00914683          	lbu	a3,9(sp)
    9fe0e09e:	00814783          	lbu	a5,8(sp)
    9fe0e0a2:	00a14703          	lbu	a4,10(sp)
    9fe0e0a6:	00b14603          	lbu	a2,11(sp)
    9fe0e0aa:	8afd                	andi	a3,a3,31
    9fe0e0ac:	0056969b          	slliw	a3,a3,0x5
    9fe0e0b0:	8bfd                	andi	a5,a5,31
    9fe0e0b2:	8b7d                	andi	a4,a4,31
    9fe0e0b4:	00a7171b          	slliw	a4,a4,0xa
    9fe0e0b8:	8fd5                	or	a5,a5,a3
    9fe0e0ba:	8fd9                	or	a5,a5,a4
    9fe0e0bc:	00f6171b          	slliw	a4,a2,0xf
    9fe0e0c0:	bf5d                	j	9fe0e076 <enc_literal+0x5c>

000000009fe0e0c2 <enc_mode_syntax>:
}

void enc_mode_syntax(StreamBuffer *bs, MODE_TYPE md, int run_len, CODE code,
			 OSDCmpr_Ctrl *p_ctrl)
{
	if (p_ctrl->reg_palette_mode_en) {
    9fe0e0c2:	01474783          	lbu	a5,20(a4)
{
    9fe0e0c6:	7139                	addi	sp,sp,-64
    9fe0e0c8:	f822                	sd	s0,48(sp)
    9fe0e0ca:	f426                	sd	s1,40(sp)
    9fe0e0cc:	f04a                	sd	s2,32(sp)
    9fe0e0ce:	ec4e                	sd	s3,24(sp)
    9fe0e0d0:	fc06                	sd	ra,56(sp)
    9fe0e0d2:	e852                	sd	s4,16(sp)
    9fe0e0d4:	84ba                	mv	s1,a4
    9fe0e0d6:	89aa                	mv	s3,a0
    9fe0e0d8:	8432                	mv	s0,a2
    9fe0e0da:	8936                	mv	s2,a3
	if (p_ctrl->reg_palette_mode_en) {
    9fe0e0dc:	cbbd                	beqz	a5,9fe0e152 <enc_mode_syntax+0x90>
		uint16_t _syntax;

		if (md == Palette) {
    9fe0e0de:	4785                	li	a5,1
    9fe0e0e0:	02f58f63          	beq	a1,a5,9fe0e11e <enc_mode_syntax+0x5c>
					3 + p_ctrl->reg_run_len_bd + p_ctrl->reg_palette_idx_bd);
			} else {
				_syntax = (code.palette_idx << 2) | 2;
				write_stream(bs, (uint8_t *)&_syntax,  p_ctrl->reg_palette_idx_bd + 2);
			}
		} else if (md == Literal) {
    9fe0e0e4:	edb9                	bnez	a1,9fe0e142 <enc_mode_syntax+0x80>
			if (run_len > 1) {
    9fe0e0e6:	0cc7da63          	bge	a5,a2,9fe0e1ba <enc_mode_syntax+0xf8>
				uint16_t _syntax = ((run_len - 1) << 3) | 4;

				write_stream(bs, (uint8_t *)&_syntax, 3 + p_ctrl->reg_run_len_bd);
    9fe0e0ea:	4f10                	lw	a2,24(a4)
				uint16_t _syntax = ((run_len - 1) << 3) | 4;
    9fe0e0ec:	fff4079b          	addiw	a5,s0,-1
    9fe0e0f0:	0037979b          	slliw	a5,a5,0x3
    9fe0e0f4:	0047e793          	ori	a5,a5,4
				write_stream(bs, (uint8_t *)&_syntax, 3 + p_ctrl->reg_run_len_bd);
    9fe0e0f8:	260d                	addiw	a2,a2,3
    9fe0e0fa:	00e10593          	addi	a1,sp,14
				uint16_t _syntax = ((run_len - 1) << 3) | 4;
    9fe0e0fe:	00f11723          	sh	a5,14(sp)
				write_stream(bs, (uint8_t *)&_syntax, 3 + p_ctrl->reg_run_len_bd);
    9fe0e102:	cefff0ef          	jal	ra,9fe0ddf0 <write_stream>

		write_stream(bs, &prefix, 1);
		enc_run_length(bs, run_len, p_ctrl->reg_run_len_bd);
		enc_literal(bs, code.color, p_ctrl->reg_osd_format);
	}
}
    9fe0e106:	7442                	ld	s0,48(sp)
			enc_literal(bs, code.color, p_ctrl->reg_osd_format);
    9fe0e108:	5090                	lw	a2,32(s1)
}
    9fe0e10a:	70e2                	ld	ra,56(sp)
    9fe0e10c:	74a2                	ld	s1,40(sp)
    9fe0e10e:	6a42                	ld	s4,16(sp)
			enc_literal(bs, code.color, p_ctrl->reg_osd_format);
    9fe0e110:	85ca                	mv	a1,s2
    9fe0e112:	854e                	mv	a0,s3
}
    9fe0e114:	7902                	ld	s2,32(sp)
    9fe0e116:	69e2                	ld	s3,24(sp)
    9fe0e118:	6121                	addi	sp,sp,64
			enc_literal(bs, code.color, p_ctrl->reg_osd_format);
    9fe0e11a:	f01ff06f          	j	9fe0e01a <enc_literal>
					3 + p_ctrl->reg_run_len_bd + p_ctrl->reg_palette_idx_bd);
    9fe0e11e:	4f50                	lw	a2,28(a4)
			if (run_len > 1) {
    9fe0e120:	0885d163          	bge	a1,s0,9fe0e1a2 <enc_mode_syntax+0xe0>
				_syntax = (code.palette_idx << (p_ctrl->reg_run_len_bd + 3)) |
    9fe0e124:	4f1c                	lw	a5,24(a4)
					((run_len - 1) << 3);
    9fe0e126:	347d                	addiw	s0,s0,-1
    9fe0e128:	0034141b          	slliw	s0,s0,0x3
				_syntax = (code.palette_idx << (p_ctrl->reg_run_len_bd + 3)) |
    9fe0e12c:	278d                	addiw	a5,a5,3
    9fe0e12e:	00f696bb          	sllw	a3,a3,a5
    9fe0e132:	8c55                	or	s0,s0,a3
				write_stream(bs, (uint8_t *)&_syntax,
    9fe0e134:	9e3d                	addw	a2,a2,a5
    9fe0e136:	00e10593          	addi	a1,sp,14
				_syntax = (code.palette_idx << (p_ctrl->reg_run_len_bd + 3)) |
    9fe0e13a:	00811723          	sh	s0,14(sp)
				write_stream(bs, (uint8_t *)&_syntax,
    9fe0e13e:	cb3ff0ef          	jal	ra,9fe0ddf0 <write_stream>
}
    9fe0e142:	70e2                	ld	ra,56(sp)
    9fe0e144:	7442                	ld	s0,48(sp)
    9fe0e146:	74a2                	ld	s1,40(sp)
    9fe0e148:	7902                	ld	s2,32(sp)
    9fe0e14a:	69e2                	ld	s3,24(sp)
    9fe0e14c:	6a42                	ld	s4,16(sp)
    9fe0e14e:	6121                	addi	sp,sp,64
    9fe0e150:	8082                	ret
		uint8_t prefix = (run_len > 1) ? 0 : 1;
    9fe0e152:	00262793          	slti	a5,a2,2
    9fe0e156:	4a05                	li	s4,1
		write_stream(bs, &prefix, 1);
    9fe0e158:	4605                	li	a2,1
    9fe0e15a:	00d10593          	addi	a1,sp,13
		uint8_t prefix = (run_len > 1) ? 0 : 1;
    9fe0e15e:	00f106a3          	sb	a5,13(sp)
		write_stream(bs, &prefix, 1);
    9fe0e162:	c8fff0ef          	jal	ra,9fe0ddf0 <write_stream>
	if (run_len > 1) {
    9fe0e166:	008a4f63          	blt	s4,s0,9fe0e184 <enc_mode_syntax+0xc2>
		enc_literal(bs, code.color, p_ctrl->reg_osd_format);
    9fe0e16a:	5090                	lw	a2,32(s1)
    9fe0e16c:	85ca                	mv	a1,s2
    9fe0e16e:	854e                	mv	a0,s3
    9fe0e170:	eabff0ef          	jal	ra,9fe0e01a <enc_literal>
}
    9fe0e174:	70e2                	ld	ra,56(sp)
    9fe0e176:	7442                	ld	s0,48(sp)
    9fe0e178:	74a2                	ld	s1,40(sp)
    9fe0e17a:	7902                	ld	s2,32(sp)
    9fe0e17c:	69e2                	ld	s3,24(sp)
    9fe0e17e:	6a42                	ld	s4,16(sp)
    9fe0e180:	6121                	addi	sp,sp,64
    9fe0e182:	8082                	ret
		write_stream(bs, &run_syntax, run_len_bd);
    9fe0e184:	4c90                	lw	a2,24(s1)
    9fe0e186:	00e10593          	addi	a1,sp,14
    9fe0e18a:	854e                	mv	a0,s3
		uint8_t run_syntax = run_len - 1;
    9fe0e18c:	347d                	addiw	s0,s0,-1
    9fe0e18e:	00810723          	sb	s0,14(sp)
		write_stream(bs, &run_syntax, run_len_bd);
    9fe0e192:	c5fff0ef          	jal	ra,9fe0ddf0 <write_stream>
		enc_literal(bs, code.color, p_ctrl->reg_osd_format);
    9fe0e196:	5090                	lw	a2,32(s1)
    9fe0e198:	85ca                	mv	a1,s2
    9fe0e19a:	854e                	mv	a0,s3
    9fe0e19c:	e7fff0ef          	jal	ra,9fe0e01a <enc_literal>
    9fe0e1a0:	bfd1                	j	9fe0e174 <enc_mode_syntax+0xb2>
				_syntax = (code.palette_idx << 2) | 2;
    9fe0e1a2:	0026969b          	slliw	a3,a3,0x2
    9fe0e1a6:	0026e693          	ori	a3,a3,2
				write_stream(bs, (uint8_t *)&_syntax,  p_ctrl->reg_palette_idx_bd + 2);
    9fe0e1aa:	2609                	addiw	a2,a2,2
    9fe0e1ac:	00e10593          	addi	a1,sp,14
				_syntax = (code.palette_idx << 2) | 2;
    9fe0e1b0:	00d11723          	sh	a3,14(sp)
				write_stream(bs, (uint8_t *)&_syntax,  p_ctrl->reg_palette_idx_bd + 2);
    9fe0e1b4:	c3dff0ef          	jal	ra,9fe0ddf0 <write_stream>
    9fe0e1b8:	b769                	j	9fe0e142 <enc_mode_syntax+0x80>
				write_stream(bs, &lit_prefix, 1);
    9fe0e1ba:	4605                	li	a2,1
    9fe0e1bc:	00e10593          	addi	a1,sp,14
				uint8_t lit_prefix = 1;
    9fe0e1c0:	00f10723          	sb	a5,14(sp)
				write_stream(bs, &lit_prefix, 1);
    9fe0e1c4:	c2dff0ef          	jal	ra,9fe0ddf0 <write_stream>
    9fe0e1c8:	bf3d                	j	9fe0e106 <enc_mode_syntax+0x44>

000000009fe0e1ca <osd_cmpr_enc_header>:
		}
	}
}

void osd_cmpr_enc_header(uint8_t *hdrbuf, OSDCmpr_Ctrl *p_ctrl)
{
    9fe0e1ca:	7139                	addi	sp,sp,-64
    9fe0e1cc:	f822                	sd	s0,48(sp)
    9fe0e1ce:	fc06                	sd	ra,56(sp)
	StreamBuffer bs_header;
	size_t width_m1 = p_ctrl->reg_image_width - 1;
    9fe0e1d0:	4198                	lw	a4,0(a1)
	size_t height_m1 = p_ctrl->reg_image_height - 1;
    9fe0e1d2:	41dc                	lw	a5,4(a1)
	bs->bit_pos = 0;
    9fe0e1d4:	4685                	li	a3,1
	size_t width_m1 = p_ctrl->reg_image_width - 1;
    9fe0e1d6:	377d                	addiw	a4,a4,-1
	size_t height_m1 = p_ctrl->reg_image_height - 1;
    9fe0e1d8:	37fd                	addiw	a5,a5,-1
	bs->bit_pos = 0;
    9fe0e1da:	02369813          	slli	a6,a3,0x23
		memset((uint8_t *)buf, 0, sizeof(uint8_t) * buf_size);
    9fe0e1de:	4621                	li	a2,8
{
    9fe0e1e0:	842e                	mv	s0,a1
		memset((uint8_t *)buf, 0, sizeof(uint8_t) * buf_size);
    9fe0e1e2:	4581                	li	a1,0
	size_t width_m1 = p_ctrl->reg_image_width - 1;
    9fe0e1e4:	e03a                	sd	a4,0(sp)
	size_t height_m1 = p_ctrl->reg_image_height - 1;
    9fe0e1e6:	e43e                	sd	a5,8(sp)
	bs->status = 1;
    9fe0e1e8:	d436                	sw	a3,40(sp)
	bs->stream = (uint8_t *)buf;
    9fe0e1ea:	ec2a                	sd	a0,24(sp)
	bs->bit_pos = 0;
    9fe0e1ec:	f042                	sd	a6,32(sp)
		memset((uint8_t *)buf, 0, sizeof(uint8_t) * buf_size);
    9fe0e1ee:	d8ffd0ef          	jal	ra,9fe0bf7c <memset>
	bs->bit_pos = MIN(bs->bit_pos + bit_len, (bs->buf_size << 3));
    9fe0e1f2:	5792                	lw	a5,36(sp)
    9fe0e1f4:	5702                	lw	a4,32(sp)
    9fe0e1f6:	0037961b          	slliw	a2,a5,0x3
    9fe0e1fa:	0087069b          	addiw	a3,a4,8
    9fe0e1fe:	87b2                	mv	a5,a2
    9fe0e200:	00c6d363          	bge	a3,a2,9fe0e206 <osd_cmpr_enc_header+0x3c>
    9fe0e204:	87b6                	mv	a5,a3

	init_stream(&bs_header, hdrbuf, HDR_SZ, false);
	move_stream_ptr(&bs_header, 8); // bit[0:7] version
	write_stream(&bs_header, (uint8_t *)&p_ctrl->reg_osd_format,  4); // bit[8:11] osd_format
    9fe0e206:	4611                	li	a2,4
    9fe0e208:	02040593          	addi	a1,s0,32
    9fe0e20c:	0828                	addi	a0,sp,24
	bs->bit_pos = MIN(bs->bit_pos + bit_len, (bs->buf_size << 3));
    9fe0e20e:	d03e                	sw	a5,32(sp)
	write_stream(&bs_header, (uint8_t *)&p_ctrl->reg_osd_format,  4); // bit[8:11] osd_format
    9fe0e210:	be1ff0ef          	jal	ra,9fe0ddf0 <write_stream>
	bs->bit_pos = MIN(bs->bit_pos + bit_len, (bs->buf_size << 3));
    9fe0e214:	5792                	lw	a5,36(sp)
    9fe0e216:	5702                	lw	a4,32(sp)
    9fe0e218:	0037961b          	slliw	a2,a5,0x3
    9fe0e21c:	0037069b          	addiw	a3,a4,3
    9fe0e220:	87b2                	mv	a5,a2
    9fe0e222:	00c6d363          	bge	a3,a2,9fe0e228 <osd_cmpr_enc_header+0x5e>
    9fe0e226:	87b6                	mv	a5,a3
	move_stream_ptr(&bs_header, 3); // bit[12:14] reserved
	size_t palette_cache_size = 1 << p_ctrl->reg_palette_idx_bd;
    9fe0e228:	4c54                	lw	a3,28(s0)
    9fe0e22a:	4705                	li	a4,1

	write_stream(&bs_header, (uint8_t *)&palette_cache_size,
    9fe0e22c:	4621                	li	a2,8
	size_t palette_cache_size = 1 << p_ctrl->reg_palette_idx_bd;
    9fe0e22e:	00d7173b          	sllw	a4,a4,a3
	write_stream(&bs_header, (uint8_t *)&palette_cache_size,
    9fe0e232:	080c                	addi	a1,sp,16
    9fe0e234:	0828                	addi	a0,sp,24
	bs->bit_pos = MIN(bs->bit_pos + bit_len, (bs->buf_size << 3));
    9fe0e236:	d03e                	sw	a5,32(sp)
	size_t palette_cache_size = 1 << p_ctrl->reg_palette_idx_bd;
    9fe0e238:	e83a                	sd	a4,16(sp)
	write_stream(&bs_header, (uint8_t *)&palette_cache_size,
    9fe0e23a:	bb7ff0ef          	jal	ra,9fe0ddf0 <write_stream>
			 8); // bit[15:22] palette_cache_size
	write_stream(&bs_header, (uint8_t *)&p_ctrl->reg_alpha_trunc_bit,
    9fe0e23e:	4609                	li	a2,2
    9fe0e240:	01040593          	addi	a1,s0,16
    9fe0e244:	0828                	addi	a0,sp,24
    9fe0e246:	babff0ef          	jal	ra,9fe0ddf0 <write_stream>
	bs->bit_pos = MIN(bs->bit_pos + bit_len, (bs->buf_size << 3));
    9fe0e24a:	5792                	lw	a5,36(sp)
    9fe0e24c:	5702                	lw	a4,32(sp)
    9fe0e24e:	0037961b          	slliw	a2,a5,0x3
    9fe0e252:	0027069b          	addiw	a3,a4,2
    9fe0e256:	87b2                	mv	a5,a2
    9fe0e258:	00c6d363          	bge	a3,a2,9fe0e25e <osd_cmpr_enc_header+0x94>
    9fe0e25c:	87b6                	mv	a5,a3
			 2); // bit[23:24] alpha truncate
	move_stream_ptr(&bs_header, 2); // bit[25:26] reserved
	write_stream(&bs_header, (uint8_t *)&p_ctrl->reg_rgb_trunc_bit,
    9fe0e25e:	4609                	li	a2,2
    9fe0e260:	00c40593          	addi	a1,s0,12
    9fe0e264:	0828                	addi	a0,sp,24
	bs->bit_pos = MIN(bs->bit_pos + bit_len, (bs->buf_size << 3));
    9fe0e266:	d03e                	sw	a5,32(sp)
	write_stream(&bs_header, (uint8_t *)&p_ctrl->reg_rgb_trunc_bit,
    9fe0e268:	b89ff0ef          	jal	ra,9fe0ddf0 <write_stream>
	bs->bit_pos = MIN(bs->bit_pos + bit_len, (bs->buf_size << 3));
    9fe0e26c:	5792                	lw	a5,36(sp)
    9fe0e26e:	5702                	lw	a4,32(sp)
    9fe0e270:	0037961b          	slliw	a2,a5,0x3
    9fe0e274:	0027069b          	addiw	a3,a4,2
    9fe0e278:	87b2                	mv	a5,a2
    9fe0e27a:	00c6d363          	bge	a3,a2,9fe0e280 <osd_cmpr_enc_header+0xb6>
    9fe0e27e:	87b6                	mv	a5,a3
			 2); // bit[27:28] rgb truncate
	move_stream_ptr(&bs_header, 2); // bit[29:30] reserved
	write_stream(&bs_header, (uint8_t *)&width_m1,
    9fe0e280:	858a                	mv	a1,sp
    9fe0e282:	0828                	addi	a0,sp,24
    9fe0e284:	4641                	li	a2,16
	bs->bit_pos = MIN(bs->bit_pos + bit_len, (bs->buf_size << 3));
    9fe0e286:	d03e                	sw	a5,32(sp)
	write_stream(&bs_header, (uint8_t *)&width_m1,
    9fe0e288:	b69ff0ef          	jal	ra,9fe0ddf0 <write_stream>
			 16); // bit[31:46] image_width minus 1
	write_stream(&bs_header, (uint8_t *)&height_m1,
    9fe0e28c:	002c                	addi	a1,sp,8
    9fe0e28e:	0828                	addi	a0,sp,24
    9fe0e290:	4641                	li	a2,16
    9fe0e292:	b5fff0ef          	jal	ra,9fe0ddf0 <write_stream>
			 16); // bit[47:62] image_height minus 1
}
    9fe0e296:	70e2                	ld	ra,56(sp)
    9fe0e298:	7442                	ld	s0,48(sp)
    9fe0e29a:	6121                	addi	sp,sp,64
    9fe0e29c:	8082                	ret

000000009fe0e29e <osd_cmpr_enc_followed_run>:
}

void osd_cmpr_enc_followed_run(RGBA cur_c, int *rl_cnt, MODE_TYPE *md,
				   CODE *code, uint16_t *length, uint16_t max_run_len,
				   OSDCmpr_Ctrl *p_ctrl, StreamBuffer *bitstream)
{
    9fe0e29e:	7139                	addi	sp,sp,-64
    9fe0e2a0:	f822                	sd	s0,48(sp)
    9fe0e2a2:	f426                	sd	s1,40(sp)
    9fe0e2a4:	f04a                	sd	s2,32(sp)
    9fe0e2a6:	ec4e                	sd	s3,24(sp)
    9fe0e2a8:	e852                	sd	s4,16(sp)
    9fe0e2aa:	e456                	sd	s5,8(sp)
    9fe0e2ac:	e05a                	sd	s6,0(sp)
    9fe0e2ae:	fc06                	sd	ra,56(sp)
    9fe0e2b0:	84b2                	mv	s1,a2
    9fe0e2b2:	89ae                	mv	s3,a1
	enc_mode_syntax(bitstream, *md, *rl_cnt, *code, p_ctrl);
    9fe0e2b4:	4190                	lw	a2,0(a1)
{
    9fe0e2b6:	8936                	mv	s2,a3
	enc_mode_syntax(bitstream, *md, *rl_cnt, *code, p_ctrl);
    9fe0e2b8:	408c                	lw	a1,0(s1)
    9fe0e2ba:	4294                	lw	a3,0(a3)
{
    9fe0e2bc:	843a                	mv	s0,a4
    9fe0e2be:	8b2a                	mv	s6,a0
	enc_mode_syntax(bitstream, *md, *rl_cnt, *code, p_ctrl);
    9fe0e2c0:	8742                	mv	a4,a6
    9fe0e2c2:	8546                	mv	a0,a7
{
    9fe0e2c4:	8abe                	mv	s5,a5
    9fe0e2c6:	8a42                	mv	s4,a6
	enc_mode_syntax(bitstream, *md, *rl_cnt, *code, p_ctrl);
    9fe0e2c8:	dfbff0ef          	jal	ra,9fe0e0c2 <enc_mode_syntax>
	*rl_cnt = MIN(*length, max_run_len);
    9fe0e2cc:	00045883          	lhu	a7,0(s0)
    9fe0e2d0:	03089793          	slli	a5,a7,0x30
    9fe0e2d4:	93c1                	srli	a5,a5,0x30
    9fe0e2d6:	00faf363          	bgeu	s5,a5,9fe0e2dc <osd_cmpr_enc_followed_run+0x3e>
    9fe0e2da:	88d6                	mv	a7,s5
    9fe0e2dc:	18c2                	slli	a7,a7,0x30
    9fe0e2de:	0308d893          	srli	a7,a7,0x30
    9fe0e2e2:	0119a023          	sw	a7,0(s3)
	*length -= *rl_cnt;
    9fe0e2e6:	00045783          	lhu	a5,0(s0)
	// followed run must select Palette idx 0
	if (*md != Palette || (*md == Palette && code->palette_idx != 0)) {
    9fe0e2ea:	4705                	li	a4,1
	*length -= *rl_cnt;
    9fe0e2ec:	411788bb          	subw	a7,a5,a7
    9fe0e2f0:	01141023          	sh	a7,0(s0)
	if (*md != Palette || (*md == Palette && code->palette_idx != 0)) {
    9fe0e2f4:	409c                	lw	a5,0(s1)
    9fe0e2f6:	02e78863          	beq	a5,a4,9fe0e326 <osd_cmpr_enc_followed_run+0x88>
		if (p_ctrl->reg_palette_mode_en) {
    9fe0e2fa:	014a4783          	lbu	a5,20(s4)
    9fe0e2fe:	ef99                	bnez	a5,9fe0e31c <osd_cmpr_enc_followed_run+0x7e>
			code->palette_idx = 0;
			*md = Palette;
		} else {
			code->color = cur_c;
    9fe0e300:	01692023          	sw	s6,0(s2)
			*md = Literal;
    9fe0e304:	0004a023          	sw	zero,0(s1)
		}
	}
}
    9fe0e308:	70e2                	ld	ra,56(sp)
    9fe0e30a:	7442                	ld	s0,48(sp)
    9fe0e30c:	74a2                	ld	s1,40(sp)
    9fe0e30e:	7902                	ld	s2,32(sp)
    9fe0e310:	69e2                	ld	s3,24(sp)
    9fe0e312:	6a42                	ld	s4,16(sp)
    9fe0e314:	6aa2                	ld	s5,8(sp)
    9fe0e316:	6b02                	ld	s6,0(sp)
    9fe0e318:	6121                	addi	sp,sp,64
    9fe0e31a:	8082                	ret
			code->palette_idx = 0;
    9fe0e31c:	00092023          	sw	zero,0(s2)
			*md = Palette;
    9fe0e320:	4785                	li	a5,1
    9fe0e322:	c09c                	sw	a5,0(s1)
    9fe0e324:	b7d5                	j	9fe0e308 <osd_cmpr_enc_followed_run+0x6a>
	if (*md != Palette || (*md == Palette && code->palette_idx != 0)) {
    9fe0e326:	00092783          	lw	a5,0(s2)
    9fe0e32a:	dff9                	beqz	a5,9fe0e308 <osd_cmpr_enc_followed_run+0x6a>
    9fe0e32c:	b7f9                	j	9fe0e2fa <osd_cmpr_enc_followed_run+0x5c>

000000009fe0e32e <osd_cmpr_enc_const_pixel>:

void osd_cmpr_enc_const_pixel(RGBA cur_c, RGBA *last_c, int *rl_cnt,
				  MODE_TYPE *md, CODE *code, uint16_t *length,
				  bool is_force_new_run, uint16_t max_run_len,
				  OSDCmpr_Ctrl *p_ctrl, StreamBuffer *bitstream)
{
    9fe0e32e:	715d                	addi	sp,sp,-80
    9fe0e330:	e0a2                	sd	s0,64(sp)
    9fe0e332:	fc26                	sd	s1,56(sp)
    9fe0e334:	f84a                	sd	s2,48(sp)
    9fe0e336:	f44e                	sd	s3,40(sp)
    9fe0e338:	f052                	sd	s4,32(sp)
    9fe0e33a:	ec56                	sd	s5,24(sp)
    9fe0e33c:	e85a                	sd	s6,16(sp)
    9fe0e33e:	e45e                	sd	s7,8(sp)
    9fe0e340:	e062                	sd	s8,0(sp)
    9fe0e342:	e486                	sd	ra,72(sp)
	if ((!is_equal_color(cur_c, *last_c)) || is_force_new_run ||
    9fe0e344:	0005a303          	lw	t1,0(a1)
{
    9fe0e348:	892e                	mv	s2,a1
    9fe0e34a:	0005059b          	sext.w	a1,a0
    9fe0e34e:	8bb2                	mv	s7,a2
    9fe0e350:	6b46                	ld	s6,80(sp)
		(*rl_cnt == max_run_len)) {
    9fe0e352:	4210                	lw	a2,0(a2)
{
    9fe0e354:	84ae                	mv	s1,a1
    9fe0e356:	8a36                	mv	s4,a3
    9fe0e358:	8aba                	mv	s5,a4
    9fe0e35a:	843e                	mv	s0,a5
    9fe0e35c:	89c6                	mv	s3,a7
    9fe0e35e:	00088c1b          	sext.w	s8,a7
	if ((!is_equal_color(cur_c, *last_c)) || is_force_new_run ||
    9fe0e362:	00b31463          	bne	t1,a1,9fe0e36a <osd_cmpr_enc_const_pixel+0x3c>
    9fe0e366:	06080263          	beqz	a6,9fe0e3ca <osd_cmpr_enc_const_pixel+0x9c>
		// new run
		enc_mode_syntax(bitstream, *md, *rl_cnt, *code, p_ctrl);
    9fe0e36a:	000aa683          	lw	a3,0(s5)
    9fe0e36e:	000a2583          	lw	a1,0(s4)
    9fe0e372:	6566                	ld	a0,88(sp)
    9fe0e374:	875a                	mv	a4,s6
    9fe0e376:	d4dff0ef          	jal	ra,9fe0e0c2 <enc_mode_syntax>
		// mode detection
		int cache_idx = (p_ctrl->reg_palette_mode_en) ?
					palette_cache_lookup_color(&p_ctrl->palette_cache, cur_c) : -1;
    9fe0e37a:	014b4783          	lbu	a5,20(s6)
    9fe0e37e:	ebad                	bnez	a5,9fe0e3f0 <osd_cmpr_enc_const_pixel+0xc2>
		if (cache_idx >= 0) { // cache hit
			code->palette_idx = cache_idx;
			*md = Palette;
		} else { // cache miss
			code->color = cur_c;
    9fe0e380:	009aa023          	sw	s1,0(s5)
			*md = Literal;
    9fe0e384:	000a2023          	sw	zero,0(s4)
		}
		*rl_cnt = MIN(*length, max_run_len);
    9fe0e388:	00045783          	lhu	a5,0(s0)
    9fe0e38c:	03079713          	slli	a4,a5,0x30
    9fe0e390:	9341                	srli	a4,a4,0x30
    9fe0e392:	02ec6a63          	bltu	s8,a4,9fe0e3c6 <osd_cmpr_enc_const_pixel+0x98>
    9fe0e396:	17c2                	slli	a5,a5,0x30
    9fe0e398:	93c1                	srli	a5,a5,0x30
    9fe0e39a:	00fba023          	sw	a5,0(s7)
		*length -= *rl_cnt;
    9fe0e39e:	00045703          	lhu	a4,0(s0)
    9fe0e3a2:	40f707bb          	subw	a5,a4,a5
    9fe0e3a6:	00f41023          	sh	a5,0(s0)
		*last_c = cur_c;
    9fe0e3aa:	00992023          	sw	s1,0(s2)
	} else { // still within a run
		int new_rl_cnt = MIN((uint16_t)(*rl_cnt + *length), max_run_len);
		*length -= (new_rl_cnt - *rl_cnt);
		*rl_cnt = new_rl_cnt;
	}
}
    9fe0e3ae:	60a6                	ld	ra,72(sp)
    9fe0e3b0:	6406                	ld	s0,64(sp)
    9fe0e3b2:	74e2                	ld	s1,56(sp)
    9fe0e3b4:	7942                	ld	s2,48(sp)
    9fe0e3b6:	79a2                	ld	s3,40(sp)
    9fe0e3b8:	7a02                	ld	s4,32(sp)
    9fe0e3ba:	6ae2                	ld	s5,24(sp)
    9fe0e3bc:	6b42                	ld	s6,16(sp)
    9fe0e3be:	6ba2                	ld	s7,8(sp)
    9fe0e3c0:	6c02                	ld	s8,0(sp)
    9fe0e3c2:	6161                	addi	sp,sp,80
    9fe0e3c4:	8082                	ret
		*rl_cnt = MIN(*length, max_run_len);
    9fe0e3c6:	87ce                	mv	a5,s3
    9fe0e3c8:	b7f9                	j	9fe0e396 <osd_cmpr_enc_const_pixel+0x68>
	if ((!is_equal_color(cur_c, *last_c)) || is_force_new_run ||
    9fe0e3ca:	fac880e3          	beq	a7,a2,9fe0e36a <osd_cmpr_enc_const_pixel+0x3c>
		int new_rl_cnt = MIN((uint16_t)(*rl_cnt + *length), max_run_len);
    9fe0e3ce:	0007d783          	lhu	a5,0(a5) # 1000000 <CVIMMAP_FSBL_UNZIP_SIZE>
    9fe0e3d2:	9e3d                	addw	a2,a2,a5
    9fe0e3d4:	1642                	slli	a2,a2,0x30
    9fe0e3d6:	9241                	srli	a2,a2,0x30
    9fe0e3d8:	87b2                	mv	a5,a2
    9fe0e3da:	00cc7363          	bgeu	s8,a2,9fe0e3e0 <osd_cmpr_enc_const_pixel+0xb2>
    9fe0e3de:	87c6                	mv	a5,a7
    9fe0e3e0:	17c2                	slli	a5,a5,0x30
    9fe0e3e2:	93c1                	srli	a5,a5,0x30
		*length -= (new_rl_cnt - *rl_cnt);
    9fe0e3e4:	9e1d                	subw	a2,a2,a5
    9fe0e3e6:	00c41023          	sh	a2,0(s0)
		int new_rl_cnt = MIN((uint16_t)(*rl_cnt + *length), max_run_len);
    9fe0e3ea:	00fba023          	sw	a5,0(s7)
}
    9fe0e3ee:	b7c1                	j	9fe0e3ae <osd_cmpr_enc_const_pixel+0x80>
					palette_cache_lookup_color(&p_ctrl->palette_cache, cur_c) : -1;
    9fe0e3f0:	85a6                	mv	a1,s1
    9fe0e3f2:	028b0513          	addi	a0,s6,40
    9fe0e3f6:	b93ff0ef          	jal	ra,9fe0df88 <palette_cache_lookup_color>
		if (cache_idx >= 0) { // cache hit
    9fe0e3fa:	f80543e3          	bltz	a0,9fe0e380 <osd_cmpr_enc_const_pixel+0x52>
			code->palette_idx = cache_idx;
    9fe0e3fe:	00aaa023          	sw	a0,0(s5)
			*md = Palette;
    9fe0e402:	4785                	li	a5,1
    9fe0e404:	00fa2023          	sw	a5,0(s4)
    9fe0e408:	b741                	j	9fe0e388 <osd_cmpr_enc_const_pixel+0x5a>

000000009fe0e40a <osd_cmpr_frame_init>:
		ptr1 += p_ctrl->pel_sz;
	}
}

void osd_cmpr_frame_init(OSDCmpr_Ctrl *p_ctrl)
{
    9fe0e40a:	1101                	addi	sp,sp,-32
    9fe0e40c:	e822                	sd	s0,16(sp)
    9fe0e40e:	e426                	sd	s1,8(sp)
    9fe0e410:	ec06                	sd	ra,24(sp)
    9fe0e412:	842a                	mv	s0,a0
	p_ctrl->palette_cache.color = (RGBA *)malloc((1 << p_ctrl->reg_palette_idx_bd) * sizeof(RGBA));
    9fe0e414:	4d48                	lw	a0,28(a0)
    9fe0e416:	4485                	li	s1,1
    9fe0e418:	00a4953b          	sllw	a0,s1,a0
    9fe0e41c:	050a                	slli	a0,a0,0x2
    9fe0e41e:	158000ef          	jal	ra,9fe0e576 <pvPortMalloc>
    9fe0e422:	f408                	sd	a0,40(s0)
	if (p_ctrl->palette_cache.color == NULL) {
		printf("(%s) malloc(%d) failed!\n",
			__func__, (int)((1 << p_ctrl->reg_palette_idx_bd) * sizeof(RGBA)));
    9fe0e424:	4c50                	lw	a2,28(s0)
	if (p_ctrl->palette_cache.color == NULL) {
    9fe0e426:	c115                	beqz	a0,9fe0e44a <osd_cmpr_frame_init+0x40>
		return;
	}
	memset(p_ctrl->palette_cache.color, 0x0, (1 << p_ctrl->reg_palette_idx_bd) * sizeof(RGBA));
    9fe0e428:	00c4963b          	sllw	a2,s1,a2
    9fe0e42c:	4581                	li	a1,0
    9fe0e42e:	060a                	slli	a2,a2,0x2
    9fe0e430:	b4dfd0ef          	jal	ra,9fe0bf7c <memset>
	palette_cache_init(&p_ctrl->palette_cache, 1 << p_ctrl->reg_palette_idx_bd);
    9fe0e434:	4c4c                	lw	a1,28(s0)
    9fe0e436:	02840513          	addi	a0,s0,40
}
    9fe0e43a:	6442                	ld	s0,16(sp)
    9fe0e43c:	60e2                	ld	ra,24(sp)
	palette_cache_init(&p_ctrl->palette_cache, 1 << p_ctrl->reg_palette_idx_bd);
    9fe0e43e:	00b495bb          	sllw	a1,s1,a1
}
    9fe0e442:	64a2                	ld	s1,8(sp)
    9fe0e444:	6105                	addi	sp,sp,32
	palette_cache_init(&p_ctrl->palette_cache, 1 << p_ctrl->reg_palette_idx_bd);
    9fe0e446:	acdff06f          	j	9fe0df12 <palette_cache_init>
}
    9fe0e44a:	6442                	ld	s0,16(sp)
    9fe0e44c:	60e2                	ld	ra,24(sp)
			__func__, (int)((1 << p_ctrl->reg_palette_idx_bd) * sizeof(RGBA)));
    9fe0e44e:	00c4963b          	sllw	a2,s1,a2
}
    9fe0e452:	64a2                	ld	s1,8(sp)
		printf("(%s) malloc(%d) failed!\n",
    9fe0e454:	00004597          	auipc	a1,0x4
    9fe0e458:	d6458593          	addi	a1,a1,-668 # 9fe121b8 <__func__.1>
    9fe0e45c:	00004517          	auipc	a0,0x4
    9fe0e460:	d3c50513          	addi	a0,a0,-708 # 9fe12198 <__func__.0+0x18>
    9fe0e464:	0026161b          	slliw	a2,a2,0x2
}
    9fe0e468:	6105                	addi	sp,sp,32
		printf("(%s) malloc(%d) failed!\n",
    9fe0e46a:	b2bfd06f          	j	9fe0bf94 <printf>

000000009fe0e46e <osd_cmpr_get_pixel_sz>:
}

size_t osd_cmpr_get_pixel_sz(OSD_FORMAT format)
{
	return (format == OSD_ARGB8888) ?
			   4 : ((format == OSD_ARGB1555 || format == OSD_ARGB4444) ? 2 : 1); // (OSD_LUT8, OSD_LUT4)
    9fe0e46e:	c511                	beqz	a0,9fe0e47a <osd_cmpr_get_pixel_sz+0xc>
    9fe0e470:	3571                	addiw	a0,a0,-4
    9fe0e472:	00253513          	sltiu	a0,a0,2
    9fe0e476:	0505                	addi	a0,a0,1
    9fe0e478:	8082                	ret
    9fe0e47a:	4511                	li	a0,4
};
    9fe0e47c:	8082                	ret

000000009fe0e47e <osd_cmpr_get_header_sz>:
}

size_t osd_cmpr_get_header_sz(void)
{
	return HDR_SZ;
}
    9fe0e47e:	4521                	li	a0,8
    9fe0e480:	8082                	ret

000000009fe0e482 <hal_uart_init>:

static struct dw_regs *uart = 0;

void hal_uart_init(device_uart dev_uart, int baudrate, int uart_clock)
{
	int divisor = uart_clock / (16 * baudrate);
    9fe0e482:	0045959b          	slliw	a1,a1,0x4
	switch (dev_uart) {
    9fe0e486:	4789                	li	a5,2
	int divisor = uart_clock / (16 * baudrate);
    9fe0e488:	02b6463b          	divw	a2,a2,a1
	switch (dev_uart) {
    9fe0e48c:	04f50f63          	beq	a0,a5,9fe0e4ea <hal_uart_init+0x68>
    9fe0e490:	04a7e363          	bltu	a5,a0,9fe0e4d6 <hal_uart_init+0x54>
    9fe0e494:	c53d                	beqz	a0,9fe0e502 <hal_uart_init+0x80>
		case UART0:
			uart = (struct dw_regs *)UART0_BASE;
			break;
		case UART1:
			uart = (struct dw_regs *)UART1_BASE;
    9fe0e496:	041507b7          	lui	a5,0x4150
    9fe0e49a:	00011717          	auipc	a4,0x11
    9fe0e49e:	76f73723          	sd	a5,1902(a4) # 9fe1fc08 <uart>
			uart = (struct dw_regs *)UART3_BASE;
			break;
		default:
			break;
	}
	uart->lcr = uart->lcr | UART_LCR_DLAB | UART_LCR_8N1;
    9fe0e4a2:	47d8                	lw	a4,12(a5)
	uart->dll = divisor & 0xff;
    9fe0e4a4:	0ff67693          	andi	a3,a2,255
	uart->dlm = (divisor >> 8) & 0xff;
    9fe0e4a8:	4086561b          	sraiw	a2,a2,0x8
	uart->lcr = uart->lcr | UART_LCR_DLAB | UART_LCR_8N1;
    9fe0e4ac:	2701                	sext.w	a4,a4
    9fe0e4ae:	08376713          	ori	a4,a4,131
    9fe0e4b2:	c7d8                	sw	a4,12(a5)
	uart->dll = divisor & 0xff;
    9fe0e4b4:	c394                	sw	a3,0(a5)
	uart->dlm = (divisor >> 8) & 0xff;
    9fe0e4b6:	0ff67613          	andi	a2,a2,255
    9fe0e4ba:	c3d0                	sw	a2,4(a5)
	uart->lcr = uart->lcr & (~UART_LCR_DLAB);
    9fe0e4bc:	47d8                	lw	a4,12(a5)

	uart->ier = 0;
	uart->mcr = UART_MCRVAL;
    9fe0e4be:	468d                	li	a3,3
	uart->lcr = uart->lcr & (~UART_LCR_DLAB);
    9fe0e4c0:	2701                	sext.w	a4,a4
    9fe0e4c2:	f7f77713          	andi	a4,a4,-129
    9fe0e4c6:	c7d8                	sw	a4,12(a5)
	uart->ier = 0;
    9fe0e4c8:	0007a223          	sw	zero,4(a5) # 4150004 <CVIMMAP_FREERTOS_RESERVED_ION_SIZE+0x2b50004>
	uart->mcr = UART_MCRVAL;
    9fe0e4cc:	cb94                	sw	a3,16(a5)
	uart->fcr = UART_FCR_DEFVAL;
    9fe0e4ce:	471d                	li	a4,7
    9fe0e4d0:	c798                	sw	a4,8(a5)

	uart->lcr = 3;
    9fe0e4d2:	c7d4                	sw	a3,12(a5)
}
    9fe0e4d4:	8082                	ret
	switch (dev_uart) {
    9fe0e4d6:	478d                	li	a5,3
    9fe0e4d8:	02f51063          	bne	a0,a5,9fe0e4f8 <hal_uart_init+0x76>
			uart = (struct dw_regs *)UART3_BASE;
    9fe0e4dc:	041707b7          	lui	a5,0x4170
    9fe0e4e0:	00011717          	auipc	a4,0x11
    9fe0e4e4:	72f73423          	sd	a5,1832(a4) # 9fe1fc08 <uart>
			break;
    9fe0e4e8:	bf6d                	j	9fe0e4a2 <hal_uart_init+0x20>
			uart = (struct dw_regs *)UART2_BASE;
    9fe0e4ea:	041607b7          	lui	a5,0x4160
    9fe0e4ee:	00011717          	auipc	a4,0x11
    9fe0e4f2:	70f73d23          	sd	a5,1818(a4) # 9fe1fc08 <uart>
			break;
    9fe0e4f6:	b775                	j	9fe0e4a2 <hal_uart_init+0x20>
	uart->lcr = uart->lcr | UART_LCR_DLAB | UART_LCR_8N1;
    9fe0e4f8:	00011797          	auipc	a5,0x11
    9fe0e4fc:	7107b783          	ld	a5,1808(a5) # 9fe1fc08 <uart>
    9fe0e500:	b74d                	j	9fe0e4a2 <hal_uart_init+0x20>
			uart = (struct dw_regs *)UART0_BASE;
    9fe0e502:	041407b7          	lui	a5,0x4140
    9fe0e506:	00011717          	auipc	a4,0x11
    9fe0e50a:	70f73123          	sd	a5,1794(a4) # 9fe1fc08 <uart>
			break;
    9fe0e50e:	bf51                	j	9fe0e4a2 <hal_uart_init+0x20>

000000009fe0e510 <hal_uart_putc>:

void hal_uart_putc(uint8_t ch)
{
	while (!(uart->lsr & UART_LSR_THRE))
    9fe0e510:	00011717          	auipc	a4,0x11
    9fe0e514:	6f873703          	ld	a4,1784(a4) # 9fe1fc08 <uart>
    9fe0e518:	4b5c                	lw	a5,20(a4)
    9fe0e51a:	0207f793          	andi	a5,a5,32
    9fe0e51e:	dfed                	beqz	a5,9fe0e518 <hal_uart_putc+0x8>
		;
	uart->rbr = ch;
    9fe0e520:	2501                	sext.w	a0,a0
    9fe0e522:	c308                	sw	a0,0(a4)
}
    9fe0e524:	8082                	ret

000000009fe0e526 <prvInsertBlockIntoFreeList>:
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    9fe0e526:	0000f797          	auipc	a5,0xf
    9fe0e52a:	f7a78793          	addi	a5,a5,-134 # 9fe1d4a0 <xStart>
    9fe0e52e:	873e                	mv	a4,a5
    9fe0e530:	639c                	ld	a5,0(a5)
    9fe0e532:	fea7eee3          	bltu	a5,a0,9fe0e52e <prvInsertBlockIntoFreeList+0x8>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    9fe0e536:	6710                	ld	a2,8(a4)
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    9fe0e538:	6514                	ld	a3,8(a0)
    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    9fe0e53a:	00c705b3          	add	a1,a4,a2
    9fe0e53e:	02b50863          	beq	a0,a1,9fe0e56e <prvInsertBlockIntoFreeList+0x48>

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    9fe0e542:	00d50633          	add	a2,a0,a3
    9fe0e546:	00c78763          	beq	a5,a2,9fe0e554 <prvInsertBlockIntoFreeList+0x2e>
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    9fe0e54a:	e11c                	sd	a5,0(a0)

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
    9fe0e54c:	00e50363          	beq	a0,a4,9fe0e552 <prvInsertBlockIntoFreeList+0x2c>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
    9fe0e550:	e308                	sd	a0,0(a4)
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
    9fe0e552:	8082                	ret
        if( pxIterator->pxNextFreeBlock != pxEnd )
    9fe0e554:	00011617          	auipc	a2,0x11
    9fe0e558:	6bc63603          	ld	a2,1724(a2) # 9fe1fc10 <pxEnd>
    9fe0e55c:	fec787e3          	beq	a5,a2,9fe0e54a <prvInsertBlockIntoFreeList+0x24>
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    9fe0e560:	679c                	ld	a5,8(a5)
    9fe0e562:	96be                	add	a3,a3,a5
    9fe0e564:	e514                	sd	a3,8(a0)
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    9fe0e566:	631c                	ld	a5,0(a4)
    9fe0e568:	639c                	ld	a5,0(a5)
    9fe0e56a:	e11c                	sd	a5,0(a0)
    9fe0e56c:	b7c5                	j	9fe0e54c <prvInsertBlockIntoFreeList+0x26>
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    9fe0e56e:	96b2                	add	a3,a3,a2
    9fe0e570:	e714                	sd	a3,8(a4)
        pxBlockToInsert = pxIterator;
    9fe0e572:	853a                	mv	a0,a4
    9fe0e574:	b7f9                	j	9fe0e542 <prvInsertBlockIntoFreeList+0x1c>

000000009fe0e576 <pvPortMalloc>:
{
    9fe0e576:	7139                	addi	sp,sp,-64
    9fe0e578:	f822                	sd	s0,48(sp)
    9fe0e57a:	fc06                	sd	ra,56(sp)
    9fe0e57c:	f426                	sd	s1,40(sp)
    9fe0e57e:	f04a                	sd	s2,32(sp)
    9fe0e580:	ec4e                	sd	s3,24(sp)
    9fe0e582:	e852                	sd	s4,16(sp)
    9fe0e584:	e456                	sd	s5,8(sp)
    9fe0e586:	842a                	mv	s0,a0
    vTaskSuspendAll();
    9fe0e588:	6a1000ef          	jal	ra,9fe0f428 <vTaskSuspendAll>
        if( pxEnd == NULL )
    9fe0e58c:	00011697          	auipc	a3,0x11
    9fe0e590:	68468693          	addi	a3,a3,1668 # 9fe1fc10 <pxEnd>
    9fe0e594:	629c                	ld	a5,0(a3)
    9fe0e596:	cbe1                	beqz	a5,9fe0e666 <pvPortMalloc+0xf0>
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
    9fe0e598:	00011917          	auipc	s2,0x11
    9fe0e59c:	68093903          	ld	s2,1664(s2) # 9fe1fc18 <xBlockAllocatedBit>
    9fe0e5a0:	008977b3          	and	a5,s2,s0
    9fe0e5a4:	e3c5                	bnez	a5,9fe0e644 <pvPortMalloc+0xce>
            if( ( xWantedSize > 0 ) &&
    9fe0e5a6:	fff40793          	addi	a5,s0,-1
    9fe0e5aa:	5739                	li	a4,-18
    9fe0e5ac:	08f76c63          	bltu	a4,a5,9fe0e644 <pvPortMalloc+0xce>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
    9fe0e5b0:	00f47793          	andi	a5,s0,15
                xWantedSize += xHeapStructSize;
    9fe0e5b4:	0441                	addi	s0,s0,16
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
    9fe0e5b6:	e3d1                	bnez	a5,9fe0e63a <pvPortMalloc+0xc4>
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
    9fe0e5b8:	00011a97          	auipc	s5,0x11
    9fe0e5bc:	668a8a93          	addi	s5,s5,1640 # 9fe1fc20 <xFreeBytesRemaining>
    9fe0e5c0:	000aba03          	ld	s4,0(s5)
    9fe0e5c4:	088a6063          	bltu	s4,s0,9fe0e644 <pvPortMalloc+0xce>
                pxBlock = xStart.pxNextFreeBlock;
    9fe0e5c8:	0000f717          	auipc	a4,0xf
    9fe0e5cc:	ed870713          	addi	a4,a4,-296 # 9fe1d4a0 <xStart>
    9fe0e5d0:	6304                	ld	s1,0(a4)
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    9fe0e5d2:	a029                	j	9fe0e5dc <pvPortMalloc+0x66>
    9fe0e5d4:	609c                	ld	a5,0(s1)
    9fe0e5d6:	c791                	beqz	a5,9fe0e5e2 <pvPortMalloc+0x6c>
    9fe0e5d8:	8726                	mv	a4,s1
    9fe0e5da:	84be                	mv	s1,a5
    9fe0e5dc:	649c                	ld	a5,8(s1)
    9fe0e5de:	fe87ebe3          	bltu	a5,s0,9fe0e5d4 <pvPortMalloc+0x5e>
                if( pxBlock != pxEnd )
    9fe0e5e2:	629c                	ld	a5,0(a3)
    9fe0e5e4:	06978063          	beq	a5,s1,9fe0e644 <pvPortMalloc+0xce>
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    9fe0e5e8:	609c                	ld	a5,0(s1)
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    9fe0e5ea:	00073983          	ld	s3,0(a4)
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    9fe0e5ee:	02000693          	li	a3,32
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    9fe0e5f2:	e31c                	sd	a5,0(a4)
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    9fe0e5f4:	649c                	ld	a5,8(s1)
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    9fe0e5f6:	09c1                	addi	s3,s3,16
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    9fe0e5f8:	40878733          	sub	a4,a5,s0
    9fe0e5fc:	0ce6e863          	bltu	a3,a4,9fe0e6cc <pvPortMalloc+0x156>
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    9fe0e600:	00011717          	auipc	a4,0x11
    9fe0e604:	62870713          	addi	a4,a4,1576 # 9fe1fc28 <xMinimumEverFreeBytesRemaining>
    9fe0e608:	6314                	ld	a3,0(a4)
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
    9fe0e60a:	40fa0a33          	sub	s4,s4,a5
    9fe0e60e:	014ab023          	sd	s4,0(s5)
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    9fe0e612:	00da7463          	bgeu	s4,a3,9fe0e61a <pvPortMalloc+0xa4>
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    9fe0e616:	01473023          	sd	s4,0(a4)
                    xNumberOfSuccessfulAllocations++;
    9fe0e61a:	00011697          	auipc	a3,0x11
    9fe0e61e:	61668693          	addi	a3,a3,1558 # 9fe1fc30 <xNumberOfSuccessfulAllocations>
    9fe0e622:	6298                	ld	a4,0(a3)
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
    9fe0e624:	00f967b3          	or	a5,s2,a5
    9fe0e628:	e49c                	sd	a5,8(s1)
                    pxBlock->pxNextFreeBlock = NULL;
    9fe0e62a:	0004b023          	sd	zero,0(s1)
                    xNumberOfSuccessfulAllocations++;
    9fe0e62e:	00170793          	addi	a5,a4,1
    9fe0e632:	e29c                	sd	a5,0(a3)
    ( void ) xTaskResumeAll();
    9fe0e634:	37c010ef          	jal	ra,9fe0f9b0 <xTaskResumeAll>
            if( pvReturn == NULL )
    9fe0e638:	a819                	j	9fe0e64e <pvPortMalloc+0xd8>
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
    9fe0e63a:	ff047793          	andi	a5,s0,-16
    9fe0e63e:	07c1                	addi	a5,a5,16
    9fe0e640:	02f46163          	bltu	s0,a5,9fe0e662 <pvPortMalloc+0xec>
    ( void ) xTaskResumeAll();
    9fe0e644:	36c010ef          	jal	ra,9fe0f9b0 <xTaskResumeAll>
                vApplicationMallocFailedHook();
    9fe0e648:	80df40ef          	jal	ra,9fe02e54 <vApplicationMallocFailedHook>
    9fe0e64c:	4981                	li	s3,0
}
    9fe0e64e:	70e2                	ld	ra,56(sp)
    9fe0e650:	7442                	ld	s0,48(sp)
    9fe0e652:	74a2                	ld	s1,40(sp)
    9fe0e654:	7902                	ld	s2,32(sp)
    9fe0e656:	6a42                	ld	s4,16(sp)
    9fe0e658:	6aa2                	ld	s5,8(sp)
    9fe0e65a:	854e                	mv	a0,s3
    9fe0e65c:	69e2                	ld	s3,24(sp)
    9fe0e65e:	6121                	addi	sp,sp,64
    9fe0e660:	8082                	ret
    9fe0e662:	843e                	mv	s0,a5
    9fe0e664:	bf91                	j	9fe0e5b8 <pvPortMalloc+0x42>
    uxAddress = ( size_t ) ucHeap;
    9fe0e666:	00011797          	auipc	a5,0x11
    9fe0e66a:	69a78793          	addi	a5,a5,1690 # 9fe1fd00 <_ebss>
    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
    9fe0e66e:	00f7f713          	andi	a4,a5,15
    9fe0e672:	863e                	mv	a2,a5
    9fe0e674:	c719                	beqz	a4,9fe0e682 <pvPortMalloc+0x10c>
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
    9fe0e676:	00011797          	auipc	a5,0x11
    9fe0e67a:	69978793          	addi	a5,a5,1689 # 9fe1fd0f <_ebss+0xf>
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    9fe0e67e:	9bc1                	andi	a5,a5,-16
    pucAlignedHeap = ( uint8_t * ) uxAddress;
    9fe0e680:	863e                	mv	a2,a5
    uxAddress -= xHeapStructSize;
    9fe0e682:	00091717          	auipc	a4,0x91
    9fe0e686:	66e70713          	addi	a4,a4,1646 # 9fe9fcf0 <_ebss+0x7fff0>
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    9fe0e68a:	9b41                	andi	a4,a4,-16
    pxEnd->pxNextFreeBlock = NULL;
    9fe0e68c:	00073023          	sd	zero,0(a4)
    pxEnd->xBlockSize = 0;
    9fe0e690:	00073423          	sd	zero,8(a4)
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    9fe0e694:	597d                	li	s2,-1
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    9fe0e696:	40f707b3          	sub	a5,a4,a5
    xStart.xBlockSize = ( size_t ) 0;
    9fe0e69a:	0000f597          	auipc	a1,0xf
    9fe0e69e:	e005b723          	sd	zero,-498(a1) # 9fe1d4a8 <xStart+0x8>
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    9fe0e6a2:	197e                	slli	s2,s2,0x3f
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    9fe0e6a4:	0000f597          	auipc	a1,0xf
    9fe0e6a8:	dec5be23          	sd	a2,-516(a1) # 9fe1d4a0 <xStart>
    pxEnd = ( void * ) uxAddress;
    9fe0e6ac:	e298                	sd	a4,0(a3)
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    9fe0e6ae:	e218                	sd	a4,0(a2)
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    9fe0e6b0:	e61c                	sd	a5,8(a2)
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    9fe0e6b2:	00011717          	auipc	a4,0x11
    9fe0e6b6:	56f73b23          	sd	a5,1398(a4) # 9fe1fc28 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    9fe0e6ba:	00011717          	auipc	a4,0x11
    9fe0e6be:	56f73323          	sd	a5,1382(a4) # 9fe1fc20 <xFreeBytesRemaining>
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    9fe0e6c2:	00011797          	auipc	a5,0x11
    9fe0e6c6:	5527bb23          	sd	s2,1366(a5) # 9fe1fc18 <xBlockAllocatedBit>
}
    9fe0e6ca:	bdd9                	j	9fe0e5a0 <pvPortMalloc+0x2a>
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    9fe0e6cc:	00848533          	add	a0,s1,s0
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    9fe0e6d0:	e518                	sd	a4,8(a0)
                        pxBlock->xBlockSize = xWantedSize;
    9fe0e6d2:	e480                	sd	s0,8(s1)
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
    9fe0e6d4:	e53ff0ef          	jal	ra,9fe0e526 <prvInsertBlockIntoFreeList>
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
    9fe0e6d8:	649c                	ld	a5,8(s1)
    9fe0e6da:	b71d                	j	9fe0e600 <pvPortMalloc+0x8a>

000000009fe0e6dc <vPortFree>:
    if( pv != NULL )
    9fe0e6dc:	cd09                	beqz	a0,9fe0e6f6 <vPortFree+0x1a>
        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
    9fe0e6de:	ff853703          	ld	a4,-8(a0)
    9fe0e6e2:	00011797          	auipc	a5,0x11
    9fe0e6e6:	5367b783          	ld	a5,1334(a5) # 9fe1fc18 <xBlockAllocatedBit>
    9fe0e6ea:	00f776b3          	and	a3,a4,a5
    9fe0e6ee:	c681                	beqz	a3,9fe0e6f6 <vPortFree+0x1a>
            if( pxLink->pxNextFreeBlock == NULL )
    9fe0e6f0:	ff053683          	ld	a3,-16(a0)
    9fe0e6f4:	c291                	beqz	a3,9fe0e6f8 <vPortFree+0x1c>
    9fe0e6f6:	8082                	ret
{
    9fe0e6f8:	1101                	addi	sp,sp,-32
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
    9fe0e6fa:	fff7c793          	not	a5,a5
{
    9fe0e6fe:	ec06                	sd	ra,24(sp)
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
    9fe0e700:	8ff9                	and	a5,a5,a4
    9fe0e702:	fef53c23          	sd	a5,-8(a0)
    9fe0e706:	e42a                	sd	a0,8(sp)
                vTaskSuspendAll();
    9fe0e708:	521000ef          	jal	ra,9fe0f428 <vTaskSuspendAll>
                    xFreeBytesRemaining += pxLink->xBlockSize;
    9fe0e70c:	6522                	ld	a0,8(sp)
    9fe0e70e:	00011717          	auipc	a4,0x11
    9fe0e712:	51270713          	addi	a4,a4,1298 # 9fe1fc20 <xFreeBytesRemaining>
    9fe0e716:	6314                	ld	a3,0(a4)
    9fe0e718:	ff853783          	ld	a5,-8(a0)
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    9fe0e71c:	1541                	addi	a0,a0,-16
                    xFreeBytesRemaining += pxLink->xBlockSize;
    9fe0e71e:	97b6                	add	a5,a5,a3
    9fe0e720:	e31c                	sd	a5,0(a4)
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    9fe0e722:	e05ff0ef          	jal	ra,9fe0e526 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
    9fe0e726:	00011717          	auipc	a4,0x11
    9fe0e72a:	51270713          	addi	a4,a4,1298 # 9fe1fc38 <xNumberOfSuccessfulFrees>
    9fe0e72e:	631c                	ld	a5,0(a4)
    9fe0e730:	0785                	addi	a5,a5,1
    9fe0e732:	e31c                	sd	a5,0(a4)
}
    9fe0e734:	60e2                	ld	ra,24(sp)
    9fe0e736:	6105                	addi	sp,sp,32
                ( void ) xTaskResumeAll();
    9fe0e738:	2780106f          	j	9fe0f9b0 <xTaskResumeAll>

000000009fe0e73c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
    9fe0e73c:	1101                	addi	sp,sp,-32
    9fe0e73e:	e822                	sd	s0,16(sp)
    9fe0e740:	ec06                	sd	ra,24(sp)
    9fe0e742:	e426                	sd	s1,8(sp)
    9fe0e744:	e04a                	sd	s2,0(sp)

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    9fe0e746:	615c                	ld	a5,128(a0)
    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    9fe0e748:	7924                	ld	s1,112(a0)
{
    9fe0e74a:	842a                	mv	s0,a0
    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    9fe0e74c:	ef81                	bnez	a5,9fe0e764 <prvCopyDataToQueue+0x28>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    9fe0e74e:	611c                	ld	a5,0(a0)
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    9fe0e750:	0485                	addi	s1,s1,1
    BaseType_t xReturn = pdFALSE;
    9fe0e752:	4501                	li	a0,0
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    9fe0e754:	cfa5                	beqz	a5,9fe0e7cc <prvCopyDataToQueue+0x90>
    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    9fe0e756:	f824                	sd	s1,112(s0)

    return xReturn;
}
    9fe0e758:	60e2                	ld	ra,24(sp)
    9fe0e75a:	6442                	ld	s0,16(sp)
    9fe0e75c:	64a2                	ld	s1,8(sp)
    9fe0e75e:	6902                	ld	s2,0(sp)
    9fe0e760:	6105                	addi	sp,sp,32
    9fe0e762:	8082                	ret
    9fe0e764:	8932                	mv	s2,a2
    else if( xPosition == queueSEND_TO_BACK )
    9fe0e766:	e61d                	bnez	a2,9fe0e794 <prvCopyDataToQueue+0x58>
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
    9fe0e768:	6508                	ld	a0,8(a0)
    9fe0e76a:	863e                	mv	a2,a5
    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    9fe0e76c:	0485                	addi	s1,s1,1
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
    9fe0e76e:	993f10ef          	jal	ra,9fe00100 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
    9fe0e772:	641c                	ld	a5,8(s0)
    9fe0e774:	6054                	ld	a3,128(s0)
        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    9fe0e776:	6818                	ld	a4,16(s0)
    BaseType_t xReturn = pdFALSE;
    9fe0e778:	4501                	li	a0,0
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
    9fe0e77a:	97b6                	add	a5,a5,a3
    9fe0e77c:	e41c                	sd	a5,8(s0)
        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    9fe0e77e:	fce7ece3          	bltu	a5,a4,9fe0e756 <prvCopyDataToQueue+0x1a>
            pxQueue->pcWriteTo = pxQueue->pcHead;
    9fe0e782:	601c                	ld	a5,0(s0)
    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    9fe0e784:	f824                	sd	s1,112(s0)
            pxQueue->pcWriteTo = pxQueue->pcHead;
    9fe0e786:	e41c                	sd	a5,8(s0)
}
    9fe0e788:	60e2                	ld	ra,24(sp)
    9fe0e78a:	6442                	ld	s0,16(sp)
    9fe0e78c:	64a2                	ld	s1,8(sp)
    9fe0e78e:	6902                	ld	s2,0(sp)
    9fe0e790:	6105                	addi	sp,sp,32
    9fe0e792:	8082                	ret
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
    9fe0e794:	6d08                	ld	a0,24(a0)
    9fe0e796:	863e                	mv	a2,a5
    9fe0e798:	969f10ef          	jal	ra,9fe00100 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
    9fe0e79c:	6058                	ld	a4,128(s0)
    9fe0e79e:	6c1c                	ld	a5,24(s0)
        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    9fe0e7a0:	6014                	ld	a3,0(s0)
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
    9fe0e7a2:	40e00633          	neg	a2,a4
    9fe0e7a6:	8f99                	sub	a5,a5,a4
    9fe0e7a8:	ec1c                	sd	a5,24(s0)
        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    9fe0e7aa:	00d7f563          	bgeu	a5,a3,9fe0e7b4 <prvCopyDataToQueue+0x78>
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
    9fe0e7ae:	681c                	ld	a5,16(s0)
    9fe0e7b0:	97b2                	add	a5,a5,a2
    9fe0e7b2:	ec1c                	sd	a5,24(s0)
        if( xPosition == queueOVERWRITE )
    9fe0e7b4:	4789                	li	a5,2
    9fe0e7b6:	02f90163          	beq	s2,a5,9fe0e7d8 <prvCopyDataToQueue+0x9c>
    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    9fe0e7ba:	0485                	addi	s1,s1,1
    9fe0e7bc:	f824                	sd	s1,112(s0)
}
    9fe0e7be:	60e2                	ld	ra,24(sp)
    9fe0e7c0:	6442                	ld	s0,16(sp)
    9fe0e7c2:	64a2                	ld	s1,8(sp)
    9fe0e7c4:	6902                	ld	s2,0(sp)
    BaseType_t xReturn = pdFALSE;
    9fe0e7c6:	4501                	li	a0,0
}
    9fe0e7c8:	6105                	addi	sp,sp,32
    9fe0e7ca:	8082                	ret
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
    9fe0e7cc:	6808                	ld	a0,16(s0)
    9fe0e7ce:	631000ef          	jal	ra,9fe0f5fe <xTaskPriorityDisinherit>
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
    9fe0e7d2:	00043823          	sd	zero,16(s0)
    9fe0e7d6:	b741                	j	9fe0e756 <prvCopyDataToQueue+0x1a>
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    9fe0e7d8:	c099                	beqz	s1,9fe0e7de <prvCopyDataToQueue+0xa2>
    BaseType_t xReturn = pdFALSE;
    9fe0e7da:	4501                	li	a0,0
    9fe0e7dc:	bfad                	j	9fe0e756 <prvCopyDataToQueue+0x1a>
    9fe0e7de:	4485                	li	s1,1
    9fe0e7e0:	4501                	li	a0,0
    9fe0e7e2:	bf95                	j	9fe0e756 <prvCopyDataToQueue+0x1a>

000000009fe0e7e4 <prvUnlockQueue>:
    }
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    9fe0e7e4:	1101                	addi	sp,sp,-32
    9fe0e7e6:	e822                	sd	s0,16(sp)
    9fe0e7e8:	e426                	sd	s1,8(sp)
    9fe0e7ea:	ec06                	sd	ra,24(sp)
    9fe0e7ec:	84aa                	mv	s1,a0
    9fe0e7ee:	e04a                	sd	s2,0(sp)

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
    9fe0e7f0:	6b9000ef          	jal	ra,9fe0f6a8 <vTaskEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
    9fe0e7f4:	0894c783          	lbu	a5,137(s1)
    9fe0e7f8:	0187941b          	slliw	s0,a5,0x18
    9fe0e7fc:	4184541b          	sraiw	s0,s0,0x18

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
    9fe0e800:	02805f63          	blez	s0,9fe0e83e <prvUnlockQueue+0x5a>
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    9fe0e804:	04848913          	addi	s2,s1,72
    9fe0e808:	a811                	j	9fe0e81c <prvUnlockQueue+0x38>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
    9fe0e80a:	fff4079b          	addiw	a5,s0,-1
    9fe0e80e:	0187941b          	slliw	s0,a5,0x18
    9fe0e812:	0ff7f713          	andi	a4,a5,255
    9fe0e816:	4184541b          	sraiw	s0,s0,0x18
        while( cTxLock > queueLOCKED_UNMODIFIED )
    9fe0e81a:	c315                	beqz	a4,9fe0e83e <prvUnlockQueue+0x5a>
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    9fe0e81c:	64bc                	ld	a5,72(s1)
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    9fe0e81e:	854a                	mv	a0,s2
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    9fe0e820:	cf99                	beqz	a5,9fe0e83e <prvUnlockQueue+0x5a>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    9fe0e822:	4d5000ef          	jal	ra,9fe0f4f6 <xTaskRemoveFromEventList>
    9fe0e826:	d175                	beqz	a0,9fe0e80a <prvUnlockQueue+0x26>
                            vTaskMissedYield();
    9fe0e828:	5cb000ef          	jal	ra,9fe0f5f2 <vTaskMissedYield>
            --cTxLock;
    9fe0e82c:	fff4079b          	addiw	a5,s0,-1
    9fe0e830:	0187941b          	slliw	s0,a5,0x18
    9fe0e834:	0ff7f713          	andi	a4,a5,255
    9fe0e838:	4184541b          	sraiw	s0,s0,0x18
        while( cTxLock > queueLOCKED_UNMODIFIED )
    9fe0e83c:	f365                	bnez	a4,9fe0e81c <prvUnlockQueue+0x38>
        }

        pxQueue->cTxLock = queueUNLOCKED;
    9fe0e83e:	57fd                	li	a5,-1
    9fe0e840:	08f484a3          	sb	a5,137(s1)
    }
    taskEXIT_CRITICAL();
    9fe0e844:	687000ef          	jal	ra,9fe0f6ca <vTaskExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
    9fe0e848:	661000ef          	jal	ra,9fe0f6a8 <vTaskEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
    9fe0e84c:	0884c783          	lbu	a5,136(s1)
    9fe0e850:	0187941b          	slliw	s0,a5,0x18
    9fe0e854:	4184541b          	sraiw	s0,s0,0x18

        while( cRxLock > queueLOCKED_UNMODIFIED )
    9fe0e858:	02805f63          	blez	s0,9fe0e896 <prvUnlockQueue+0xb2>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    9fe0e85c:	02048913          	addi	s2,s1,32
    9fe0e860:	a811                	j	9fe0e874 <prvUnlockQueue+0x90>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
    9fe0e862:	fff4079b          	addiw	a5,s0,-1
    9fe0e866:	0187941b          	slliw	s0,a5,0x18
    9fe0e86a:	0ff7f713          	andi	a4,a5,255
    9fe0e86e:	4184541b          	sraiw	s0,s0,0x18
        while( cRxLock > queueLOCKED_UNMODIFIED )
    9fe0e872:	c315                	beqz	a4,9fe0e896 <prvUnlockQueue+0xb2>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    9fe0e874:	709c                	ld	a5,32(s1)
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    9fe0e876:	854a                	mv	a0,s2
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    9fe0e878:	cf99                	beqz	a5,9fe0e896 <prvUnlockQueue+0xb2>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    9fe0e87a:	47d000ef          	jal	ra,9fe0f4f6 <xTaskRemoveFromEventList>
    9fe0e87e:	d175                	beqz	a0,9fe0e862 <prvUnlockQueue+0x7e>
                    vTaskMissedYield();
    9fe0e880:	573000ef          	jal	ra,9fe0f5f2 <vTaskMissedYield>
                --cRxLock;
    9fe0e884:	fff4079b          	addiw	a5,s0,-1
    9fe0e888:	0187941b          	slliw	s0,a5,0x18
    9fe0e88c:	0ff7f713          	andi	a4,a5,255
    9fe0e890:	4184541b          	sraiw	s0,s0,0x18
        while( cRxLock > queueLOCKED_UNMODIFIED )
    9fe0e894:	f365                	bnez	a4,9fe0e874 <prvUnlockQueue+0x90>
            {
                break;
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
    9fe0e896:	57fd                	li	a5,-1
    9fe0e898:	08f48423          	sb	a5,136(s1)
    }
    taskEXIT_CRITICAL();
}
    9fe0e89c:	6442                	ld	s0,16(sp)
    9fe0e89e:	60e2                	ld	ra,24(sp)
    9fe0e8a0:	64a2                	ld	s1,8(sp)
    9fe0e8a2:	6902                	ld	s2,0(sp)
    9fe0e8a4:	6105                	addi	sp,sp,32
    taskEXIT_CRITICAL();
    9fe0e8a6:	6250006f          	j	9fe0f6ca <vTaskExitCritical>

000000009fe0e8aa <xQueueGenericReset>:
{
    9fe0e8aa:	1101                	addi	sp,sp,-32
    9fe0e8ac:	ec06                	sd	ra,24(sp)
    9fe0e8ae:	e822                	sd	s0,16(sp)
    9fe0e8b0:	e42e                	sd	a1,8(sp)
    if( ( pxQueue != NULL ) &&
    9fe0e8b2:	c939                	beqz	a0,9fe0e908 <xQueueGenericReset+0x5e>
        ( pxQueue->uxLength >= 1U ) &&
    9fe0e8b4:	7d3c                	ld	a5,120(a0)
    9fe0e8b6:	842a                	mv	s0,a0
        xReturn = pdFAIL;
    9fe0e8b8:	4501                	li	a0,0
    if( ( pxQueue != NULL ) &&
    9fe0e8ba:	c3b9                	beqz	a5,9fe0e900 <xQueueGenericReset+0x56>
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
    9fe0e8bc:	6058                	ld	a4,128(s0)
    9fe0e8be:	02e7b7b3          	mulhu	a5,a5,a4
    9fe0e8c2:	ef9d                	bnez	a5,9fe0e900 <xQueueGenericReset+0x56>
        taskENTER_CRITICAL();
    9fe0e8c4:	5e5000ef          	jal	ra,9fe0f6a8 <vTaskEnterCritical>
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    9fe0e8c8:	7c3c                	ld	a5,120(s0)
    9fe0e8ca:	6050                	ld	a2,128(s0)
    9fe0e8cc:	6018                	ld	a4,0(s0)
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    9fe0e8ce:	fff78693          	addi	a3,a5,-1
    9fe0e8d2:	02c686b3          	mul	a3,a3,a2
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    9fe0e8d6:	06043823          	sd	zero,112(s0)
            pxQueue->cRxLock = queueUNLOCKED;
    9fe0e8da:	557d                	li	a0,-1
            if( xNewQueue == pdFALSE )
    9fe0e8dc:	65a2                	ld	a1,8(sp)
            pxQueue->cRxLock = queueUNLOCKED;
    9fe0e8de:	08a40423          	sb	a0,136(s0)
            pxQueue->pcWriteTo = pxQueue->pcHead;
    9fe0e8e2:	e418                	sd	a4,8(s0)
            pxQueue->cTxLock = queueUNLOCKED;
    9fe0e8e4:	08a404a3          	sb	a0,137(s0)
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    9fe0e8e8:	02c787b3          	mul	a5,a5,a2
    9fe0e8ec:	97ba                	add	a5,a5,a4
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    9fe0e8ee:	9736                	add	a4,a4,a3
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    9fe0e8f0:	e81c                	sd	a5,16(s0)
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    9fe0e8f2:	ec18                	sd	a4,24(s0)
            if( xNewQueue == pdFALSE )
    9fe0e8f4:	ed99                	bnez	a1,9fe0e912 <xQueueGenericReset+0x68>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    9fe0e8f6:	701c                	ld	a5,32(s0)
    9fe0e8f8:	e795                	bnez	a5,9fe0e924 <xQueueGenericReset+0x7a>
        taskEXIT_CRITICAL();
    9fe0e8fa:	5d1000ef          	jal	ra,9fe0f6ca <vTaskExitCritical>
    9fe0e8fe:	4505                	li	a0,1
}
    9fe0e900:	60e2                	ld	ra,24(sp)
    9fe0e902:	6442                	ld	s0,16(sp)
    9fe0e904:	6105                	addi	sp,sp,32
    9fe0e906:	8082                	ret
    9fe0e908:	60e2                	ld	ra,24(sp)
    9fe0e90a:	6442                	ld	s0,16(sp)
        xReturn = pdFAIL;
    9fe0e90c:	4501                	li	a0,0
}
    9fe0e90e:	6105                	addi	sp,sp,32
    9fe0e910:	8082                	ret
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    9fe0e912:	02040513          	addi	a0,s0,32
    9fe0e916:	6ca010ef          	jal	ra,9fe0ffe0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    9fe0e91a:	04840513          	addi	a0,s0,72
    9fe0e91e:	6c2010ef          	jal	ra,9fe0ffe0 <vListInitialise>
    9fe0e922:	bfe1                	j	9fe0e8fa <xQueueGenericReset+0x50>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    9fe0e924:	02040513          	addi	a0,s0,32
    9fe0e928:	3cf000ef          	jal	ra,9fe0f4f6 <xTaskRemoveFromEventList>
    9fe0e92c:	d579                	beqz	a0,9fe0e8fa <xQueueGenericReset+0x50>
                        queueYIELD_IF_USING_PREEMPTION();
    9fe0e92e:	00000073          	ecall
    9fe0e932:	b7e1                	j	9fe0e8fa <xQueueGenericReset+0x50>

000000009fe0e934 <xQueueGenericCreateStatic>:
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
    9fe0e934:	cd25                	beqz	a0,9fe0e9ac <xQueueGenericCreateStatic+0x78>
    {
    9fe0e936:	1141                	addi	sp,sp,-16
    9fe0e938:	e022                	sd	s0,0(sp)
    9fe0e93a:	e406                	sd	ra,8(sp)
    9fe0e93c:	8436                	mv	s0,a3
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
    9fe0e93e:	caad                	beqz	a3,9fe0e9b0 <xQueueGenericCreateStatic+0x7c>
            ( pxStaticQueue != NULL ) &&
    9fe0e940:	ce2d                	beqz	a2,9fe0e9ba <xQueueGenericCreateStatic+0x86>
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
    9fe0e942:	c5bd                	beqz	a1,9fe0e9b0 <xQueueGenericCreateStatic+0x7c>
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
    9fe0e944:	02a5b7b3          	mulhu	a5,a1,a0
                    pxNewQueue->ucStaticallyAllocated = pdTRUE;
    9fe0e948:	4705                	li	a4,1
    9fe0e94a:	08e68523          	sb	a4,138(a3)
    if( uxItemSize == ( UBaseType_t ) 0 )
    9fe0e94e:	e290                	sd	a2,0(a3)
    pxNewQueue->uxLength = uxQueueLength;
    9fe0e950:	fea8                	sd	a0,120(a3)
    pxNewQueue->uxItemSize = uxItemSize;
    9fe0e952:	e2cc                	sd	a1,128(a3)
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
    9fe0e954:	e7b9                	bnez	a5,9fe0e9a2 <xQueueGenericCreateStatic+0x6e>
        taskENTER_CRITICAL();
    9fe0e956:	553000ef          	jal	ra,9fe0f6a8 <vTaskEnterCritical>
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    9fe0e95a:	7c3c                	ld	a5,120(s0)
    9fe0e95c:	6050                	ld	a2,128(s0)
    9fe0e95e:	6018                	ld	a4,0(s0)
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    9fe0e960:	fff78693          	addi	a3,a5,-1
    9fe0e964:	02c686b3          	mul	a3,a3,a2
            pxQueue->cRxLock = queueUNLOCKED;
    9fe0e968:	55fd                	li	a1,-1
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    9fe0e96a:	06043823          	sd	zero,112(s0)
            pxQueue->cRxLock = queueUNLOCKED;
    9fe0e96e:	08b40423          	sb	a1,136(s0)
            pxQueue->pcWriteTo = pxQueue->pcHead;
    9fe0e972:	e418                	sd	a4,8(s0)
            pxQueue->cTxLock = queueUNLOCKED;
    9fe0e974:	08b404a3          	sb	a1,137(s0)
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    9fe0e978:	02040513          	addi	a0,s0,32
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    9fe0e97c:	02c787b3          	mul	a5,a5,a2
    9fe0e980:	97ba                	add	a5,a5,a4
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    9fe0e982:	9736                	add	a4,a4,a3
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    9fe0e984:	e81c                	sd	a5,16(s0)
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    9fe0e986:	ec18                	sd	a4,24(s0)
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    9fe0e988:	658010ef          	jal	ra,9fe0ffe0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    9fe0e98c:	04840513          	addi	a0,s0,72
    9fe0e990:	650010ef          	jal	ra,9fe0ffe0 <vListInitialise>
        taskEXIT_CRITICAL();
    9fe0e994:	537000ef          	jal	ra,9fe0f6ca <vTaskExitCritical>
    }
    9fe0e998:	60a2                	ld	ra,8(sp)
        taskEXIT_CRITICAL();
    9fe0e99a:	8522                	mv	a0,s0
    }
    9fe0e99c:	6402                	ld	s0,0(sp)
    9fe0e99e:	0141                	addi	sp,sp,16
    9fe0e9a0:	8082                	ret
    9fe0e9a2:	60a2                	ld	ra,8(sp)
    9fe0e9a4:	6402                	ld	s0,0(sp)
    9fe0e9a6:	8536                	mv	a0,a3
    9fe0e9a8:	0141                	addi	sp,sp,16
    9fe0e9aa:	8082                	ret
        Queue_t * pxNewQueue = NULL;
    9fe0e9ac:	4501                	li	a0,0
    }
    9fe0e9ae:	8082                	ret
    9fe0e9b0:	60a2                	ld	ra,8(sp)
    9fe0e9b2:	6402                	ld	s0,0(sp)
        Queue_t * pxNewQueue = NULL;
    9fe0e9b4:	4501                	li	a0,0
    }
    9fe0e9b6:	0141                	addi	sp,sp,16
    9fe0e9b8:	8082                	ret
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
    9fe0e9ba:	f9fd                	bnez	a1,9fe0e9b0 <xQueueGenericCreateStatic+0x7c>
                    pxNewQueue->ucStaticallyAllocated = pdTRUE;
    9fe0e9bc:	4785                	li	a5,1
    9fe0e9be:	08f68523          	sb	a5,138(a3)
    if( uxItemSize == ( UBaseType_t ) 0 )
    9fe0e9c2:	e014                	sd	a3,0(s0)
    pxNewQueue->uxLength = uxQueueLength;
    9fe0e9c4:	fea8                	sd	a0,120(a3)
    pxNewQueue->uxItemSize = uxItemSize;
    9fe0e9c6:	0806b023          	sd	zero,128(a3)
    if( ( pxQueue != NULL ) &&
    9fe0e9ca:	b771                	j	9fe0e956 <xQueueGenericCreateStatic+0x22>

000000009fe0e9cc <xQueueGenericCreate>:
    {
    9fe0e9cc:	1101                	addi	sp,sp,-32
    9fe0e9ce:	ec06                	sd	ra,24(sp)
    9fe0e9d0:	e822                	sd	s0,16(sp)
    9fe0e9d2:	e426                	sd	s1,8(sp)
    9fe0e9d4:	e04a                	sd	s2,0(sp)
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
    9fe0e9d6:	c929                	beqz	a0,9fe0ea28 <xQueueGenericCreate+0x5c>
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
    9fe0e9d8:	02a5b7b3          	mulhu	a5,a1,a0
    9fe0e9dc:	842a                	mv	s0,a0
    9fe0e9de:	84ae                	mv	s1,a1
    9fe0e9e0:	e7a1                	bnez	a5,9fe0ea28 <xQueueGenericCreate+0x5c>
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
    9fe0e9e2:	02b50533          	mul	a0,a0,a1
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
    9fe0e9e6:	f6f00793          	li	a5,-145
    9fe0e9ea:	02a7ef63          	bltu	a5,a0,9fe0ea28 <xQueueGenericCreate+0x5c>
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
    9fe0e9ee:	09050513          	addi	a0,a0,144
    9fe0e9f2:	b85ff0ef          	jal	ra,9fe0e576 <pvPortMalloc>
    9fe0e9f6:	892a                	mv	s2,a0
            if( pxNewQueue != NULL )
    9fe0e9f8:	c905                	beqz	a0,9fe0ea28 <xQueueGenericCreate+0x5c>
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
    9fe0e9fa:	08050523          	sb	zero,138(a0)
    if( uxItemSize == ( UBaseType_t ) 0 )
    9fe0e9fe:	87aa                	mv	a5,a0
    9fe0ea00:	c099                	beqz	s1,9fe0ea06 <xQueueGenericCreate+0x3a>
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    9fe0ea02:	09050793          	addi	a5,a0,144
    pxNewQueue->uxLength = uxQueueLength;
    9fe0ea06:	06893c23          	sd	s0,120(s2)
    pxNewQueue->uxItemSize = uxItemSize;
    9fe0ea0a:	08993023          	sd	s1,128(s2)
    9fe0ea0e:	00f93023          	sd	a5,0(s2)
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    9fe0ea12:	854a                	mv	a0,s2
    9fe0ea14:	4585                	li	a1,1
    9fe0ea16:	e95ff0ef          	jal	ra,9fe0e8aa <xQueueGenericReset>
    }
    9fe0ea1a:	60e2                	ld	ra,24(sp)
    9fe0ea1c:	6442                	ld	s0,16(sp)
    9fe0ea1e:	64a2                	ld	s1,8(sp)
    9fe0ea20:	854a                	mv	a0,s2
    9fe0ea22:	6902                	ld	s2,0(sp)
    9fe0ea24:	6105                	addi	sp,sp,32
    9fe0ea26:	8082                	ret
    9fe0ea28:	60e2                	ld	ra,24(sp)
    9fe0ea2a:	6442                	ld	s0,16(sp)
        Queue_t * pxNewQueue = NULL;
    9fe0ea2c:	4901                	li	s2,0
    }
    9fe0ea2e:	64a2                	ld	s1,8(sp)
    9fe0ea30:	854a                	mv	a0,s2
    9fe0ea32:	6902                	ld	s2,0(sp)
    9fe0ea34:	6105                	addi	sp,sp,32
    9fe0ea36:	8082                	ret

000000009fe0ea38 <xQueueGenericSend>:
{
    9fe0ea38:	711d                	addi	sp,sp,-96
    9fe0ea3a:	e8a2                	sd	s0,80(sp)
    9fe0ea3c:	e4a6                	sd	s1,72(sp)
    9fe0ea3e:	842a                	mv	s0,a0
    9fe0ea40:	e0ca                	sd	s2,64(sp)
    9fe0ea42:	fc4e                	sd	s3,56(sp)
    9fe0ea44:	f852                	sd	s4,48(sp)
    9fe0ea46:	f456                	sd	s5,40(sp)
    9fe0ea48:	f05a                	sd	s6,32(sp)
    9fe0ea4a:	ec86                	sd	ra,88(sp)
    9fe0ea4c:	8aae                	mv	s5,a1
    9fe0ea4e:	e432                	sd	a2,8(sp)
    9fe0ea50:	8936                	mv	s2,a3
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    9fe0ea52:	02050a13          	addi	s4,a0,32
        taskENTER_CRITICAL();
    9fe0ea56:	453000ef          	jal	ra,9fe0f6a8 <vTaskEnterCritical>
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    9fe0ea5a:	7838                	ld	a4,112(s0)
    9fe0ea5c:	7c3c                	ld	a5,120(s0)
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    9fe0ea5e:	4b01                	li	s6,0
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    9fe0ea60:	4989                	li	s3,2
        prvLockQueue( pxQueue );
    9fe0ea62:	54fd                	li	s1,-1
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    9fe0ea64:	06f76e63          	bltu	a4,a5,9fe0eae0 <xQueueGenericSend+0xa8>
    9fe0ea68:	07390c63          	beq	s2,s3,9fe0eae0 <xQueueGenericSend+0xa8>
                if( xTicksToWait == ( TickType_t ) 0 )
    9fe0ea6c:	67a2                	ld	a5,8(sp)
    9fe0ea6e:	0c078a63          	beqz	a5,9fe0eb42 <xQueueGenericSend+0x10a>
                else if( xEntryTimeSet == pdFALSE )
    9fe0ea72:	0a0b0c63          	beqz	s6,9fe0eb2a <xQueueGenericSend+0xf2>
        taskEXIT_CRITICAL();
    9fe0ea76:	455000ef          	jal	ra,9fe0f6ca <vTaskExitCritical>
        vTaskSuspendAll();
    9fe0ea7a:	1af000ef          	jal	ra,9fe0f428 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
    9fe0ea7e:	42b000ef          	jal	ra,9fe0f6a8 <vTaskEnterCritical>
    9fe0ea82:	08844783          	lbu	a5,136(s0)
    9fe0ea86:	0187979b          	slliw	a5,a5,0x18
    9fe0ea8a:	4187d79b          	sraiw	a5,a5,0x18
    9fe0ea8e:	00979463          	bne	a5,s1,9fe0ea96 <xQueueGenericSend+0x5e>
    9fe0ea92:	08040423          	sb	zero,136(s0)
    9fe0ea96:	08944783          	lbu	a5,137(s0)
    9fe0ea9a:	0187979b          	slliw	a5,a5,0x18
    9fe0ea9e:	4187d79b          	sraiw	a5,a5,0x18
    9fe0eaa2:	00979463          	bne	a5,s1,9fe0eaaa <xQueueGenericSend+0x72>
    9fe0eaa6:	080404a3          	sb	zero,137(s0)
    9fe0eaaa:	421000ef          	jal	ra,9fe0f6ca <vTaskExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    9fe0eaae:	002c                	addi	a1,sp,8
    9fe0eab0:	0808                	addi	a0,sp,16
    9fe0eab2:	0fa010ef          	jal	ra,9fe0fbac <xTaskCheckForTimeOut>
    9fe0eab6:	e951                	bnez	a0,9fe0eb4a <xQueueGenericSend+0x112>

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
    BaseType_t xReturn;

    taskENTER_CRITICAL();
    9fe0eab8:	3f1000ef          	jal	ra,9fe0f6a8 <vTaskEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    9fe0eabc:	7838                	ld	a4,112(s0)
    9fe0eabe:	7c3c                	ld	a5,120(s0)
    9fe0eac0:	04f70563          	beq	a4,a5,9fe0eb0a <xQueueGenericSend+0xd2>
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
    9fe0eac4:	407000ef          	jal	ra,9fe0f6ca <vTaskExitCritical>
                prvUnlockQueue( pxQueue );
    9fe0eac8:	8522                	mv	a0,s0
    9fe0eaca:	d1bff0ef          	jal	ra,9fe0e7e4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
    9fe0eace:	6e3000ef          	jal	ra,9fe0f9b0 <xTaskResumeAll>
{
    9fe0ead2:	4b05                	li	s6,1
        taskENTER_CRITICAL();
    9fe0ead4:	3d5000ef          	jal	ra,9fe0f6a8 <vTaskEnterCritical>
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    9fe0ead8:	7838                	ld	a4,112(s0)
    9fe0eada:	7c3c                	ld	a5,120(s0)
    9fe0eadc:	f8f776e3          	bgeu	a4,a5,9fe0ea68 <xQueueGenericSend+0x30>
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    9fe0eae0:	864a                	mv	a2,s2
    9fe0eae2:	85d6                	mv	a1,s5
    9fe0eae4:	8522                	mv	a0,s0
    9fe0eae6:	c57ff0ef          	jal	ra,9fe0e73c <prvCopyDataToQueue>
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    9fe0eaea:	643c                	ld	a5,72(s0)
    9fe0eaec:	e3b9                	bnez	a5,9fe0eb32 <xQueueGenericSend+0xfa>
                        else if( xYieldRequired != pdFALSE )
    9fe0eaee:	e539                	bnez	a0,9fe0eb3c <xQueueGenericSend+0x104>
                taskEXIT_CRITICAL();
    9fe0eaf0:	3db000ef          	jal	ra,9fe0f6ca <vTaskExitCritical>
                return pdPASS;
    9fe0eaf4:	4505                	li	a0,1
}
    9fe0eaf6:	60e6                	ld	ra,88(sp)
    9fe0eaf8:	6446                	ld	s0,80(sp)
    9fe0eafa:	64a6                	ld	s1,72(sp)
    9fe0eafc:	6906                	ld	s2,64(sp)
    9fe0eafe:	79e2                	ld	s3,56(sp)
    9fe0eb00:	7a42                	ld	s4,48(sp)
    9fe0eb02:	7aa2                	ld	s5,40(sp)
    9fe0eb04:	7b02                	ld	s6,32(sp)
    9fe0eb06:	6125                	addi	sp,sp,96
    9fe0eb08:	8082                	ret
    taskEXIT_CRITICAL();
    9fe0eb0a:	3c1000ef          	jal	ra,9fe0f6ca <vTaskExitCritical>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    9fe0eb0e:	65a2                	ld	a1,8(sp)
    9fe0eb10:	8552                	mv	a0,s4
    9fe0eb12:	177000ef          	jal	ra,9fe0f488 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
    9fe0eb16:	8522                	mv	a0,s0
    9fe0eb18:	ccdff0ef          	jal	ra,9fe0e7e4 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
    9fe0eb1c:	695000ef          	jal	ra,9fe0f9b0 <xTaskResumeAll>
    9fe0eb20:	f94d                	bnez	a0,9fe0ead2 <xQueueGenericSend+0x9a>
                    portYIELD_WITHIN_API();
    9fe0eb22:	00000073          	ecall
{
    9fe0eb26:	4b05                	li	s6,1
    9fe0eb28:	b775                	j	9fe0ead4 <xQueueGenericSend+0x9c>
                    vTaskInternalSetTimeOutState( &xTimeOut );
    9fe0eb2a:	0808                	addi	a0,sp,16
    9fe0eb2c:	2b1000ef          	jal	ra,9fe0f5dc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
    9fe0eb30:	b799                	j	9fe0ea76 <xQueueGenericSend+0x3e>
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    9fe0eb32:	04840513          	addi	a0,s0,72
    9fe0eb36:	1c1000ef          	jal	ra,9fe0f4f6 <xTaskRemoveFromEventList>
    9fe0eb3a:	d95d                	beqz	a0,9fe0eaf0 <xQueueGenericSend+0xb8>
                            queueYIELD_IF_USING_PREEMPTION();
    9fe0eb3c:	00000073          	ecall
    9fe0eb40:	bf45                	j	9fe0eaf0 <xQueueGenericSend+0xb8>
                    taskEXIT_CRITICAL();
    9fe0eb42:	389000ef          	jal	ra,9fe0f6ca <vTaskExitCritical>
                    return errQUEUE_FULL;
    9fe0eb46:	4501                	li	a0,0
    9fe0eb48:	b77d                	j	9fe0eaf6 <xQueueGenericSend+0xbe>
            prvUnlockQueue( pxQueue );
    9fe0eb4a:	8522                	mv	a0,s0
    9fe0eb4c:	c99ff0ef          	jal	ra,9fe0e7e4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
    9fe0eb50:	661000ef          	jal	ra,9fe0f9b0 <xTaskResumeAll>
            return errQUEUE_FULL;
    9fe0eb54:	4501                	li	a0,0
    9fe0eb56:	b745                	j	9fe0eaf6 <xQueueGenericSend+0xbe>

000000009fe0eb58 <xQueueGenericSendFromISR>:
{
    9fe0eb58:	7179                	addi	sp,sp,-48
    9fe0eb5a:	f022                	sd	s0,32(sp)
    9fe0eb5c:	e84a                	sd	s2,16(sp)
    9fe0eb5e:	f406                	sd	ra,40(sp)
    9fe0eb60:	ec26                	sd	s1,24(sp)
    9fe0eb62:	e44e                	sd	s3,8(sp)
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    9fe0eb64:	7938                	ld	a4,112(a0)
    9fe0eb66:	7d3c                	ld	a5,120(a0)
{
    9fe0eb68:	8932                	mv	s2,a2
    9fe0eb6a:	842a                	mv	s0,a0
    9fe0eb6c:	8636                	mv	a2,a3
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    9fe0eb6e:	00f76d63          	bltu	a4,a5,9fe0eb88 <xQueueGenericSendFromISR+0x30>
    9fe0eb72:	4789                	li	a5,2
            xReturn = errQUEUE_FULL;
    9fe0eb74:	4501                	li	a0,0
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    9fe0eb76:	00f68963          	beq	a3,a5,9fe0eb88 <xQueueGenericSendFromISR+0x30>
}
    9fe0eb7a:	70a2                	ld	ra,40(sp)
    9fe0eb7c:	7402                	ld	s0,32(sp)
    9fe0eb7e:	64e2                	ld	s1,24(sp)
    9fe0eb80:	6942                	ld	s2,16(sp)
    9fe0eb82:	69a2                	ld	s3,8(sp)
    9fe0eb84:	6145                	addi	sp,sp,48
    9fe0eb86:	8082                	ret
            const int8_t cTxLock = pxQueue->cTxLock;
    9fe0eb88:	08944483          	lbu	s1,137(s0)
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
    9fe0eb8c:	783c                	ld	a5,112(s0)
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    9fe0eb8e:	8522                	mv	a0,s0
            const int8_t cTxLock = pxQueue->cTxLock;
    9fe0eb90:	0184999b          	slliw	s3,s1,0x18
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    9fe0eb94:	ba9ff0ef          	jal	ra,9fe0e73c <prvCopyDataToQueue>
            const int8_t cTxLock = pxQueue->cTxLock;
    9fe0eb98:	4189d99b          	sraiw	s3,s3,0x18
            if( cTxLock == queueUNLOCKED )
    9fe0eb9c:	57fd                	li	a5,-1
    9fe0eb9e:	02f98163          	beq	s3,a5,9fe0ebc0 <xQueueGenericSendFromISR+0x68>
                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    9fe0eba2:	2485                	addiw	s1,s1,1
    9fe0eba4:	0184949b          	slliw	s1,s1,0x18
    9fe0eba8:	4184d49b          	sraiw	s1,s1,0x18
    9fe0ebac:	089404a3          	sb	s1,137(s0)
}
    9fe0ebb0:	70a2                	ld	ra,40(sp)
    9fe0ebb2:	7402                	ld	s0,32(sp)
    9fe0ebb4:	64e2                	ld	s1,24(sp)
    9fe0ebb6:	6942                	ld	s2,16(sp)
    9fe0ebb8:	69a2                	ld	s3,8(sp)
            xReturn = pdPASS;
    9fe0ebba:	4505                	li	a0,1
}
    9fe0ebbc:	6145                	addi	sp,sp,48
    9fe0ebbe:	8082                	ret
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    9fe0ebc0:	643c                	ld	a5,72(s0)
    9fe0ebc2:	d7fd                	beqz	a5,9fe0ebb0 <xQueueGenericSendFromISR+0x58>
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    9fe0ebc4:	04840513          	addi	a0,s0,72
    9fe0ebc8:	12f000ef          	jal	ra,9fe0f4f6 <xTaskRemoveFromEventList>
    9fe0ebcc:	d175                	beqz	a0,9fe0ebb0 <xQueueGenericSendFromISR+0x58>
                                if( pxHigherPriorityTaskWoken != NULL )
    9fe0ebce:	fe0901e3          	beqz	s2,9fe0ebb0 <xQueueGenericSendFromISR+0x58>
                                    *pxHigherPriorityTaskWoken = pdTRUE;
    9fe0ebd2:	4785                	li	a5,1
    9fe0ebd4:	00f93023          	sd	a5,0(s2)
            xReturn = pdPASS;
    9fe0ebd8:	4505                	li	a0,1
    9fe0ebda:	b745                	j	9fe0eb7a <xQueueGenericSendFromISR+0x22>

000000009fe0ebdc <xQueueGiveFromISR>:
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    9fe0ebdc:	793c                	ld	a5,112(a0)
        if( uxMessagesWaiting < pxQueue->uxLength )
    9fe0ebde:	7d38                	ld	a4,120(a0)
    9fe0ebe0:	02e7f663          	bgeu	a5,a4,9fe0ec0c <xQueueGiveFromISR+0x30>
            const int8_t cTxLock = pxQueue->cTxLock;
    9fe0ebe4:	08954703          	lbu	a4,137(a0)
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    9fe0ebe8:	0785                	addi	a5,a5,1
    9fe0ebea:	f93c                	sd	a5,112(a0)
            const int8_t cTxLock = pxQueue->cTxLock;
    9fe0ebec:	0187169b          	slliw	a3,a4,0x18
    9fe0ebf0:	4186d69b          	sraiw	a3,a3,0x18
            if( cTxLock == queueUNLOCKED )
    9fe0ebf4:	57fd                	li	a5,-1
    9fe0ebf6:	00f68d63          	beq	a3,a5,9fe0ec10 <xQueueGiveFromISR+0x34>
                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    9fe0ebfa:	2705                	addiw	a4,a4,1
    9fe0ebfc:	0187171b          	slliw	a4,a4,0x18
    9fe0ec00:	4187571b          	sraiw	a4,a4,0x18
    9fe0ec04:	08e504a3          	sb	a4,137(a0)
            xReturn = pdPASS;
    9fe0ec08:	4505                	li	a0,1
    9fe0ec0a:	8082                	ret
            xReturn = errQUEUE_FULL;
    9fe0ec0c:	4501                	li	a0,0
    return xReturn;
    9fe0ec0e:	8082                	ret
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    9fe0ec10:	653c                	ld	a5,72(a0)
    9fe0ec12:	e399                	bnez	a5,9fe0ec18 <xQueueGiveFromISR+0x3c>
            xReturn = pdPASS;
    9fe0ec14:	4505                	li	a0,1
}
    9fe0ec16:	8082                	ret
{
    9fe0ec18:	1101                	addi	sp,sp,-32
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    9fe0ec1a:	04850513          	addi	a0,a0,72
{
    9fe0ec1e:	ec06                	sd	ra,24(sp)
    9fe0ec20:	e42e                	sd	a1,8(sp)
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    9fe0ec22:	0d5000ef          	jal	ra,9fe0f4f6 <xTaskRemoveFromEventList>
    9fe0ec26:	c509                	beqz	a0,9fe0ec30 <xQueueGiveFromISR+0x54>
                                if( pxHigherPriorityTaskWoken != NULL )
    9fe0ec28:	65a2                	ld	a1,8(sp)
    9fe0ec2a:	c199                	beqz	a1,9fe0ec30 <xQueueGiveFromISR+0x54>
                                    *pxHigherPriorityTaskWoken = pdTRUE;
    9fe0ec2c:	4785                	li	a5,1
    9fe0ec2e:	e19c                	sd	a5,0(a1)
}
    9fe0ec30:	60e2                	ld	ra,24(sp)
            xReturn = pdPASS;
    9fe0ec32:	4505                	li	a0,1
}
    9fe0ec34:	6105                	addi	sp,sp,32
    9fe0ec36:	8082                	ret

000000009fe0ec38 <xQueueReceive>:
{
    9fe0ec38:	715d                	addi	sp,sp,-80
    9fe0ec3a:	e0a2                	sd	s0,64(sp)
    9fe0ec3c:	842a                	mv	s0,a0
    9fe0ec3e:	f84a                	sd	s2,48(sp)
    9fe0ec40:	f44e                	sd	s3,40(sp)
    9fe0ec42:	e486                	sd	ra,72(sp)
    9fe0ec44:	fc26                	sd	s1,56(sp)
    9fe0ec46:	f052                	sd	s4,32(sp)
    9fe0ec48:	89ae                	mv	s3,a1
    9fe0ec4a:	e432                	sd	a2,8(sp)
        taskENTER_CRITICAL();
    9fe0ec4c:	25d000ef          	jal	ra,9fe0f6a8 <vTaskEnterCritical>
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    9fe0ec50:	07043903          	ld	s2,112(s0)
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    9fe0ec54:	0c091563          	bnez	s2,9fe0ed1e <xQueueReceive+0xe6>
                if( xTicksToWait == ( TickType_t ) 0 )
    9fe0ec58:	67a2                	ld	a5,8(sp)
    9fe0ec5a:	c3c1                	beqz	a5,9fe0ecda <xQueueReceive+0xa2>
                    vTaskInternalSetTimeOutState( &xTimeOut );
    9fe0ec5c:	0808                	addi	a0,sp,16
    9fe0ec5e:	17f000ef          	jal	ra,9fe0f5dc <vTaskInternalSetTimeOutState>
        prvLockQueue( pxQueue );
    9fe0ec62:	54fd                	li	s1,-1
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    9fe0ec64:	04840a13          	addi	s4,s0,72
        taskEXIT_CRITICAL();
    9fe0ec68:	263000ef          	jal	ra,9fe0f6ca <vTaskExitCritical>
        vTaskSuspendAll();
    9fe0ec6c:	7bc000ef          	jal	ra,9fe0f428 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
    9fe0ec70:	239000ef          	jal	ra,9fe0f6a8 <vTaskEnterCritical>
    9fe0ec74:	08844783          	lbu	a5,136(s0)
    9fe0ec78:	0187979b          	slliw	a5,a5,0x18
    9fe0ec7c:	4187d79b          	sraiw	a5,a5,0x18
    9fe0ec80:	00979463          	bne	a5,s1,9fe0ec88 <xQueueReceive+0x50>
    9fe0ec84:	08040423          	sb	zero,136(s0)
    9fe0ec88:	08944783          	lbu	a5,137(s0)
    9fe0ec8c:	0187979b          	slliw	a5,a5,0x18
    9fe0ec90:	4187d79b          	sraiw	a5,a5,0x18
    9fe0ec94:	00979463          	bne	a5,s1,9fe0ec9c <xQueueReceive+0x64>
    9fe0ec98:	080404a3          	sb	zero,137(s0)
    9fe0ec9c:	22f000ef          	jal	ra,9fe0f6ca <vTaskExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    9fe0eca0:	002c                	addi	a1,sp,8
    9fe0eca2:	0808                	addi	a0,sp,16
    9fe0eca4:	709000ef          	jal	ra,9fe0fbac <xTaskCheckForTimeOut>
    9fe0eca8:	e521                	bnez	a0,9fe0ecf0 <xQueueReceive+0xb8>
    taskENTER_CRITICAL();
    9fe0ecaa:	1ff000ef          	jal	ra,9fe0f6a8 <vTaskEnterCritical>
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
    9fe0ecae:	783c                	ld	a5,112(s0)
    9fe0ecb0:	efa1                	bnez	a5,9fe0ed08 <xQueueReceive+0xd0>
    taskEXIT_CRITICAL();
    9fe0ecb2:	219000ef          	jal	ra,9fe0f6ca <vTaskExitCritical>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    9fe0ecb6:	65a2                	ld	a1,8(sp)
    9fe0ecb8:	8552                	mv	a0,s4
    9fe0ecba:	7ce000ef          	jal	ra,9fe0f488 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
    9fe0ecbe:	8522                	mv	a0,s0
    9fe0ecc0:	b25ff0ef          	jal	ra,9fe0e7e4 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
    9fe0ecc4:	4ed000ef          	jal	ra,9fe0f9b0 <xTaskResumeAll>
    9fe0ecc8:	c921                	beqz	a0,9fe0ed18 <xQueueReceive+0xe0>
        taskENTER_CRITICAL();
    9fe0ecca:	1df000ef          	jal	ra,9fe0f6a8 <vTaskEnterCritical>
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    9fe0ecce:	07043903          	ld	s2,112(s0)
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    9fe0ecd2:	04091663          	bnez	s2,9fe0ed1e <xQueueReceive+0xe6>
                if( xTicksToWait == ( TickType_t ) 0 )
    9fe0ecd6:	67a2                	ld	a5,8(sp)
    9fe0ecd8:	fbc1                	bnez	a5,9fe0ec68 <xQueueReceive+0x30>
                    taskEXIT_CRITICAL();
    9fe0ecda:	1f1000ef          	jal	ra,9fe0f6ca <vTaskExitCritical>
}
    9fe0ecde:	60a6                	ld	ra,72(sp)
    9fe0ece0:	6406                	ld	s0,64(sp)
    9fe0ece2:	74e2                	ld	s1,56(sp)
    9fe0ece4:	7942                	ld	s2,48(sp)
    9fe0ece6:	79a2                	ld	s3,40(sp)
    9fe0ece8:	7a02                	ld	s4,32(sp)
                    return errQUEUE_EMPTY;
    9fe0ecea:	4501                	li	a0,0
}
    9fe0ecec:	6161                	addi	sp,sp,80
    9fe0ecee:	8082                	ret
            prvUnlockQueue( pxQueue );
    9fe0ecf0:	8522                	mv	a0,s0
    9fe0ecf2:	af3ff0ef          	jal	ra,9fe0e7e4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
    9fe0ecf6:	4bb000ef          	jal	ra,9fe0f9b0 <xTaskResumeAll>
    taskENTER_CRITICAL();
    9fe0ecfa:	1af000ef          	jal	ra,9fe0f6a8 <vTaskEnterCritical>
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
    9fe0ecfe:	783c                	ld	a5,112(s0)
    9fe0ed00:	dfe9                	beqz	a5,9fe0ecda <xQueueReceive+0xa2>
    taskEXIT_CRITICAL();
    9fe0ed02:	1c9000ef          	jal	ra,9fe0f6ca <vTaskExitCritical>
    9fe0ed06:	b7d1                	j	9fe0ecca <xQueueReceive+0x92>
    9fe0ed08:	1c3000ef          	jal	ra,9fe0f6ca <vTaskExitCritical>
                prvUnlockQueue( pxQueue );
    9fe0ed0c:	8522                	mv	a0,s0
    9fe0ed0e:	ad7ff0ef          	jal	ra,9fe0e7e4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
    9fe0ed12:	49f000ef          	jal	ra,9fe0f9b0 <xTaskResumeAll>
        taskENTER_CRITICAL();
    9fe0ed16:	bf55                	j	9fe0ecca <xQueueReceive+0x92>
                    portYIELD_WITHIN_API();
    9fe0ed18:	00000073          	ecall
        taskENTER_CRITICAL();
    9fe0ed1c:	b77d                	j	9fe0ecca <xQueueReceive+0x92>
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    9fe0ed1e:	6050                	ld	a2,128(s0)
    9fe0ed20:	ca11                	beqz	a2,9fe0ed34 <xQueueReceive+0xfc>
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
    9fe0ed22:	6c0c                	ld	a1,24(s0)
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    9fe0ed24:	681c                	ld	a5,16(s0)
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
    9fe0ed26:	95b2                	add	a1,a1,a2
    9fe0ed28:	ec0c                	sd	a1,24(s0)
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    9fe0ed2a:	02f5f563          	bgeu	a1,a5,9fe0ed54 <xQueueReceive+0x11c>
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
    9fe0ed2e:	854e                	mv	a0,s3
    9fe0ed30:	bd0f10ef          	jal	ra,9fe00100 <memcpy>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    9fe0ed34:	197d                	addi	s2,s2,-1
    9fe0ed36:	07243823          	sd	s2,112(s0)
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    9fe0ed3a:	701c                	ld	a5,32(s0)
    9fe0ed3c:	ef99                	bnez	a5,9fe0ed5a <xQueueReceive+0x122>
                taskEXIT_CRITICAL();
    9fe0ed3e:	18d000ef          	jal	ra,9fe0f6ca <vTaskExitCritical>
}
    9fe0ed42:	60a6                	ld	ra,72(sp)
    9fe0ed44:	6406                	ld	s0,64(sp)
    9fe0ed46:	74e2                	ld	s1,56(sp)
    9fe0ed48:	7942                	ld	s2,48(sp)
    9fe0ed4a:	79a2                	ld	s3,40(sp)
    9fe0ed4c:	7a02                	ld	s4,32(sp)
                return pdPASS;
    9fe0ed4e:	4505                	li	a0,1
}
    9fe0ed50:	6161                	addi	sp,sp,80
    9fe0ed52:	8082                	ret
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
    9fe0ed54:	600c                	ld	a1,0(s0)
    9fe0ed56:	ec0c                	sd	a1,24(s0)
    9fe0ed58:	bfd9                	j	9fe0ed2e <xQueueReceive+0xf6>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    9fe0ed5a:	02040513          	addi	a0,s0,32
    9fe0ed5e:	798000ef          	jal	ra,9fe0f4f6 <xTaskRemoveFromEventList>
    9fe0ed62:	dd71                	beqz	a0,9fe0ed3e <xQueueReceive+0x106>
                        queueYIELD_IF_USING_PREEMPTION();
    9fe0ed64:	00000073          	ecall
    9fe0ed68:	bfd9                	j	9fe0ed3e <xQueueReceive+0x106>

000000009fe0ed6a <xQueueReceiveFromISR>:
{
    9fe0ed6a:	7179                	addi	sp,sp,-48
    9fe0ed6c:	f406                	sd	ra,40(sp)
    9fe0ed6e:	f022                	sd	s0,32(sp)
    9fe0ed70:	ec26                	sd	s1,24(sp)
    9fe0ed72:	e84a                	sd	s2,16(sp)
    9fe0ed74:	e44e                	sd	s3,8(sp)
    9fe0ed76:	e052                	sd	s4,0(sp)
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    9fe0ed78:	07053903          	ld	s2,112(a0)
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    9fe0ed7c:	00091b63          	bnez	s2,9fe0ed92 <xQueueReceiveFromISR+0x28>
}
    9fe0ed80:	70a2                	ld	ra,40(sp)
    9fe0ed82:	7402                	ld	s0,32(sp)
    9fe0ed84:	64e2                	ld	s1,24(sp)
    9fe0ed86:	6942                	ld	s2,16(sp)
    9fe0ed88:	69a2                	ld	s3,8(sp)
    9fe0ed8a:	6a02                	ld	s4,0(sp)
            xReturn = pdFAIL;
    9fe0ed8c:	4501                	li	a0,0
}
    9fe0ed8e:	6145                	addi	sp,sp,48
    9fe0ed90:	8082                	ret
            const int8_t cRxLock = pxQueue->cRxLock;
    9fe0ed92:	08854983          	lbu	s3,136(a0)
    9fe0ed96:	84b2                	mv	s1,a2
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    9fe0ed98:	6150                	ld	a2,128(a0)
            const int8_t cRxLock = pxQueue->cRxLock;
    9fe0ed9a:	01899a1b          	slliw	s4,s3,0x18
    9fe0ed9e:	842a                	mv	s0,a0
    9fe0eda0:	418a5a1b          	sraiw	s4,s4,0x18
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    9fe0eda4:	ce01                	beqz	a2,9fe0edbc <xQueueReceiveFromISR+0x52>
    9fe0eda6:	852e                	mv	a0,a1
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
    9fe0eda8:	6c0c                	ld	a1,24(s0)
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    9fe0edaa:	681c                	ld	a5,16(s0)
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
    9fe0edac:	95b2                	add	a1,a1,a2
    9fe0edae:	ec0c                	sd	a1,24(s0)
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    9fe0edb0:	00f5e463          	bltu	a1,a5,9fe0edb8 <xQueueReceiveFromISR+0x4e>
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
    9fe0edb4:	600c                	ld	a1,0(s0)
    9fe0edb6:	ec0c                	sd	a1,24(s0)
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
    9fe0edb8:	b48f10ef          	jal	ra,9fe00100 <memcpy>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    9fe0edbc:	197d                	addi	s2,s2,-1
    9fe0edbe:	07243823          	sd	s2,112(s0)
            if( cRxLock == queueUNLOCKED )
    9fe0edc2:	57fd                	li	a5,-1
    9fe0edc4:	02fa0263          	beq	s4,a5,9fe0ede8 <xQueueReceiveFromISR+0x7e>
                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
    9fe0edc8:	2985                	addiw	s3,s3,1
    9fe0edca:	0189999b          	slliw	s3,s3,0x18
    9fe0edce:	4189d99b          	sraiw	s3,s3,0x18
    9fe0edd2:	09340423          	sb	s3,136(s0)
}
    9fe0edd6:	70a2                	ld	ra,40(sp)
    9fe0edd8:	7402                	ld	s0,32(sp)
    9fe0edda:	64e2                	ld	s1,24(sp)
    9fe0eddc:	6942                	ld	s2,16(sp)
    9fe0edde:	69a2                	ld	s3,8(sp)
    9fe0ede0:	6a02                	ld	s4,0(sp)
            xReturn = pdPASS;
    9fe0ede2:	4505                	li	a0,1
}
    9fe0ede4:	6145                	addi	sp,sp,48
    9fe0ede6:	8082                	ret
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    9fe0ede8:	701c                	ld	a5,32(s0)
    9fe0edea:	eb91                	bnez	a5,9fe0edfe <xQueueReceiveFromISR+0x94>
            xReturn = pdPASS;
    9fe0edec:	4505                	li	a0,1
}
    9fe0edee:	70a2                	ld	ra,40(sp)
    9fe0edf0:	7402                	ld	s0,32(sp)
    9fe0edf2:	64e2                	ld	s1,24(sp)
    9fe0edf4:	6942                	ld	s2,16(sp)
    9fe0edf6:	69a2                	ld	s3,8(sp)
    9fe0edf8:	6a02                	ld	s4,0(sp)
    9fe0edfa:	6145                	addi	sp,sp,48
    9fe0edfc:	8082                	ret
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    9fe0edfe:	02040513          	addi	a0,s0,32
    9fe0ee02:	6f4000ef          	jal	ra,9fe0f4f6 <xTaskRemoveFromEventList>
    9fe0ee06:	d17d                	beqz	a0,9fe0edec <xQueueReceiveFromISR+0x82>
                        if( pxHigherPriorityTaskWoken != NULL )
    9fe0ee08:	d0f5                	beqz	s1,9fe0edec <xQueueReceiveFromISR+0x82>
                            *pxHigherPriorityTaskWoken = pdTRUE;
    9fe0ee0a:	4785                	li	a5,1
    9fe0ee0c:	e09c                	sd	a5,0(s1)
            xReturn = pdPASS;
    9fe0ee0e:	4505                	li	a0,1
    9fe0ee10:	bff9                	j	9fe0edee <xQueueReceiveFromISR+0x84>

000000009fe0ee12 <vQueueAddToRegistry>:

        configASSERT( xQueue );

        QueueRegistryItem_t * pxEntryToWrite = NULL;

        if( pcQueueName != NULL )
    9fe0ee12:	c1b9                	beqz	a1,9fe0ee58 <vQueueAddToRegistry+0x46>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    9fe0ee14:	4701                	li	a4,0
    9fe0ee16:	0000e897          	auipc	a7,0xe
    9fe0ee1a:	69a88893          	addi	a7,a7,1690 # 9fe1d4b0 <xQueueRegistry>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
    9fe0ee1e:	00471793          	slli	a5,a4,0x4
    9fe0ee22:	00f886b3          	add	a3,a7,a5
    9fe0ee26:	0086b803          	ld	a6,8(a3)
        QueueRegistryItem_t * pxEntryToWrite = NULL;
    9fe0ee2a:	4601                	li	a2,0
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    9fe0ee2c:	03200313          	li	t1,50
                if( xQueue == xQueueRegistry[ ux ].xHandle )
    9fe0ee30:	02a80063          	beq	a6,a0,9fe0ee50 <vQueueAddToRegistry+0x3e>
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    9fe0ee34:	00170793          	addi	a5,a4,1
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
                    break;
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
    9fe0ee38:	c20d                	beqz	a2,9fe0ee5a <vQueueAddToRegistry+0x48>
    9fe0ee3a:	873e                	mv	a4,a5
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    9fe0ee3c:	00678c63          	beq	a5,t1,9fe0ee54 <vQueueAddToRegistry+0x42>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
    9fe0ee40:	00471793          	slli	a5,a4,0x4
    9fe0ee44:	00f886b3          	add	a3,a7,a5
    9fe0ee48:	0086b803          	ld	a6,8(a3)
    9fe0ee4c:	fea814e3          	bne	a6,a0,9fe0ee34 <vQueueAddToRegistry+0x22>
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
    9fe0ee50:	00f88633          	add	a2,a7,a5
        }

        if( pxEntryToWrite != NULL )
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
    9fe0ee54:	e20c                	sd	a1,0(a2)
            pxEntryToWrite->xHandle = xQueue;
    9fe0ee56:	e608                	sd	a0,8(a2)

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
    9fe0ee58:	8082                	ret
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
    9fe0ee5a:	0006b803          	ld	a6,0(a3)
                if( xQueue == xQueueRegistry[ ux ].xHandle )
    9fe0ee5e:	06c1                	addi	a3,a3,16
    9fe0ee60:	863a                	mv	a2,a4
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    9fe0ee62:	873e                	mv	a4,a5
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
    9fe0ee64:	00080f63          	beqz	a6,9fe0ee82 <vQueueAddToRegistry+0x70>
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    9fe0ee68:	fe6788e3          	beq	a5,t1,9fe0ee58 <vQueueAddToRegistry+0x46>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
    9fe0ee6c:	6690                	ld	a2,8(a3)
    9fe0ee6e:	00c50f63          	beq	a0,a2,9fe0ee8c <vQueueAddToRegistry+0x7a>
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
    9fe0ee72:	0006b803          	ld	a6,0(a3)
    9fe0ee76:	0785                	addi	a5,a5,1
                if( xQueue == xQueueRegistry[ ux ].xHandle )
    9fe0ee78:	06c1                	addi	a3,a3,16
    9fe0ee7a:	863a                	mv	a2,a4
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    9fe0ee7c:	873e                	mv	a4,a5
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
    9fe0ee7e:	fe0815e3          	bnez	a6,9fe0ee68 <vQueueAddToRegistry+0x56>
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
    9fe0ee82:	0612                	slli	a2,a2,0x4
    9fe0ee84:	9646                	add	a2,a2,a7
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    9fe0ee86:	fa679de3          	bne	a5,t1,9fe0ee40 <vQueueAddToRegistry+0x2e>
    9fe0ee8a:	b7e9                	j	9fe0ee54 <vQueueAddToRegistry+0x42>
    9fe0ee8c:	0792                	slli	a5,a5,0x4
    9fe0ee8e:	b7c9                	j	9fe0ee50 <vQueueAddToRegistry+0x3e>

000000009fe0ee90 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    9fe0ee90:	1101                	addi	sp,sp,-32
    9fe0ee92:	e822                	sd	s0,16(sp)
    9fe0ee94:	e426                	sd	s1,8(sp)
    9fe0ee96:	e04a                	sd	s2,0(sp)
    9fe0ee98:	842a                	mv	s0,a0
    9fe0ee9a:	ec06                	sd	ra,24(sp)
    9fe0ee9c:	84ae                	mv	s1,a1
    9fe0ee9e:	8932                	mv	s2,a2
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    9fe0eea0:	009000ef          	jal	ra,9fe0f6a8 <vTaskEnterCritical>
    9fe0eea4:	08844783          	lbu	a5,136(s0)
    9fe0eea8:	577d                	li	a4,-1
    9fe0eeaa:	0187979b          	slliw	a5,a5,0x18
    9fe0eeae:	4187d79b          	sraiw	a5,a5,0x18
    9fe0eeb2:	00e79463          	bne	a5,a4,9fe0eeba <vQueueWaitForMessageRestricted+0x2a>
    9fe0eeb6:	08040423          	sb	zero,136(s0)
    9fe0eeba:	08944783          	lbu	a5,137(s0)
    9fe0eebe:	577d                	li	a4,-1
    9fe0eec0:	0187979b          	slliw	a5,a5,0x18
    9fe0eec4:	4187d79b          	sraiw	a5,a5,0x18
    9fe0eec8:	00e79463          	bne	a5,a4,9fe0eed0 <vQueueWaitForMessageRestricted+0x40>
    9fe0eecc:	080404a3          	sb	zero,137(s0)
    9fe0eed0:	7fa000ef          	jal	ra,9fe0f6ca <vTaskExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    9fe0eed4:	783c                	ld	a5,112(s0)
    9fe0eed6:	cb89                	beqz	a5,9fe0eee8 <vQueueWaitForMessageRestricted+0x58>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    9fe0eed8:	8522                	mv	a0,s0
    }
    9fe0eeda:	6442                	ld	s0,16(sp)
    9fe0eedc:	60e2                	ld	ra,24(sp)
    9fe0eede:	64a2                	ld	s1,8(sp)
    9fe0eee0:	6902                	ld	s2,0(sp)
    9fe0eee2:	6105                	addi	sp,sp,32
        prvUnlockQueue( pxQueue );
    9fe0eee4:	901ff06f          	j	9fe0e7e4 <prvUnlockQueue>
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    9fe0eee8:	04840513          	addi	a0,s0,72
    9fe0eeec:	864a                	mv	a2,s2
    9fe0eeee:	85a6                	mv	a1,s1
    9fe0eef0:	5be000ef          	jal	ra,9fe0f4ae <vTaskPlaceOnEventListRestricted>
        prvUnlockQueue( pxQueue );
    9fe0eef4:	8522                	mv	a0,s0
    }
    9fe0eef6:	6442                	ld	s0,16(sp)
    9fe0eef8:	60e2                	ld	ra,24(sp)
    9fe0eefa:	64a2                	ld	s1,8(sp)
    9fe0eefc:	6902                	ld	s2,0(sp)
    9fe0eefe:	6105                	addi	sp,sp,32
        prvUnlockQueue( pxQueue );
    9fe0ef00:	8e5ff06f          	j	9fe0e7e4 <prvUnlockQueue>

000000009fe0ef04 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
    9fe0ef04:	7179                	addi	sp,sp,-48
    9fe0ef06:	ec26                	sd	s1,24(sp)
    #if ( INCLUDE_xTaskAbortDelay == 1 )
        {
            /* About to enter a delayed list, so ensure the ucDelayAborted flag is
             * reset to pdFALSE so it can be detected as having been set to pdTRUE
             * when the task leaves the Blocked state. */
            pxCurrentTCB->ucDelayAborted = pdFALSE;
    9fe0ef08:	00011497          	auipc	s1,0x11
    9fe0ef0c:	d4048493          	addi	s1,s1,-704 # 9fe1fc48 <pxCurrentTCB>
{
    9fe0ef10:	e84a                	sd	s2,16(sp)
    const TickType_t xConstTickCount = xTickCount;
    9fe0ef12:	00011917          	auipc	s2,0x11
    9fe0ef16:	d9693903          	ld	s2,-618(s2) # 9fe1fca8 <xTickCount>
            pxCurrentTCB->ucDelayAborted = pdFALSE;
    9fe0ef1a:	6098                	ld	a4,0(s1)
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    9fe0ef1c:	609c                	ld	a5,0(s1)
{
    9fe0ef1e:	f022                	sd	s0,32(sp)
    9fe0ef20:	e44e                	sd	s3,8(sp)
    9fe0ef22:	f406                	sd	ra,40(sp)
    9fe0ef24:	842a                	mv	s0,a0
            pxCurrentTCB->ucDelayAborted = pdFALSE;
    9fe0ef26:	0a070023          	sb	zero,160(a4)
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    9fe0ef2a:	00878513          	addi	a0,a5,8
{
    9fe0ef2e:	89ae                	mv	s3,a1
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    9fe0ef30:	0f8010ef          	jal	ra,9fe10028 <uxListRemove>
    9fe0ef34:	ed19                	bnez	a0,9fe0ef52 <prvAddCurrentTaskToDelayedList+0x4e>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
    9fe0ef36:	609c                	ld	a5,0(s1)
    9fe0ef38:	00011717          	auipc	a4,0x11
    9fe0ef3c:	d4870713          	addi	a4,a4,-696 # 9fe1fc80 <uxTopReadyPriority>
    9fe0ef40:	6314                	ld	a3,0(a4)
    9fe0ef42:	6fb0                	ld	a2,88(a5)
    9fe0ef44:	4785                	li	a5,1
    9fe0ef46:	00c797b3          	sll	a5,a5,a2
    9fe0ef4a:	fff7c793          	not	a5,a5
    9fe0ef4e:	8ff5                	and	a5,a5,a3
    9fe0ef50:	e31c                	sd	a5,0(a4)
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    9fe0ef52:	57fd                	li	a5,-1
    9fe0ef54:	04f40c63          	beq	s0,a5,9fe0efac <prvAddCurrentTaskToDelayedList+0xa8>
                 * does not occur.  This may overflow but this doesn't matter, the
                 * kernel will manage it correctly. */
                xTimeToWake = xConstTickCount + xTicksToWait;

                /* The list item will be inserted in wake time order. */
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    9fe0ef58:	609c                	ld	a5,0(s1)
                xTimeToWake = xConstTickCount + xTicksToWait;
    9fe0ef5a:	944a                	add	s0,s0,s2
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    9fe0ef5c:	e780                	sd	s0,8(a5)

                if( xTimeToWake < xConstTickCount )
    9fe0ef5e:	03246963          	bltu	s0,s2,9fe0ef90 <prvAddCurrentTaskToDelayedList+0x8c>
                }
                else
                {
                    /* The wake time has not overflowed, so the current block list
                     * is used. */
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    9fe0ef62:	00011517          	auipc	a0,0x11
    9fe0ef66:	cee53503          	ld	a0,-786(a0) # 9fe1fc50 <pxDelayedTaskList>
    9fe0ef6a:	608c                	ld	a1,0(s1)
    9fe0ef6c:	05a1                	addi	a1,a1,8
    9fe0ef6e:	08c010ef          	jal	ra,9fe0fffa <vListInsert>

                    /* If the task entering the blocked state was placed at the
                     * head of the list of blocked tasks then xNextTaskUnblockTime
                     * needs to be updated too. */
                    if( xTimeToWake < xNextTaskUnblockTime )
    9fe0ef72:	00011797          	auipc	a5,0x11
    9fe0ef76:	d1678793          	addi	a5,a5,-746 # 9fe1fc88 <xNextTaskUnblockTime>
    9fe0ef7a:	6398                	ld	a4,0(a5)
    9fe0ef7c:	00e47363          	bgeu	s0,a4,9fe0ef82 <prvAddCurrentTaskToDelayedList+0x7e>
                    {
                        xNextTaskUnblockTime = xTimeToWake;
    9fe0ef80:	e380                	sd	s0,0(a5)

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
    9fe0ef82:	70a2                	ld	ra,40(sp)
    9fe0ef84:	7402                	ld	s0,32(sp)
    9fe0ef86:	64e2                	ld	s1,24(sp)
    9fe0ef88:	6942                	ld	s2,16(sp)
    9fe0ef8a:	69a2                	ld	s3,8(sp)
    9fe0ef8c:	6145                	addi	sp,sp,48
    9fe0ef8e:	8082                	ret
    9fe0ef90:	7402                	ld	s0,32(sp)
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    9fe0ef92:	00011517          	auipc	a0,0x11
    9fe0ef96:	cc653503          	ld	a0,-826(a0) # 9fe1fc58 <pxOverflowDelayedTaskList>
    9fe0ef9a:	608c                	ld	a1,0(s1)
}
    9fe0ef9c:	70a2                	ld	ra,40(sp)
    9fe0ef9e:	64e2                	ld	s1,24(sp)
    9fe0efa0:	6942                	ld	s2,16(sp)
    9fe0efa2:	69a2                	ld	s3,8(sp)
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    9fe0efa4:	05a1                	addi	a1,a1,8
}
    9fe0efa6:	6145                	addi	sp,sp,48
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    9fe0efa8:	0520106f          	j	9fe0fffa <vListInsert>
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    9fe0efac:	fa0986e3          	beqz	s3,9fe0ef58 <prvAddCurrentTaskToDelayedList+0x54>
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    9fe0efb0:	0000f797          	auipc	a5,0xf
    9fe0efb4:	9d878793          	addi	a5,a5,-1576 # 9fe1d988 <xSuspendedTaskList>
    9fe0efb8:	6098                	ld	a4,0(s1)
    9fe0efba:	6794                	ld	a3,8(a5)
    9fe0efbc:	0004b883          	ld	a7,0(s1)
    9fe0efc0:	608c                	ld	a1,0(s1)
    9fe0efc2:	eb14                	sd	a3,16(a4)
    9fe0efc4:	6a88                	ld	a0,16(a3)
    9fe0efc6:	6090                	ld	a2,0(s1)
    9fe0efc8:	0004b803          	ld	a6,0(s1)
    9fe0efcc:	6398                	ld	a4,0(a5)
    9fe0efce:	00a8bc23          	sd	a0,24(a7)
    9fe0efd2:	05a1                	addi	a1,a1,8
    9fe0efd4:	e50c                	sd	a1,8(a0)
    9fe0efd6:	0621                	addi	a2,a2,8
    9fe0efd8:	ea90                	sd	a2,16(a3)
    9fe0efda:	0705                	addi	a4,a4,1
    9fe0efdc:	02f83423          	sd	a5,40(a6)
    9fe0efe0:	e398                	sd	a4,0(a5)
}
    9fe0efe2:	70a2                	ld	ra,40(sp)
    9fe0efe4:	7402                	ld	s0,32(sp)
    9fe0efe6:	64e2                	ld	s1,24(sp)
    9fe0efe8:	6942                	ld	s2,16(sp)
    9fe0efea:	69a2                	ld	s3,8(sp)
    9fe0efec:	6145                	addi	sp,sp,48
    9fe0efee:	8082                	ret

000000009fe0eff0 <vTaskSwitchContext.part.0>:
void vTaskSwitchContext( void )
    9fe0eff0:	1101                	addi	sp,sp,-32
    9fe0eff2:	e822                	sd	s0,16(sp)
        xYieldPending = pdFALSE;
    9fe0eff4:	00011797          	auipc	a5,0x11
    9fe0eff8:	ca07be23          	sd	zero,-836(a5) # 9fe1fcb0 <xYieldPending>
        taskCHECK_FOR_STACK_OVERFLOW();
    9fe0effc:	00011417          	auipc	s0,0x11
    9fe0f000:	c4c40413          	addi	s0,s0,-948 # 9fe1fc48 <pxCurrentTCB>
    9fe0f004:	6018                	ld	a4,0(s0)
void vTaskSwitchContext( void )
    9fe0f006:	ec06                	sd	ra,24(sp)
    9fe0f008:	e426                	sd	s1,8(sp)
        taskCHECK_FOR_STACK_OVERFLOW();
    9fe0f00a:	7338                	ld	a4,96(a4)
    9fe0f00c:	a5a5a7b7          	lui	a5,0xa5a5a
    9fe0f010:	5a578793          	addi	a5,a5,1445 # ffffffffa5a5a5a5 <_end+0xffffffff05b9a8a5>
    9fe0f014:	4314                	lw	a3,0(a4)
    9fe0f016:	00f69563          	bne	a3,a5,9fe0f020 <vTaskSwitchContext.part.0+0x30>
    9fe0f01a:	435c                	lw	a5,4(a4)
    9fe0f01c:	06d78b63          	beq	a5,a3,9fe0f092 <vTaskSwitchContext.part.0+0xa2>
    9fe0f020:	6008                	ld	a0,0(s0)
    9fe0f022:	600c                	ld	a1,0(s0)
    9fe0f024:	06858593          	addi	a1,a1,104
    9fe0f028:	e47f30ef          	jal	ra,9fe02e6e <vApplicationStackOverflowHook>
                pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
    9fe0f02c:	00011497          	auipc	s1,0x11
    9fe0f030:	c1448493          	addi	s1,s1,-1004 # 9fe1fc40 <FreeRTOS_errno>
    9fe0f034:	601c                	ld	a5,0(s0)
    9fe0f036:	4098                	lw	a4,0(s1)
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    9fe0f038:	00011517          	auipc	a0,0x11
    9fe0f03c:	c4853503          	ld	a0,-952(a0) # 9fe1fc80 <uxTopReadyPriority>
    9fe0f040:	1502                	slli	a0,a0,0x20
                pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
    9fe0f042:	0ae7a223          	sw	a4,164(a5)
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    9fe0f046:	9101                	srli	a0,a0,0x20
    9fe0f048:	da9f30ef          	jal	ra,9fe02df0 <__clzdi2>
    9fe0f04c:	47fd                	li	a5,31
    9fe0f04e:	3501                	addiw	a0,a0,-32
    9fe0f050:	40a78533          	sub	a0,a5,a0
    9fe0f054:	00251793          	slli	a5,a0,0x2
    9fe0f058:	97aa                	add	a5,a5,a0
    9fe0f05a:	0000e717          	auipc	a4,0xe
    9fe0f05e:	77670713          	addi	a4,a4,1910 # 9fe1d7d0 <pxReadyTasksLists>
    9fe0f062:	078e                	slli	a5,a5,0x3
    9fe0f064:	00f706b3          	add	a3,a4,a5
    9fe0f068:	6690                	ld	a2,8(a3)
    9fe0f06a:	07c1                	addi	a5,a5,16
    9fe0f06c:	97ba                	add	a5,a5,a4
    9fe0f06e:	6618                	ld	a4,8(a2)
    9fe0f070:	e698                	sd	a4,8(a3)
    9fe0f072:	00f70d63          	beq	a4,a5,9fe0f08c <vTaskSwitchContext.part.0+0x9c>
    9fe0f076:	6f1c                	ld	a5,24(a4)
}
    9fe0f078:	60e2                	ld	ra,24(sp)
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    9fe0f07a:	e01c                	sd	a5,0(s0)
                FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
    9fe0f07c:	601c                	ld	a5,0(s0)
}
    9fe0f07e:	6442                	ld	s0,16(sp)
                FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
    9fe0f080:	0a47a783          	lw	a5,164(a5)
    9fe0f084:	c09c                	sw	a5,0(s1)
}
    9fe0f086:	64a2                	ld	s1,8(sp)
    9fe0f088:	6105                	addi	sp,sp,32
    9fe0f08a:	8082                	ret
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    9fe0f08c:	6718                	ld	a4,8(a4)
    9fe0f08e:	e698                	sd	a4,8(a3)
    9fe0f090:	b7dd                	j	9fe0f076 <vTaskSwitchContext.part.0+0x86>
        taskCHECK_FOR_STACK_OVERFLOW();
    9fe0f092:	4714                	lw	a3,8(a4)
    9fe0f094:	f8f696e3          	bne	a3,a5,9fe0f020 <vTaskSwitchContext.part.0+0x30>
    9fe0f098:	475c                	lw	a5,12(a4)
    9fe0f09a:	f8d793e3          	bne	a5,a3,9fe0f020 <vTaskSwitchContext.part.0+0x30>
    9fe0f09e:	b779                	j	9fe0f02c <vTaskSwitchContext.part.0+0x3c>

000000009fe0f0a0 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( TaskFunction_t pxTaskCode,
    9fe0f0a0:	7139                	addi	sp,sp,-64
    9fe0f0a2:	f822                	sd	s0,48(sp)
    9fe0f0a4:	f426                	sd	s1,40(sp)
    9fe0f0a6:	f04a                	sd	s2,32(sp)
    9fe0f0a8:	ec4e                	sd	s3,24(sp)
    9fe0f0aa:	e852                	sd	s4,16(sp)
    9fe0f0ac:	e456                	sd	s5,8(sp)
    9fe0f0ae:	e05a                	sd	s6,0(sp)
    9fe0f0b0:	fc06                	sd	ra,56(sp)
    9fe0f0b2:	8a2a                	mv	s4,a0
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
    9fe0f0b4:	06083503          	ld	a0,96(a6)
static void prvInitialiseNewTask( TaskFunction_t pxTaskCode,
    9fe0f0b8:	842e                	mv	s0,a1
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
    9fe0f0ba:	02061593          	slli	a1,a2,0x20
static void prvInitialiseNewTask( TaskFunction_t pxTaskCode,
    9fe0f0be:	89b2                	mv	s3,a2
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
    9fe0f0c0:	01d5d613          	srli	a2,a1,0x1d
    9fe0f0c4:	0a500593          	li	a1,165
static void prvInitialiseNewTask( TaskFunction_t pxTaskCode,
    9fe0f0c8:	84c2                	mv	s1,a6
    9fe0f0ca:	893a                	mv	s2,a4
    9fe0f0cc:	8b3e                	mv	s6,a5
    9fe0f0ce:	8ab6                	mv	s5,a3
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
    9fe0f0d0:	eadfc0ef          	jal	ra,9fe0bf7c <memset>
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
    9fe0f0d4:	39fd                	addiw	s3,s3,-1
    9fe0f0d6:	70bc                	ld	a5,96(s1)
    9fe0f0d8:	02099713          	slli	a4,s3,0x20
    9fe0f0dc:	01d75993          	srli	s3,a4,0x1d
    9fe0f0e0:	99be                	add	s3,s3,a5
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
    9fe0f0e2:	ff09f993          	andi	s3,s3,-16
    if( pcName != NULL )
    9fe0f0e6:	cc51                	beqz	s0,9fe0f182 <prvInitialiseNewTask.constprop.0+0xe2>
    9fe0f0e8:	85a2                	mv	a1,s0
    9fe0f0ea:	06848813          	addi	a6,s1,104
    9fe0f0ee:	01040793          	addi	a5,s0,16
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    9fe0f0f2:	0005c883          	lbu	a7,0(a1)
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    9fe0f0f6:	0805                	addi	a6,a6,1
    9fe0f0f8:	0585                	addi	a1,a1,1
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    9fe0f0fa:	ff180fa3          	sb	a7,-1(a6)
            if( pcName[ x ] == ( char ) 0x00 )
    9fe0f0fe:	00088463          	beqz	a7,9fe0f106 <prvInitialiseNewTask.constprop.0+0x66>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    9fe0f102:	fef598e3          	bne	a1,a5,9fe0f0f2 <prvInitialiseNewTask.constprop.0+0x52>
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    9fe0f106:	06048ba3          	sb	zero,119(s1)
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    9fe0f10a:	479d                	li	a5,7
    9fe0f10c:	0127f363          	bgeu	a5,s2,9fe0f112 <prvInitialiseNewTask.constprop.0+0x72>
    9fe0f110:	491d                	li	s2,7
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    9fe0f112:	00848513          	addi	a0,s1,8
    pxNewTCB->uxPriority = uxPriority;
    9fe0f116:	0524bc23          	sd	s2,88(s1)
            pxNewTCB->uxBasePriority = uxPriority;
    9fe0f11a:	0924b023          	sd	s2,128(s1)
            pxNewTCB->uxMutexesHeld = 0;
    9fe0f11e:	0804b423          	sd	zero,136(s1)
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    9fe0f122:	6d3000ef          	jal	ra,9fe0fff4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    9fe0f126:	03048513          	addi	a0,s1,48
    9fe0f12a:	6cb000ef          	jal	ra,9fe0fff4 <vListInitialiseItem>
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    9fe0f12e:	47a1                	li	a5,8
    9fe0f130:	41278433          	sub	s0,a5,s2
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
    9fe0f134:	4631                	li	a2,12
    9fe0f136:	4581                	li	a1,0
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    9fe0f138:	f084                	sd	s1,32(s1)
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    9fe0f13a:	f880                	sd	s0,48(s1)
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    9fe0f13c:	e4a4                	sd	s1,72(s1)
            pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
    9fe0f13e:	0604bc23          	sd	zero,120(s1)
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
    9fe0f142:	09048513          	addi	a0,s1,144
    9fe0f146:	e37fc0ef          	jal	ra,9fe0bf7c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
    9fe0f14a:	460d                	li	a2,3
    9fe0f14c:	4581                	li	a1,0
    9fe0f14e:	09c48513          	addi	a0,s1,156
    9fe0f152:	e2bfc0ef          	jal	ra,9fe0bf7c <memset>
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    9fe0f156:	8656                	mv	a2,s5
            pxNewTCB->ucDelayAborted = pdFALSE;
    9fe0f158:	0a048023          	sb	zero,160(s1)
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    9fe0f15c:	85d2                	mv	a1,s4
    9fe0f15e:	854e                	mv	a0,s3
    9fe0f160:	ba0f10ef          	jal	ra,9fe00500 <pxPortInitialiseStack>
    9fe0f164:	e088                	sd	a0,0(s1)
    if( pxCreatedTask != NULL )
    9fe0f166:	000b0463          	beqz	s6,9fe0f16e <prvInitialiseNewTask.constprop.0+0xce>
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    9fe0f16a:	009b3023          	sd	s1,0(s6)
}
    9fe0f16e:	70e2                	ld	ra,56(sp)
    9fe0f170:	7442                	ld	s0,48(sp)
    9fe0f172:	74a2                	ld	s1,40(sp)
    9fe0f174:	7902                	ld	s2,32(sp)
    9fe0f176:	69e2                	ld	s3,24(sp)
    9fe0f178:	6a42                	ld	s4,16(sp)
    9fe0f17a:	6aa2                	ld	s5,8(sp)
    9fe0f17c:	6b02                	ld	s6,0(sp)
    9fe0f17e:	6121                	addi	sp,sp,64
    9fe0f180:	8082                	ret
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
    9fe0f182:	06048423          	sb	zero,104(s1)
    9fe0f186:	b751                	j	9fe0f10a <prvInitialiseNewTask.constprop.0+0x6a>

000000009fe0f188 <prvIdleTask>:
{
    9fe0f188:	715d                	addi	sp,sp,-80
    9fe0f18a:	fc26                	sd	s1,56(sp)
    9fe0f18c:	f84a                	sd	s2,48(sp)
    9fe0f18e:	f44e                	sd	s3,40(sp)
    9fe0f190:	f052                	sd	s4,32(sp)
    9fe0f192:	ec56                	sd	s5,24(sp)
    9fe0f194:	e85a                	sd	s6,16(sp)
    9fe0f196:	e45e                	sd	s7,8(sp)
    9fe0f198:	e486                	sd	ra,72(sp)
    9fe0f19a:	e0a2                	sd	s0,64(sp)
    9fe0f19c:	00011497          	auipc	s1,0x11
    9fe0f1a0:	acc48493          	addi	s1,s1,-1332 # 9fe1fc68 <uxDeletedTasksWaitingCleanUp>
    9fe0f1a4:	00011997          	auipc	s3,0x11
    9fe0f1a8:	afc98993          	addi	s3,s3,-1284 # 9fe1fca0 <xSchedulerRunning>
    9fe0f1ac:	00011a17          	auipc	s4,0x11
    9fe0f1b0:	a9ca0a13          	addi	s4,s4,-1380 # 9fe1fc48 <pxCurrentTCB>
    9fe0f1b4:	0000ea97          	auipc	s5,0xe
    9fe0f1b8:	7fca8a93          	addi	s5,s5,2044 # 9fe1d9b0 <xTasksWaitingTermination>
    9fe0f1bc:	00011917          	auipc	s2,0x11
    9fe0f1c0:	aa490913          	addi	s2,s2,-1372 # 9fe1fc60 <uxCurrentNumberOfTasks>
    9fe0f1c4:	0000eb97          	auipc	s7,0xe
    9fe0f1c8:	60cb8b93          	addi	s7,s7,1548 # 9fe1d7d0 <pxReadyTasksLists>
                else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
    9fe0f1cc:	4b05                	li	s6,1
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    9fe0f1ce:	609c                	ld	a5,0(s1)
    9fe0f1d0:	cba5                	beqz	a5,9fe0f240 <prvIdleTask+0xb8>
        portDISABLE_INTERRUPTS();
    9fe0f1d2:	30047073          	csrci	mstatus,8
        if( xSchedulerRunning != pdFALSE )
    9fe0f1d6:	0009b783          	ld	a5,0(s3)
    9fe0f1da:	cb81                	beqz	a5,9fe0f1ea <prvIdleTask+0x62>
            ( pxCurrentTCB->uxCriticalNesting )++;
    9fe0f1dc:	000a3703          	ld	a4,0(s4)
            if( pxCurrentTCB->uxCriticalNesting == 1 )
    9fe0f1e0:	000a3783          	ld	a5,0(s4)
            ( pxCurrentTCB->uxCriticalNesting )++;
    9fe0f1e4:	7f3c                	ld	a5,120(a4)
    9fe0f1e6:	0785                	addi	a5,a5,1
    9fe0f1e8:	ff3c                	sd	a5,120(a4)
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    9fe0f1ea:	018ab783          	ld	a5,24(s5)
    9fe0f1ee:	6f80                	ld	s0,24(a5)
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    9fe0f1f0:	00840513          	addi	a0,s0,8
    9fe0f1f4:	635000ef          	jal	ra,9fe10028 <uxListRemove>
                    --uxCurrentNumberOfTasks;
    9fe0f1f8:	00093783          	ld	a5,0(s2)
    9fe0f1fc:	17fd                	addi	a5,a5,-1
    9fe0f1fe:	00f93023          	sd	a5,0(s2)
                    --uxDeletedTasksWaitingCleanUp;
    9fe0f202:	609c                	ld	a5,0(s1)
    9fe0f204:	17fd                	addi	a5,a5,-1
    9fe0f206:	e09c                	sd	a5,0(s1)
        if( xSchedulerRunning != pdFALSE )
    9fe0f208:	0009b783          	ld	a5,0(s3)
    9fe0f20c:	c385                	beqz	a5,9fe0f22c <prvIdleTask+0xa4>
            if( pxCurrentTCB->uxCriticalNesting > 0U )
    9fe0f20e:	000a3783          	ld	a5,0(s4)
    9fe0f212:	7fbc                	ld	a5,120(a5)
    9fe0f214:	cf81                	beqz	a5,9fe0f22c <prvIdleTask+0xa4>
                ( pxCurrentTCB->uxCriticalNesting )--;
    9fe0f216:	000a3703          	ld	a4,0(s4)
                if( pxCurrentTCB->uxCriticalNesting == 0U )
    9fe0f21a:	000a3683          	ld	a3,0(s4)
                ( pxCurrentTCB->uxCriticalNesting )--;
    9fe0f21e:	7f3c                	ld	a5,120(a4)
    9fe0f220:	17fd                	addi	a5,a5,-1
    9fe0f222:	ff3c                	sd	a5,120(a4)
                if( pxCurrentTCB->uxCriticalNesting == 0U )
    9fe0f224:	7ebc                	ld	a5,120(a3)
    9fe0f226:	e399                	bnez	a5,9fe0f22c <prvIdleTask+0xa4>
                    portENABLE_INTERRUPTS();
    9fe0f228:	30046073          	csrsi	mstatus,8
                if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
    9fe0f22c:	09f44783          	lbu	a5,159(s0)
    9fe0f230:	cf99                	beqz	a5,9fe0f24e <prvIdleTask+0xc6>
                else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
    9fe0f232:	f9679ee3          	bne	a5,s6,9fe0f1ce <prvIdleTask+0x46>
                    vPortFree( pxTCB );
    9fe0f236:	8522                	mv	a0,s0
    9fe0f238:	ca4ff0ef          	jal	ra,9fe0e6dc <vPortFree>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    9fe0f23c:	609c                	ld	a5,0(s1)
    9fe0f23e:	fbd1                	bnez	a5,9fe0f1d2 <prvIdleTask+0x4a>
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    9fe0f240:	000bb783          	ld	a5,0(s7)
    9fe0f244:	f8fb75e3          	bgeu	s6,a5,9fe0f1ce <prvIdleTask+0x46>
                    taskYIELD();
    9fe0f248:	00000073          	ecall
    9fe0f24c:	b749                	j	9fe0f1ce <prvIdleTask+0x46>
                    vPortFreeStack( pxTCB->pxStack );
    9fe0f24e:	7028                	ld	a0,96(s0)
    9fe0f250:	c8cff0ef          	jal	ra,9fe0e6dc <vPortFree>
                    vPortFree( pxTCB );
    9fe0f254:	8522                	mv	a0,s0
    9fe0f256:	c86ff0ef          	jal	ra,9fe0e6dc <vPortFree>
    }
    9fe0f25a:	bf95                	j	9fe0f1ce <prvIdleTask+0x46>

000000009fe0f25c <xTaskIncrementTick.part.0>:
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    9fe0f25c:	00011797          	auipc	a5,0x11
    9fe0f260:	a4c78793          	addi	a5,a5,-1460 # 9fe1fca8 <xTickCount>
    9fe0f264:	0007b803          	ld	a6,0(a5)
    9fe0f268:	00011f17          	auipc	t5,0x11
    9fe0f26c:	a20f0f13          	addi	t5,t5,-1504 # 9fe1fc88 <xNextTaskUnblockTime>
    9fe0f270:	0805                	addi	a6,a6,1
        xTickCount = xConstTickCount;
    9fe0f272:	0107b023          	sd	a6,0(a5)
        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    9fe0f276:	16080663          	beqz	a6,9fe0f3e2 <xTaskIncrementTick.part.0+0x186>
        if( xConstTickCount >= xNextTaskUnblockTime )
    9fe0f27a:	000f3783          	ld	a5,0(t5)
    9fe0f27e:	0ef86963          	bltu	a6,a5,9fe0f370 <xTaskIncrementTick.part.0+0x114>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    9fe0f282:	00011897          	auipc	a7,0x11
    9fe0f286:	9ce88893          	addi	a7,a7,-1586 # 9fe1fc50 <pxDelayedTaskList>
    9fe0f28a:	0008b783          	ld	a5,0(a7)
    BaseType_t xSwitchRequired = pdFALSE;
    9fe0f28e:	4501                	li	a0,0
    9fe0f290:	0000e597          	auipc	a1,0xe
    9fe0f294:	54058593          	addi	a1,a1,1344 # 9fe1d7d0 <pxReadyTasksLists>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    9fe0f298:	639c                	ld	a5,0(a5)
    9fe0f29a:	00011e17          	auipc	t3,0x11
    9fe0f29e:	9aee0e13          	addi	t3,t3,-1618 # 9fe1fc48 <pxCurrentTCB>
    9fe0f2a2:	10078a63          	beqz	a5,9fe0f3b6 <xTaskIncrementTick.part.0+0x15a>
                    prvAddTaskToReadyList( pxTCB );
    9fe0f2a6:	00011317          	auipc	t1,0x11
    9fe0f2aa:	9da30313          	addi	t1,t1,-1574 # 9fe1fc80 <uxTopReadyPriority>
    9fe0f2ae:	4e85                	li	t4,1
    9fe0f2b0:	a069                	j	9fe0f33a <xTaskIncrementTick.part.0+0xde>
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
    9fe0f2b2:	0207b423          	sd	zero,40(a5)
    9fe0f2b6:	6314                	ld	a3,0(a4)
    9fe0f2b8:	16fd                	addi	a3,a3,-1
    9fe0f2ba:	e314                	sd	a3,0(a4)
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    9fe0f2bc:	6bb8                	ld	a4,80(a5)
    9fe0f2be:	c315                	beqz	a4,9fe0f2e2 <xTaskIncrementTick.part.0+0x86>
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
    9fe0f2c0:	0387bf83          	ld	t6,56(a5)
    9fe0f2c4:	63b4                	ld	a3,64(a5)
    9fe0f2c6:	00dfb823          	sd	a3,16(t6)
    9fe0f2ca:	0387bf83          	ld	t6,56(a5)
    9fe0f2ce:	01f6b423          	sd	t6,8(a3)
    9fe0f2d2:	6714                	ld	a3,8(a4)
    9fe0f2d4:	0e568563          	beq	a3,t0,9fe0f3be <xTaskIncrementTick.part.0+0x162>
    9fe0f2d8:	0407b823          	sd	zero,80(a5)
    9fe0f2dc:	6314                	ld	a3,0(a4)
    9fe0f2de:	16fd                	addi	a3,a3,-1
    9fe0f2e0:	e314                	sd	a3,0(a4)
                    prvAddTaskToReadyList( pxTCB );
    9fe0f2e2:	6fb8                	ld	a4,88(a5)
    9fe0f2e4:	00033f83          	ld	t6,0(t1)
    9fe0f2e8:	00271693          	slli	a3,a4,0x2
    9fe0f2ec:	96ba                	add	a3,a3,a4
    9fe0f2ee:	068e                	slli	a3,a3,0x3
    9fe0f2f0:	96ae                	add	a3,a3,a1
    9fe0f2f2:	6694                	ld	a3,8(a3)
    9fe0f2f4:	00ee9733          	sll	a4,t4,a4
    9fe0f2f8:	01f76733          	or	a4,a4,t6
    9fe0f2fc:	eb94                	sd	a3,16(a5)
    9fe0f2fe:	0106bf83          	ld	t6,16(a3)
    9fe0f302:	00e33023          	sd	a4,0(t1)
    9fe0f306:	01f7bc23          	sd	t6,24(a5)
    9fe0f30a:	00cfb423          	sd	a2,8(t6)
    9fe0f30e:	ea90                	sd	a2,16(a3)
    9fe0f310:	6fb4                	ld	a3,88(a5)
    9fe0f312:	00269713          	slli	a4,a3,0x2
    9fe0f316:	9736                	add	a4,a4,a3
    9fe0f318:	070e                	slli	a4,a4,0x3
    9fe0f31a:	972e                	add	a4,a4,a1
    9fe0f31c:	f798                	sd	a4,40(a5)
    9fe0f31e:	6314                	ld	a3,0(a4)
    9fe0f320:	0685                	addi	a3,a3,1
    9fe0f322:	e314                	sd	a3,0(a4)
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    9fe0f324:	000e3683          	ld	a3,0(t3)
    9fe0f328:	6fb8                	ld	a4,88(a5)
    9fe0f32a:	6ebc                	ld	a5,88(a3)
    9fe0f32c:	00f76363          	bltu	a4,a5,9fe0f332 <xTaskIncrementTick.part.0+0xd6>
                                xSwitchRequired = pdTRUE;
    9fe0f330:	4505                	li	a0,1
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    9fe0f332:	0008b783          	ld	a5,0(a7)
    9fe0f336:	639c                	ld	a5,0(a5)
    9fe0f338:	cfbd                	beqz	a5,9fe0f3b6 <xTaskIncrementTick.part.0+0x15a>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    9fe0f33a:	0008b783          	ld	a5,0(a7)
    9fe0f33e:	6f9c                	ld	a5,24(a5)
    9fe0f340:	6f9c                	ld	a5,24(a5)
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    9fe0f342:	6798                	ld	a4,8(a5)
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
    9fe0f344:	00878613          	addi	a2,a5,8
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
    9fe0f348:	03078293          	addi	t0,a5,48
                    if( xConstTickCount < xItemValue )
    9fe0f34c:	0ce86563          	bltu	a6,a4,9fe0f416 <xTaskIncrementTick.part.0+0x1ba>
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
    9fe0f350:	0107bf83          	ld	t6,16(a5)
    9fe0f354:	6f94                	ld	a3,24(a5)
    9fe0f356:	7798                	ld	a4,40(a5)
    9fe0f358:	00dfb823          	sd	a3,16(t6)
    9fe0f35c:	0107bf83          	ld	t6,16(a5)
    9fe0f360:	01f6b423          	sd	t6,8(a3)
    9fe0f364:	6714                	ld	a3,8(a4)
    9fe0f366:	f4c696e3          	bne	a3,a2,9fe0f2b2 <xTaskIncrementTick.part.0+0x56>
    9fe0f36a:	6f94                	ld	a3,24(a5)
    9fe0f36c:	e714                	sd	a3,8(a4)
    9fe0f36e:	b791                	j	9fe0f2b2 <xTaskIncrementTick.part.0+0x56>
    BaseType_t xSwitchRequired = pdFALSE;
    9fe0f370:	4501                	li	a0,0
    9fe0f372:	0000e597          	auipc	a1,0xe
    9fe0f376:	45e58593          	addi	a1,a1,1118 # 9fe1d7d0 <pxReadyTasksLists>
    9fe0f37a:	00011e17          	auipc	t3,0x11
    9fe0f37e:	8cee0e13          	addi	t3,t3,-1842 # 9fe1fc48 <pxCurrentTCB>
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    9fe0f382:	000e3783          	ld	a5,0(t3)
    9fe0f386:	4685                	li	a3,1
    9fe0f388:	6fb8                	ld	a4,88(a5)
    9fe0f38a:	00271793          	slli	a5,a4,0x2
    9fe0f38e:	97ba                	add	a5,a5,a4
    9fe0f390:	078e                	slli	a5,a5,0x3
    9fe0f392:	95be                	add	a1,a1,a5
    9fe0f394:	619c                	ld	a5,0(a1)
    9fe0f396:	00f6f363          	bgeu	a3,a5,9fe0f39c <xTaskIncrementTick.part.0+0x140>
                    xSwitchRequired = pdTRUE;
    9fe0f39a:	4505                	li	a0,1
                if( xPendedTicks == ( TickType_t ) 0 )
    9fe0f39c:	00011797          	auipc	a5,0x11
    9fe0f3a0:	8fc7b783          	ld	a5,-1796(a5) # 9fe1fc98 <xPendedTicks>
    9fe0f3a4:	c385                	beqz	a5,9fe0f3c4 <xTaskIncrementTick.part.0+0x168>
                if( xYieldPending != pdFALSE )
    9fe0f3a6:	00011797          	auipc	a5,0x11
    9fe0f3aa:	90a7b783          	ld	a5,-1782(a5) # 9fe1fcb0 <xYieldPending>
    9fe0f3ae:	c399                	beqz	a5,9fe0f3b4 <xTaskIncrementTick.part.0+0x158>
                    xSwitchRequired = pdTRUE;
    9fe0f3b0:	4505                	li	a0,1
    return xSwitchRequired;
    9fe0f3b2:	8082                	ret
}
    9fe0f3b4:	8082                	ret
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    9fe0f3b6:	57fd                	li	a5,-1
    9fe0f3b8:	00ff3023          	sd	a5,0(t5)
                    break;
    9fe0f3bc:	b7d9                	j	9fe0f382 <xTaskIncrementTick.part.0+0x126>
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
    9fe0f3be:	63b4                	ld	a3,64(a5)
    9fe0f3c0:	e714                	sd	a3,8(a4)
    9fe0f3c2:	bf19                	j	9fe0f2d8 <xTaskIncrementTick.part.0+0x7c>
BaseType_t xTaskIncrementTick( void )
    9fe0f3c4:	1101                	addi	sp,sp,-32
    9fe0f3c6:	e42a                	sd	a0,8(sp)
    9fe0f3c8:	ec06                	sd	ra,24(sp)
                    vApplicationTickHook();
    9fe0f3ca:	acdf30ef          	jal	ra,9fe02e96 <vApplicationTickHook>
                if( xYieldPending != pdFALSE )
    9fe0f3ce:	00011797          	auipc	a5,0x11
    9fe0f3d2:	8e27b783          	ld	a5,-1822(a5) # 9fe1fcb0 <xYieldPending>
                    vApplicationTickHook();
    9fe0f3d6:	6522                	ld	a0,8(sp)
                if( xYieldPending != pdFALSE )
    9fe0f3d8:	c391                	beqz	a5,9fe0f3dc <xTaskIncrementTick.part.0+0x180>
                    xSwitchRequired = pdTRUE;
    9fe0f3da:	4505                	li	a0,1
}
    9fe0f3dc:	60e2                	ld	ra,24(sp)
    9fe0f3de:	6105                	addi	sp,sp,32
    9fe0f3e0:	8082                	ret
            taskSWITCH_DELAYED_LISTS();
    9fe0f3e2:	00011797          	auipc	a5,0x11
    9fe0f3e6:	86e78793          	addi	a5,a5,-1938 # 9fe1fc50 <pxDelayedTaskList>
    9fe0f3ea:	00011717          	auipc	a4,0x11
    9fe0f3ee:	86e70713          	addi	a4,a4,-1938 # 9fe1fc58 <pxOverflowDelayedTaskList>
    9fe0f3f2:	6390                	ld	a2,0(a5)
    9fe0f3f4:	630c                	ld	a1,0(a4)
    9fe0f3f6:	00011697          	auipc	a3,0x11
    9fe0f3fa:	89a68693          	addi	a3,a3,-1894 # 9fe1fc90 <xNumOfOverflows>
    9fe0f3fe:	e38c                	sd	a1,0(a5)
    9fe0f400:	e310                	sd	a2,0(a4)
    9fe0f402:	6298                	ld	a4,0(a3)
    9fe0f404:	0705                	addi	a4,a4,1
    9fe0f406:	e298                	sd	a4,0(a3)
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    9fe0f408:	6398                	ld	a4,0(a5)
    9fe0f40a:	6318                	ld	a4,0(a4)
    9fe0f40c:	eb01                	bnez	a4,9fe0f41c <xTaskIncrementTick.part.0+0x1c0>
        xNextTaskUnblockTime = portMAX_DELAY;
    9fe0f40e:	57fd                	li	a5,-1
    9fe0f410:	00ff3023          	sd	a5,0(t5)
    9fe0f414:	b59d                	j	9fe0f27a <xTaskIncrementTick.part.0+0x1e>
                        xNextTaskUnblockTime = xItemValue;
    9fe0f416:	00ef3023          	sd	a4,0(t5)
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
    9fe0f41a:	b7a5                	j	9fe0f382 <xTaskIncrementTick.part.0+0x126>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    9fe0f41c:	639c                	ld	a5,0(a5)
    9fe0f41e:	6f9c                	ld	a5,24(a5)
    9fe0f420:	639c                	ld	a5,0(a5)
    9fe0f422:	00ff3023          	sd	a5,0(t5)
}
    9fe0f426:	bd91                	j	9fe0f27a <xTaskIncrementTick.part.0+0x1e>

000000009fe0f428 <vTaskSuspendAll>:
    ++uxSchedulerSuspended;
    9fe0f428:	00011717          	auipc	a4,0x11
    9fe0f42c:	84870713          	addi	a4,a4,-1976 # 9fe1fc70 <uxSchedulerSuspended>
    9fe0f430:	631c                	ld	a5,0(a4)
    9fe0f432:	0785                	addi	a5,a5,1
    9fe0f434:	e31c                	sd	a5,0(a4)
}
    9fe0f436:	8082                	ret

000000009fe0f438 <xTaskGetTickCount>:
}
    9fe0f438:	00011517          	auipc	a0,0x11
    9fe0f43c:	87053503          	ld	a0,-1936(a0) # 9fe1fca8 <xTickCount>
    9fe0f440:	8082                	ret

000000009fe0f442 <xTaskIncrementTick>:
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    9fe0f442:	00011797          	auipc	a5,0x11
    9fe0f446:	82e7b783          	ld	a5,-2002(a5) # 9fe1fc70 <uxSchedulerSuspended>
    9fe0f44a:	e399                	bnez	a5,9fe0f450 <xTaskIncrementTick+0xe>
    9fe0f44c:	e11ff06f          	j	9fe0f25c <xTaskIncrementTick.part.0>
{
    9fe0f450:	1141                	addi	sp,sp,-16
    9fe0f452:	e406                	sd	ra,8(sp)
        ++xPendedTicks;
    9fe0f454:	00011717          	auipc	a4,0x11
    9fe0f458:	84470713          	addi	a4,a4,-1980 # 9fe1fc98 <xPendedTicks>
    9fe0f45c:	631c                	ld	a5,0(a4)
    9fe0f45e:	0785                	addi	a5,a5,1
    9fe0f460:	e31c                	sd	a5,0(a4)
                vApplicationTickHook();
    9fe0f462:	a35f30ef          	jal	ra,9fe02e96 <vApplicationTickHook>
}
    9fe0f466:	60a2                	ld	ra,8(sp)
    9fe0f468:	4501                	li	a0,0
    9fe0f46a:	0141                	addi	sp,sp,16
    9fe0f46c:	8082                	ret

000000009fe0f46e <vTaskSwitchContext>:
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    9fe0f46e:	00011797          	auipc	a5,0x11
    9fe0f472:	8027b783          	ld	a5,-2046(a5) # 9fe1fc70 <uxSchedulerSuspended>
    9fe0f476:	c799                	beqz	a5,9fe0f484 <vTaskSwitchContext+0x16>
        xYieldPending = pdTRUE;
    9fe0f478:	4785                	li	a5,1
    9fe0f47a:	00011717          	auipc	a4,0x11
    9fe0f47e:	82f73b23          	sd	a5,-1994(a4) # 9fe1fcb0 <xYieldPending>
}
    9fe0f482:	8082                	ret
    9fe0f484:	b6dff06f          	j	9fe0eff0 <vTaskSwitchContext.part.0>

000000009fe0f488 <vTaskPlaceOnEventList>:
{
    9fe0f488:	1141                	addi	sp,sp,-16
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    9fe0f48a:	00010797          	auipc	a5,0x10
    9fe0f48e:	7be7b783          	ld	a5,1982(a5) # 9fe1fc48 <pxCurrentTCB>
{
    9fe0f492:	e022                	sd	s0,0(sp)
    9fe0f494:	842e                	mv	s0,a1
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    9fe0f496:	03078593          	addi	a1,a5,48
{
    9fe0f49a:	e406                	sd	ra,8(sp)
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    9fe0f49c:	35f000ef          	jal	ra,9fe0fffa <vListInsert>
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    9fe0f4a0:	8522                	mv	a0,s0
}
    9fe0f4a2:	6402                	ld	s0,0(sp)
    9fe0f4a4:	60a2                	ld	ra,8(sp)
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    9fe0f4a6:	4585                	li	a1,1
}
    9fe0f4a8:	0141                	addi	sp,sp,16
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    9fe0f4aa:	a5bff06f          	j	9fe0ef04 <prvAddCurrentTaskToDelayedList>

000000009fe0f4ae <vTaskPlaceOnEventListRestricted>:
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    9fe0f4ae:	00010797          	auipc	a5,0x10
    9fe0f4b2:	79a78793          	addi	a5,a5,1946 # 9fe1fc48 <pxCurrentTCB>
    9fe0f4b6:	6394                	ld	a3,0(a5)
    9fe0f4b8:	6518                	ld	a4,8(a0)
    9fe0f4ba:	0007b303          	ld	t1,0(a5)
    9fe0f4be:	0007b803          	ld	a6,0(a5)
    9fe0f4c2:	fe98                	sd	a4,56(a3)
    9fe0f4c4:	01073883          	ld	a7,16(a4)
    9fe0f4c8:	6394                	ld	a3,0(a5)
    9fe0f4ca:	03080813          	addi	a6,a6,48
    9fe0f4ce:	05133023          	sd	a7,64(t1)
    9fe0f4d2:	0007b303          	ld	t1,0(a5)
    9fe0f4d6:	0108b423          	sd	a6,8(a7)
    9fe0f4da:	03068793          	addi	a5,a3,48
    9fe0f4de:	eb1c                	sd	a5,16(a4)
    9fe0f4e0:	04a33823          	sd	a0,80(t1)
    9fe0f4e4:	611c                	ld	a5,0(a0)
    9fe0f4e6:	0785                	addi	a5,a5,1
    9fe0f4e8:	e11c                	sd	a5,0(a0)
    {
    9fe0f4ea:	852e                	mv	a0,a1
        if( xWaitIndefinitely != pdFALSE )
    9fe0f4ec:	c211                	beqz	a2,9fe0f4f0 <vTaskPlaceOnEventListRestricted+0x42>
            xTicksToWait = portMAX_DELAY;
    9fe0f4ee:	557d                	li	a0,-1
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    9fe0f4f0:	85b2                	mv	a1,a2
    9fe0f4f2:	a13ff06f          	j	9fe0ef04 <prvAddCurrentTaskToDelayedList>

000000009fe0f4f6 <xTaskRemoveFromEventList>:
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    9fe0f4f6:	6d1c                	ld	a5,24(a0)
    9fe0f4f8:	6f9c                	ld	a5,24(a5)
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
    9fe0f4fa:	7f8c                	ld	a1,56(a5)
    9fe0f4fc:	63b4                	ld	a3,64(a5)
    9fe0f4fe:	6bb8                	ld	a4,80(a5)
    9fe0f500:	03078613          	addi	a2,a5,48
    9fe0f504:	e994                	sd	a3,16(a1)
    9fe0f506:	7f8c                	ld	a1,56(a5)
    9fe0f508:	e68c                	sd	a1,8(a3)
    9fe0f50a:	6714                	ld	a3,8(a4)
    9fe0f50c:	0cc68263          	beq	a3,a2,9fe0f5d0 <xTaskRemoveFromEventList+0xda>
    9fe0f510:	0407b823          	sd	zero,80(a5)
    9fe0f514:	6314                	ld	a3,0(a4)
    9fe0f516:	16fd                	addi	a3,a3,-1
    9fe0f518:	e314                	sd	a3,0(a4)
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    9fe0f51a:	00010717          	auipc	a4,0x10
    9fe0f51e:	75673703          	ld	a4,1878(a4) # 9fe1fc70 <uxSchedulerSuspended>
    9fe0f522:	eb41                	bnez	a4,9fe0f5b2 <xTaskRemoveFromEventList+0xbc>
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
    9fe0f524:	6b90                	ld	a2,16(a5)
    9fe0f526:	6f94                	ld	a3,24(a5)
    9fe0f528:	7798                	ld	a4,40(a5)
    9fe0f52a:	00878593          	addi	a1,a5,8
    9fe0f52e:	ea14                	sd	a3,16(a2)
    9fe0f530:	6b90                	ld	a2,16(a5)
    9fe0f532:	e690                	sd	a2,8(a3)
    9fe0f534:	6714                	ld	a3,8(a4)
    9fe0f536:	0ab68063          	beq	a3,a1,9fe0f5d6 <xTaskRemoveFromEventList+0xe0>
    9fe0f53a:	0207b423          	sd	zero,40(a5)
    9fe0f53e:	6310                	ld	a2,0(a4)
        prvAddTaskToReadyList( pxUnblockedTCB );
    9fe0f540:	0000e697          	auipc	a3,0xe
    9fe0f544:	29068693          	addi	a3,a3,656 # 9fe1d7d0 <pxReadyTasksLists>
    9fe0f548:	00010817          	auipc	a6,0x10
    9fe0f54c:	73880813          	addi	a6,a6,1848 # 9fe1fc80 <uxTopReadyPriority>
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
    9fe0f550:	167d                	addi	a2,a2,-1
    9fe0f552:	e310                	sd	a2,0(a4)
        prvAddTaskToReadyList( pxUnblockedTCB );
    9fe0f554:	6fa8                	ld	a0,88(a5)
    9fe0f556:	00083883          	ld	a7,0(a6)
    9fe0f55a:	00251713          	slli	a4,a0,0x2
    9fe0f55e:	972a                	add	a4,a4,a0
    9fe0f560:	070e                	slli	a4,a4,0x3
    9fe0f562:	9736                	add	a4,a4,a3
    9fe0f564:	6710                	ld	a2,8(a4)
    9fe0f566:	4705                	li	a4,1
    9fe0f568:	00a71733          	sll	a4,a4,a0
    9fe0f56c:	eb90                	sd	a2,16(a5)
    9fe0f56e:	6a08                	ld	a0,16(a2)
    9fe0f570:	01176733          	or	a4,a4,a7
    9fe0f574:	00e83023          	sd	a4,0(a6)
    9fe0f578:	ef88                	sd	a0,24(a5)
    9fe0f57a:	e50c                	sd	a1,8(a0)
    9fe0f57c:	ea0c                	sd	a1,16(a2)
    9fe0f57e:	6fb0                	ld	a2,88(a5)
    9fe0f580:	00261713          	slli	a4,a2,0x2
    9fe0f584:	9732                	add	a4,a4,a2
    9fe0f586:	070e                	slli	a4,a4,0x3
    9fe0f588:	9736                	add	a4,a4,a3
    9fe0f58a:	f798                	sd	a4,40(a5)
    9fe0f58c:	6314                	ld	a3,0(a4)
    9fe0f58e:	0685                	addi	a3,a3,1
    9fe0f590:	e314                	sd	a3,0(a4)
    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    9fe0f592:	00010697          	auipc	a3,0x10
    9fe0f596:	6b66b683          	ld	a3,1718(a3) # 9fe1fc48 <pxCurrentTCB>
    9fe0f59a:	6fb8                	ld	a4,88(a5)
    9fe0f59c:	6ebc                	ld	a5,88(a3)
        xReturn = pdFALSE;
    9fe0f59e:	4501                	li	a0,0
    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    9fe0f5a0:	00e7f863          	bgeu	a5,a4,9fe0f5b0 <xTaskRemoveFromEventList+0xba>
        xYieldPending = pdTRUE;
    9fe0f5a4:	4785                	li	a5,1
    9fe0f5a6:	00010717          	auipc	a4,0x10
    9fe0f5aa:	70f73523          	sd	a5,1802(a4) # 9fe1fcb0 <xYieldPending>
        xReturn = pdTRUE;
    9fe0f5ae:	4505                	li	a0,1
}
    9fe0f5b0:	8082                	ret
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    9fe0f5b2:	0000e717          	auipc	a4,0xe
    9fe0f5b6:	3ae70713          	addi	a4,a4,942 # 9fe1d960 <xPendingReadyList>
    9fe0f5ba:	6714                	ld	a3,8(a4)
    9fe0f5bc:	630c                	ld	a1,0(a4)
    9fe0f5be:	ff94                	sd	a3,56(a5)
    9fe0f5c0:	6a88                	ld	a0,16(a3)
    9fe0f5c2:	0585                	addi	a1,a1,1
    9fe0f5c4:	e30c                	sd	a1,0(a4)
    9fe0f5c6:	e3a8                	sd	a0,64(a5)
    9fe0f5c8:	e510                	sd	a2,8(a0)
    9fe0f5ca:	ea90                	sd	a2,16(a3)
    9fe0f5cc:	ebb8                	sd	a4,80(a5)
    9fe0f5ce:	b7d1                	j	9fe0f592 <xTaskRemoveFromEventList+0x9c>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
    9fe0f5d0:	63b4                	ld	a3,64(a5)
    9fe0f5d2:	e714                	sd	a3,8(a4)
    9fe0f5d4:	bf35                	j	9fe0f510 <xTaskRemoveFromEventList+0x1a>
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
    9fe0f5d6:	6f94                	ld	a3,24(a5)
    9fe0f5d8:	e714                	sd	a3,8(a4)
    9fe0f5da:	b785                	j	9fe0f53a <xTaskRemoveFromEventList+0x44>

000000009fe0f5dc <vTaskInternalSetTimeOutState>:
    pxTimeOut->xOverflowCount = xNumOfOverflows;
    9fe0f5dc:	00010717          	auipc	a4,0x10
    9fe0f5e0:	6b473703          	ld	a4,1716(a4) # 9fe1fc90 <xNumOfOverflows>
    pxTimeOut->xTimeOnEntering = xTickCount;
    9fe0f5e4:	00010797          	auipc	a5,0x10
    9fe0f5e8:	6c47b783          	ld	a5,1732(a5) # 9fe1fca8 <xTickCount>
    pxTimeOut->xOverflowCount = xNumOfOverflows;
    9fe0f5ec:	e118                	sd	a4,0(a0)
    pxTimeOut->xTimeOnEntering = xTickCount;
    9fe0f5ee:	e51c                	sd	a5,8(a0)
}
    9fe0f5f0:	8082                	ret

000000009fe0f5f2 <vTaskMissedYield>:
    xYieldPending = pdTRUE;
    9fe0f5f2:	4785                	li	a5,1
    9fe0f5f4:	00010717          	auipc	a4,0x10
    9fe0f5f8:	6af73e23          	sd	a5,1724(a4) # 9fe1fcb0 <xYieldPending>
}
    9fe0f5fc:	8082                	ret

000000009fe0f5fe <xTaskPriorityDisinherit>:
        if( pxMutexHolder != NULL )
    9fe0f5fe:	c505                	beqz	a0,9fe0f626 <xTaskPriorityDisinherit+0x28>
    {
    9fe0f600:	1101                	addi	sp,sp,-32
    9fe0f602:	e822                	sd	s0,16(sp)
    9fe0f604:	ec06                	sd	ra,24(sp)
    9fe0f606:	e426                	sd	s1,8(sp)
            ( pxTCB->uxMutexesHeld )--;
    9fe0f608:	655c                	ld	a5,136(a0)
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    9fe0f60a:	6d34                	ld	a3,88(a0)
    9fe0f60c:	6158                	ld	a4,128(a0)
            ( pxTCB->uxMutexesHeld )--;
    9fe0f60e:	17fd                	addi	a5,a5,-1
    9fe0f610:	e55c                	sd	a5,136(a0)
    9fe0f612:	842a                	mv	s0,a0
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    9fe0f614:	00e68363          	beq	a3,a4,9fe0f61a <xTaskPriorityDisinherit+0x1c>
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    9fe0f618:	cb89                	beqz	a5,9fe0f62a <xTaskPriorityDisinherit+0x2c>
    }
    9fe0f61a:	60e2                	ld	ra,24(sp)
    9fe0f61c:	6442                	ld	s0,16(sp)
    9fe0f61e:	64a2                	ld	s1,8(sp)
        BaseType_t xReturn = pdFALSE;
    9fe0f620:	4501                	li	a0,0
    }
    9fe0f622:	6105                	addi	sp,sp,32
    9fe0f624:	8082                	ret
        BaseType_t xReturn = pdFALSE;
    9fe0f626:	4501                	li	a0,0
    }
    9fe0f628:	8082                	ret
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    9fe0f62a:	00850493          	addi	s1,a0,8
    9fe0f62e:	8526                	mv	a0,s1
    9fe0f630:	1f9000ef          	jal	ra,9fe10028 <uxListRemove>
    9fe0f634:	00010597          	auipc	a1,0x10
    9fe0f638:	64c58593          	addi	a1,a1,1612 # 9fe1fc80 <uxTopReadyPriority>
    9fe0f63c:	e911                	bnez	a0,9fe0f650 <xTaskPriorityDisinherit+0x52>
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
    9fe0f63e:	6c34                	ld	a3,88(s0)
    9fe0f640:	6198                	ld	a4,0(a1)
    9fe0f642:	4785                	li	a5,1
    9fe0f644:	00d797b3          	sll	a5,a5,a3
    9fe0f648:	fff7c793          	not	a5,a5
    9fe0f64c:	8ff9                	and	a5,a5,a4
    9fe0f64e:	e19c                	sd	a5,0(a1)
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
    9fe0f650:	6050                	ld	a2,128(s0)
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    9fe0f652:	46a1                	li	a3,8
                    prvAddTaskToReadyList( pxTCB );
    9fe0f654:	0000e717          	auipc	a4,0xe
    9fe0f658:	17c70713          	addi	a4,a4,380 # 9fe1d7d0 <pxReadyTasksLists>
    9fe0f65c:	00261793          	slli	a5,a2,0x2
    9fe0f660:	97b2                	add	a5,a5,a2
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    9fe0f662:	8e91                	sub	a3,a3,a2
                    prvAddTaskToReadyList( pxTCB );
    9fe0f664:	078e                	slli	a5,a5,0x3
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
    9fe0f666:	ec30                	sd	a2,88(s0)
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    9fe0f668:	f814                	sd	a3,48(s0)
                    prvAddTaskToReadyList( pxTCB );
    9fe0f66a:	97ba                	add	a5,a5,a4
    9fe0f66c:	679c                	ld	a5,8(a5)
    9fe0f66e:	4685                	li	a3,1
    9fe0f670:	00c696b3          	sll	a3,a3,a2
    9fe0f674:	e81c                	sd	a5,16(s0)
    9fe0f676:	6b88                	ld	a0,16(a5)
    9fe0f678:	0005b803          	ld	a6,0(a1)
    9fe0f67c:	ec08                	sd	a0,24(s0)
    9fe0f67e:	e504                	sd	s1,8(a0)
    9fe0f680:	eb84                	sd	s1,16(a5)
    9fe0f682:	6c30                	ld	a2,88(s0)
    9fe0f684:	0106e6b3          	or	a3,a3,a6
    9fe0f688:	e194                	sd	a3,0(a1)
    9fe0f68a:	00261793          	slli	a5,a2,0x2
    9fe0f68e:	97b2                	add	a5,a5,a2
    9fe0f690:	078e                	slli	a5,a5,0x3
    9fe0f692:	97ba                	add	a5,a5,a4
    9fe0f694:	f41c                	sd	a5,40(s0)
    9fe0f696:	6398                	ld	a4,0(a5)
                    xReturn = pdTRUE;
    9fe0f698:	4505                	li	a0,1
                    prvAddTaskToReadyList( pxTCB );
    9fe0f69a:	0705                	addi	a4,a4,1
    9fe0f69c:	e398                	sd	a4,0(a5)
    }
    9fe0f69e:	60e2                	ld	ra,24(sp)
    9fe0f6a0:	6442                	ld	s0,16(sp)
    9fe0f6a2:	64a2                	ld	s1,8(sp)
    9fe0f6a4:	6105                	addi	sp,sp,32
    9fe0f6a6:	8082                	ret

000000009fe0f6a8 <vTaskEnterCritical>:
        portDISABLE_INTERRUPTS();
    9fe0f6a8:	30047073          	csrci	mstatus,8
        if( xSchedulerRunning != pdFALSE )
    9fe0f6ac:	00010797          	auipc	a5,0x10
    9fe0f6b0:	5f47b783          	ld	a5,1524(a5) # 9fe1fca0 <xSchedulerRunning>
    9fe0f6b4:	cb91                	beqz	a5,9fe0f6c8 <vTaskEnterCritical+0x20>
            ( pxCurrentTCB->uxCriticalNesting )++;
    9fe0f6b6:	00010797          	auipc	a5,0x10
    9fe0f6ba:	59278793          	addi	a5,a5,1426 # 9fe1fc48 <pxCurrentTCB>
    9fe0f6be:	6398                	ld	a4,0(a5)
            if( pxCurrentTCB->uxCriticalNesting == 1 )
    9fe0f6c0:	639c                	ld	a5,0(a5)
            ( pxCurrentTCB->uxCriticalNesting )++;
    9fe0f6c2:	7f3c                	ld	a5,120(a4)
    9fe0f6c4:	0785                	addi	a5,a5,1
    9fe0f6c6:	ff3c                	sd	a5,120(a4)
    }
    9fe0f6c8:	8082                	ret

000000009fe0f6ca <vTaskExitCritical>:
        if( xSchedulerRunning != pdFALSE )
    9fe0f6ca:	00010797          	auipc	a5,0x10
    9fe0f6ce:	5d67b783          	ld	a5,1494(a5) # 9fe1fca0 <xSchedulerRunning>
    9fe0f6d2:	c38d                	beqz	a5,9fe0f6f4 <vTaskExitCritical+0x2a>
            if( pxCurrentTCB->uxCriticalNesting > 0U )
    9fe0f6d4:	00010797          	auipc	a5,0x10
    9fe0f6d8:	57478793          	addi	a5,a5,1396 # 9fe1fc48 <pxCurrentTCB>
    9fe0f6dc:	6398                	ld	a4,0(a5)
    9fe0f6de:	7f38                	ld	a4,120(a4)
    9fe0f6e0:	cb11                	beqz	a4,9fe0f6f4 <vTaskExitCritical+0x2a>
                ( pxCurrentTCB->uxCriticalNesting )--;
    9fe0f6e2:	6398                	ld	a4,0(a5)
                if( pxCurrentTCB->uxCriticalNesting == 0U )
    9fe0f6e4:	6394                	ld	a3,0(a5)
                ( pxCurrentTCB->uxCriticalNesting )--;
    9fe0f6e6:	7f3c                	ld	a5,120(a4)
    9fe0f6e8:	17fd                	addi	a5,a5,-1
    9fe0f6ea:	ff3c                	sd	a5,120(a4)
                if( pxCurrentTCB->uxCriticalNesting == 0U )
    9fe0f6ec:	7ebc                	ld	a5,120(a3)
    9fe0f6ee:	e399                	bnez	a5,9fe0f6f4 <vTaskExitCritical+0x2a>
                    portENABLE_INTERRUPTS();
    9fe0f6f0:	30046073          	csrsi	mstatus,8
    }
    9fe0f6f4:	8082                	ret

000000009fe0f6f6 <prvAddNewTaskToReadyList>:
{
    9fe0f6f6:	7139                	addi	sp,sp,-64
    9fe0f6f8:	f822                	sd	s0,48(sp)
    9fe0f6fa:	fc06                	sd	ra,56(sp)
    9fe0f6fc:	f426                	sd	s1,40(sp)
    9fe0f6fe:	f04a                	sd	s2,32(sp)
    9fe0f700:	ec4e                	sd	s3,24(sp)
    9fe0f702:	e852                	sd	s4,16(sp)
    9fe0f704:	e456                	sd	s5,8(sp)
    9fe0f706:	842a                	mv	s0,a0
        portDISABLE_INTERRUPTS();
    9fe0f708:	30047073          	csrci	mstatus,8
        if( xSchedulerRunning != pdFALSE )
    9fe0f70c:	00010997          	auipc	s3,0x10
    9fe0f710:	59498993          	addi	s3,s3,1428 # 9fe1fca0 <xSchedulerRunning>
    9fe0f714:	0009b783          	ld	a5,0(s3)
    9fe0f718:	00010917          	auipc	s2,0x10
    9fe0f71c:	53090913          	addi	s2,s2,1328 # 9fe1fc48 <pxCurrentTCB>
    9fe0f720:	cb81                	beqz	a5,9fe0f730 <prvAddNewTaskToReadyList+0x3a>
            ( pxCurrentTCB->uxCriticalNesting )++;
    9fe0f722:	00093703          	ld	a4,0(s2)
            if( pxCurrentTCB->uxCriticalNesting == 1 )
    9fe0f726:	00093783          	ld	a5,0(s2)
            ( pxCurrentTCB->uxCriticalNesting )++;
    9fe0f72a:	7f3c                	ld	a5,120(a4)
    9fe0f72c:	0785                	addi	a5,a5,1
    9fe0f72e:	ff3c                	sd	a5,120(a4)
        uxCurrentNumberOfTasks++;
    9fe0f730:	00010717          	auipc	a4,0x10
    9fe0f734:	53070713          	addi	a4,a4,1328 # 9fe1fc60 <uxCurrentNumberOfTasks>
    9fe0f738:	631c                	ld	a5,0(a4)
    9fe0f73a:	0785                	addi	a5,a5,1
    9fe0f73c:	e31c                	sd	a5,0(a4)
        if( pxCurrentTCB == NULL )
    9fe0f73e:	00093783          	ld	a5,0(s2)
    9fe0f742:	c3cd                	beqz	a5,9fe0f7e4 <prvAddNewTaskToReadyList+0xee>
            if( xSchedulerRunning == pdFALSE )
    9fe0f744:	0009b783          	ld	a5,0(s3)
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    9fe0f748:	6c34                	ld	a3,88(s0)
    9fe0f74a:	0000e497          	auipc	s1,0xe
    9fe0f74e:	08648493          	addi	s1,s1,134 # 9fe1d7d0 <pxReadyTasksLists>
            if( xSchedulerRunning == pdFALSE )
    9fe0f752:	c3c9                	beqz	a5,9fe0f7d4 <prvAddNewTaskToReadyList+0xde>
        prvAddTaskToReadyList( pxNewTCB );
    9fe0f754:	00269793          	slli	a5,a3,0x2
    9fe0f758:	97b6                	add	a5,a5,a3
    9fe0f75a:	078e                	slli	a5,a5,0x3
    9fe0f75c:	97a6                	add	a5,a5,s1
    9fe0f75e:	6790                	ld	a2,8(a5)
    9fe0f760:	00840793          	addi	a5,s0,8
    9fe0f764:	00010597          	auipc	a1,0x10
    9fe0f768:	51c58593          	addi	a1,a1,1308 # 9fe1fc80 <uxTopReadyPriority>
    9fe0f76c:	e810                	sd	a2,16(s0)
    9fe0f76e:	6a08                	ld	a0,16(a2)
    9fe0f770:	0005b803          	ld	a6,0(a1)
    9fe0f774:	4705                	li	a4,1
    9fe0f776:	ec08                	sd	a0,24(s0)
    9fe0f778:	e51c                	sd	a5,8(a0)
    9fe0f77a:	ea1c                	sd	a5,16(a2)
    9fe0f77c:	6c30                	ld	a2,88(s0)
    9fe0f77e:	00d71733          	sll	a4,a4,a3
    9fe0f782:	01076733          	or	a4,a4,a6
    9fe0f786:	00261793          	slli	a5,a2,0x2
    9fe0f78a:	97b2                	add	a5,a5,a2
    9fe0f78c:	078e                	slli	a5,a5,0x3
    9fe0f78e:	97a6                	add	a5,a5,s1
    9fe0f790:	f41c                	sd	a5,40(s0)
    9fe0f792:	e198                	sd	a4,0(a1)
    9fe0f794:	6398                	ld	a4,0(a5)
        uxTaskNumber++;
    9fe0f796:	00010617          	auipc	a2,0x10
    9fe0f79a:	4e260613          	addi	a2,a2,1250 # 9fe1fc78 <uxTaskNumber>
    9fe0f79e:	6214                	ld	a3,0(a2)
        prvAddTaskToReadyList( pxNewTCB );
    9fe0f7a0:	0705                	addi	a4,a4,1
    9fe0f7a2:	e398                	sd	a4,0(a5)
        uxTaskNumber++;
    9fe0f7a4:	0685                	addi	a3,a3,1
    9fe0f7a6:	e214                	sd	a3,0(a2)
    taskEXIT_CRITICAL();
    9fe0f7a8:	f23ff0ef          	jal	ra,9fe0f6ca <vTaskExitCritical>
    if( xSchedulerRunning != pdFALSE )
    9fe0f7ac:	0009b783          	ld	a5,0(s3)
    9fe0f7b0:	cb89                	beqz	a5,9fe0f7c2 <prvAddNewTaskToReadyList+0xcc>
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    9fe0f7b2:	00093703          	ld	a4,0(s2)
    9fe0f7b6:	6c3c                	ld	a5,88(s0)
    9fe0f7b8:	6f38                	ld	a4,88(a4)
    9fe0f7ba:	00f77463          	bgeu	a4,a5,9fe0f7c2 <prvAddNewTaskToReadyList+0xcc>
            taskYIELD_IF_USING_PREEMPTION();
    9fe0f7be:	00000073          	ecall
}
    9fe0f7c2:	70e2                	ld	ra,56(sp)
    9fe0f7c4:	7442                	ld	s0,48(sp)
    9fe0f7c6:	74a2                	ld	s1,40(sp)
    9fe0f7c8:	7902                	ld	s2,32(sp)
    9fe0f7ca:	69e2                	ld	s3,24(sp)
    9fe0f7cc:	6a42                	ld	s4,16(sp)
    9fe0f7ce:	6aa2                	ld	s5,8(sp)
    9fe0f7d0:	6121                	addi	sp,sp,64
    9fe0f7d2:	8082                	ret
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    9fe0f7d4:	00093783          	ld	a5,0(s2)
    9fe0f7d8:	6fbc                	ld	a5,88(a5)
    9fe0f7da:	f6f6ede3          	bltu	a3,a5,9fe0f754 <prvAddNewTaskToReadyList+0x5e>
                    pxCurrentTCB = pxNewTCB;
    9fe0f7de:	00893023          	sd	s0,0(s2)
    9fe0f7e2:	bf8d                	j	9fe0f754 <prvAddNewTaskToReadyList+0x5e>
            pxCurrentTCB = pxNewTCB;
    9fe0f7e4:	00893023          	sd	s0,0(s2)
            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    9fe0f7e8:	6318                	ld	a4,0(a4)
    9fe0f7ea:	4785                	li	a5,1
    9fe0f7ec:	00f70863          	beq	a4,a5,9fe0f7fc <prvAddNewTaskToReadyList+0x106>
        prvAddTaskToReadyList( pxNewTCB );
    9fe0f7f0:	6c34                	ld	a3,88(s0)
    9fe0f7f2:	0000e497          	auipc	s1,0xe
    9fe0f7f6:	fde48493          	addi	s1,s1,-34 # 9fe1d7d0 <pxReadyTasksLists>
    9fe0f7fa:	bfa9                	j	9fe0f754 <prvAddNewTaskToReadyList+0x5e>
    9fe0f7fc:	0000e497          	auipc	s1,0xe
    9fe0f800:	fd448493          	addi	s1,s1,-44 # 9fe1d7d0 <pxReadyTasksLists>
    9fe0f804:	8a26                	mv	s4,s1
    9fe0f806:	0000ea97          	auipc	s5,0xe
    9fe0f80a:	10aa8a93          	addi	s5,s5,266 # 9fe1d910 <xDelayedTaskList1>
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    9fe0f80e:	8552                	mv	a0,s4
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    9fe0f810:	028a0a13          	addi	s4,s4,40
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    9fe0f814:	7cc000ef          	jal	ra,9fe0ffe0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    9fe0f818:	ff4a9be3          	bne	s5,s4,9fe0f80e <prvAddNewTaskToReadyList+0x118>
    vListInitialise( &xDelayedTaskList1 );
    9fe0f81c:	0000ea97          	auipc	s5,0xe
    9fe0f820:	0f4a8a93          	addi	s5,s5,244 # 9fe1d910 <xDelayedTaskList1>
    9fe0f824:	8556                	mv	a0,s5
    9fe0f826:	7ba000ef          	jal	ra,9fe0ffe0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
    9fe0f82a:	0000ea17          	auipc	s4,0xe
    9fe0f82e:	10ea0a13          	addi	s4,s4,270 # 9fe1d938 <xDelayedTaskList2>
    9fe0f832:	8552                	mv	a0,s4
    9fe0f834:	7ac000ef          	jal	ra,9fe0ffe0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
    9fe0f838:	0000e517          	auipc	a0,0xe
    9fe0f83c:	12850513          	addi	a0,a0,296 # 9fe1d960 <xPendingReadyList>
    9fe0f840:	7a0000ef          	jal	ra,9fe0ffe0 <vListInitialise>
            vListInitialise( &xTasksWaitingTermination );
    9fe0f844:	0000e517          	auipc	a0,0xe
    9fe0f848:	16c50513          	addi	a0,a0,364 # 9fe1d9b0 <xTasksWaitingTermination>
    9fe0f84c:	794000ef          	jal	ra,9fe0ffe0 <vListInitialise>
            vListInitialise( &xSuspendedTaskList );
    9fe0f850:	0000e517          	auipc	a0,0xe
    9fe0f854:	13850513          	addi	a0,a0,312 # 9fe1d988 <xSuspendedTaskList>
    9fe0f858:	788000ef          	jal	ra,9fe0ffe0 <vListInitialise>
    pxDelayedTaskList = &xDelayedTaskList1;
    9fe0f85c:	00010797          	auipc	a5,0x10
    9fe0f860:	3f57ba23          	sd	s5,1012(a5) # 9fe1fc50 <pxDelayedTaskList>
        prvAddTaskToReadyList( pxNewTCB );
    9fe0f864:	6c34                	ld	a3,88(s0)
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
    9fe0f866:	00010797          	auipc	a5,0x10
    9fe0f86a:	3f47b923          	sd	s4,1010(a5) # 9fe1fc58 <pxOverflowDelayedTaskList>
}
    9fe0f86e:	b5dd                	j	9fe0f754 <prvAddNewTaskToReadyList+0x5e>

000000009fe0f870 <xTaskCreateStatic>:
        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
    9fe0f870:	02080b63          	beqz	a6,9fe0f8a6 <xTaskCreateStatic+0x36>
    9fe0f874:	88be                	mv	a7,a5
            xReturn = NULL;
    9fe0f876:	4781                	li	a5,0
        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
    9fe0f878:	02088863          	beqz	a7,9fe0f8a8 <xTaskCreateStatic+0x38>
    {
    9fe0f87c:	1101                	addi	sp,sp,-32
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
    9fe0f87e:	07183023          	sd	a7,96(a6)
                    pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
    9fe0f882:	4889                	li	a7,2
            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
    9fe0f884:	003c                	addi	a5,sp,8
                    pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
    9fe0f886:	09180fa3          	sb	a7,159(a6)
    {
    9fe0f88a:	ec06                	sd	ra,24(sp)
    9fe0f88c:	e822                	sd	s0,16(sp)
    9fe0f88e:	8442                	mv	s0,a6
            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
    9fe0f890:	811ff0ef          	jal	ra,9fe0f0a0 <prvInitialiseNewTask.constprop.0>
            prvAddNewTaskToReadyList( pxNewTCB );
    9fe0f894:	8522                	mv	a0,s0
    9fe0f896:	e61ff0ef          	jal	ra,9fe0f6f6 <prvAddNewTaskToReadyList>
        return xReturn;
    9fe0f89a:	67a2                	ld	a5,8(sp)
    }
    9fe0f89c:	60e2                	ld	ra,24(sp)
    9fe0f89e:	6442                	ld	s0,16(sp)
    9fe0f8a0:	853e                	mv	a0,a5
    9fe0f8a2:	6105                	addi	sp,sp,32
    9fe0f8a4:	8082                	ret
            xReturn = NULL;
    9fe0f8a6:	4781                	li	a5,0
    }
    9fe0f8a8:	853e                	mv	a0,a5
    9fe0f8aa:	8082                	ret

000000009fe0f8ac <xTaskCreate>:
    {
    9fe0f8ac:	715d                	addi	sp,sp,-80
    9fe0f8ae:	f44e                	sd	s3,40(sp)
    9fe0f8b0:	89aa                	mv	s3,a0
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
    9fe0f8b2:	00361513          	slli	a0,a2,0x3
    {
    9fe0f8b6:	fc26                	sd	s1,56(sp)
    9fe0f8b8:	f052                	sd	s4,32(sp)
    9fe0f8ba:	ec56                	sd	s5,24(sp)
    9fe0f8bc:	e85a                	sd	s6,16(sp)
    9fe0f8be:	e45e                	sd	s7,8(sp)
    9fe0f8c0:	e486                	sd	ra,72(sp)
    9fe0f8c2:	e0a2                	sd	s0,64(sp)
    9fe0f8c4:	f84a                	sd	s2,48(sp)
    9fe0f8c6:	84b2                	mv	s1,a2
    9fe0f8c8:	8a2e                	mv	s4,a1
    9fe0f8ca:	8ab6                	mv	s5,a3
    9fe0f8cc:	8b3a                	mv	s6,a4
    9fe0f8ce:	8bbe                	mv	s7,a5
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
    9fe0f8d0:	ca7fe0ef          	jal	ra,9fe0e576 <pvPortMalloc>
                if( pxStack != NULL )
    9fe0f8d4:	c139                	beqz	a0,9fe0f91a <xTaskCreate+0x6e>
    9fe0f8d6:	842a                	mv	s0,a0
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
    9fe0f8d8:	0a800513          	li	a0,168
    9fe0f8dc:	c9bfe0ef          	jal	ra,9fe0e576 <pvPortMalloc>
    9fe0f8e0:	892a                	mv	s2,a0
                    if( pxNewTCB != NULL )
    9fe0f8e2:	cd15                	beqz	a0,9fe0f91e <xTaskCreate+0x72>
            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
    9fe0f8e4:	882a                	mv	a6,a0
    9fe0f8e6:	87de                	mv	a5,s7
    9fe0f8e8:	875a                	mv	a4,s6
    9fe0f8ea:	86d6                	mv	a3,s5
    9fe0f8ec:	8626                	mv	a2,s1
    9fe0f8ee:	85d2                	mv	a1,s4
                        pxNewTCB->pxStack = pxStack;
    9fe0f8f0:	f120                	sd	s0,96(a0)
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
    9fe0f8f2:	08050fa3          	sb	zero,159(a0)
            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
    9fe0f8f6:	854e                	mv	a0,s3
    9fe0f8f8:	fa8ff0ef          	jal	ra,9fe0f0a0 <prvInitialiseNewTask.constprop.0>
            prvAddNewTaskToReadyList( pxNewTCB );
    9fe0f8fc:	854a                	mv	a0,s2
    9fe0f8fe:	df9ff0ef          	jal	ra,9fe0f6f6 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
    9fe0f902:	4505                	li	a0,1
    }
    9fe0f904:	60a6                	ld	ra,72(sp)
    9fe0f906:	6406                	ld	s0,64(sp)
    9fe0f908:	74e2                	ld	s1,56(sp)
    9fe0f90a:	7942                	ld	s2,48(sp)
    9fe0f90c:	79a2                	ld	s3,40(sp)
    9fe0f90e:	7a02                	ld	s4,32(sp)
    9fe0f910:	6ae2                	ld	s5,24(sp)
    9fe0f912:	6b42                	ld	s6,16(sp)
    9fe0f914:	6ba2                	ld	s7,8(sp)
    9fe0f916:	6161                	addi	sp,sp,80
    9fe0f918:	8082                	ret
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    9fe0f91a:	557d                	li	a0,-1
        return xReturn;
    9fe0f91c:	b7e5                	j	9fe0f904 <xTaskCreate+0x58>
                        vPortFreeStack( pxStack );
    9fe0f91e:	8522                	mv	a0,s0
    9fe0f920:	dbdfe0ef          	jal	ra,9fe0e6dc <vPortFree>
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    9fe0f924:	557d                	li	a0,-1
    9fe0f926:	bff9                	j	9fe0f904 <xTaskCreate+0x58>

000000009fe0f928 <vTaskStartScheduler>:
{
    9fe0f928:	7179                	addi	sp,sp,-48
            vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
    9fe0f92a:	0050                	addi	a2,sp,4
    9fe0f92c:	080c                	addi	a1,sp,16
    9fe0f92e:	0028                	addi	a0,sp,8
{
    9fe0f930:	f022                	sd	s0,32(sp)
    9fe0f932:	f406                	sd	ra,40(sp)
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
    9fe0f934:	e402                	sd	zero,8(sp)
            StackType_t * pxIdleTaskStackBuffer = NULL;
    9fe0f936:	e802                	sd	zero,16(sp)
            vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
    9fe0f938:	d60f30ef          	jal	ra,9fe02e98 <vApplicationGetIdleTaskMemory>
            xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
    9fe0f93c:	6422                	ld	s0,8(sp)
        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
    9fe0f93e:	c02d                	beqz	s0,9fe0f9a0 <vTaskStartScheduler+0x78>
            xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
    9fe0f940:	6542                	ld	a0,16(sp)
        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
    9fe0f942:	cd39                	beqz	a0,9fe0f9a0 <vTaskStartScheduler+0x78>
            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
    9fe0f944:	4612                	lw	a2,4(sp)
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
    9fe0f946:	f028                	sd	a0,96(s0)
                    pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
    9fe0f948:	4509                	li	a0,2
            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
    9fe0f94a:	083c                	addi	a5,sp,24
    9fe0f94c:	8822                	mv	a6,s0
    9fe0f94e:	4701                	li	a4,0
    9fe0f950:	4681                	li	a3,0
    9fe0f952:	00003597          	auipc	a1,0x3
    9fe0f956:	87e58593          	addi	a1,a1,-1922 # 9fe121d0 <__func__.1+0x18>
                    pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
    9fe0f95a:	08a40fa3          	sb	a0,159(s0)
            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
    9fe0f95e:	00000517          	auipc	a0,0x0
    9fe0f962:	82a50513          	addi	a0,a0,-2006 # 9fe0f188 <prvIdleTask>
    9fe0f966:	f3aff0ef          	jal	ra,9fe0f0a0 <prvInitialiseNewTask.constprop.0>
            prvAddNewTaskToReadyList( pxNewTCB );
    9fe0f96a:	8522                	mv	a0,s0
    9fe0f96c:	d8bff0ef          	jal	ra,9fe0f6f6 <prvAddNewTaskToReadyList>
        return xReturn;
    9fe0f970:	67e2                	ld	a5,24(sp)
            if( xIdleTaskHandle != NULL )
    9fe0f972:	c79d                	beqz	a5,9fe0f9a0 <vTaskStartScheduler+0x78>
                xReturn = xTimerCreateTimerTask();
    9fe0f974:	61a000ef          	jal	ra,9fe0ff8e <xTimerCreateTimerTask>
    if( xReturn == pdPASS )
    9fe0f978:	4785                	li	a5,1
    9fe0f97a:	02f51363          	bne	a0,a5,9fe0f9a0 <vTaskStartScheduler+0x78>
        portDISABLE_INTERRUPTS();
    9fe0f97e:	30047073          	csrci	mstatus,8
        xNextTaskUnblockTime = portMAX_DELAY;
    9fe0f982:	57fd                	li	a5,-1
    9fe0f984:	00010717          	auipc	a4,0x10
    9fe0f988:	30f73223          	sd	a5,772(a4) # 9fe1fc88 <xNextTaskUnblockTime>
        xSchedulerRunning = pdTRUE;
    9fe0f98c:	00010797          	auipc	a5,0x10
    9fe0f990:	30a7ba23          	sd	a0,788(a5) # 9fe1fca0 <xSchedulerRunning>
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
    9fe0f994:	00010797          	auipc	a5,0x10
    9fe0f998:	3007ba23          	sd	zero,788(a5) # 9fe1fca8 <xTickCount>
        if( xPortStartScheduler() != pdFALSE )
    9fe0f99c:	726000ef          	jal	ra,9fe100c2 <xPortStartScheduler>
}
    9fe0f9a0:	70a2                	ld	ra,40(sp)
    9fe0f9a2:	7402                	ld	s0,32(sp)
    ( void ) uxTopUsedPriority;
    9fe0f9a4:	00003797          	auipc	a5,0x3
    9fe0f9a8:	7ec7b783          	ld	a5,2028(a5) # 9fe13190 <uxTopUsedPriority>
}
    9fe0f9ac:	6145                	addi	sp,sp,48
    9fe0f9ae:	8082                	ret

000000009fe0f9b0 <xTaskResumeAll>:
{
    9fe0f9b0:	7179                	addi	sp,sp,-48
    9fe0f9b2:	f406                	sd	ra,40(sp)
    9fe0f9b4:	f022                	sd	s0,32(sp)
    9fe0f9b6:	ec26                	sd	s1,24(sp)
    9fe0f9b8:	e84a                	sd	s2,16(sp)
    9fe0f9ba:	e44e                	sd	s3,8(sp)
    9fe0f9bc:	e052                	sd	s4,0(sp)
        portDISABLE_INTERRUPTS();
    9fe0f9be:	30047073          	csrci	mstatus,8
        if( xSchedulerRunning != pdFALSE )
    9fe0f9c2:	00010797          	auipc	a5,0x10
    9fe0f9c6:	2de7b783          	ld	a5,734(a5) # 9fe1fca0 <xSchedulerRunning>
    9fe0f9ca:	cf81                	beqz	a5,9fe0f9e2 <xTaskResumeAll+0x32>
            ( pxCurrentTCB->uxCriticalNesting )++;
    9fe0f9cc:	00010897          	auipc	a7,0x10
    9fe0f9d0:	27c88893          	addi	a7,a7,636 # 9fe1fc48 <pxCurrentTCB>
    9fe0f9d4:	0008b703          	ld	a4,0(a7)
            if( pxCurrentTCB->uxCriticalNesting == 1 )
    9fe0f9d8:	0008b783          	ld	a5,0(a7)
            ( pxCurrentTCB->uxCriticalNesting )++;
    9fe0f9dc:	7f3c                	ld	a5,120(a4)
    9fe0f9de:	0785                	addi	a5,a5,1
    9fe0f9e0:	ff3c                	sd	a5,120(a4)
        --uxSchedulerSuspended;
    9fe0f9e2:	00010497          	auipc	s1,0x10
    9fe0f9e6:	28e48493          	addi	s1,s1,654 # 9fe1fc70 <uxSchedulerSuspended>
    9fe0f9ea:	609c                	ld	a5,0(s1)
    9fe0f9ec:	17fd                	addi	a5,a5,-1
    9fe0f9ee:	e09c                	sd	a5,0(s1)
        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    9fe0f9f0:	609c                	ld	a5,0(s1)
    9fe0f9f2:	10079263          	bnez	a5,9fe0faf6 <xTaskResumeAll+0x146>
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    9fe0f9f6:	00010797          	auipc	a5,0x10
    9fe0f9fa:	26a7b783          	ld	a5,618(a5) # 9fe1fc60 <uxCurrentNumberOfTasks>
    9fe0f9fe:	cfe5                	beqz	a5,9fe0faf6 <xTaskResumeAll+0x146>
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    9fe0fa00:	0000e597          	auipc	a1,0xe
    9fe0fa04:	f6058593          	addi	a1,a1,-160 # 9fe1d960 <xPendingReadyList>
    9fe0fa08:	619c                	ld	a5,0(a1)
    9fe0fa0a:	00010417          	auipc	s0,0x10
    9fe0fa0e:	2a640413          	addi	s0,s0,678 # 9fe1fcb0 <xYieldPending>
    9fe0fa12:	10078f63          	beqz	a5,9fe0fb30 <xTaskResumeAll+0x180>
    9fe0fa16:	00010897          	auipc	a7,0x10
    9fe0fa1a:	23288893          	addi	a7,a7,562 # 9fe1fc48 <pxCurrentTCB>
    9fe0fa1e:	00010817          	auipc	a6,0x10
    9fe0fa22:	26280813          	addi	a6,a6,610 # 9fe1fc80 <uxTopReadyPriority>
    9fe0fa26:	0000e517          	auipc	a0,0xe
    9fe0fa2a:	daa50513          	addi	a0,a0,-598 # 9fe1d7d0 <pxReadyTasksLists>
    9fe0fa2e:	00010417          	auipc	s0,0x10
    9fe0fa32:	28240413          	addi	s0,s0,642 # 9fe1fcb0 <xYieldPending>
                    prvAddTaskToReadyList( pxTCB );
    9fe0fa36:	4305                	li	t1,1
    9fe0fa38:	a069                	j	9fe0fac2 <xTaskResumeAll+0x112>
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
    9fe0fa3a:	0407b823          	sd	zero,80(a5)
    9fe0fa3e:	6314                	ld	a3,0(a4)
    9fe0fa40:	16fd                	addi	a3,a3,-1
    9fe0fa42:	e314                	sd	a3,0(a4)
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
    9fe0fa44:	0107be03          	ld	t3,16(a5)
    9fe0fa48:	6f94                	ld	a3,24(a5)
    9fe0fa4a:	7798                	ld	a4,40(a5)
    9fe0fa4c:	00878613          	addi	a2,a5,8
    9fe0fa50:	00de3823          	sd	a3,16(t3)
    9fe0fa54:	0107be03          	ld	t3,16(a5)
    9fe0fa58:	01c6b423          	sd	t3,8(a3)
    9fe0fa5c:	6714                	ld	a3,8(a4)
    9fe0fa5e:	0ac68863          	beq	a3,a2,9fe0fb0e <xTaskResumeAll+0x15e>
    9fe0fa62:	0207b423          	sd	zero,40(a5)
    9fe0fa66:	6314                	ld	a3,0(a4)
    9fe0fa68:	16fd                	addi	a3,a3,-1
    9fe0fa6a:	e314                	sd	a3,0(a4)
                    prvAddTaskToReadyList( pxTCB );
    9fe0fa6c:	6fb8                	ld	a4,88(a5)
    9fe0fa6e:	00083e03          	ld	t3,0(a6)
    9fe0fa72:	00271693          	slli	a3,a4,0x2
    9fe0fa76:	96ba                	add	a3,a3,a4
    9fe0fa78:	068e                	slli	a3,a3,0x3
    9fe0fa7a:	96aa                	add	a3,a3,a0
    9fe0fa7c:	6694                	ld	a3,8(a3)
    9fe0fa7e:	00e31733          	sll	a4,t1,a4
    9fe0fa82:	01c76733          	or	a4,a4,t3
    9fe0fa86:	eb94                	sd	a3,16(a5)
    9fe0fa88:	0106be03          	ld	t3,16(a3)
    9fe0fa8c:	00e83023          	sd	a4,0(a6)
    9fe0fa90:	01c7bc23          	sd	t3,24(a5)
    9fe0fa94:	00ce3423          	sd	a2,8(t3)
    9fe0fa98:	ea90                	sd	a2,16(a3)
    9fe0fa9a:	6fb4                	ld	a3,88(a5)
    9fe0fa9c:	00269713          	slli	a4,a3,0x2
    9fe0faa0:	9736                	add	a4,a4,a3
    9fe0faa2:	070e                	slli	a4,a4,0x3
    9fe0faa4:	972a                	add	a4,a4,a0
    9fe0faa6:	f798                	sd	a4,40(a5)
    9fe0faa8:	6314                	ld	a3,0(a4)
    9fe0faaa:	0685                	addi	a3,a3,1
    9fe0faac:	e314                	sd	a3,0(a4)
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    9fe0faae:	0008b683          	ld	a3,0(a7)
    9fe0fab2:	6fb8                	ld	a4,88(a5)
    9fe0fab4:	6ebc                	ld	a5,88(a3)
    9fe0fab6:	00f76463          	bltu	a4,a5,9fe0fabe <xTaskResumeAll+0x10e>
                        xYieldPending = pdTRUE;
    9fe0faba:	00643023          	sd	t1,0(s0)
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    9fe0fabe:	619c                	ld	a5,0(a1)
    9fe0fac0:	cbb1                	beqz	a5,9fe0fb14 <xTaskResumeAll+0x164>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    9fe0fac2:	6d9c                	ld	a5,24(a1)
    9fe0fac4:	6f9c                	ld	a5,24(a5)
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
    9fe0fac6:	0387be03          	ld	t3,56(a5)
    9fe0faca:	63b4                	ld	a3,64(a5)
    9fe0facc:	6bb8                	ld	a4,80(a5)
    9fe0face:	03078613          	addi	a2,a5,48
    9fe0fad2:	00de3823          	sd	a3,16(t3)
    9fe0fad6:	0387be03          	ld	t3,56(a5)
    9fe0fada:	01c6b423          	sd	t3,8(a3)
    9fe0fade:	6714                	ld	a3,8(a4)
    9fe0fae0:	f4c69de3          	bne	a3,a2,9fe0fa3a <xTaskResumeAll+0x8a>
    9fe0fae4:	63b4                	ld	a3,64(a5)
    9fe0fae6:	e714                	sd	a3,8(a4)
    9fe0fae8:	bf89                	j	9fe0fa3a <xTaskResumeAll+0x8a>
                        xPendedTicks = 0;
    9fe0faea:	00010797          	auipc	a5,0x10
    9fe0faee:	1a07b723          	sd	zero,430(a5) # 9fe1fc98 <xPendedTicks>
                if( xYieldPending != pdFALSE )
    9fe0faf2:	601c                	ld	a5,0(s0)
    9fe0faf4:	ebb5                	bnez	a5,9fe0fb68 <xTaskResumeAll+0x1b8>
    BaseType_t xAlreadyYielded = pdFALSE;
    9fe0faf6:	4401                	li	s0,0
    taskEXIT_CRITICAL();
    9fe0faf8:	bd3ff0ef          	jal	ra,9fe0f6ca <vTaskExitCritical>
}
    9fe0fafc:	70a2                	ld	ra,40(sp)
    9fe0fafe:	8522                	mv	a0,s0
    9fe0fb00:	7402                	ld	s0,32(sp)
    9fe0fb02:	64e2                	ld	s1,24(sp)
    9fe0fb04:	6942                	ld	s2,16(sp)
    9fe0fb06:	69a2                	ld	s3,8(sp)
    9fe0fb08:	6a02                	ld	s4,0(sp)
    9fe0fb0a:	6145                	addi	sp,sp,48
    9fe0fb0c:	8082                	ret
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
    9fe0fb0e:	6f94                	ld	a3,24(a5)
    9fe0fb10:	e714                	sd	a3,8(a4)
    9fe0fb12:	bf81                	j	9fe0fa62 <xTaskResumeAll+0xb2>
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    9fe0fb14:	00010797          	auipc	a5,0x10
    9fe0fb18:	13c78793          	addi	a5,a5,316 # 9fe1fc50 <pxDelayedTaskList>
    9fe0fb1c:	6398                	ld	a4,0(a5)
    9fe0fb1e:	6318                	ld	a4,0(a4)
    9fe0fb20:	cb21                	beqz	a4,9fe0fb70 <xTaskResumeAll+0x1c0>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    9fe0fb22:	639c                	ld	a5,0(a5)
    9fe0fb24:	6f9c                	ld	a5,24(a5)
    9fe0fb26:	639c                	ld	a5,0(a5)
    9fe0fb28:	00010717          	auipc	a4,0x10
    9fe0fb2c:	16f73023          	sd	a5,352(a4) # 9fe1fc88 <xNextTaskUnblockTime>
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
    9fe0fb30:	00010997          	auipc	s3,0x10
    9fe0fb34:	16898993          	addi	s3,s3,360 # 9fe1fc98 <xPendedTicks>
    9fe0fb38:	0009b903          	ld	s2,0(s3)
                    if( xPendedCounts > ( TickType_t ) 0U )
    9fe0fb3c:	fa090be3          	beqz	s2,9fe0faf2 <xTaskResumeAll+0x142>
                                xYieldPending = pdTRUE;
    9fe0fb40:	4a05                	li	s4,1
    9fe0fb42:	a809                	j	9fe0fb54 <xTaskResumeAll+0x1a4>
    9fe0fb44:	f18ff0ef          	jal	ra,9fe0f25c <xTaskIncrementTick.part.0>
                            if( xTaskIncrementTick() != pdFALSE )
    9fe0fb48:	c119                	beqz	a0,9fe0fb4e <xTaskResumeAll+0x19e>
                                xYieldPending = pdTRUE;
    9fe0fb4a:	01443023          	sd	s4,0(s0)
                            --xPendedCounts;
    9fe0fb4e:	197d                	addi	s2,s2,-1
                        } while( xPendedCounts > ( TickType_t ) 0U );
    9fe0fb50:	f8090de3          	beqz	s2,9fe0faea <xTaskResumeAll+0x13a>
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    9fe0fb54:	609c                	ld	a5,0(s1)
    9fe0fb56:	d7fd                	beqz	a5,9fe0fb44 <xTaskResumeAll+0x194>
        ++xPendedTicks;
    9fe0fb58:	0009b783          	ld	a5,0(s3)
    9fe0fb5c:	0785                	addi	a5,a5,1
    9fe0fb5e:	00f9b023          	sd	a5,0(s3)
                vApplicationTickHook();
    9fe0fb62:	b34f30ef          	jal	ra,9fe02e96 <vApplicationTickHook>
    return xSwitchRequired;
    9fe0fb66:	b7e5                	j	9fe0fb4e <xTaskResumeAll+0x19e>
                    taskYIELD_IF_USING_PREEMPTION();
    9fe0fb68:	00000073          	ecall
                            xAlreadyYielded = pdTRUE;
    9fe0fb6c:	4405                	li	s0,1
    9fe0fb6e:	b769                	j	9fe0faf8 <xTaskResumeAll+0x148>
        xNextTaskUnblockTime = portMAX_DELAY;
    9fe0fb70:	57fd                	li	a5,-1
    9fe0fb72:	00010717          	auipc	a4,0x10
    9fe0fb76:	10f73b23          	sd	a5,278(a4) # 9fe1fc88 <xNextTaskUnblockTime>
    9fe0fb7a:	bf5d                	j	9fe0fb30 <xTaskResumeAll+0x180>

000000009fe0fb7c <vTaskDelay>:
        if( xTicksToDelay > ( TickType_t ) 0U )
    9fe0fb7c:	e501                	bnez	a0,9fe0fb84 <vTaskDelay+0x8>
            portYIELD_WITHIN_API();
    9fe0fb7e:	00000073          	ecall
    9fe0fb82:	8082                	ret
    {
    9fe0fb84:	1141                	addi	sp,sp,-16
    9fe0fb86:	e406                	sd	ra,8(sp)
    ++uxSchedulerSuspended;
    9fe0fb88:	00010717          	auipc	a4,0x10
    9fe0fb8c:	0e870713          	addi	a4,a4,232 # 9fe1fc70 <uxSchedulerSuspended>
    9fe0fb90:	631c                	ld	a5,0(a4)
    9fe0fb92:	0785                	addi	a5,a5,1
    9fe0fb94:	e31c                	sd	a5,0(a4)
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    9fe0fb96:	4581                	li	a1,0
    9fe0fb98:	b6cff0ef          	jal	ra,9fe0ef04 <prvAddCurrentTaskToDelayedList>
            xAlreadyYielded = xTaskResumeAll();
    9fe0fb9c:	e15ff0ef          	jal	ra,9fe0f9b0 <xTaskResumeAll>
        if( xAlreadyYielded == pdFALSE )
    9fe0fba0:	e119                	bnez	a0,9fe0fba6 <vTaskDelay+0x2a>
            portYIELD_WITHIN_API();
    9fe0fba2:	00000073          	ecall
    }
    9fe0fba6:	60a2                	ld	ra,8(sp)
    9fe0fba8:	0141                	addi	sp,sp,16
    9fe0fbaa:	8082                	ret

000000009fe0fbac <xTaskCheckForTimeOut>:
{
    9fe0fbac:	1141                	addi	sp,sp,-16
    9fe0fbae:	e406                	sd	ra,8(sp)
    9fe0fbb0:	e022                	sd	s0,0(sp)
    9fe0fbb2:	87aa                	mv	a5,a0
        portDISABLE_INTERRUPTS();
    9fe0fbb4:	30047073          	csrci	mstatus,8
        if( xSchedulerRunning != pdFALSE )
    9fe0fbb8:	00010697          	auipc	a3,0x10
    9fe0fbbc:	0e86b683          	ld	a3,232(a3) # 9fe1fca0 <xSchedulerRunning>
    9fe0fbc0:	00010717          	auipc	a4,0x10
    9fe0fbc4:	08870713          	addi	a4,a4,136 # 9fe1fc48 <pxCurrentTCB>
    9fe0fbc8:	c691                	beqz	a3,9fe0fbd4 <xTaskCheckForTimeOut+0x28>
            ( pxCurrentTCB->uxCriticalNesting )++;
    9fe0fbca:	6310                	ld	a2,0(a4)
            if( pxCurrentTCB->uxCriticalNesting == 1 )
    9fe0fbcc:	6314                	ld	a3,0(a4)
            ( pxCurrentTCB->uxCriticalNesting )++;
    9fe0fbce:	7e34                	ld	a3,120(a2)
    9fe0fbd0:	0685                	addi	a3,a3,1
    9fe0fbd2:	fe34                	sd	a3,120(a2)
        const TickType_t xConstTickCount = xTickCount;
    9fe0fbd4:	00010697          	auipc	a3,0x10
    9fe0fbd8:	0d468693          	addi	a3,a3,212 # 9fe1fca8 <xTickCount>
    9fe0fbdc:	6288                	ld	a0,0(a3)
            if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
    9fe0fbde:	6310                	ld	a2,0(a4)
    9fe0fbe0:	0a064603          	lbu	a2,160(a2)
    9fe0fbe4:	ce01                	beqz	a2,9fe0fbfc <xTaskCheckForTimeOut+0x50>
                pxCurrentTCB->ucDelayAborted = pdFALSE;
    9fe0fbe6:	631c                	ld	a5,0(a4)
                xReturn = pdTRUE;
    9fe0fbe8:	4405                	li	s0,1
                pxCurrentTCB->ucDelayAborted = pdFALSE;
    9fe0fbea:	0a078023          	sb	zero,160(a5)
    taskEXIT_CRITICAL();
    9fe0fbee:	addff0ef          	jal	ra,9fe0f6ca <vTaskExitCritical>
}
    9fe0fbf2:	60a2                	ld	ra,8(sp)
    9fe0fbf4:	8522                	mv	a0,s0
    9fe0fbf6:	6402                	ld	s0,0(sp)
    9fe0fbf8:	0141                	addi	sp,sp,16
    9fe0fbfa:	8082                	ret
            if( *pxTicksToWait == portMAX_DELAY )
    9fe0fbfc:	6198                	ld	a4,0(a1)
    9fe0fbfe:	567d                	li	a2,-1
                xReturn = pdFALSE;
    9fe0fc00:	4401                	li	s0,0
            if( *pxTicksToWait == portMAX_DELAY )
    9fe0fc02:	fec706e3          	beq	a4,a2,9fe0fbee <xTaskCheckForTimeOut+0x42>
        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    9fe0fc06:	00010817          	auipc	a6,0x10
    9fe0fc0a:	08a80813          	addi	a6,a6,138 # 9fe1fc90 <xNumOfOverflows>
    9fe0fc0e:	00083883          	ld	a7,0(a6)
    9fe0fc12:	0007b303          	ld	t1,0(a5)
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    9fe0fc16:	6790                	ld	a2,8(a5)
        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    9fe0fc18:	01130e63          	beq	t1,a7,9fe0fc34 <xTaskCheckForTimeOut+0x88>
    9fe0fc1c:	00c56c63          	bltu	a0,a2,9fe0fc34 <xTaskCheckForTimeOut+0x88>
            *pxTicksToWait = ( TickType_t ) 0;
    9fe0fc20:	0005b023          	sd	zero,0(a1)
    taskEXIT_CRITICAL();
    9fe0fc24:	aa7ff0ef          	jal	ra,9fe0f6ca <vTaskExitCritical>
            xReturn = pdTRUE;
    9fe0fc28:	4405                	li	s0,1
}
    9fe0fc2a:	60a2                	ld	ra,8(sp)
    9fe0fc2c:	8522                	mv	a0,s0
    9fe0fc2e:	6402                	ld	s0,0(sp)
    9fe0fc30:	0141                	addi	sp,sp,16
    9fe0fc32:	8082                	ret
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    9fe0fc34:	40c508b3          	sub	a7,a0,a2
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    9fe0fc38:	fee8f4e3          	bgeu	a7,a4,9fe0fc20 <xTaskCheckForTimeOut+0x74>
    pxTimeOut->xOverflowCount = xNumOfOverflows;
    9fe0fc3c:	00083803          	ld	a6,0(a6)
            *pxTicksToWait -= xElapsedTime;
    9fe0fc40:	8f09                	sub	a4,a4,a0
    pxTimeOut->xTimeOnEntering = xTickCount;
    9fe0fc42:	6294                	ld	a3,0(a3)
            *pxTicksToWait -= xElapsedTime;
    9fe0fc44:	9732                	add	a4,a4,a2
    9fe0fc46:	e198                	sd	a4,0(a1)
    pxTimeOut->xOverflowCount = xNumOfOverflows;
    9fe0fc48:	0107b023          	sd	a6,0(a5)
    pxTimeOut->xTimeOnEntering = xTickCount;
    9fe0fc4c:	e794                	sd	a3,8(a5)
    taskEXIT_CRITICAL();
    9fe0fc4e:	a7dff0ef          	jal	ra,9fe0f6ca <vTaskExitCritical>
            xReturn = pdFALSE;
    9fe0fc52:	4401                	li	s0,0
}
    9fe0fc54:	60a2                	ld	ra,8(sp)
    9fe0fc56:	8522                	mv	a0,s0
    9fe0fc58:	6402                	ld	s0,0(sp)
    9fe0fc5a:	0141                	addi	sp,sp,16
    9fe0fc5c:	8082                	ret

000000009fe0fc5e <prvCheckForValidListAndQueue>:
        pxOverflowTimerList = pxTemp;
    }
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
    9fe0fc5e:	1101                	addi	sp,sp,-32
    9fe0fc60:	e822                	sd	s0,16(sp)
    9fe0fc62:	ec06                	sd	ra,24(sp)
    9fe0fc64:	e426                	sd	s1,8(sp)
    9fe0fc66:	e04a                	sd	s2,0(sp)
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
        {
            if( xTimerQueue == NULL )
    9fe0fc68:	00010417          	auipc	s0,0x10
    9fe0fc6c:	06840413          	addi	s0,s0,104 # 9fe1fcd0 <xTimerQueue>
        taskENTER_CRITICAL();
    9fe0fc70:	a39ff0ef          	jal	ra,9fe0f6a8 <vTaskEnterCritical>
            if( xTimerQueue == NULL )
    9fe0fc74:	601c                	ld	a5,0(s0)
    9fe0fc76:	cb81                	beqz	a5,9fe0fc86 <prvCheckForValidListAndQueue+0x28>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    }
    9fe0fc78:	6442                	ld	s0,16(sp)
    9fe0fc7a:	60e2                	ld	ra,24(sp)
    9fe0fc7c:	64a2                	ld	s1,8(sp)
    9fe0fc7e:	6902                	ld	s2,0(sp)
    9fe0fc80:	6105                	addi	sp,sp,32
        taskEXIT_CRITICAL();
    9fe0fc82:	a49ff06f          	j	9fe0f6ca <vTaskExitCritical>
                vListInitialise( &xActiveTimerList1 );
    9fe0fc86:	0000e917          	auipc	s2,0xe
    9fe0fc8a:	df290913          	addi	s2,s2,-526 # 9fe1da78 <xActiveTimerList1>
    9fe0fc8e:	854a                	mv	a0,s2
    9fe0fc90:	350000ef          	jal	ra,9fe0ffe0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
    9fe0fc94:	0000e497          	auipc	s1,0xe
    9fe0fc98:	e0c48493          	addi	s1,s1,-500 # 9fe1daa0 <xActiveTimerList2>
    9fe0fc9c:	8526                	mv	a0,s1
    9fe0fc9e:	342000ef          	jal	ra,9fe0ffe0 <vListInitialise>
                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
    9fe0fca2:	4701                	li	a4,0
    9fe0fca4:	0000e697          	auipc	a3,0xe
    9fe0fca8:	e2468693          	addi	a3,a3,-476 # 9fe1dac8 <xStaticTimerQueue.0>
    9fe0fcac:	0000e617          	auipc	a2,0xe
    9fe0fcb0:	d2c60613          	addi	a2,a2,-724 # 9fe1d9d8 <ucStaticTimerQueueStorage.1>
    9fe0fcb4:	02000593          	li	a1,32
    9fe0fcb8:	4515                	li	a0,5
                pxCurrentTimerList = &xActiveTimerList1;
    9fe0fcba:	00010797          	auipc	a5,0x10
    9fe0fcbe:	ff27bf23          	sd	s2,-2(a5) # 9fe1fcb8 <pxCurrentTimerList>
                pxOverflowTimerList = &xActiveTimerList2;
    9fe0fcc2:	00010797          	auipc	a5,0x10
    9fe0fcc6:	fe97bf23          	sd	s1,-2(a5) # 9fe1fcc0 <pxOverflowTimerList>
                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
    9fe0fcca:	c6bfe0ef          	jal	ra,9fe0e934 <xQueueGenericCreateStatic>
    9fe0fcce:	e008                	sd	a0,0(s0)
                        if( xTimerQueue != NULL )
    9fe0fcd0:	d545                	beqz	a0,9fe0fc78 <prvCheckForValidListAndQueue+0x1a>
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
    9fe0fcd2:	00002597          	auipc	a1,0x2
    9fe0fcd6:	50658593          	addi	a1,a1,1286 # 9fe121d8 <__func__.1+0x20>
    9fe0fcda:	938ff0ef          	jal	ra,9fe0ee12 <vQueueAddToRegistry>
    9fe0fcde:	bf69                	j	9fe0fc78 <prvCheckForValidListAndQueue+0x1a>

000000009fe0fce0 <prvReloadTimer>:
    {
    9fe0fce0:	1101                	addi	sp,sp,-32
    9fe0fce2:	e822                	sd	s0,16(sp)
    9fe0fce4:	e04a                	sd	s2,0(sp)
    9fe0fce6:	ec06                	sd	ra,24(sp)
    9fe0fce8:	e426                	sd	s1,8(sp)
    9fe0fcea:	842a                	mv	s0,a0
    9fe0fcec:	8932                	mv	s2,a2
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
    9fe0fcee:	a031                	j	9fe0fcfa <prvReloadTimer+0x1a>
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    9fe0fcf0:	02f76f63          	bltu	a4,a5,9fe0fd2e <prvReloadTimer+0x4e>
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    9fe0fcf4:	603c                	ld	a5,64(s0)
    9fe0fcf6:	9782                	jalr	a5
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
    9fe0fcf8:	85a6                	mv	a1,s1
    9fe0fcfa:	781c                	ld	a5,48(s0)
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    9fe0fcfc:	f000                	sd	s0,32(s0)
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    9fe0fcfe:	8522                	mv	a0,s0
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
    9fe0fd00:	00b784b3          	add	s1,a5,a1
        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    9fe0fd04:	e404                	sd	s1,8(s0)
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    9fe0fd06:	40b90733          	sub	a4,s2,a1
        if( xNextExpiryTime <= xTimeNow )
    9fe0fd0a:	fe9973e3          	bgeu	s2,s1,9fe0fcf0 <prvReloadTimer+0x10>
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    9fe0fd0e:	00b97463          	bgeu	s2,a1,9fe0fd16 <prvReloadTimer+0x36>
    9fe0fd12:	feb4f1e3          	bgeu	s1,a1,9fe0fcf4 <prvReloadTimer+0x14>
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    9fe0fd16:	00840593          	addi	a1,s0,8
    }
    9fe0fd1a:	6442                	ld	s0,16(sp)
    9fe0fd1c:	60e2                	ld	ra,24(sp)
    9fe0fd1e:	64a2                	ld	s1,8(sp)
    9fe0fd20:	6902                	ld	s2,0(sp)
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    9fe0fd22:	00010517          	auipc	a0,0x10
    9fe0fd26:	f9653503          	ld	a0,-106(a0) # 9fe1fcb8 <pxCurrentTimerList>
    }
    9fe0fd2a:	6105                	addi	sp,sp,32
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    9fe0fd2c:	a4f9                	j	9fe0fffa <vListInsert>
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    9fe0fd2e:	00840593          	addi	a1,s0,8
    }
    9fe0fd32:	6442                	ld	s0,16(sp)
    9fe0fd34:	60e2                	ld	ra,24(sp)
    9fe0fd36:	64a2                	ld	s1,8(sp)
    9fe0fd38:	6902                	ld	s2,0(sp)
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    9fe0fd3a:	00010517          	auipc	a0,0x10
    9fe0fd3e:	f8653503          	ld	a0,-122(a0) # 9fe1fcc0 <pxOverflowTimerList>
    }
    9fe0fd42:	6105                	addi	sp,sp,32
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    9fe0fd44:	ac5d                	j	9fe0fffa <vListInsert>

000000009fe0fd46 <prvProcessExpiredTimer>:
    {
    9fe0fd46:	1101                	addi	sp,sp,-32
    9fe0fd48:	e426                	sd	s1,8(sp)
    9fe0fd4a:	e04a                	sd	s2,0(sp)
    9fe0fd4c:	ec06                	sd	ra,24(sp)
    9fe0fd4e:	e822                	sd	s0,16(sp)
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    9fe0fd50:	00010797          	auipc	a5,0x10
    9fe0fd54:	f687b783          	ld	a5,-152(a5) # 9fe1fcb8 <pxCurrentTimerList>
    9fe0fd58:	6f9c                	ld	a5,24(a5)
    {
    9fe0fd5a:	84aa                	mv	s1,a0
    9fe0fd5c:	892e                	mv	s2,a1
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    9fe0fd5e:	6f80                	ld	s0,24(a5)
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    9fe0fd60:	00840513          	addi	a0,s0,8
    9fe0fd64:	2c4000ef          	jal	ra,9fe10028 <uxListRemove>
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    9fe0fd68:	04844783          	lbu	a5,72(s0)
    9fe0fd6c:	0047f713          	andi	a4,a5,4
    9fe0fd70:	ef01                	bnez	a4,9fe0fd88 <prvProcessExpiredTimer+0x42>
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
    9fe0fd72:	9bf9                	andi	a5,a5,-2
    9fe0fd74:	04f40423          	sb	a5,72(s0)
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    9fe0fd78:	603c                	ld	a5,64(s0)
    9fe0fd7a:	8522                	mv	a0,s0
    }
    9fe0fd7c:	6442                	ld	s0,16(sp)
    9fe0fd7e:	60e2                	ld	ra,24(sp)
    9fe0fd80:	64a2                	ld	s1,8(sp)
    9fe0fd82:	6902                	ld	s2,0(sp)
    9fe0fd84:	6105                	addi	sp,sp,32
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    9fe0fd86:	8782                	jr	a5
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
    9fe0fd88:	864a                	mv	a2,s2
    9fe0fd8a:	85a6                	mv	a1,s1
    9fe0fd8c:	8522                	mv	a0,s0
    9fe0fd8e:	f53ff0ef          	jal	ra,9fe0fce0 <prvReloadTimer>
    9fe0fd92:	b7dd                	j	9fe0fd78 <prvProcessExpiredTimer+0x32>

000000009fe0fd94 <prvTimerTask>:
    {
    9fe0fd94:	7159                	addi	sp,sp,-112
    9fe0fd96:	eca6                	sd	s1,88(sp)
    9fe0fd98:	e8ca                	sd	s2,80(sp)
    9fe0fd9a:	e4ce                	sd	s3,72(sp)
    9fe0fd9c:	e0d2                	sd	s4,64(sp)
    9fe0fd9e:	fc56                	sd	s5,56(sp)
    9fe0fda0:	f85a                	sd	s6,48(sp)
    9fe0fda2:	f486                	sd	ra,104(sp)
    9fe0fda4:	f0a2                	sd	s0,96(sp)
    9fe0fda6:	f45e                	sd	s7,40(sp)
    9fe0fda8:	00010917          	auipc	s2,0x10
    9fe0fdac:	f1090913          	addi	s2,s2,-240 # 9fe1fcb8 <pxCurrentTimerList>
    9fe0fdb0:	00010997          	auipc	s3,0x10
    9fe0fdb4:	f1898993          	addi	s3,s3,-232 # 9fe1fcc8 <xLastTime.2>
    9fe0fdb8:	00010a97          	auipc	s5,0x10
    9fe0fdbc:	f08a8a93          	addi	s5,s5,-248 # 9fe1fcc0 <pxOverflowTimerList>
    9fe0fdc0:	00010497          	auipc	s1,0x10
    9fe0fdc4:	f1048493          	addi	s1,s1,-240 # 9fe1fcd0 <xTimerQueue>
    9fe0fdc8:	00002a17          	auipc	s4,0x2
    9fe0fdcc:	418a0a13          	addi	s4,s4,1048 # 9fe121e0 <__func__.1+0x28>
    9fe0fdd0:	4b25                	li	s6,9
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    9fe0fdd2:	00093783          	ld	a5,0(s2)
    9fe0fdd6:	0007bb83          	ld	s7,0(a5)
    9fe0fdda:	140b8c63          	beqz	s7,9fe0ff32 <prvTimerTask+0x19e>
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    9fe0fdde:	6f9c                	ld	a5,24(a5)
    9fe0fde0:	0007bb83          	ld	s7,0(a5)
        vTaskSuspendAll();
    9fe0fde4:	e44ff0ef          	jal	ra,9fe0f428 <vTaskSuspendAll>
        xTimeNow = xTaskGetTickCount();
    9fe0fde8:	e50ff0ef          	jal	ra,9fe0f438 <xTaskGetTickCount>
        if( xTimeNow < xLastTime )
    9fe0fdec:	0009b783          	ld	a5,0(s3)
        xTimeNow = xTaskGetTickCount();
    9fe0fdf0:	842a                	mv	s0,a0
        if( xTimeNow < xLastTime )
    9fe0fdf2:	06f56763          	bltu	a0,a5,9fe0fe60 <prvTimerTask+0xcc>
        xLastTime = xTimeNow;
    9fe0fdf6:	00a9b023          	sd	a0,0(s3)
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    9fe0fdfa:	4601                	li	a2,0
    9fe0fdfc:	17757763          	bgeu	a0,s7,9fe0ff6a <prvTimerTask+0x1d6>
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    9fe0fe00:	6088                	ld	a0,0(s1)
    9fe0fe02:	408b85b3          	sub	a1,s7,s0
    9fe0fe06:	88aff0ef          	jal	ra,9fe0ee90 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
    9fe0fe0a:	ba7ff0ef          	jal	ra,9fe0f9b0 <xTaskResumeAll>
    9fe0fe0e:	e119                	bnez	a0,9fe0fe14 <prvTimerTask+0x80>
                        portYIELD_WITHIN_API();
    9fe0fe10:	00000073          	ecall
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    9fe0fe14:	6088                	ld	a0,0(s1)
    9fe0fe16:	4601                	li	a2,0
    9fe0fe18:	858a                	mv	a1,sp
    9fe0fe1a:	e1ffe0ef          	jal	ra,9fe0ec38 <xQueueReceive>
    9fe0fe1e:	d955                	beqz	a0,9fe0fdd2 <prvTimerTask+0x3e>
                    if( xMessage.xMessageID < ( BaseType_t ) 0 )
    9fe0fe20:	6782                	ld	a5,0(sp)
                        pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
    9fe0fe22:	6442                	ld	s0,16(sp)
                    if( xMessage.xMessageID < ( BaseType_t ) 0 )
    9fe0fe24:	0e07ce63          	bltz	a5,9fe0ff20 <prvTimerTask+0x18c>
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    9fe0fe28:	741c                	ld	a5,40(s0)
    9fe0fe2a:	c789                	beqz	a5,9fe0fe34 <prvTimerTask+0xa0>
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    9fe0fe2c:	00840513          	addi	a0,s0,8
    9fe0fe30:	1f8000ef          	jal	ra,9fe10028 <uxListRemove>
        xTimeNow = xTaskGetTickCount();
    9fe0fe34:	e04ff0ef          	jal	ra,9fe0f438 <xTaskGetTickCount>
        if( xTimeNow < xLastTime )
    9fe0fe38:	0009b783          	ld	a5,0(s3)
        xTimeNow = xTaskGetTickCount();
    9fe0fe3c:	8baa                	mv	s7,a0
        if( xTimeNow < xLastTime )
    9fe0fe3e:	04f56563          	bltu	a0,a5,9fe0fe88 <prvTimerTask+0xf4>
        xLastTime = xTimeNow;
    9fe0fe42:	6782                	ld	a5,0(sp)
    9fe0fe44:	0179b023          	sd	s7,0(s3)
                switch( xMessage.xMessageID )
    9fe0fe48:	fcfb66e3          	bltu	s6,a5,9fe0fe14 <prvTimerTask+0x80>
    9fe0fe4c:	078a                	slli	a5,a5,0x2
    9fe0fe4e:	97d2                	add	a5,a5,s4
    9fe0fe50:	439c                	lw	a5,0(a5)
    9fe0fe52:	97d2                	add	a5,a5,s4
    9fe0fe54:	8782                	jr	a5
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    9fe0fe56:	6f9c                	ld	a5,24(a5)
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
    9fe0fe58:	55fd                	li	a1,-1
    9fe0fe5a:	6388                	ld	a0,0(a5)
    9fe0fe5c:	eebff0ef          	jal	ra,9fe0fd46 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    9fe0fe60:	00093783          	ld	a5,0(s2)
    9fe0fe64:	6398                	ld	a4,0(a5)
    9fe0fe66:	fb65                	bnez	a4,9fe0fe56 <prvTimerTask+0xc2>
        pxCurrentTimerList = pxOverflowTimerList;
    9fe0fe68:	000ab703          	ld	a4,0(s5)
        xLastTime = xTimeNow;
    9fe0fe6c:	0089b023          	sd	s0,0(s3)
        pxOverflowTimerList = pxTemp;
    9fe0fe70:	00fab023          	sd	a5,0(s5)
        pxCurrentTimerList = pxOverflowTimerList;
    9fe0fe74:	00e93023          	sd	a4,0(s2)
                ( void ) xTaskResumeAll();
    9fe0fe78:	b39ff0ef          	jal	ra,9fe0f9b0 <xTaskResumeAll>
    9fe0fe7c:	bf61                	j	9fe0fe14 <prvTimerTask+0x80>
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    9fe0fe7e:	6f9c                	ld	a5,24(a5)
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
    9fe0fe80:	55fd                	li	a1,-1
    9fe0fe82:	6388                	ld	a0,0(a5)
    9fe0fe84:	ec3ff0ef          	jal	ra,9fe0fd46 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    9fe0fe88:	00093783          	ld	a5,0(s2)
    9fe0fe8c:	6398                	ld	a4,0(a5)
    9fe0fe8e:	fb65                	bnez	a4,9fe0fe7e <prvTimerTask+0xea>
        pxCurrentTimerList = pxOverflowTimerList;
    9fe0fe90:	000ab703          	ld	a4,0(s5)
        pxOverflowTimerList = pxTemp;
    9fe0fe94:	00fab023          	sd	a5,0(s5)
        pxCurrentTimerList = pxOverflowTimerList;
    9fe0fe98:	00e93023          	sd	a4,0(s2)
            *pxTimerListsWereSwitched = pdTRUE;
    9fe0fe9c:	b75d                	j	9fe0fe42 <prvTimerTask+0xae>
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    9fe0fe9e:	04844703          	lbu	a4,72(s0)
                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    9fe0fea2:	67a2                	ld	a5,8(sp)
    9fe0fea4:	780c                	ld	a1,48(s0)
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    9fe0fea6:	00176693          	ori	a3,a4,1
    9fe0feaa:	04d40423          	sb	a3,72(s0)
                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    9fe0feae:	00b786b3          	add	a3,a5,a1
        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    9fe0feb2:	e414                	sd	a3,8(s0)
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    9fe0feb4:	f000                	sd	s0,32(s0)
        if( xNextExpiryTime <= xTimeNow )
    9fe0feb6:	08dbef63          	bltu	s7,a3,9fe0ff54 <prvTimerTask+0x1c0>
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    9fe0feba:	40fb87b3          	sub	a5,s7,a5
    9fe0febe:	02b7eb63          	bltu	a5,a1,9fe0fef4 <prvTimerTask+0x160>
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    9fe0fec2:	00477793          	andi	a5,a4,4
    9fe0fec6:	efcd                	bnez	a5,9fe0ff80 <prvTimerTask+0x1ec>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
    9fe0fec8:	9b79                	andi	a4,a4,-2
    9fe0feca:	04e40423          	sb	a4,72(s0)
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    9fe0fece:	603c                	ld	a5,64(s0)
    9fe0fed0:	8522                	mv	a0,s0
    9fe0fed2:	9782                	jalr	a5
    9fe0fed4:	b781                	j	9fe0fe14 <prvTimerTask+0x80>
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    9fe0fed6:	6722                	ld	a4,8(sp)
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    9fe0fed8:	04844783          	lbu	a5,72(s0)
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    9fe0fedc:	f000                	sd	s0,32(s0)
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    9fe0fede:	017706b3          	add	a3,a4,s7
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    9fe0fee2:	0017e793          	ori	a5,a5,1
    9fe0fee6:	04f40423          	sb	a5,72(s0)
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    9fe0feea:	f818                	sd	a4,48(s0)
        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    9fe0feec:	e414                	sd	a3,8(s0)
        if( xNextExpiryTime <= xTimeNow )
    9fe0feee:	06dbe763          	bltu	s7,a3,9fe0ff5c <prvTimerTask+0x1c8>
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    9fe0fef2:	d30d                	beqz	a4,9fe0fe14 <prvTimerTask+0x80>
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    9fe0fef4:	000ab503          	ld	a0,0(s5)
    9fe0fef8:	00840593          	addi	a1,s0,8
    9fe0fefc:	0fe000ef          	jal	ra,9fe0fffa <vListInsert>
        return xProcessTimerNow;
    9fe0ff00:	bf11                	j	9fe0fe14 <prvTimerTask+0x80>
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
    9fe0ff02:	04844783          	lbu	a5,72(s0)
    9fe0ff06:	9bf9                	andi	a5,a5,-2
    9fe0ff08:	04f40423          	sb	a5,72(s0)
                        break;
    9fe0ff0c:	b721                	j	9fe0fe14 <prvTimerTask+0x80>
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    9fe0ff0e:	04844783          	lbu	a5,72(s0)
    9fe0ff12:	0027f713          	andi	a4,a5,2
    9fe0ff16:	c32d                	beqz	a4,9fe0ff78 <prvTimerTask+0x1e4>
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
    9fe0ff18:	9bf9                	andi	a5,a5,-2
    9fe0ff1a:	04f40423          	sb	a5,72(s0)
    9fe0ff1e:	bddd                	j	9fe0fe14 <prvTimerTask+0x80>
                        pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
    9fe0ff20:	67a2                	ld	a5,8(sp)
    9fe0ff22:	45e2                	lw	a1,24(sp)
    9fe0ff24:	8522                	mv	a0,s0
    9fe0ff26:	9782                	jalr	a5
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    9fe0ff28:	6782                	ld	a5,0(sp)
    9fe0ff2a:	ee07c5e3          	bltz	a5,9fe0fe14 <prvTimerTask+0x80>
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    9fe0ff2e:	6442                	ld	s0,16(sp)
    9fe0ff30:	bde5                	j	9fe0fe28 <prvTimerTask+0x94>
        vTaskSuspendAll();
    9fe0ff32:	cf6ff0ef          	jal	ra,9fe0f428 <vTaskSuspendAll>
        xTimeNow = xTaskGetTickCount();
    9fe0ff36:	d02ff0ef          	jal	ra,9fe0f438 <xTaskGetTickCount>
        if( xTimeNow < xLastTime )
    9fe0ff3a:	0009b783          	ld	a5,0(s3)
        xTimeNow = xTaskGetTickCount();
    9fe0ff3e:	842a                	mv	s0,a0
        if( xTimeNow < xLastTime )
    9fe0ff40:	f2f560e3          	bltu	a0,a5,9fe0fe60 <prvTimerTask+0xcc>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    9fe0ff44:	000ab783          	ld	a5,0(s5)
        xLastTime = xTimeNow;
    9fe0ff48:	0089b023          	sd	s0,0(s3)
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    9fe0ff4c:	6390                	ld	a2,0(a5)
    9fe0ff4e:	00163613          	seqz	a2,a2
    9fe0ff52:	b57d                	j	9fe0fe00 <prvTimerTask+0x6c>
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    9fe0ff54:	00fbf463          	bgeu	s7,a5,9fe0ff5c <prvTimerTask+0x1c8>
    9fe0ff58:	f6f6f5e3          	bgeu	a3,a5,9fe0fec2 <prvTimerTask+0x12e>
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    9fe0ff5c:	00093503          	ld	a0,0(s2)
    9fe0ff60:	00840593          	addi	a1,s0,8
    9fe0ff64:	096000ef          	jal	ra,9fe0fffa <vListInsert>
    9fe0ff68:	b575                	j	9fe0fe14 <prvTimerTask+0x80>
                    ( void ) xTaskResumeAll();
    9fe0ff6a:	a47ff0ef          	jal	ra,9fe0f9b0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    9fe0ff6e:	85a2                	mv	a1,s0
    9fe0ff70:	855e                	mv	a0,s7
    9fe0ff72:	dd5ff0ef          	jal	ra,9fe0fd46 <prvProcessExpiredTimer>
    9fe0ff76:	bd79                	j	9fe0fe14 <prvTimerTask+0x80>
                                    vPortFree( pxTimer );
    9fe0ff78:	8522                	mv	a0,s0
    9fe0ff7a:	f62fe0ef          	jal	ra,9fe0e6dc <vPortFree>
    9fe0ff7e:	bd59                	j	9fe0fe14 <prvTimerTask+0x80>
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
    9fe0ff80:	67a2                	ld	a5,8(sp)
    9fe0ff82:	865e                	mv	a2,s7
    9fe0ff84:	8522                	mv	a0,s0
    9fe0ff86:	95be                	add	a1,a1,a5
    9fe0ff88:	d59ff0ef          	jal	ra,9fe0fce0 <prvReloadTimer>
    9fe0ff8c:	b789                	j	9fe0fece <prvTimerTask+0x13a>

000000009fe0ff8e <xTimerCreateTimerTask>:
    {
    9fe0ff8e:	7179                	addi	sp,sp,-48
    9fe0ff90:	f406                	sd	ra,40(sp)
        prvCheckForValidListAndQueue();
    9fe0ff92:	ccdff0ef          	jal	ra,9fe0fc5e <prvCheckForValidListAndQueue>
        if( xTimerQueue != NULL )
    9fe0ff96:	00010797          	auipc	a5,0x10
    9fe0ff9a:	d3a7b783          	ld	a5,-710(a5) # 9fe1fcd0 <xTimerQueue>
    9fe0ff9e:	4501                	li	a0,0
    9fe0ffa0:	cf8d                	beqz	a5,9fe0ffda <xTimerCreateTimerTask+0x4c>
                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
    9fe0ffa2:	0070                	addi	a2,sp,12
    9fe0ffa4:	082c                	addi	a1,sp,24
    9fe0ffa6:	0808                	addi	a0,sp,16
                    StaticTask_t * pxTimerTaskTCBBuffer = NULL;
    9fe0ffa8:	e802                	sd	zero,16(sp)
                    StackType_t * pxTimerTaskStackBuffer = NULL;
    9fe0ffaa:	ec02                	sd	zero,24(sp)
                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
    9fe0ffac:	f09f20ef          	jal	ra,9fe02eb4 <vApplicationGetTimerTaskMemory>
                    xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
    9fe0ffb0:	67e2                	ld	a5,24(sp)
    9fe0ffb2:	6842                	ld	a6,16(sp)
    9fe0ffb4:	4632                	lw	a2,12(sp)
    9fe0ffb6:	471d                	li	a4,7
    9fe0ffb8:	4681                	li	a3,0
    9fe0ffba:	00002597          	auipc	a1,0x2
    9fe0ffbe:	24e58593          	addi	a1,a1,590 # 9fe12208 <__func__.1+0x50>
    9fe0ffc2:	00000517          	auipc	a0,0x0
    9fe0ffc6:	dd250513          	addi	a0,a0,-558 # 9fe0fd94 <prvTimerTask>
    9fe0ffca:	8a7ff0ef          	jal	ra,9fe0f870 <xTaskCreateStatic>
    9fe0ffce:	00010797          	auipc	a5,0x10
    9fe0ffd2:	d0a7b523          	sd	a0,-758(a5) # 9fe1fcd8 <xTimerTaskHandle>
                    if( xTimerTaskHandle != NULL )
    9fe0ffd6:	00a03533          	snez	a0,a0
    }
    9fe0ffda:	70a2                	ld	ra,40(sp)
    9fe0ffdc:	6145                	addi	sp,sp,48
    9fe0ffde:	8082                	ret

000000009fe0ffe0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    9fe0ffe0:	01050793          	addi	a5,a0,16

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    9fe0ffe4:	577d                	li	a4,-1
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    9fe0ffe6:	e51c                	sd	a5,8(a0)
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    9fe0ffe8:	e918                	sd	a4,16(a0)

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    9fe0ffea:	ed1c                	sd	a5,24(a0)
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    9fe0ffec:	f11c                	sd	a5,32(a0)

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    9fe0ffee:	00053023          	sd	zero,0(a0)

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    9fe0fff2:	8082                	ret

000000009fe0fff4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    9fe0fff4:	02053023          	sd	zero,32(a0)

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    9fe0fff8:	8082                	ret

000000009fe0fffa <vListInsert>:

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    9fe0fffa:	6190                	ld	a2,0(a1)
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    9fe0fffc:	577d                	li	a4,-1
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    9fe0fffe:	01050793          	addi	a5,a0,16
    if( xValueOfInsertion == portMAX_DELAY )
    9fe10002:	02e60063          	beq	a2,a4,9fe10022 <vListInsert+0x28>
        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    9fe10006:	86be                	mv	a3,a5
    9fe10008:	679c                	ld	a5,8(a5)
    9fe1000a:	6398                	ld	a4,0(a5)
    9fe1000c:	fee67de3          	bgeu	a2,a4,9fe10006 <vListInsert+0xc>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    9fe10010:	e59c                	sd	a5,8(a1)
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    9fe10012:	eb8c                	sd	a1,16(a5)
    pxNewListItem->pxPrevious = pxIterator;
    9fe10014:	e994                	sd	a3,16(a1)
    pxIterator->pxNext = pxNewListItem;
    9fe10016:	e68c                	sd	a1,8(a3)

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
    9fe10018:	f188                	sd	a0,32(a1)

    ( pxList->uxNumberOfItems )++;
    9fe1001a:	611c                	ld	a5,0(a0)
    9fe1001c:	0785                	addi	a5,a5,1
    9fe1001e:	e11c                	sd	a5,0(a0)
}
    9fe10020:	8082                	ret
        pxIterator = pxList->xListEnd.pxPrevious;
    9fe10022:	7114                	ld	a3,32(a0)
    pxNewListItem->pxNext = pxIterator->pxNext;
    9fe10024:	669c                	ld	a5,8(a3)
    9fe10026:	b7ed                	j	9fe10010 <vListInsert+0x16>

000000009fe10028 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    9fe10028:	6514                	ld	a3,8(a0)
    9fe1002a:	6918                	ld	a4,16(a0)
    List_t * const pxList = pxItemToRemove->pxContainer;
    9fe1002c:	711c                	ld	a5,32(a0)
    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    9fe1002e:	ea98                	sd	a4,16(a3)
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    9fe10030:	6514                	ld	a3,8(a0)
    9fe10032:	e714                	sd	a3,8(a4)

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    9fe10034:	6798                	ld	a4,8(a5)
    9fe10036:	00a70963          	beq	a4,a0,9fe10048 <uxListRemove+0x20>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    9fe1003a:	02053023          	sd	zero,32(a0)
    ( pxList->uxNumberOfItems )--;
    9fe1003e:	6398                	ld	a4,0(a5)
    9fe10040:	177d                	addi	a4,a4,-1
    9fe10042:	e398                	sd	a4,0(a5)

    return pxList->uxNumberOfItems;
    9fe10044:	6388                	ld	a0,0(a5)
}
    9fe10046:	8082                	ret
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    9fe10048:	6918                	ld	a4,16(a0)
    9fe1004a:	e798                	sd	a4,8(a5)
    pxItemToRemove->pxContainer = NULL;
    9fe1004c:	02053023          	sd	zero,32(a0)
    ( pxList->uxNumberOfItems )--;
    9fe10050:	6398                	ld	a4,0(a5)
    9fe10052:	177d                	addi	a4,a4,-1
    9fe10054:	e398                	sd	a4,0(a5)
    return pxList->uxNumberOfItems;
    9fe10056:	6388                	ld	a0,0(a5)
}
    9fe10058:	8082                	ret

000000009fe1005a <vPortSetupTimerInterrupt>:
		ullNextTime += ( uint64_t ) uxTimerIncrementsForOneTick;
	}
#elif defined THEAD_C906

	void vPortSetupTimerInterrupt( void )
	{
    9fe1005a:	1141                	addi	sp,sp,-16
		uint64_t ullCurrentTime;
		volatile uint32_t ulHartId;
		__asm volatile( "csrr %0, mhartid" : "=r"( ulHartId ) );
    9fe1005c:	f14027f3          	csrr	a5,mhartid
    9fe10060:	c63e                	sw	a5,12(sp)
		// 32bit IO bus, need to get hi/lo seperately
		pulMachineTimerCompareRegisterL =
			( volatile uint32_t * ) ( ullMachineTimerCompareRegisterBase + ( ulHartId * sizeof( uint64_t ) ) );
    9fe10062:	47b2                	lw	a5,12(sp)
		pulMachineTimerCompareRegisterH =
			 ( volatile uint32_t * ) ( ullMachineTimerCompareRegisterBase + sizeof(uint32_t) + ( ulHartId * sizeof( uint64_t ) ) );
    9fe10064:	4732                	lw	a4,12(sp)
			( volatile uint32_t * ) ( ullMachineTimerCompareRegisterBase + ( ulHartId * sizeof( uint64_t ) ) );
    9fe10066:	0e8016b7          	lui	a3,0xe801
    9fe1006a:	1782                	slli	a5,a5,0x20
    9fe1006c:	80068693          	addi	a3,a3,-2048 # e800800 <CVIMMAP_ION_SIZE+0x9d00800>
    9fe10070:	9381                	srli	a5,a5,0x20
    9fe10072:	97b6                	add	a5,a5,a3
			 ( volatile uint32_t * ) ( ullMachineTimerCompareRegisterBase + sizeof(uint32_t) + ( ulHartId * sizeof( uint64_t ) ) );
    9fe10074:	02071693          	slli	a3,a4,0x20
    9fe10078:	01d6d713          	srli	a4,a3,0x1d
    9fe1007c:	740046b7          	lui	a3,0x74004
    9fe10080:	0691                	addi	a3,a3,4
    9fe10082:	9736                	add	a4,a4,a3
			( volatile uint32_t * ) ( ullMachineTimerCompareRegisterBase + ( ulHartId * sizeof( uint64_t ) ) );
    9fe10084:	078e                	slli	a5,a5,0x3
		pulMachineTimerCompareRegisterH =
    9fe10086:	00010597          	auipc	a1,0x10
    9fe1008a:	c5a58593          	addi	a1,a1,-934 # 9fe1fce0 <pulMachineTimerCompareRegisterH>
		pulMachineTimerCompareRegisterL =
    9fe1008e:	00010697          	auipc	a3,0x10
    9fe10092:	c4f6bd23          	sd	a5,-934(a3) # 9fe1fce8 <pulMachineTimerCompareRegisterL>
		pulMachineTimerCompareRegisterH =
    9fe10096:	e198                	sd	a4,0(a1)

		asm volatile("rdtime %0": "=r"(ullCurrentTime));
    9fe10098:	c0102773          	rdtime	a4
		ullNextTime = ( uint64_t ) ullCurrentTime;
		ullNextTime += ( uint64_t ) uxTimerIncrementsForOneTick;
    9fe1009c:	667d                	lui	a2,0x1f
    9fe1009e:	84860613          	addi	a2,a2,-1976 # 1e848 <_EL1_STACK_SIZE+0x1e048>
    9fe100a2:	00010697          	auipc	a3,0x10
    9fe100a6:	c4e68693          	addi	a3,a3,-946 # 9fe1fcf0 <ullNextTime>
    9fe100aa:	9732                	add	a4,a4,a2
    9fe100ac:	e298                	sd	a4,0(a3)
		*pulMachineTimerCompareRegisterL = (uint32_t) (ullNextTime & 0xFFFFFFFF);
    9fe100ae:	2701                	sext.w	a4,a4
    9fe100b0:	c398                	sw	a4,0(a5)
		*pulMachineTimerCompareRegisterH = (uint32_t) (ullNextTime >> 32);
    9fe100b2:	42d8                	lw	a4,4(a3)
    9fe100b4:	619c                	ld	a5,0(a1)
    9fe100b6:	c398                	sw	a4,0(a5)

		/* Prepare the time to use after the next tick interrupt. */
		ullNextTime += ( uint64_t ) uxTimerIncrementsForOneTick;
    9fe100b8:	629c                	ld	a5,0(a3)
    9fe100ba:	963e                	add	a2,a2,a5
    9fe100bc:	e290                	sd	a2,0(a3)

	}
    9fe100be:	0141                	addi	sp,sp,16
    9fe100c0:	8082                	ret

000000009fe100c2 <xPortStartScheduler>:

#endif /* ( configMTIME_BASE_ADDRESS != 0 ) && ( configMTIME_BASE_ADDRESS != 0 ) */
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void )
{
    9fe100c2:	1141                	addi	sp,sp,-16
    9fe100c4:	e406                	sd	ra,8(sp)
	#endif /* configASSERT_DEFINED */

	/* If there is a CLINT then it is ok to use the default implementation
	in this file, otherwise vPortSetupTimerInterrupt() must be implemented to
	configure whichever clock is to be used to generate the tick interrupt. */
	vPortSetupTimerInterrupt();
    9fe100c6:	f95ff0ef          	jal	ra,9fe1005a <vPortSetupTimerInterrupt>
	#if( ( configMTIME_BASE_ADDRESS != 0 ) && ( configMTIMECMP_BASE_ADDRESS != 0 ) || (defined THEAD_C906))
	{
		/* Enable mtime and external interrupts.  1<<7 for timer interrupt, 1<<11
		for external interrupt.  _RB_ What happens here when mtime is not present as
		with pulpino? */
		__asm volatile( "csrs mie, %0" :: "r"(0x880) );
    9fe100ca:	6785                	lui	a5,0x1
    9fe100cc:	8807879b          	addiw	a5,a5,-1920
    9fe100d0:	3047a073          	csrs	mie,a5
		/* Enable external interrupts. */
		__asm volatile( "csrs mie, %0" :: "r"(0x800) );
	}
	#endif /* ( configMTIME_BASE_ADDRESS != 0 ) && ( configMTIMECMP_BASE_ADDRESS != 0 ) */

	xPortStartFirstTask();
    9fe100d4:	b2cf00ef          	jal	ra,9fe00400 <xPortStartFirstTask>

	/* Should not get here as after calling xPortStartFirstTask() only tasks
	should be executing. */
	return pdFAIL;
}
    9fe100d8:	60a2                	ld	ra,8(sp)
    9fe100da:	4501                	li	a0,0
    9fe100dc:	0141                	addi	sp,sp,16
    9fe100de:	8082                	ret

000000009fe100e0 <arch_usleep>:

inline static unsigned long GetSysTime(void)
{
	unsigned long sys_tick = 0;

	asm volatile("rdtime %0": "=r"(sys_tick));
    9fe100e0:	c01027f3          	rdtime	a5
	unsigned long start_time;
	unsigned long end_time;
	unsigned long run_time;

	start_time = GetSysTime();
	end_time = start_time + useconds * (configSYS_CLOCK_HZ / 1000000);
    9fe100e4:	00151713          	slli	a4,a0,0x1
    9fe100e8:	972a                	add	a4,a4,a0
    9fe100ea:	070e                	slli	a4,a4,0x3
    9fe100ec:	972a                	add	a4,a4,a0
    9fe100ee:	973e                	add	a4,a4,a5
    9fe100f0:	c01027f3          	rdtime	a5
	do{
		run_time = GetSysTime();
	} while(run_time < end_time);
    9fe100f4:	fee7eee3          	bltu	a5,a4,9fe100f0 <arch_usleep+0x10>
}
    9fe100f8:	8082                	ret
